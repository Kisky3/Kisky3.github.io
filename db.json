{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/tranquilpeak/source/google5e8608507b0f5d8a.html","path":"google5e8608507b0f5d8a.html","modified":0,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/css/jquery.fancybox.css","path":"assets/css/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/css/all.css","path":"assets/css/all.css","modified":0,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/css/thumbs.css","path":"assets/css/thumbs.css","modified":0,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-brands-400.woff2","path":"assets/fonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-regular-400.eot","path":"assets/fonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-regular-400.woff","path":"assets/fonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-regular-400.ttf","path":"assets/fonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-regular-400.woff2","path":"assets/fonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/images/download.jpg","path":"assets/images/download.jpg","modified":0,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/images/pic.jpg","path":"assets/images/pic.jpg","modified":0,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/js/thumbs.js","path":"assets/js/thumbs.js","modified":0,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/js/tranquilpeak.js","path":"assets/js/tranquilpeak.js","modified":0,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/css/tranquilpeak.css","path":"assets/css/tranquilpeak.css","modified":0,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-brands-400.ttf","path":"assets/fonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-brands-400.woff","path":"assets/fonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-brands-400.eot","path":"assets/fonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-solid-900.woff","path":"assets/fonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-solid-900.woff2","path":"assets/fonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/css/style-cp4r4lzbvdgtsqux0bz8gef7mbnza7hvzqoldgoabfuwl18rpvlbvko6sqb4.min.css","path":"assets/css/style-cp4r4lzbvdgtsqux0bz8gef7mbnza7hvzqoldgoabfuwl18rpvlbvko6sqb4.min.css","modified":0,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-regular-400.svg","path":"assets/fonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-solid-900.ttf","path":"assets/fonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/js/script-cp5cm5q41vsluavgrnvsvvn7coigizg2jehgclpkt4rkvpsxmjmpfr3c8am4.min.js","path":"assets/js/script-cp5cm5q41vsluavgrnvsvvn7coigizg2jehgclpkt4rkvpsxmjmpfr3c8am4.min.js","modified":0,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/js/jquery.fancybox.js","path":"assets/js/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-solid-900.eot","path":"assets/fonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/images/me.png","path":"assets/images/me.png","modified":0,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/css/style.css","path":"assets/css/style.css","modified":0,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/images/cover.jpg","path":"assets/images/cover.jpg","modified":0,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/js/jquery.js","path":"assets/js/jquery.js","modified":0,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/images/cover-v1.2.0.jpg","path":"assets/images/cover-v1.2.0.jpg","modified":0,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/js/script.js","path":"assets/js/script.js","modified":0,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-brands-400.svg","path":"assets/fonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-solid-900.svg","path":"assets/fonts/fa-solid-900.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"eacc2857800d552c658a300e4aac528a5572cd38","modified":1574950975437},{"_id":"themes/tranquilpeak/.eslintignore","hash":"1f78f00553adf9ee374b343191ed809b0f8ba073","modified":1561284244985},{"_id":"themes/tranquilpeak/.eslintrc","hash":"b8227472c86456e77c456748f72fcbf93ea955ac","modified":1561284244986},{"_id":"themes/tranquilpeak/.DS_Store","hash":"30fc57bc57f52f4bc25cc721febab4629a09d68d","modified":1574950223862},{"_id":"themes/tranquilpeak/.gitignore","hash":"fa1331ae3eafab39a5b40cf5a011154043f9bf0e","modified":1561284244988},{"_id":"themes/tranquilpeak/.travis.yml","hash":"8a462414dfc70a5b30b97c1ea51185f3e4745ca1","modified":1561284244988},{"_id":"themes/tranquilpeak/DOCUMENTATION.md","hash":"af0d04f6d24fe9decb4ebf618ea37e3c5fd8d72e","modified":1561284244988},{"_id":"themes/tranquilpeak/_config.yml","hash":"a8ab9b5425efa507f67187a6f3537581f1fd9dfa","modified":1568021762239},{"_id":"themes/tranquilpeak/LICENSE","hash":"7a3b30ddb56760b35a6b7cd210aeb271cd292b60","modified":1561284244989},{"_id":"themes/tranquilpeak/Gruntfile.js","hash":"b2b078651cf8c5dcde2e847169ce242ad3319ca3","modified":1561284244988},{"_id":"themes/tranquilpeak/README.md","hash":"05c1388635e2442e22578dbd9c618469e0a24d16","modified":1561284244989},{"_id":"themes/tranquilpeak/package.json","hash":"32e4f6082ea447adda21a3946b8ee4b356bf03f0","modified":1574614759059},{"_id":"themes/tranquilpeak/renovate.json","hash":"5c7c40f899a3e7645bf4b55af7321be958295316","modified":1561284244997},{"_id":"source/_posts/.DS_Store","hash":"6cebc6d347ed1d59a4cf7b3fea7db2c5eabe37e5","modified":1574869148371},{"_id":"source/_posts/nodebrew.md","hash":"a63ee7940e5d88322580b8f87b4ea7031baf56d4","modified":1574865858054},{"_id":"themes/tranquilpeak/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1561284244980},{"_id":"themes/tranquilpeak/.git/config","hash":"5fa6ff92c01a95b2e9fbe426b38673f560c14a46","modified":1561284244981},{"_id":"themes/tranquilpeak/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1561284233349},{"_id":"themes/tranquilpeak/.git/index","hash":"fcc2117604fb2425c87d1f3f789dafbdb324efc9","modified":1574868942866},{"_id":"themes/tranquilpeak/.git/packed-refs","hash":"f1072415f80a15e2890fbc9ceb0fce7edfda0a7b","modified":1561284244978},{"_id":"themes/tranquilpeak/.github/CONTRIBUTING.md","hash":"8873700e439b6fc8aa4804b70a90fd81bf310d6c","modified":1561284244987},{"_id":"themes/tranquilpeak/.github/ISSUE_TEMPLATE.md","hash":"ec6bf3eb708f8eb62736ede6d2080f6610849802","modified":1561284244987},{"_id":"themes/tranquilpeak/.github/PULL_REQUEST_TEMPLATE.md","hash":"03cdb93ca72cd6a19043ea4bb1ec4f5b7479a0a9","modified":1561284244988},{"_id":"themes/tranquilpeak/languages/de-DE.yml","hash":"6054dd34bf3ccc00cd0ef88abd63a8ab5d65d19c","modified":1561284244989},{"_id":"themes/tranquilpeak/languages/en.yml","hash":"fd83558201c695b43e2f14ce1592d6125432b685","modified":1561284244989},{"_id":"themes/tranquilpeak/languages/es.yml","hash":"b4e0558f2dd9656a6a6089eef462d211ed039a6c","modified":1561284244989},{"_id":"themes/tranquilpeak/languages/fa.yml","hash":"d1013afe247b2a240f5d03d25e2c870994af6d3d","modified":1561284244989},{"_id":"themes/tranquilpeak/languages/it-IT.yml","hash":"2511c1dd63ac6c6c2c4da4e4aeaaf81eb5efb20d","modified":1561284244990},{"_id":"themes/tranquilpeak/languages/fr-FR.yml","hash":"f3aa504b13a84e7e0bc75466abcea8e7e90838be","modified":1561284244990},{"_id":"themes/tranquilpeak/languages/ja.yml","hash":"8c46dcbdfa981e614cf019b9b03c2d56b464a059","modified":1561284244990},{"_id":"themes/tranquilpeak/languages/zh-cn.yml","hash":"20fb1f9e04dbe708e36d56336099c2ca69ece7c1","modified":1561284244990},{"_id":"themes/tranquilpeak/languages/pt-br.yml","hash":"e800caa9b58c5c07b0d7cf26abf74514121cb9eb","modified":1561284244990},{"_id":"themes/tranquilpeak/languages/ru.yml","hash":"b7f4d4df152d6e4a791958b7682c04fcd146c35e","modified":1561284244990},{"_id":"themes/tranquilpeak/languages/zh-tw.yml","hash":"b1918a8911418d8a98e782dee8f303d1cb8b89f9","modified":1561284244990},{"_id":"themes/tranquilpeak/layout/.DS_Store","hash":"e41e938f6005d3dd2d4b8096c71b438ceb5cf152","modified":1574866231568},{"_id":"themes/tranquilpeak/layout/all-archives.ejs","hash":"28a4e97d1cfe4730dbcc8fde27b079320b5eec35","modified":1574614759057},{"_id":"themes/tranquilpeak/layout/all-categories.ejs","hash":"c2257b8265a9a328e69c92f4a88cb2cdd99c047a","modified":1574614759058},{"_id":"themes/tranquilpeak/layout/all-tags.ejs","hash":"aabb765f51a8d7582a5bafdbc8876b46ff1e6ea1","modified":1574614759058},{"_id":"themes/tranquilpeak/layout/archive.ejs","hash":"0df1edf4ed40b316715ef1949b09aa9c98d22359","modified":1561284244995},{"_id":"themes/tranquilpeak/layout/category.ejs","hash":"67902c418e299399133fe2a7ebc39cadd17de861","modified":1561284244996},{"_id":"themes/tranquilpeak/layout/index.ejs","hash":"36e89b37f520533bef85fb32b714214257fad1d0","modified":1561284244996},{"_id":"themes/tranquilpeak/layout/post.ejs","hash":"ae761feddc98f4d3260e7591ed9fc91d9a49d0ab","modified":1561284244996},{"_id":"themes/tranquilpeak/layout/page.ejs","hash":"ae761feddc98f4d3260e7591ed9fc91d9a49d0ab","modified":1561284244996},{"_id":"themes/tranquilpeak/layout/layout.ejs","hash":"e010041087770ef3821af39dfaa410a58884174e","modified":1574866779860},{"_id":"themes/tranquilpeak/layout/tag.ejs","hash":"72bff1ae241fbe2ddca0537e8ed77c791a7d1766","modified":1561284244996},{"_id":"themes/tranquilpeak/scripts/.eslintrc.json","hash":"4cd7451f0bc15440bc8147912c63a11acd0e280f","modified":1561284244997},{"_id":"themes/tranquilpeak/source/.DS_Store","hash":"a378f207f342142df5c7f2156bfc0ff2ec431bbb","modified":1574947964355},{"_id":"themes/tranquilpeak/source/google5e8608507b0f5d8a.html","hash":"552e5ad9a7112be4d0cc89068741d59284746e01","modified":1561716974280},{"_id":"themes/tranquilpeak/tasks/.DS_Store","hash":"fd4d025956c7182f8c1337e1bf252e94264f7244","modified":1561288214239},{"_id":"themes/tranquilpeak/tasks/pipeline.js","hash":"75b65cbd6d6ae471739ba80c9f792f602a0769d4","modified":1561284245018},{"_id":"themes/tranquilpeak/package-lock.json","hash":"cab4af950d4da4953a4bcd77319b4c06788fadd7","modified":1574868165650},{"_id":"themes/tranquilpeak/source/_fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1561284245009},{"_id":"source/_posts/API/.DS_Store","hash":"27fd3f52e6c91db179a6c68d83f033244cde6e5c","modified":1565888521242},{"_id":"source/_posts/Animation/.DS_Store","hash":"d1d478940b532ee9df1826f89b7cdbec4cca5876","modified":1568112475044},{"_id":"source/_posts/AboutCMS/.DS_Store","hash":"e1322aad1ea5af2c9f9a4c85336a041905d7b429","modified":1572964085290},{"_id":"source/_posts/CSRF攻击及防范措施/.DS_Store","hash":"50eb1ff8dedaefce2d06234eb020fe8daf9c9cf5","modified":1565879523725},{"_id":"source/_posts/CSS编码规范/.DS_Store","hash":"596bfef8e70e670f57724c823f5b4111ba95a006","modified":1565879577903},{"_id":"source/_posts/CreatePhpEnvironmentInDocker/.DS_Store","hash":"76f7d7edd0c08bd5d1b41ef508633c90177a28b7","modified":1573651583879},{"_id":"source/_posts/CSSTip/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1565880027405},{"_id":"source/_posts/CSS选择器类型与用法/.DS_Store","hash":"41591481b3533d5d67befa3be343f50393b6a0a7","modified":1565879548972},{"_id":"source/_posts/Elisabeth/.DS_Store","hash":"5d0e843d97f88bda1f9be055146298b67ad50d85","modified":1569509827267},{"_id":"source/_posts/Docker环境下使用bake自动生成页面/.DS_Store","hash":"0a6219323341e0876b11db40b791bc79dd00dcdf","modified":1565880266800},{"_id":"source/_posts/FirstBlog/.DS_Store","hash":"03d8d587f3d53427b7b25b61ccdafcea223edf58","modified":1573139421324},{"_id":"source/_posts/GitTip/.DS_Store","hash":"2ec468c54ffb2f48595867f57149907901ee3ad5","modified":1565879561478},{"_id":"source/_posts/Get和Post提交数据有什么区别/.DS_Store","hash":"395c351cd9a7f9463a9b81a6686112b6820a0633","modified":1565879537154},{"_id":"source/_posts/Homebrew/.DS_Store","hash":"0b73a202e6c52cbcaeb3b19dd80bf58634445024","modified":1569766542067},{"_id":"source/_posts/JS函数关于if-xx-和-a-b/.DS_Store","hash":"8ff606a03bf519052a4bc8585901c43b495351cd","modified":1565879604659},{"_id":"source/_posts/JS发展简史/.DS_Store","hash":"2522b7cb6302c53a2bae5de0486639651533930c","modified":1565879593441},{"_id":"source/_posts/JS-DOM元素以及DOM元素操作常用API/.DS_Store","hash":"89d646065b939261dfbfbbbeab6ba2fda6935c43","modified":1565879626140},{"_id":"source/_posts/IconFont/.DS_Store","hash":"787b2ba599751af2271d8f79cff2e3af7700d768","modified":1565879566218},{"_id":"source/_posts/JS正则表达式/.DS_Store","hash":"8fb63e1de2f7ca0e0ce903e31be0d8849be07470","modified":1565879620238},{"_id":"source/_posts/JS立即执行函数表达式/.DS_Store","hash":"e180c038967ed35f1cdfe515d8a0f9eaf19d0d3a","modified":1565879609667},{"_id":"source/_posts/Pages/.DS_Store","hash":"4f2096605373c37868d4a0750c0d8909d7385e43","modified":1569777173879},{"_id":"source/_posts/MissSaigon/.DS_Store","hash":"e782df5919344970d03d35e077cb52bddcbf4e18","modified":1571506671189},{"_id":"source/_posts/React-Virtual-Dom/.DS_Store","hash":"358eecfa2b49a4485d93e23c396cea0f1a8420af","modified":1565879665932},{"_id":"source/_posts/Started/.DS_Store","hash":"8f6c7bc02fa220601ed20ef889abf97640088547","modified":1568453690354},{"_id":"source/_posts/TheCove/.DS_Store","hash":"46d2d9a044b02ca45d799b75363b42c4aadc13d5","modified":1567862018377},{"_id":"source/_posts/UNIVERSE/.DS_Store","hash":"83bd360c3942a1eba96ed8549f63bd650259ee62","modified":1566027026704},{"_id":"source/_posts/dockercommand/.DS_Store","hash":"8625c62228c85e8e854d798ba716fba42636eb9f","modified":1573483983482},{"_id":"source/_posts/aboutnpm/.DS_Store","hash":"d2ef43eb55187fb477e4b95ecc0b09bb272c34c8","modified":1574613750285},{"_id":"source/_posts/jQuery绑定事件/.DS_Store","hash":"7626b6355a407fe865a707512a074fe21dca5b55","modified":1567865935321},{"_id":"source/_posts/什么是ajax/.DS_Store","hash":"be629d94954a9b1fc012b564cc30a1b5f20150b8","modified":1565879658178},{"_id":"source/_posts/createDockerModx/.DS_Store","hash":"33cd80ac3126cf37d7cd57a429a6370ccbd13dd0","modified":1573135847294},{"_id":"source/_posts/jQuery/.DS_Store","hash":"443c9ba8449ba8a4620cf10f4fd8bf1a6e1b3b60","modified":1565889322755},{"_id":"source/_posts/iTerm2/.DS_Store","hash":"648f84ae2510c7c247b98c300e5f2c18f0706606","modified":1570341958140},{"_id":"source/_posts/从URL到页面展现/.DS_Store","hash":"05b476eba777f929785dbde5e3b988527a7bfee7","modified":1565879545124},{"_id":"source/_posts/关于BOM对象/.DS_Store","hash":"1f32365967d9c53e75fdde57c1cd110c4a59a924","modified":1565880424327},{"_id":"source/_posts/使用Docker进行Cakephp3开发环境搭建/.DS_Store","hash":"ba8e228241ff8485b1f23d820dad79b4cfbfe26b","modified":1561459652346},{"_id":"source/_posts/关于CSS继承/.DS_Store","hash":"a9fba143be52e3767c298feb8b71afc7c88bfc5e","modified":1565879553980},{"_id":"source/_posts/关于BFC及外边距合并/.DS_Store","hash":"7838ee25f27a8858d4fad60b66624c753f44bee2","modified":1565879571227},{"_id":"source/_posts/关于CSS浮动/.DS_Store","hash":"df116f01e4bccbbe0adc3454f5d8d53c243f3bcd","modified":1565880517663},{"_id":"source/_posts/关于LocalStorage-cookie和session/.DS_Store","hash":"286ddba2754995a6b67d3a14d8d16f51ed672e00","modified":1565879635624},{"_id":"source/_posts/关于js跨域及解决方法/.DS_Store","hash":"ed6ab8e0029ff770bfe61b0e08d9111a416342b5","modified":1565969946795},{"_id":"source/_posts/关于事件传播机制/.DS_Store","hash":"8e6b075ff7a08c1f87d7cb78e2c9d8a8f05b829a","modified":1565879630615},{"_id":"source/_posts/关于闭包/.DS_Store","hash":"df0b5c9885e17f472c95d35af43e1427ab752f7a","modified":1565889510453},{"_id":"source/_posts/实现一个翻转注册登陆页面/.DS_Store","hash":"0674e20729208eb3513413b978c49b5469430d31","modified":1565880259092},{"_id":"source/_posts/常见浏览器及浏览器内核/.DS_Store","hash":"1b759127f9e2f13da7d924660bde3d9a6a5b3ee3","modified":1565879541070},{"_id":"source/_posts/关于浏览器渲染机制/.DS_Store","hash":"43b23068305c779ae99bddf7c4e44ac938488970","modified":1565879599863},{"_id":"source/_posts/关于前端mock数据/.DS_Store","hash":"a4412973aba536f936b70d3714911d029db6b78f","modified":1565879647009},{"_id":"source/_posts/系统式样统一页面的制作/.DS_Store","hash":"f1f6d1aea58d4c33875af1a23ec10e0faac99f9b","modified":1565880297755},{"_id":"source/_posts/超简单用hexo和github搭建个人博客/.DS_Store","hash":"da286626058dde0f68d81ad10af7bfc49c361fb0","modified":1565879653169},{"_id":"themes/tranquilpeak/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1561284233349},{"_id":"themes/tranquilpeak/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1561284233349},{"_id":"themes/tranquilpeak/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1561284233349},{"_id":"themes/tranquilpeak/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1561284233350},{"_id":"themes/tranquilpeak/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1561284233350},{"_id":"themes/tranquilpeak/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1561284233349},{"_id":"themes/tranquilpeak/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1561284233349},{"_id":"themes/tranquilpeak/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1561284233350},{"_id":"themes/tranquilpeak/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1561284233349},{"_id":"themes/tranquilpeak/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1561284233350},{"_id":"themes/tranquilpeak/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1561284233350},{"_id":"themes/tranquilpeak/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1561284233347},{"_id":"themes/tranquilpeak/.git/logs/HEAD","hash":"8b29499bc9489f999b19b1d5ba24fe7b5d0b5368","modified":1561284244980},{"_id":"themes/tranquilpeak/.github/ISSUE_TEMPLATE/bug-report.md","hash":"b9a9ffe556f1fca39009403f87bb8c8e840dc369","modified":1561284244987},{"_id":"themes/tranquilpeak/.github/ISSUE_TEMPLATE/feature-request---improvement.md","hash":"7d53b0c0d65dd28da17ff9d948e842883cab467f","modified":1561284244987},{"_id":"themes/tranquilpeak/.github/ISSUE_TEMPLATE/question.md","hash":"443c4f27268d39e89390edb7dcffda407a070fd7","modified":1561284244988},{"_id":"themes/tranquilpeak/layout/_partial/archive-post.ejs","hash":"e19455749c5c1bf773214d965f173613dd8f30f6","modified":1574614759054},{"_id":"themes/tranquilpeak/layout/_partial/about.ejs","hash":"c92588fcb4435e19b8c7e10fe24484aa6639060e","modified":1574614759054},{"_id":"themes/tranquilpeak/layout/_partial/archive.ejs","hash":"bdd73d1f70bd91533863943f940f8193d44e0fdd","modified":1561284244991},{"_id":"themes/tranquilpeak/layout/_partial/baidu-analytics.ejs","hash":"736eca2ecf6fdeea032d47c02c51688f006cafb4","modified":1561284244991},{"_id":"themes/tranquilpeak/layout/_partial/.DS_Store","hash":"944feae1428bb0773b1705b3ce27b7b94ec5422d","modified":1565865153961},{"_id":"themes/tranquilpeak/layout/_partial/cover.ejs","hash":"d2da7b4fcd1a8ae4189a3d858906c26911e586c9","modified":1574866594088},{"_id":"themes/tranquilpeak/layout/_partial/footer.ejs","hash":"67962257d9e3cb6a4d56e3f0263f192ba9a413dd","modified":1574614759056},{"_id":"themes/tranquilpeak/layout/_partial/google-analytics.ejs","hash":"b756aa731678a37d22c97c7dc30767331b08d109","modified":1561284244991},{"_id":"themes/tranquilpeak/layout/_partial/head.ejs","hash":"3a92727c26aa55cba3366d993f7343f8e25fb7eb","modified":1574868173865},{"_id":"themes/tranquilpeak/layout/_partial/header.ejs","hash":"6b2fd599a482d1833998495f6846433b505f0d1e","modified":1561284244992},{"_id":"themes/tranquilpeak/layout/_partial/index.ejs","hash":"e5d658bff9a942d6dee027fea96e49c7a3668f57","modified":1574614759056},{"_id":"themes/tranquilpeak/layout/_partial/pagination.ejs","hash":"207dd207e01eacda76b89e88a2ce95d898eadfca","modified":1561284244992},{"_id":"themes/tranquilpeak/layout/_partial/post.ejs","hash":"a05df5b3c970e5a1a93bd2d49344d6983183fc94","modified":1561284244992},{"_id":"themes/tranquilpeak/layout/_partial/search.ejs","hash":"d6de52e292eb21278f47b157f9a633b791d6edbf","modified":1561284244994},{"_id":"themes/tranquilpeak/layout/_partial/sidebar.ejs","hash":"1fe8c4e7450dd074da11423dbbe592e26ea796e9","modified":1574614759057},{"_id":"themes/tranquilpeak/layout/_partial/script.ejs","hash":"f26867976e72607d0dd174b9635be25c6b8cc0a6","modified":1574868173866},{"_id":"themes/tranquilpeak/scripts/filters/excerpt.js","hash":"5e0e473d46f8c7aac988ebf0b25ab2eab0af73bb","modified":1561284244997},{"_id":"themes/tranquilpeak/scripts/helpers/absolute_url.js","hash":"0d520a946b6f0abbac60529017ed3133265aac60","modified":1561284244997},{"_id":"themes/tranquilpeak/scripts/filters/thumbnail_image_url.js","hash":"0ad2d9304c991e2989708bdbfa6a59030ee691d3","modified":1561284244997},{"_id":"themes/tranquilpeak/scripts/helpers/generate_sharing_link.js","hash":"89069677e8acddef5fba0d3093f5f73fde4fa485","modified":1561284244998},{"_id":"themes/tranquilpeak/scripts/helpers/is_remote_url.js","hash":"471237ea295bcc9a392a5bb6738ef4c6ab673afb","modified":1561284244998},{"_id":"themes/tranquilpeak/scripts/helpers/json_ld.js","hash":"875f3a04b789ebb392169aca9f53c5e6cd4f8c35","modified":1561284244998},{"_id":"themes/tranquilpeak/scripts/helpers/resolve_asset_url.js","hash":"c813e9daaed374b386b91876923f10c0cf1d624c","modified":1561284244998},{"_id":"themes/tranquilpeak/scripts/tags/alert.js","hash":"5b86358dd53c9b0d44c385ec12cf9e76383e229a","modified":1561284244998},{"_id":"themes/tranquilpeak/scripts/tags/highlight_text.js","hash":"8e093f21e9a4b10c19be6f300dc90bcc39685ec9","modified":1561284244999},{"_id":"themes/tranquilpeak/scripts/tags/tabbed_codeblock.js","hash":"7dccd36bdd85c96eb7af125b30d634f44125700c","modified":1561284244999},{"_id":"themes/tranquilpeak/scripts/tags/image.js","hash":"ab6b04db8fe2ad21ec52dac5e1c3ee76400c6a79","modified":1561284244999},{"_id":"themes/tranquilpeak/scripts/tags/wide_image.js","hash":"d3596c62694548a3a684e8dfeb5372038ef6f450","modified":1561284244999},{"_id":"themes/tranquilpeak/source/_css/.DS_Store","hash":"fcbfdaf8c31cb13728d758f155bf11f5929568d1","modified":1565982895798},{"_id":"themes/tranquilpeak/scripts/tags/fancybox.js","hash":"55ce02f9ef084f43932eb9b0f10db1d5e9c3a250","modified":1561284244998},{"_id":"themes/tranquilpeak/source/_css/tranquilpeak.scss","hash":"e69c62b19ece4ab35d992e163b47f2a8374d7611","modified":1561284245006},{"_id":"themes/tranquilpeak/source/_images/.DS_Store","hash":"c438eeacabf15782cb5913f3e7b406f509730a27","modified":1568021177353},{"_id":"themes/tranquilpeak/source/_images/download.jpg","hash":"933d7ce43b3f1df6c1263d5beff46c1e73c05038","modified":1568035552018},{"_id":"themes/tranquilpeak/source/_images/pic.jpg","hash":"a40b7c5ec746d3f61be10b63cdbc6ae3279c8b4c","modified":1573135514214},{"_id":"themes/tranquilpeak/source/_js/.eslintrc.json","hash":"27d4e7223eee3eca7eb717bea2d28d35714eccbc","modified":1561284245014},{"_id":"themes/tranquilpeak/source/_js/archives-filter.js","hash":"8b8998b0e67c745a20450001c0739f6977b63309","modified":1561284245014},{"_id":"themes/tranquilpeak/source/_js/about.js","hash":"47ecaf9e4532f4e36cf505de49a6a4357be030b2","modified":1561284245014},{"_id":"themes/tranquilpeak/source/_js/codeblock-resizer.js","hash":"391c2c9135579ea50c2060e0612e7105e06a8ff7","modified":1561284245014},{"_id":"themes/tranquilpeak/source/_js/categories-filter.js","hash":"a5f3c4b9bbef1c8ec881eb39551060ca95bfbb33","modified":1561284245014},{"_id":"themes/tranquilpeak/source/_js/image-gallery.js","hash":"90efc47246af69b7e17fab6e0bd1578043fcc2b0","modified":1561284245015},{"_id":"themes/tranquilpeak/source/_js/fancybox.js","hash":"659aaad375ecff9748a5d3b0ff1378a549236513","modified":1561284245015},{"_id":"themes/tranquilpeak/source/_js/header.js","hash":"58ca619f851ebff35724c07dca7f1ed25e9cd5f2","modified":1561284245015},{"_id":"themes/tranquilpeak/source/_js/search-modal.js","hash":"7ea9ab668bc3118c28e6212516f366ef764d3550","modified":1561284245015},{"_id":"themes/tranquilpeak/source/_js/post-bottom-bar.js","hash":"64f78c44d29d3559d5e14e436b8cfe1d24b8c965","modified":1561284245015},{"_id":"themes/tranquilpeak/source/_js/smartresize.js","hash":"7342a21f94d7bb0525ccbd917d43a6824d7ae63e","modified":1561284245016},{"_id":"themes/tranquilpeak/source/_js/sidebar.js","hash":"18dc623dd237c519bb79ce93283a5446cc11a487","modified":1561284245016},{"_id":"themes/tranquilpeak/source/_js/tags-filter.js","hash":"d33625df51d7b9788eeea338626f04387c96f053","modified":1561284245016},{"_id":"themes/tranquilpeak/source/_js/share-options.js","hash":"c2046697540786721ff7c4754774f94fcaf32696","modified":1561284245016},{"_id":"themes/tranquilpeak/source/_js/tabbed-codeblocks.js","hash":"465a7a60c609a3b2ac182ac164feea2fea00e0ec","modified":1561284245016},{"_id":"themes/tranquilpeak/source/assets/.DS_Store","hash":"195cce7fdbe25e0f9c38a403471fe5a6d38d1edb","modified":1574869209509},{"_id":"themes/tranquilpeak/tasks/config/clean.js","hash":"ea70743eb4ed0d9ead68d6fc8b65b9f936229a00","modified":1561284245017},{"_id":"themes/tranquilpeak/tasks/config/concat.js","hash":"0c2c4dbbfac52f20a3035a2f8cd1c24f1759b17e","modified":1561284245017},{"_id":"themes/tranquilpeak/tasks/config/copy.js","hash":"cccb98740ef95c0fc7c8f8cbfb8248d7b198ee1d","modified":1561284245017},{"_id":"themes/tranquilpeak/tasks/config/cssmin.js","hash":"352185864437728c9c19169f4fec6fc3308e8b6d","modified":1561284245017},{"_id":"themes/tranquilpeak/tasks/config/replace.js","hash":"5b937c46e52018fb10d571532e11e2b5414fe4bb","modified":1561284245017},{"_id":"themes/tranquilpeak/tasks/config/sails-linker.js","hash":"c1103119ec7d1f04cfbb1cda83b40d11e8f2d218","modified":1561284245018},{"_id":"themes/tranquilpeak/tasks/config/sync.js","hash":"fbc09d0ed201993bc1918223b8f8ad5b68f50490","modified":1561284245018},{"_id":"themes/tranquilpeak/tasks/config/sass.js","hash":"79d65bad62ca0c2a8a155a76faa2be3b0c361bf0","modified":1561284245018},{"_id":"themes/tranquilpeak/tasks/config/uglify.js","hash":"57c7341a004b61539f5b3f02bd772f40494b8306","modified":1561284245018},{"_id":"themes/tranquilpeak/tasks/config/watch.js","hash":"933eecd8a2506c627dbb9a1137305a16dd2d9f9a","modified":1561284245018},{"_id":"themes/tranquilpeak/tasks/register/build.js","hash":"f64c77127a2d4bfdbb9866fcf368913334f44603","modified":1561284245018},{"_id":"themes/tranquilpeak/tasks/register/buildProd.js","hash":"450ff77a1bf631d1799206d218c6468592a59862","modified":1561284245019},{"_id":"themes/tranquilpeak/tasks/register/compileAssets.js","hash":"a65122ba0d1a1b6044e3b635a644882577b628ba","modified":1561284245019},{"_id":"themes/tranquilpeak/tasks/register/default.js","hash":"80174db9b8a729980770e639e70999ce5a816b78","modified":1561284245019},{"_id":"themes/tranquilpeak/tasks/register/eslint.js","hash":"718cd8a80d060e2587b84e0e20ceaa39c2cc9411","modified":1561284245019},{"_id":"themes/tranquilpeak/tasks/register/linkAssets.js","hash":"079cd274cb29f9984eb7150d88f61819d2ef6235","modified":1561284245019},{"_id":"themes/tranquilpeak/tasks/register/linkAssetsProd.js","hash":"37f2fab80f25757be3e34b40bc5a26a82f088491","modified":1561284245019},{"_id":"themes/tranquilpeak/tasks/register/syncAssets.js","hash":"0813093c3e252a58371db53e914183a97e3186a1","modified":1561284245019},{"_id":"themes/tranquilpeak/.git/refs/heads/master","hash":"e9059ac271f99db891d4a0e2762ad0d7ca5f4512","modified":1561284244980},{"_id":"themes/tranquilpeak/layout/_partial/post/disqus.ejs","hash":"9e0d238ed918e3138d5a9bb23a90408669e19169","modified":1561284244993},{"_id":"themes/tranquilpeak/layout/_partial/post/duoshuo.ejs","hash":"992368f8863f34d1dccf90c0cabc33d5dcdbe92a","modified":1561284244993},{"_id":"themes/tranquilpeak/layout/_partial/post/category.ejs","hash":"d4b26aa8c66aa8dbfae7a4aafed874745efb2f8e","modified":1561284244993},{"_id":"themes/tranquilpeak/layout/_partial/post/gallery.ejs","hash":"09cd44fb300031266d04e7b2a4292f1a3ad5b574","modified":1561284244993},{"_id":"themes/tranquilpeak/layout/_partial/post/gitment.ejs","hash":"1dcfdca4d20bab5a43bda44cf37df506ab3a0fb7","modified":1561284244993},{"_id":"themes/tranquilpeak/layout/_partial/post/actions.ejs","hash":"a331d9eb11d63225b6f42b538d14093f98cfc0d7","modified":1565865901897},{"_id":"themes/tranquilpeak/layout/_partial/post/header-cover.ejs","hash":"4d3a73d0c6f26769f778d02a559e5055ef1ee0ca","modified":1561284244994},{"_id":"themes/tranquilpeak/layout/_partial/post/header.ejs","hash":"3c7d8aaf9ab28a3afb435b567f892729778adf08","modified":1561284244994},{"_id":"themes/tranquilpeak/layout/_partial/post/meta.ejs","hash":"f13cb5089b0d5898c9606519d1c872725a63a5f9","modified":1561284244994},{"_id":"themes/tranquilpeak/layout/_partial/post/share-options.ejs","hash":"b7dce9244a10e71863e9ebbe315e772b5f997225","modified":1561284244994},{"_id":"themes/tranquilpeak/layout/_partial/post/tag.ejs","hash":"2a52f38fa359f8ec8ae776e44e92c48795e31272","modified":1561284244994},{"_id":"themes/tranquilpeak/source/_css/components/_alert.scss","hash":"1e6bf40de34a341dd0228357e288153b9292977c","modified":1561284245000},{"_id":"themes/tranquilpeak/source/_css/components/_archive.scss","hash":"cfdf53475d228643d5c5e62689b3c6a593e4ccce","modified":1561284245000},{"_id":"themes/tranquilpeak/source/_css/components/_box.scss","hash":"eebaacf55234fdaa156edb7dc4d9a4f382eaf4d4","modified":1561284245000},{"_id":"themes/tranquilpeak/source/_css/components/_button.scss","hash":"ea9bd41800fe04860f7e892c17010588b2563a06","modified":1561284245000},{"_id":"themes/tranquilpeak/source/_css/base/_base.scss","hash":"f0a46b090a0a4dd21edfd89095761895c5278ecb","modified":1561728433774},{"_id":"themes/tranquilpeak/source/_css/components/_caption.scss","hash":"dad2683f5f3235b335eebcbda3db59a1cfbb2283","modified":1561284245000},{"_id":"themes/tranquilpeak/source/_css/components/_code.scss","hash":"0a14fe197c221a4d4d91ee9d41541ce7969043ca","modified":1561284245000},{"_id":"themes/tranquilpeak/source/_css/components/_fancybox.scss","hash":"e162e2ecafc2be70238a9885fd57a9a7ad642757","modified":1561284245001},{"_id":"themes/tranquilpeak/source/_css/components/_figure.scss","hash":"01152043de4e23f6595835941732563f09a033f3","modified":1561284245001},{"_id":"themes/tranquilpeak/source/_css/components/_form.scss","hash":"368187e0c5f1a57d8c423f2ec23e897ee94a1a27","modified":1561284245001},{"_id":"themes/tranquilpeak/source/_css/components/_hide.scss","hash":"c2f5ed51086b9ea5d94ff548bdc4653ea5cd7912","modified":1561284245001},{"_id":"themes/tranquilpeak/source/_css/components/_highlight-text.scss","hash":"7a7a8a78f75d6c43a46fd020e2d44546e716751b","modified":1561284245001},{"_id":"themes/tranquilpeak/source/_css/components/_icon.scss","hash":"60dc972bcd81b4f95ab2c067ca910a5bf324d907","modified":1561284245001},{"_id":"themes/tranquilpeak/source/_css/components/_image-gallery.scss","hash":"f683e80d69a0d5ac4e832d236ff5576cc749858a","modified":1561284245001},{"_id":"themes/tranquilpeak/source/_css/components/_link.scss","hash":"7460155ebf7ce0d3e9acd090b6b99673127fd0be","modified":1561284245001},{"_id":"themes/tranquilpeak/source/_css/components/_main-content.scss","hash":"90c46c87289a8b3cf7c14d36900f5ced9db36c25","modified":1574614759059},{"_id":"themes/tranquilpeak/source/_css/components/_markdown.scss","hash":"ba6d7e8f84b3b6dfef339f28b5c6ae372ead674f","modified":1561284245002},{"_id":"themes/tranquilpeak/source/_css/components/_media.scss","hash":"84aa03c01b741bbeb31c6b48122930f30ad40de3","modified":1561284245002},{"_id":"themes/tranquilpeak/source/_css/components/_pagination.scss","hash":"809b9330a0e2d79c9285c1a452d61648248c8b70","modified":1561284245002},{"_id":"themes/tranquilpeak/source/_css/components/_post-actions.scss","hash":"6ecd72369cf03f59cfe749eab2712c5201cadd72","modified":1561284245002},{"_id":"themes/tranquilpeak/source/_css/components/_modal.scss","hash":"bc56f823cd67b2ed65b5cf2c3e1851fa3e82f0f9","modified":1565864529087},{"_id":"themes/tranquilpeak/source/_css/components/_post-header-cover.scss","hash":"c4bf950602ccb3fbdad54938979651a7b488236e","modified":1574614759060},{"_id":"themes/tranquilpeak/source/_css/components/_post.scss","hash":"0457c281b7893f8fde8a0590e4c1ff2ffb4bc1a6","modified":1574614759060},{"_id":"themes/tranquilpeak/source/_css/components/_postShorten.scss","hash":"a1b1ab16751fb99a3937cc0797426c658a2921f7","modified":1574614759061},{"_id":"themes/tranquilpeak/source/_css/components/_pullquote.scss","hash":"86bc35ba358d1340debc459a344f5f6d34acaa42","modified":1561284245003},{"_id":"themes/tranquilpeak/source/_css/components/_share-options-bar.scss","hash":"f6289a7cce6efe039614c77085945923c32d9673","modified":1561284245003},{"_id":"themes/tranquilpeak/source/_css/components/_tag.scss","hash":"ddd1c2ce17f0116655bdacda598e7f1d6fd18262","modified":1561284245003},{"_id":"themes/tranquilpeak/source/_css/components/_text.scss","hash":"7b38858248da2f73cf64c5949fd475a8e0a246ae","modified":1561284245003},{"_id":"themes/tranquilpeak/source/_css/components/_tooltip.scss","hash":"f33ad3e677761af1ceb42d337691b8b354ff70bd","modified":1561284245004},{"_id":"themes/tranquilpeak/source/_css/components/_video.scss","hash":"f9727fd300d73e8844abf0e2575c45e6c7769333","modified":1561284245004},{"_id":"themes/tranquilpeak/source/_css/layouts/_blog.scss","hash":"2450e07594a5e5186170fb5b5b157cc340808a9a","modified":1561284245004},{"_id":"themes/tranquilpeak/source/_css/layouts/_about.scss","hash":"52bdadfccaf3bc2082412348cd419c9da5793530","modified":1561284245004},{"_id":"themes/tranquilpeak/source/_css/layouts/_bottom-bar.scss","hash":"c7816c7ebc253d46466355860ead6669a3707ac6","modified":1561284245004},{"_id":"themes/tranquilpeak/source/_css/layouts/_footer.scss","hash":"645161942c66e6afbd666b4755337a6a6261e5e0","modified":1574614759061},{"_id":"themes/tranquilpeak/source/_css/layouts/_cover.scss","hash":"03a951c9b35dd4e35456caa36950e6d6bef77ac3","modified":1565896751902},{"_id":"themes/tranquilpeak/source/_css/layouts/_header.scss","hash":"d840a4be850cb258167ee1081e1b288dc64b3d2c","modified":1561284245005},{"_id":"themes/tranquilpeak/source/_css/layouts/_main.scss","hash":"ee4648502b355db51fc6cb7b05375003331f2f6e","modified":1574614759061},{"_id":"themes/tranquilpeak/source/_css/layouts/_sidebar.scss","hash":"facaff0ca816a4ace67c7689e4286e88eb1010c2","modified":1574614759061},{"_id":"themes/tranquilpeak/source/_css/pages/_search.scss","hash":"5f7cde0b68156ea802c3caf6cd673cab948b09d9","modified":1561284245005},{"_id":"themes/tranquilpeak/source/_css/themes/_hljs-custom.scss","hash":"a0ffab53db35bbd4881aeb077400cba55551f3bd","modified":1561284245006},{"_id":"themes/tranquilpeak/source/_css/utils/_fonts.scss","hash":"46f2edf56fb049f6d7289abfd5ad238a2c0c10dd","modified":1574614759061},{"_id":"themes/tranquilpeak/source/_css/themes/_hljs-tranquilpeak.scss","hash":"3c1e0d8b6e2f37820d00572878d060080c5a6fe7","modified":1561284245006},{"_id":"themes/tranquilpeak/source/_css/utils/_variables.scss","hash":"fc62fcffcdb16fb823c3cb170bbcf34493f0467f","modified":1574614759061},{"_id":"themes/tranquilpeak/source/_images/me.png","hash":"efa7d5b627c3eca30e3bbcf10db3f18a580f21cd","modified":1573135514214},{"_id":"themes/tranquilpeak/source/assets/css/jquery.fancybox.css","hash":"a5913612c237bb7443c6006a386edd775201d423","modified":1574868170511},{"_id":"themes/tranquilpeak/source/assets/css/all.css","hash":"4206f610954dd350d05e129ef672efbca9e2147c","modified":1574868170513},{"_id":"themes/tranquilpeak/source/assets/css/thumbs.css","hash":"d805bc578c883345f0c2e533db2d2548281132c4","modified":1510772014000},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-brands-400.woff2","hash":"0a885a5dbd97bd9f4fb1821eb82f2135471faff9","modified":499162500000},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-regular-400.eot","hash":"b46728e18106256d291e452e3e39e68536d8f910","modified":499162500000},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-regular-400.woff","hash":"3799764c40e3f87674d06b9f1e7a3e2128c6cdb0","modified":499162500000},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-regular-400.ttf","hash":"0a43b6f9d5b4ffa33cfd47fa59e705031cca81b3","modified":499162500000},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-regular-400.woff2","hash":"285cf9d32fae400ca979a369d299973307aa3416","modified":499162500000},{"_id":"themes/tranquilpeak/source/assets/images/download.jpg","hash":"933d7ce43b3f1df6c1263d5beff46c1e73c05038","modified":1574868170503},{"_id":"themes/tranquilpeak/source/assets/images/pic.jpg","hash":"a40b7c5ec746d3f61be10b63cdbc6ae3279c8b4c","modified":1574868170505},{"_id":"themes/tranquilpeak/source/assets/js/thumbs.js","hash":"9bd2831e83f5d851db6ceb4a3d354b59367a999b","modified":1510924731000},{"_id":"themes/tranquilpeak/source/assets/js/tranquilpeak.js","hash":"1cbba91c61927cb52093df77a198f62ded33466b","modified":1574868170522},{"_id":"themes/tranquilpeak/source/_images/cover.jpg","hash":"df915f5b3eeed6bad93a183f65e5c6f536e551fe","modified":1573134961782},{"_id":"themes/tranquilpeak/source/assets/css/tranquilpeak.css","hash":"e08e07e0ef5ad7d9d16b4abeda0efb8b3cfb9e18","modified":1574868170517},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-brands-400.ttf","hash":"bdc5cc08af77d0e3d7a7c333f734fbff982a095c","modified":499162500000},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-brands-400.woff","hash":"41ba889468ecc0350ef2ac98f00af4068902febb","modified":499162500000},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-brands-400.eot","hash":"abbe9c0c113df685f86b23f8e1c79b35e087a7f3","modified":499162500000},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-solid-900.woff","hash":"ecb37a1b10ca2c42fb5e8a24ea071afdf788cd39","modified":499162500000},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-solid-900.woff2","hash":"8aba5b59c5aa7f548a1fa663f02f3cdd3757bb52","modified":499162500000},{"_id":"themes/tranquilpeak/.git/logs/refs/heads/master","hash":"8b29499bc9489f999b19b1d5ba24fe7b5d0b5368","modified":1561284244981},{"_id":"themes/tranquilpeak/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1561284244979},{"_id":"themes/tranquilpeak/source/_css/utils/mixins/_category.scss","hash":"8cfc45772365e537949a4cd20cfa2a79e1a75dc8","modified":1561284245007},{"_id":"themes/tranquilpeak/source/_css/utils/mixins/_bottom-bar.scss","hash":"ab28b4d66f021e44d7a46a76157c6a2b5fd23496","modified":1561284245007},{"_id":"themes/tranquilpeak/source/_css/utils/mixins/_form.scss","hash":"14026f13b54ef9f2cd7109cf1bca43040816e542","modified":1561284245007},{"_id":"themes/tranquilpeak/source/_css/utils/mixins/_button.scss","hash":"70c64560144d7d6015bbedeca0531258f9bafa07","modified":1561284245007},{"_id":"themes/tranquilpeak/source/_css/utils/mixins/_header.scss","hash":"52de2cb5f49a3b5748557fe2d25791ce52457d62","modified":1561284245007},{"_id":"themes/tranquilpeak/source/_css/utils/mixins/_main.scss","hash":"0ad55a6191d0a533917845006ceae329353c0b90","modified":1566029650260},{"_id":"themes/tranquilpeak/source/_css/utils/mixins/_opacity.scss","hash":"cfc9905b6df3b5100a30b5c47fd331068f238f97","modified":1561284245008},{"_id":"themes/tranquilpeak/source/_css/utils/mixins/_post-header-cover.scss","hash":"ecd9078372d8bd1b7f4979bae3251e8efb345a9b","modified":1561284245008},{"_id":"themes/tranquilpeak/source/_css/utils/mixins/_prefix.scss","hash":"5e04cd54ba375f69c97b62b7d4e535118ec78177","modified":1561284245008},{"_id":"themes/tranquilpeak/source/_css/utils/mixins/_share-options-bar.scss","hash":"06f84bceb82df4d3bda64144f6fe4ad8e3e45f89","modified":1561284245008},{"_id":"themes/tranquilpeak/source/_css/utils/mixins/_sidebar.scss","hash":"6c3dc034c3d5fdf7f0c4c39a6913f5bae4fc4767","modified":1561284245008},{"_id":"themes/tranquilpeak/source/_css/utils/mixins/_tag.scss","hash":"c8a87e586e27f999ffa46f273f78a812f1cf2f0a","modified":1561284245008},{"_id":"themes/tranquilpeak/source/assets/css/style-cp4r4lzbvdgtsqux0bz8gef7mbnza7hvzqoldgoabfuwl18rpvlbvko6sqb4.min.css","hash":"f90af0ff31191f71f1a07f02127fc161642b59bb","modified":1574868171224},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-regular-400.svg","hash":"27d5417b0df9b0fb4acb0cd00cf9d7bc7da73608","modified":499162500000},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-solid-900.ttf","hash":"a16829d04437bccab092e3aaaa31fa8d5399e067","modified":499162500000},{"_id":"themes/tranquilpeak/source/assets/js/script-cp5cm5q41vsluavgrnvsvvn7coigizg2jehgclpkt4rkvpsxmjmpfr3c8am4.min.js","hash":"9648604871725bb36970bd79b830bd50908cd489","modified":1574868173852},{"_id":"themes/tranquilpeak/source/assets/js/jquery.fancybox.js","hash":"227dd641ffb92c1f0d1e6bb1c695fd4a05a13446","modified":1510924837000},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-solid-900.eot","hash":"8fe955fff0adb55f95b4765406457b2afa0be32b","modified":499162500000},{"_id":"themes/tranquilpeak/source/assets/images/me.png","hash":"efa7d5b627c3eca30e3bbcf10db3f18a580f21cd","modified":1574868170504},{"_id":"themes/tranquilpeak/.git/logs/refs/remotes/origin/HEAD","hash":"8b29499bc9489f999b19b1d5ba24fe7b5d0b5368","modified":1561284244979},{"_id":"themes/tranquilpeak/.git/objects/pack/pack-7772f7ec7211ce51e6bd94cc06da1fafacf74e7c.idx","hash":"36a5907a5d13f45d543e23296978a85219de7715","modified":1561284244970},{"_id":"themes/tranquilpeak/source/_images/cover-v1.2.0.jpg","hash":"a98b9bf4d6be3af0156c0b6e781f067e343a682d","modified":1574614759066},{"_id":"themes/tranquilpeak/source/assets/css/style.css","hash":"7fb5f8ca6e7c079716888752c1df098830f05363","modified":1574868170526},{"_id":"themes/tranquilpeak/source/assets/images/cover.jpg","hash":"df915f5b3eeed6bad93a183f65e5c6f536e551fe","modified":1574868170502},{"_id":"themes/tranquilpeak/source/assets/js/jquery.js","hash":"46a436eba01c79acdb225757ed80bf54bad6416b","modified":1516469212000},{"_id":"themes/tranquilpeak/source/assets/images/cover-v1.2.0.jpg","hash":"a98b9bf4d6be3af0156c0b6e781f067e343a682d","modified":1574868170501},{"_id":"themes/tranquilpeak/source/assets/js/script.js","hash":"2deaf3853107b8e03c985c4e99749b6541f1c466","modified":1574868170535},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-brands-400.svg","hash":"2182d81c546fff286f868e977c8fe62a26af3168","modified":499162500000},{"_id":"themes/tranquilpeak/source/assets/fonts/fa-solid-900.svg","hash":"e3c71cca13a4a7c9b21fb6b8ee78a080c3d7dba0","modified":499162500000},{"_id":"themes/tranquilpeak/.git/objects/pack/pack-7772f7ec7211ce51e6bd94cc06da1fafacf74e7c.pack","hash":"63026536efee368fa86bfb5f396b45b49c491187","modified":1561284244963},{"_id":"public/assets/fonts/fa-regular-400.eot","hash":"b46728e18106256d291e452e3e39e68536d8f910","modified":1574949506461},{"_id":"public/assets/fonts/fa-regular-400.woff","hash":"3799764c40e3f87674d06b9f1e7a3e2128c6cdb0","modified":1574949506461},{"_id":"public/assets/fonts/fa-regular-400.ttf","hash":"0a43b6f9d5b4ffa33cfd47fa59e705031cca81b3","modified":1574949506461},{"_id":"public/assets/fonts/fa-regular-400.woff2","hash":"285cf9d32fae400ca979a369d299973307aa3416","modified":1574949506461},{"_id":"public/assets/images/download.jpg","hash":"933d7ce43b3f1df6c1263d5beff46c1e73c05038","modified":1574949506462},{"_id":"public/assets/images/pic.jpg","hash":"a40b7c5ec746d3f61be10b63cdbc6ae3279c8b4c","modified":1574949506462},{"_id":"public/assets/fonts/fa-solid-900.woff2","hash":"8aba5b59c5aa7f548a1fa663f02f3cdd3757bb52","modified":1574949506462},{"_id":"public/assets/fonts/fa-brands-400.woff2","hash":"0a885a5dbd97bd9f4fb1821eb82f2135471faff9","modified":1574949506465},{"_id":"public/assets/fonts/fa-brands-400.ttf","hash":"bdc5cc08af77d0e3d7a7c333f734fbff982a095c","modified":1574949506550},{"_id":"public/assets/fonts/fa-brands-400.woff","hash":"41ba889468ecc0350ef2ac98f00af4068902febb","modified":1574949506551},{"_id":"public/assets/fonts/fa-brands-400.eot","hash":"abbe9c0c113df685f86b23f8e1c79b35e087a7f3","modified":1574949506551},{"_id":"public/assets/fonts/fa-solid-900.woff","hash":"ecb37a1b10ca2c42fb5e8a24ea071afdf788cd39","modified":1574949506551},{"_id":"public/assets/css/thumbs.css","hash":"921a2c7359aecec27a5d60478a48501b493e7492","modified":1574949506553},{"_id":"public/assets/js/thumbs.js","hash":"e2a1a76c86b7f605ddc5dd04274f8b35af1d5103","modified":1574949506553},{"_id":"public/google5e8608507b0f5d8a.html","hash":"552e5ad9a7112be4d0cc89068741d59284746e01","modified":1574949506553},{"_id":"public/assets/fonts/fa-regular-400.svg","hash":"27d5417b0df9b0fb4acb0cd00cf9d7bc7da73608","modified":1574949506553},{"_id":"public/assets/fonts/fa-solid-900.eot","hash":"8fe955fff0adb55f95b4765406457b2afa0be32b","modified":1574949506553},{"_id":"public/assets/images/me.png","hash":"efa7d5b627c3eca30e3bbcf10db3f18a580f21cd","modified":1574949506554},{"_id":"public/assets/fonts/fa-solid-900.ttf","hash":"a16829d04437bccab092e3aaaa31fa8d5399e067","modified":1574949506567},{"_id":"public/assets/css/jquery.fancybox.css","hash":"a5913612c237bb7443c6006a386edd775201d423","modified":1574949506570},{"_id":"public/assets/js/tranquilpeak.js","hash":"1cbba91c61927cb52093df77a198f62ded33466b","modified":1574949506575},{"_id":"public/assets/images/cover.jpg","hash":"df915f5b3eeed6bad93a183f65e5c6f536e551fe","modified":1574949506575},{"_id":"public/assets/css/all.css","hash":"4206f610954dd350d05e129ef672efbca9e2147c","modified":1574949506578},{"_id":"public/assets/images/cover-v1.2.0.jpg","hash":"a98b9bf4d6be3af0156c0b6e781f067e343a682d","modified":1574949506578},{"_id":"public/assets/fonts/fa-solid-900.svg","hash":"e3c71cca13a4a7c9b21fb6b8ee78a080c3d7dba0","modified":1574949506585},{"_id":"public/assets/fonts/fa-brands-400.svg","hash":"2182d81c546fff286f868e977c8fe62a26af3168","modified":1574949506587},{"_id":"public/assets/css/tranquilpeak.css","hash":"e08e07e0ef5ad7d9d16b4abeda0efb8b3cfb9e18","modified":1574949506590},{"_id":"public/assets/css/style-cp4r4lzbvdgtsqux0bz8gef7mbnza7hvzqoldgoabfuwl18rpvlbvko6sqb4.min.css","hash":"f90af0ff31191f71f1a07f02127fc161642b59bb","modified":1574949506595},{"_id":"public/assets/css/style.css","hash":"7ac35d5ea73420e29d03b0c0acad5a708c08de25","modified":1574949506604},{"_id":"public/assets/js/script-cp5cm5q41vsluavgrnvsvvn7coigizg2jehgclpkt4rkvpsxmjmpfr3c8am4.min.js","hash":"9648604871725bb36970bd79b830bd50908cd489","modified":1574949506604},{"_id":"public/assets/js/jquery.fancybox.js","hash":"fec45d19179030b8f43ebd0eabc5467892c14136","modified":1574949506604},{"_id":"public/assets/js/jquery.js","hash":"46a436eba01c79acdb225757ed80bf54bad6416b","modified":1574949506607},{"_id":"public/assets/js/script.js","hash":"a6b32a2caf50fa60e4ba306cbc019f6cb17307b1","modified":1574949506616},{"_id":"source/_posts/API.md","hash":"a55ab761b90801806cd370d9f49b5ef4da7eef0a","modified":1574553278000},{"_id":"source/_posts/AboutCMS.md","hash":"aea442d4a8e0b31ba91e45bf2c586abad1645f92","modified":1574553278000},{"_id":"source/_posts/Ajax.md","hash":"e3243631ce799d4886a1f3222504920bee250c10","modified":1574553278000},{"_id":"source/_posts/CSSTip.md","hash":"bff253189ff25d0b98d79114409c94c2cf3ec88d","modified":1574553278000},{"_id":"source/_posts/CSRF攻击及防范措施.md","hash":"517f8a0534556d622a88cba1590057da69cabfba","modified":1574553278000},{"_id":"source/_posts/Animation.md","hash":"ca7c59cb9e46d96aa94b92bd87308311ba0d663c","modified":1574553278000},{"_id":"source/_posts/CSS编码规范.md","hash":"76f053f49752ef16fd3e3610703c25be9bdb0671","modified":1574553278000},{"_id":"source/_posts/CSS选择器类型与用法.md","hash":"446b84ba31d13483a94620a5d9e3d1f4535a0348","modified":1574553278000},{"_id":"source/_posts/CreatePhpEnvironmentInDocker.md","hash":"3c6f11bc8a566ff70a52c7940dd8105382edc68f","modified":1574553278000},{"_id":"source/_posts/Elisabeth.md","hash":"dd3df03f3f3f9f3d374d690ea66c47a7334857e8","modified":1574553278000},{"_id":"source/_posts/Docker环境下使用bake自动生成页面.md","hash":"bc0cfa9fe989559d488377a732eff698e0123997","modified":1574553278000},{"_id":"source/_posts/Extension.md","hash":"a51e00fe1efd100ab33a5a933968f404390e137a","modified":1574553278000},{"_id":"source/_posts/FirstBlog.md","hash":"0ec1ea25ffc93f885340c5fb210c230b441d38a5","modified":1574553278000},{"_id":"source/_posts/Get和Post提交数据有什么区别.md","hash":"00b4ae8bafc4404e07476bbcb5156e3ab860b97d","modified":1574553278000},{"_id":"source/_posts/GitTip.md","hash":"fedeac147af140d54182cd14c6fe5becb330a129","modified":1574553278000},{"_id":"source/_posts/Homebrew.md","hash":"0b924f34258b6c3c99f23451fa3c5054a7eac92a","modified":1574553278000},{"_id":"source/_posts/IconFont.md","hash":"041051a1d3442bc2fe207c684b1d2a6f02274ee2","modified":1574553278000},{"_id":"source/_posts/JS-DOM元素以及DOM元素操作常用API.md","hash":"f7dc4a27527117cb7dcd702eb50e3ea1135484c2","modified":1574553278000},{"_id":"source/_posts/JS函数关于if-xx-和-a-b.md","hash":"370750d6832e3ff1e809b71f1d1c54cd00a1d49f","modified":1574553278000},{"_id":"source/_posts/JS发展简史.md","hash":"7d188da286b2183496782573a25182f04bd0f7ae","modified":1574553278000},{"_id":"source/_posts/JS立即执行函数表达式.md","hash":"faf243a799757948e70bd441e76b24e638112e8a","modified":1574553278000},{"_id":"source/_posts/JS正则表达式.md","hash":"6945bd2cc2896dbe934f29b501b7eaca2e6f2a5c","modified":1574553278000},{"_id":"source/_posts/MissSaigon.md","hash":"25e5f931db6039fe70e30552ac56b55b11da9656","modified":1574553278000},{"_id":"source/_posts/Pages.md","hash":"e29e30c446f8ed35216ec0fa2056e4d64d1aad4f","modified":1574553278000},{"_id":"source/_posts/React-Virtual-Dom.md","hash":"204c2ca67c0f58651b7c91e3c4e23c94f4f12294","modified":1574553278000},{"_id":"source/_posts/Started.md","hash":"c94b95cd0fc8f81985d132835c62a5f5d7dea912","modified":1574553278000},{"_id":"source/_posts/TheCove.md","hash":"1525307789b51878de5de438e1f1f13e0439494b","modified":1574553278000},{"_id":"source/_posts/UNIVERSE.md","hash":"0d5770063ca8cdb4aec2f3c9f03872116d1c784d","modified":1574553278000},{"_id":"source/_posts/aboutnpm.md","hash":"86e9b0b0e1f55c062dc3be2ca7c63584754e4c69","modified":1574553278000},{"_id":"source/_posts/createDockerModx.md","hash":"f7c2a5a34476d64730f057735942e223beae2eb5","modified":1574553278000},{"_id":"source/_posts/dockercommand.md","hash":"fe3e8aa3f363f8cf656e1f01eed2d8884a96252b","modified":1574553278000},{"_id":"source/_posts/iTerm2.md","hash":"2a5f033c4f57094b963516eec7f57d88a64cb953","modified":1574553278000},{"_id":"source/_posts/jQuery.md","hash":"dc579047417c029e64d89d2192ed54d5807c9b08","modified":1574553278000},{"_id":"source/_posts/jQuery绑定事件.md","hash":"e44177239629668f313326c0e51da2b416f2ad1d","modified":1574553278000},{"_id":"source/_posts/ssh.md","hash":"d84fd25e1c85b37ac39b1882d97d5f2fcfd96f5f","modified":1574553278000},{"_id":"source/_posts/什么是ajax.md","hash":"42ec189084a0d5cde852251dc751a0520a28d4b3","modified":1574553278000},{"_id":"source/_posts/从URL到页面展现.md","hash":"4acfa7f51baf9e57efc715d97b453b969d4a6c04","modified":1574553278000},{"_id":"source/_posts/使用Docker进行Cakephp3开发环境搭建.md","hash":"e9efec8a6cbcc80a86e75ff714fdfb71b2cf9aac","modified":1574553278000},{"_id":"source/_posts/关于BFC及外边距合并.md","hash":"34d4ee8c01cd25ef311c2e2d2d017e22e921992e","modified":1574553278000},{"_id":"source/_posts/关于BOM对象.md","hash":"a0216577f2526fb713cf3ed092aebc94e6f7c3d7","modified":1574553278000},{"_id":"source/_posts/关于CSS浮动.md","hash":"2a03354e32444aba160c972bd419a166ff7ea942","modified":1574553278000},{"_id":"source/_posts/关于CSS继承.md","hash":"3760e9814ba29eb941725f81f97b2e249995f61e","modified":1574553278000},{"_id":"source/_posts/关于LocalStorage-cookie和session.md","hash":"7ce069509d4d772feb1d8326d3f3f5cdb8773f5a","modified":1574553278000},{"_id":"source/_posts/关于事件传播机制.md","hash":"bdebef1a3ad85c8912321fd0143039acf13719a4","modified":1574553278000},{"_id":"source/_posts/关于前端mock数据.md","hash":"3d675996057875a2d34d873d09a8f2a76fabba3a","modified":1574553278000},{"_id":"source/_posts/关于js跨域及解决方法.md","hash":"a3b6eb4d2522d7764fec602aabe7493d2fc79e07","modified":1574553278000},{"_id":"source/_posts/关于浏览器渲染机制.md","hash":"318d49bc8030e3cf1c3f6120e90436b184d237e0","modified":1574553278000},{"_id":"source/_posts/关于闭包.md","hash":"eecab9828f4273975a1af537e0a62becd28223d6","modified":1574553278000},{"_id":"source/_posts/实现一个翻转注册登陆页面.md","hash":"f4accce669f7a1baf9d19c924dc3a56f75d1e118","modified":1574553278000},{"_id":"source/_posts/常见浏览器及浏览器内核.md","hash":"ebe322569be6a3875393f2114362ab15ccbdcdf5","modified":1574553278000},{"_id":"source/_posts/系统式样统一页面的制作.md","hash":"5868ed05d97385661aec60e150a57566631e4f0e","modified":1574553278000},{"_id":"source/_posts/超简单用hexo和github搭建个人博客.md","hash":"38f1984d9050874bcef01d3a646b733d7e6451ff","modified":1574553278000},{"_id":"source/all-categories/index.md","hash":"3d47d4e31035e3c8d960730f36bd3ad27f88e9be","modified":1574553278000},{"_id":"source/all-tags/index.md","hash":"179446024ea6ab23648ca97333a674d65e282807","modified":1574553278000},{"_id":"source/all-archives/index.md","hash":"16451dc58245e819d58f07dc3cad0957898a811c","modified":1574553278000},{"_id":"themes/tranquilpeak/scripts/.DS_Store","hash":"11c14224fe1e2fe78794f3a3019462d90581610b","modified":1574949982121},{"_id":"source/_posts/API/20190716.png","hash":"7b24e8bf1b7a0439c6731e5c536b27d90730f9e0","modified":1574553278000},{"_id":"source/_posts/Ajax/20190830.png","hash":"82fc1789e9eb25f5f027e3795de4fa02f4f47f0b","modified":1574553278000},{"_id":"source/_posts/Animation/20190830.png","hash":"89d3fd35ed114d4364e0666e89666b0137611d21","modified":1574553278000},{"_id":"source/_posts/CSRF攻击及防范措施/20181014.png","hash":"0bbd6f2509fb5ef68c0428b0569f90855d3137ef","modified":1574553278000},{"_id":"source/_posts/CSS编码规范/20190122.png","hash":"89e4219e26133c6370998f4a41674f05dc4d1e30","modified":1574553278000},{"_id":"source/_posts/CSS选择器类型与用法/20181115.png","hash":"84f44682a7608720e799a2b162aca97720057362","modified":1574553278000},{"_id":"source/_posts/CreatePhpEnvironmentInDocker/20191111.png","hash":"8cd58917accb318825ac1a191d64a1b0e6280807","modified":1574553278000},{"_id":"source/_posts/Docker环境下使用bake自动生成页面/20190406.png","hash":"308a040aa780483f8578cca412c7be554577f40f","modified":1574553278000},{"_id":"source/_posts/Elisabeth/20190926.jpg","hash":"9b70c1c171b04c71b2eb38940a82a7ee15aadba3","modified":1574553278000},{"_id":"source/_posts/Extension/20191005.png","hash":"1352d21e2845bcf65157303c2cb6c3ca989eb4d3","modified":1574553278000},{"_id":"source/_posts/Extension/5.jpg","hash":"1499f1f0244298a2b2e000602dab81d459ea04f1","modified":1574553278000},{"_id":"source/_posts/Extension/3.jpg","hash":"d4e66c67cae8fd7c27b5907844cb902418b61674","modified":1574553278000},{"_id":"source/_posts/Extension/8.jpg","hash":"1c2f2235d1000e9dc6e42bb9664d8f1b30c39e65","modified":1574553278000},{"_id":"source/_posts/AboutCMS/20191102.png","hash":"fe22874c6c7376dcdbc05510d2d363de101c19f0","modified":1574553278000},{"_id":"source/_posts/FirstBlog/cat1.jpg","hash":"a544215f5b171e6bf0517a637532d3137054cd9d","modified":1574553278000},{"_id":"source/_posts/FirstBlog/cat2.jpg","hash":"9209c3ad229eeee6f3b63e90ca9f44bb33141a76","modified":1574553278000},{"_id":"source/_posts/FirstBlog/cat4.jpg","hash":"5425a3b41a2e43b80bb3b182df1c6d10def3f745","modified":1574553278000},{"_id":"source/_posts/Get和Post提交数据有什么区别/20181025.png","hash":"1e58d464417a97a1b27334a854113e64b2a36718","modified":1574553278000},{"_id":"source/_posts/FirstBlog/tokyo.jpg","hash":"cb2164cd18edd876cbdd7457a597dc14232050d9","modified":1574553278000},{"_id":"source/_posts/Homebrew/20190929.png","hash":"8ae4da23beb231972ee8ba1a141ae2bb99bfa369","modified":1574553278000},{"_id":"source/_posts/FirstBlog/cat5.jpg","hash":"0734be57bb09963c62275895912c755c6e010838","modified":1574553278000},{"_id":"source/_posts/IconFont/20181228.jpg","hash":"d94f1fc76e7e8e5a873bb1d98c837fdad32fcd0d","modified":1574553278000},{"_id":"source/_posts/IconFont/2.png","hash":"3ef139cc4b58a9314cb2bc29b11637ccf0365c9d","modified":1574553278000},{"_id":"source/_posts/JS-DOM元素以及DOM元素操作常用API/20190322.png","hash":"bce03175c9c0bd825ddf8d01c2b3fb0b22e25cb4","modified":1574553278000},{"_id":"source/_posts/JS函数关于if-xx-和-a-b/20190226.png","hash":"a7d62cae283abf8d95b7eb1d4c0588f20d43486b","modified":1574553278000},{"_id":"source/_posts/JS发展简史/20190210.png","hash":"f3b6d870de9705132e9073e26f999e074c80d615","modified":1574553278000},{"_id":"source/_posts/JS正则表达式/20190316.png","hash":"7b166a7fe939f0b91ff9833dc9127daed7631772","modified":1574553278000},{"_id":"source/_posts/JS立即执行函数表达式/20190302.jpg","hash":"5a1311f00994eb233d31dd9f88215096acaeb8be","modified":1574553278000},{"_id":"source/_posts/MissSaigon/20191020.jpg","hash":"93db50b327ffd771776d6c07a284bfca349e78a4","modified":1574553278000},{"_id":"source/_posts/Pages/20190930.png","hash":"e93007fce3635463d0d0e00242748167d9ce1670","modified":1574553278000},{"_id":"source/_posts/React-Virtual-Dom/20190704.png","hash":"cf6c71da1975827b019a9d51aac043a1f0bbbc6e","modified":1574553278000},{"_id":"source/_posts/Started/20190914.png","hash":"d2c98137c20290d2dbae271d3b316e5eb57bd211","modified":1574553278000},{"_id":"source/_posts/TheCove/1.jpg","hash":"d1c047eecbbaea32bd206a48c401e8295210991a","modified":1574553278000},{"_id":"source/_posts/TheCove/2.jpg","hash":"c957235c8e00d0d9b15a9a273bd53f70f22d409c","modified":1574553278000},{"_id":"source/_posts/TheCove/4.jpg","hash":"124147692f9af1a67838739c4f4f121ef2af2251","modified":1574553278000},{"_id":"source/_posts/UNIVERSE/1.jpg","hash":"d87bbe45ac1cb33ec6b3051c8b1453c0e265c0ac","modified":1574553278000},{"_id":"source/_posts/aboutnpm/20191124.png","hash":"9744258b5c413d764bca03d7c00d8cc7d1320b40","modified":1574553278000},{"_id":"source/_posts/createDockerModx/20191031.png","hash":"b9bd69dd84d5780de4b64506ac3ea28e62b901fd","modified":1574553278000},{"_id":"source/_posts/dockercommand/20191107.png","hash":"f9b77c076fea15225317daa7a63300ef1f0d7aa7","modified":1574553278000},{"_id":"source/_posts/iTerm2/20191006.png","hash":"a970dcdfc2e984085af50833f7b6c9444f808b90","modified":1574553278000},{"_id":"source/_posts/iTerm2/6.png","hash":"22212115b75b3f51925ff87bc6de4b3eb8ea8f89","modified":1574553278000},{"_id":"source/_posts/iTerm2/8.png","hash":"d0f08cf08a82858b25d380e6e5008eb31f3e7c01","modified":1574553278000},{"_id":"source/_posts/jQuery/20190712.png","hash":"00387e9d2fff2e75d06fc97a5ed152ddc2297b9f","modified":1574553278000},{"_id":"source/_posts/jQuery绑定事件/20190827.jpg","hash":"d9fd6399a86cb16765a5ceda32ec21397696a232","modified":1574553278000},{"_id":"source/_posts/ssh/1.png","hash":"dd302f9bab36ec2cf1bfe0e0b5c5128fef88c213","modified":1574553278000},{"_id":"source/_posts/ssh/20191111.png","hash":"82b4d38cc0dc620a1ec544ace2519fa09a861bff","modified":1574553278000},{"_id":"source/_posts/什么是ajax/20190605.png","hash":"e1be8b2e968642b3b1f8676de301c2bbc60fae36","modified":1574553278000},{"_id":"source/_posts/使用Docker进行Cakephp3开发环境搭建/1.png","hash":"3c0a379a165fa3c3cec1dfb8cf09fb6c52edbf0f","modified":1574553278000},{"_id":"source/_posts/使用Docker进行Cakephp3开发环境搭建/20190403.png","hash":"308a040aa780483f8578cca412c7be554577f40f","modified":1574553278000},{"_id":"source/_posts/使用Docker进行Cakephp3开发环境搭建/11.png","hash":"e2dfd00beab83f18712daedde9bc06b071488d52","modified":1574553278000},{"_id":"source/_posts/使用Docker进行Cakephp3开发环境搭建/3.png","hash":"d2e954919e4e66370e4d0074852b80236538af48","modified":1574553278000},{"_id":"source/_posts/关于BFC及外边距合并/1.png","hash":"28ccff450aa77ce4d4728a4daac997ce6089814f","modified":1574553278000},{"_id":"source/_posts/关于BFC及外边距合并/20190116.png","hash":"e61706673eeb88cf9730b38372d75a053e966e36","modified":1574553278000},{"_id":"source/_posts/关于BFC及外边距合并/2.png","hash":"73eb8f4774137d1fa8c545e2b9f02b6407957539","modified":1574553278000},{"_id":"source/_posts/关于BFC及外边距合并/5.png","hash":"3342d1658547e3815d5cd5d00d514c73c087eebb","modified":1574553278000},{"_id":"source/_posts/关于BFC及外边距合并/6.png","hash":"1756b37790c586073709fc7dce142bd02da9a299","modified":1574553278000},{"_id":"source/_posts/关于BFC及外边距合并/3.png","hash":"ee0dab6cd9f992ea6355729c7844a2bddc2614e7","modified":1574553278000},{"_id":"source/_posts/关于BOM对象/20190425.png","hash":"06139948756a52a898e5f1a094d19f9d7f1ccafb","modified":1574553278000},{"_id":"source/_posts/关于BFC及外边距合并/4.png","hash":"643126a4d18ffe9b1d992b296acd75348f49c07d","modified":1574553278000},{"_id":"source/_posts/关于CSS浮动/20181230.png","hash":"c92c91933d0f74a2e2e4a51183ec901aee152a1a","modified":1574553278000},{"_id":"source/_posts/关于CSS继承/20181125.png","hash":"79d97830d1cf59b33d5ef6a499d9918285fffaa5","modified":1574553278000},{"_id":"source/_posts/关于LocalStorage-cookie和session/20190510.png","hash":"a3744c50246fa9747e74d659c411c7af3badf91e","modified":1574553278000},{"_id":"source/_posts/关于js跨域及解决方法/20190610.png","hash":"3fca8bd73c4ce9a04d8f8901c73c6046c1b9d709","modified":1574553278000},{"_id":"source/_posts/关于事件传播机制/1.png","hash":"4b6ed13b6f8c528e1cb278d39eeef656f822d254","modified":1574553278000},{"_id":"source/_posts/关于事件传播机制/2.png","hash":"998a31719aec73c1abe7aeaa2eac4d4ae5a3f122","modified":1574553278000},{"_id":"source/_posts/关于事件传播机制/20190520.jpg","hash":"f680925479656c532dae6bffdb314b4395df9bf3","modified":1574553278000},{"_id":"source/_posts/关于事件传播机制/3.png","hash":"bbeb7a8d7725dfa625afae3beb9838ca09d176be","modified":1574553278000},{"_id":"source/_posts/关于前端mock数据/20190521.png","hash":"98c34ddce3e8e1cfffcb8cf5e333c82600b49840","modified":1574553278000},{"_id":"source/_posts/关于浏览器渲染机制/20190223.jpg","hash":"0486e963e7bd5effe97b2327e3abc75b907d14f9","modified":1574553278000},{"_id":"source/_posts/关于闭包/20190623.jpg","hash":"f9616a17a58d301dfa653ead23546d0952890342","modified":1574553278000},{"_id":"source/_posts/实现一个翻转注册登陆页面/20190420.png","hash":"295207ec9d0ead4f0c6ba74b93fbb83f0ee3f255","modified":1574553278000},{"_id":"source/_posts/常见浏览器及浏览器内核/20181029.png","hash":"f25ed82a0d43c565740806f3867a63804aff4c48","modified":1574553278000},{"_id":"source/_posts/系统式样统一页面的制作/20190620.jpg","hash":"66aa5d3c1151ba1f3173962a24e877a6f25f119a","modified":1574553278000},{"_id":"source/_posts/超简单用hexo和github搭建个人博客/20190528.jpg","hash":"7bc820e50ed0b703eeda4a541cf60fada6176313","modified":1574553278000},{"_id":"source/_posts/Docker环境下使用bake自动生成页面/1.png","hash":"4e0ab70758ad41aa7e0acc46205b4a03d18e781c","modified":1574553278000},{"_id":"source/_posts/Extension/6.png","hash":"cf2796a748cc364bfbb9e08a849edfad0a5fe576","modified":1574553278000},{"_id":"source/_posts/Extension/9.png","hash":"e33ece76bef0efcb65ca91ac50c845e0c1dbf4e0","modified":1574553278000},{"_id":"source/_posts/IconFont/1.png","hash":"df6ced59bfda8a47b6ad69a5ba4496dff3be5000","modified":1574553278000},{"_id":"source/_posts/IconFont/3.png","hash":"d2d634096ee97870e9b86acdd609def48aec1203","modified":1574553278000},{"_id":"source/_posts/createDockerModx/10.png","hash":"6ed98088779977d718270ccfcdebdac2dfa3f1a8","modified":1574553278000},{"_id":"source/_posts/createDockerModx/12.png","hash":"9039144f17392e1a9a1e03f6a912a5dff06eaad6","modified":1574553278000},{"_id":"source/_posts/iTerm2/1.png","hash":"6ce9153273d90a66e505a145912015e8eda19a3e","modified":1574553278000},{"_id":"source/_posts/iTerm2/2.png","hash":"36ace45f087355477924193857bb3269f43c07f0","modified":1574553278000},{"_id":"source/_posts/iTerm2/5.png","hash":"6283b92618227089b5a9662629f78ec054434ab9","modified":1574553278000},{"_id":"source/_posts/iTerm2/3.png","hash":"3db775a96d08cf0375189d91dff5b8cdafc6d673","modified":1574553278000},{"_id":"source/_posts/iTerm2/7.png","hash":"699ed9e9e4c4f25adb9fc9aa51258c35e5b1582a","modified":1574553278000},{"_id":"source/_posts/jQuery/11.png","hash":"c03db97c2c4beb015b410a4d6f3ec00836aa24a2","modified":1574553278000},{"_id":"source/_posts/jQuery/10.png","hash":"d074bfc8f8084b0e5d3c5a177c5518f87cc365ce","modified":1574553278000},{"_id":"source/_posts/jQuery/1.png","hash":"de40070b830b17f901348c542537fe4d2c60c3b4","modified":1574553278000},{"_id":"source/_posts/jQuery/12.png","hash":"0cb135a73a0a4e99d5f8cd0170bc285bf7ffacb9","modified":1574553278000},{"_id":"source/_posts/jQuery/13.png","hash":"5c599c71fe87a18d147062f739c3c59b305d1e93","modified":1574553278000},{"_id":"source/_posts/jQuery/2.png","hash":"4e0de9eccfd5772aa815b99a13ceeff2543386ef","modified":1574553278000},{"_id":"source/_posts/jQuery/3.png","hash":"5437341cfa022c9a1198c7131b2bbc3ce09fb561","modified":1574553278000},{"_id":"source/_posts/jQuery/6.png","hash":"8c4498ffe94fd4e1ab1226be15133ffc140b7c90","modified":1574553278000},{"_id":"source/_posts/jQuery/7.png","hash":"8fcaa46cfa12351bbf2f2b49d32b016d403e29f1","modified":1574553278000},{"_id":"source/_posts/jQuery/9.png","hash":"15c8fa369aac2dc8774bf62992402705170c77de","modified":1574553278000},{"_id":"source/_posts/jQuery/8.png","hash":"c6ee0608bbd90fa13b8e42d84332c5c031864ea3","modified":1574553278000},{"_id":"source/_posts/使用Docker进行Cakephp3开发环境搭建/10.png","hash":"9b0f11525966119b5dbc13247218f38f8cf785b3","modified":1574553278000},{"_id":"source/_posts/使用Docker进行Cakephp3开发环境搭建/5.png","hash":"392d72a6a3857dfd9e429cda6bd6fa9e7ae6e337","modified":1574553278000},{"_id":"source/_posts/使用Docker进行Cakephp3开发环境搭建/4.png","hash":"6d07c6d886a7a01d459c0b0e13696a41b34cdc55","modified":1574553278000},{"_id":"source/_posts/使用Docker进行Cakephp3开发环境搭建/9.png","hash":"2e60879dd33e540bd1bd75f3e2a38a47c4f8c6ce","modified":1574553278000},{"_id":"source/_posts/关于事件传播机制/4.png","hash":"6fdabac719c2258c5a116cd169b312902e9209c4","modified":1574553278000},{"_id":"source/_posts/超简单用hexo和github搭建个人博客/1.png","hash":"6ab9863e922602dee3d4fa9d726a3d6a8fcb5f5a","modified":1574553278000},{"_id":"source/_posts/超简单用hexo和github搭建个人博客/3.png","hash":"d64d6849a44aa6fd6b825c3223b9c96cdb311482","modified":1574553278000},{"_id":"source/_posts/FirstBlog/cat3.jpg","hash":"666549db928e118186e54a31adda0649047c3076","modified":1574553278000},{"_id":"source/_posts/JS-DOM元素以及DOM元素操作常用API/1.png","hash":"496ebd37022b369b9d2b11ecb63892dec7a0cd7a","modified":1574553278000},{"_id":"source/_posts/Pages/2.png","hash":"e4813cd992258667d37a71475b54aac1eee7f80e","modified":1574553278000},{"_id":"source/_posts/Pages/3.png","hash":"9f2335d1a7c53adbfb6c51ea01b8f7a5ed128aad","modified":1574553278000},{"_id":"source/_posts/TheCove/3.jpg","hash":"ebedd51bd99c0f0d4e4f7bf94c26231d299162f6","modified":1574553278000},{"_id":"source/_posts/jQuery/5.png","hash":"122c72996754c60d07409d98ab0040f6e68167d1","modified":1574553278000},{"_id":"source/_posts/从URL到页面展现/2.png","hash":"d1358b4e218379039781b41548aadb52214b85c6","modified":1574553278000},{"_id":"source/_posts/使用Docker进行Cakephp3开发环境搭建/7.png","hash":"a26267e9160d468afbfd4772f7b9927ac4c8b1f4","modified":1574553278000},{"_id":"source/_posts/关于LocalStorage-cookie和session/7.png","hash":"38f8d298b327768e7880c034cf3d1b1e08b5a4d3","modified":1574553278000},{"_id":"source/_posts/关于前端mock数据/1.png","hash":"210efb475b215dace1f8624b663052dcf00c176a","modified":1574553278000},{"_id":"source/_posts/系统式样统一页面的制作/5.png","hash":"011722fef8fe2a61841b7b6cdf3e6cf355ac70f8","modified":1574553278000},{"_id":"source/_posts/Pages/1.png","hash":"6fee709e9e5e9e9fda1833d554dff0073a440d0e","modified":1574553278000},{"_id":"source/_posts/React-Virtual-Dom/3.png","hash":"d37539c1231f92faca7d5873a5e901fc34b665d4","modified":1574553278000},{"_id":"source/_posts/React-Virtual-Dom/1.png","hash":"fca7d87fd0a86b60362b6dc3773a6f32e6d10bbf","modified":1574553278000},{"_id":"source/_posts/React-Virtual-Dom/2.png","hash":"7e874077642152f9536393a681af36e8e759e1ec","modified":1574553278000},{"_id":"source/_posts/createDockerModx/3.jpg","hash":"c0f53e8394186c791c5212243c7eacd3f05a399e","modified":1574553278000},{"_id":"source/_posts/使用Docker进行Cakephp3开发环境搭建/6.png","hash":"a04dd2661757099c22996a1a946c7ab2e8ccbde1","modified":1574553278000},{"_id":"source/_posts/关于LocalStorage-cookie和session/2.png","hash":"54463bb59a3922a3728f6996bfbbda9849671709","modified":1574553278000},{"_id":"source/_posts/系统式样统一页面的制作/2.png","hash":"4095ed0835593c6a71ea0066636e63aea9850ed1","modified":1574553278000},{"_id":"source/_posts/系统式样统一页面的制作/4.png","hash":"64bcdd192fd9bf402db684d4b35caf371acb4f3d","modified":1574553278000},{"_id":"source/_posts/IconFont/4.png","hash":"b320bbfa4ebf287a6fec58feb4ea06fbbde21b23","modified":1574553278000},{"_id":"source/_posts/createDockerModx/5.png","hash":"6df096dda817cab044ab882e9b3808403e05f93f","modified":1574553278000},{"_id":"source/_posts/jQuery/4.png","hash":"6a46439a527e314e0a39008f95c5c99fc65b5300","modified":1574553278000},{"_id":"source/_posts/使用Docker进行Cakephp3开发环境搭建/2.png","hash":"2ffdeb8f381fb15a7f72b03f453953f8bb07335d","modified":1574553278000},{"_id":"source/_posts/使用Docker进行Cakephp3开发环境搭建/8.png","hash":"84a1420ddf4536865fc2ad15b3ae57388f72cf41","modified":1574553278000},{"_id":"source/_posts/超简单用hexo和github搭建个人博客/2.png","hash":"23ff0a3d5596ca3c9710815c28a7257f31ec7c95","modified":1574553278000},{"_id":"source/_posts/CreatePhpEnvironmentInDocker/2.png","hash":"46eaefd0b087e3e5b174df3e0dce43fa7f715827","modified":1574553278000},{"_id":"source/_posts/Elisabeth/5.jpg","hash":"c3872e0c27239f9762225b684dca32a8eb79236a","modified":1574553278000},{"_id":"source/_posts/IconFont/5.png","hash":"9cf81cc2e20e2eb5a52373920193636b57444aba","modified":1574553278000},{"_id":"source/_posts/aboutnpm/2.png","hash":"ae9d127f8597ebff4e113779429cc0a914173211","modified":1574553278000},{"_id":"source/_posts/iTerm2/4.png","hash":"27e615d0ad09d1b30a14b0e9339e92257ec834cd","modified":1574553278000},{"_id":"source/_posts/ssh/2.png","hash":"092e94298257c9f81d4b027329e21ad7dbe93dc4","modified":1574553278000},{"_id":"source/_posts/从URL到页面展现/1.png","hash":"95e80a3eff7f6df44fb0847a2f1e4a4ff89c3c5c","modified":1574553278000},{"_id":"source/_posts/ssh/6.png","hash":"e983ec151f2436d89752117faa930a1f23a3fd0a","modified":1574553278000},{"_id":"source/_posts/从URL到页面展现/20181110.png","hash":"e3b35d137ca2d6c4b9d458de211476b24d54a591","modified":1574553278000},{"_id":"source/_posts/从URL到页面展现/3.png","hash":"dea03b403f6605908f8ae65b84143f7c9f013060","modified":1574553278000},{"_id":"source/_posts/关于LocalStorage-cookie和session/1.png","hash":"b7898d0e42d5601bb786dfe5fbdfcc417f6c9bb5","modified":1574553278000},{"_id":"source/_posts/关于LocalStorage-cookie和session/6.png","hash":"0b64c20c4b613f674102d0abd96104191eb4b097","modified":1574553278000},{"_id":"source/_posts/系统式样统一页面的制作/3.png","hash":"e50dc141993b9f6f4e0284c26f86d255f1420ac0","modified":1574553278000},{"_id":"source/_posts/CreatePhpEnvironmentInDocker/1.png","hash":"23e4325be92466b48b2df20ed89cc16c2367c228","modified":1574553278000},{"_id":"source/_posts/CSS选择器类型与用法/2.png","hash":"d5417e0f907d6619e9d013fb1cdfe9bb9a5ef73f","modified":1574553278000},{"_id":"source/_posts/Elisabeth/4.jpg","hash":"90bbd9f73b71ee846c898f23027e39a767bad01b","modified":1574553278000},{"_id":"source/_posts/createDockerModx/4.jpg","hash":"9988b5d49b2236176db879af9260001a65cdbff1","modified":1574553278000},{"_id":"source/_posts/关于浏览器渲染机制/2.png","hash":"39df90195904b13a6c9256c339ffa2a7320ebe16","modified":1574553278000},{"_id":"source/_posts/关于浏览器渲染机制/1.png","hash":"8b9df510a2afdd5a957544d1c6f2aa48cc26b506","modified":1574553278000},{"_id":"source/_posts/关于浏览器渲染机制/3.png","hash":"a11e50676ed5d622450364b115768ce4f99a1995","modified":1574553278000},{"_id":"source/_posts/CSRF攻击及防范措施/2.png","hash":"fdb994285e62f91b482201a635673411402da1e6","modified":1574553278000},{"_id":"source/_posts/aboutnpm/1.png","hash":"416702630754dffd9d0e40e8b44858df0135f5ff","modified":1574553278000},{"_id":"source/_posts/createDockerModx/5.jpg","hash":"da8a7ab63641050ae504bba57f4c39037ced3bb6","modified":1574553278000},{"_id":"source/_posts/createDockerModx/6.png","hash":"749fcbb35b634c97e9ba451ddeb6c2771838fe77","modified":1574553278000},{"_id":"source/_posts/关于CSS浮动/5.png","hash":"2ed19ef0790c54cf0005f3411397c4a1a8512754","modified":1574553278000},{"_id":"source/_posts/关于LocalStorage-cookie和session/4.png","hash":"79d93514255beaa640d37699d9eabad2dda36f1f","modified":1574553278000},{"_id":"source/_posts/关于前端mock数据/2.png","hash":"5606fba02ab3150e1e2b71b0a2c1e1887dbbc8e9","modified":1574553278000},{"_id":"source/_posts/CSRF攻击及防范措施/3.png","hash":"41c0f1a16eb77f943c3325f7bfbae310f34d1a06","modified":1574553278000},{"_id":"source/_posts/aboutnpm/3.png","hash":"02f8fae0f839620fcbf64adbf2ad431cb49bd77a","modified":1574553278000},{"_id":"source/_posts/ssh/3.png","hash":"b6ec5c222efe872622dab372a5064df3c9e76031","modified":1574553278000},{"_id":"source/_posts/关于CSS浮动/1.png","hash":"709955e1941c97a9e6d20e692673c30ebd1e63f3","modified":1574553278000},{"_id":"source/_posts/关于CSS浮动/4.png","hash":"b7e33a26d7a6789b54617da5a4fe3a59053ababd","modified":1574553278000},{"_id":"source/_posts/关于LocalStorage-cookie和session/5.png","hash":"4aec56bec8d965e94d0b7b318cf0109122899bcb","modified":1574553278000},{"_id":"source/_posts/关于前端mock数据/3.png","hash":"ed0bbd6e15d8366883a3348b58fbc2dd5afb4a09","modified":1574553278000},{"_id":"source/_posts/系统式样统一页面的制作/6.png","hash":"a266e9faf8964b736f394ca86f0e23827e024102","modified":1574553278000},{"_id":"source/_posts/createDockerModx/1.png","hash":"9d9a97dd7e5879719fd014e7731b4f06f7228a57","modified":1574553278000},{"_id":"source/_posts/aboutnpm/5.png","hash":"bf93340933e8164c22cf1ec9c3929f62ec596a0c","modified":1574553278000},{"_id":"source/_posts/createDockerModx/2.png","hash":"e2502e75ff60cbb05c587de156a13c67531be0f4","modified":1574553278000},{"_id":"source/_posts/createDockerModx/8.png","hash":"f7d7e9165884d00235065d507940e661bef4ed43","modified":1574553278000},{"_id":"source/_posts/iTerm2/9.png","hash":"8f9d2347016053608ae5d9cb9a05128f855a59ee","modified":1574553278000},{"_id":"source/_posts/超简单用hexo和github搭建个人博客/5.png","hash":"26dad5b450942dc46d95143adc545018dad77b1a","modified":1574553278000},{"_id":"source/_posts/Elisabeth/7.jpg","hash":"d40ace5a8003998b4136411f76308dfb4ddf0502","modified":1574553278000},{"_id":"source/_posts/Elisabeth/9.jpg","hash":"39505e0fc310c82bd926c6559aa3ed6ef754e668","modified":1574553278000},{"_id":"source/_posts/aboutnpm/4.png","hash":"5f474443996a1377943ff45a42f3f8b168e2b840","modified":1574553278000},{"_id":"source/_posts/createDockerModx/11.png","hash":"c09b62e422a1a9e9b810bb7ecd26549e1add1453","modified":1574553278000},{"_id":"source/_posts/createDockerModx/9.png","hash":"ff06a2e9b160b09838e65e3810a61617b70a24a5","modified":1574553278000},{"_id":"source/_posts/关于CSS浮动/3.png","hash":"5e5e4d631b38430041c33a5e9b8603c8fcf81ba4","modified":1574553278000},{"_id":"source/_posts/关于LocalStorage-cookie和session/3.png","hash":"30a1421c6c8493e464377a1409387fa0d1f3814b","modified":1574553278000},{"_id":"source/_posts/Elisabeth/3.jpg","hash":"4c0b5f95e690e418d9374b93deef880dc429f75e","modified":1574553278000},{"_id":"source/_posts/关于CSS浮动/2.png","hash":"0e2e87f94d09c3c65cf724dcd602f795e85bc614","modified":1574553278000},{"_id":"source/_posts/ssh/5.png","hash":"82ed931322c6b14a8a7bee91300b960d6c6fef9f","modified":1574553278000},{"_id":"source/_posts/系统式样统一页面的制作/1.png","hash":"2fee7ac95e2f26a4fd3d38f0ff6b25b157762c97","modified":1574553278000},{"_id":"source/_posts/CSS选择器类型与用法/1.png","hash":"6695d27f0b091f3ac04c2b035c88df70d2260a89","modified":1574553278000},{"_id":"source/_posts/Elisabeth/10.jpg","hash":"e2b8cc71cccddd1e69040906a745f0de19f3b80a","modified":1574553278000},{"_id":"source/_posts/Elisabeth/11.jpg","hash":"abfb291129d41a40dc6ff548300444525d7be4f2","modified":1574553278000},{"_id":"source/_posts/MissSaigon/11.jpg","hash":"ed4652857e530004b8e4e99a2cc37bb557708e48","modified":1574553278000},{"_id":"source/_posts/dockercommand/1.png","hash":"69764b934cb3d236798ba4adb680a3e6b6ec75af","modified":1574553278000},{"_id":"source/_posts/Elisabeth/8.jpg","hash":"2114cba6c944a967b2052edfe0a8d0efe6eef694","modified":1574553278000},{"_id":"source/_posts/MissSaigon/13.jpg","hash":"627de43263a73c9135ee3f2d9695b67f309fcd90","modified":1574553278000},{"_id":"source/_posts/MissSaigon/18.jpg","hash":"a74b40afa49ba485c3c7fbf59a3c3579c75da8da","modified":1574553278000},{"_id":"source/_posts/createDockerModx/4.png","hash":"7208b5fd47652ed9f6379816537d949b3d922c0b","modified":1574553278000},{"_id":"source/_posts/Elisabeth/2.jpg","hash":"6ac454000cd75fbe19025f75266fdc5608ab134a","modified":1574553278000},{"_id":"source/_posts/MissSaigon/10.jpg","hash":"e5a8e5b89c197b2a147cde19e69bb9eae07e0df6","modified":1574553278000},{"_id":"source/_posts/MissSaigon/14.jpg","hash":"e88c0f507656c35388873939e7fed794c7b443e6","modified":1574553278000},{"_id":"source/_posts/MissSaigon/2.jpg","hash":"15e60a850b7d9ad5aa0d7ff76b6f10759511d6bc","modified":1574553278000},{"_id":"source/_posts/createDockerModx/3.png","hash":"ce1439c227c1fe5f50c817c17c97f94775a7bc4c","modified":1574553278000},{"_id":"source/_posts/ssh/4.png","hash":"14083c6fc7765eccc57143763d4477ea8e72bbdd","modified":1574553278000},{"_id":"source/_posts/实现一个翻转注册登陆页面/1.png","hash":"c3c0242507e658959f67c7dbfb7c8bc347d57570","modified":1574553278000},{"_id":"source/_posts/Elisabeth/12.jpg","hash":"01f97b3ce2a1da4e6d46bcf18b8eac209042523b","modified":1574553278000},{"_id":"source/_posts/Elisabeth/6.jpg","hash":"ae8365c5e4a6eb5a0f401704c06ef657138dccea","modified":1574553278000},{"_id":"source/_posts/Elisabeth/1.jpg","hash":"6b8f50222f7c7f77ab5963da4a67fb3f52bf34b8","modified":1574553278000},{"_id":"source/_posts/createDockerModx/6.jpg","hash":"c83df99071442f8353ab5fd46ddf03f52054e41c","modified":1574553278000},{"_id":"source/_posts/MissSaigon/15.jpg","hash":"375fb708b4b1188b9e9991a57be391cf7d3a84d7","modified":1574553278000},{"_id":"source/_posts/MissSaigon/16.jpg","hash":"09bfcec27b7ca6e8dfbb22feeb55d1abae8bbe42","modified":1574553278000},{"_id":"source/_posts/MissSaigon/4.jpg","hash":"e2aa13b17c71630fe7826c974d734d7eab9cd38a","modified":1574553278000},{"_id":"source/_posts/ssh/7.png","hash":"faa183d93ee3b0f7538d850bcbd4ff3fcfe43d6f","modified":1574553278000},{"_id":"source/_posts/MissSaigon/6.jpg","hash":"db6b139e03f858b15b4c8b0019394e8ed35c354b","modified":1574553278000},{"_id":"source/_posts/MissSaigon/8.jpg","hash":"a098c2b4de9af6fdea9a419ff8c409f8cdb8d8e1","modified":1574553278000},{"_id":"source/_posts/MissSaigon/9.jpg","hash":"d209cd882e06d056754baaf35e3bbe828e5c7d0e","modified":1574553278000},{"_id":"source/_posts/createDockerModx/7.png","hash":"c310f9ab41abd56601de4441dfdc2050aee76c55","modified":1574553278000},{"_id":"source/_posts/MissSaigon/1.jpg","hash":"ab9b56b6950f352a7621d2b4c3da4216c0d2020f","modified":1574553278000},{"_id":"source/_posts/MissSaigon/12.jpg","hash":"c6d0dcb56398d5ac556f34e4edbd373a46ee00b5","modified":1574553278000},{"_id":"source/_posts/MissSaigon/17.jpg","hash":"3c42bb1c55668830e21485833e9fd8c6f2bcdc4f","modified":1574553278000},{"_id":"source/_posts/MissSaigon/3.jpg","hash":"a03223b1438ee21a34975de6d948ea2ffe6b77a1","modified":1574553278000},{"_id":"source/_posts/UNIVERSE/3.jpg","hash":"729f68dff22655b20f2cdef5ce880b8828d0e305","modified":1574553278000},{"_id":"source/_posts/MissSaigon/7.jpg","hash":"e7051f081d2e31046d114e62d338d8a5eb3f7eac","modified":1574553278000},{"_id":"source/_posts/MissSaigon/5.jpg","hash":"527302c0051154bf02ae2c7b9da3b60a16170705","modified":1574553278000},{"_id":"source/_posts/超简单用hexo和github搭建个人博客/4.png","hash":"b5f14bc704b860da46869e5be0f6a9ca7c0d2e28","modified":1574553278000},{"_id":"source/_posts/UNIVERSE/4.jpg","hash":"10e897cf897bc1218f99112dc0afa50d4aa9eb21","modified":1574553278000},{"_id":"source/_posts/CSRF攻击及防范措施/1.png","hash":"42d578435dd8c0f499e859b716e7c0d2fade8d2c","modified":1574553278000},{"_id":"source/_posts/UNIVERSE/2.jpg","hash":"ac1b08096828f7fc471524e05182bb4f572b1acd","modified":1574553278000},{"_id":"source/_posts/Extension/7.gif","hash":"f25775215f25d34dd405ed7db4edcceb87d593b1","modified":1574553278000},{"_id":"source/_posts/Extension/4.gif","hash":"f252e02bd4e6e9692b984d66a08f20cfc9bbe8c6","modified":1574553278000},{"_id":"source/_posts/Extension/1.gif","hash":"6ebd7bbccb6bf0009ae6e511ef919f2a1a98219a","modified":1574553278000},{"_id":"source/_posts/Extension/2.gif","hash":"15bc06e22a2d228865d1eb3ab51819f0b518d7fe","modified":1574553278000},{"_id":"public/atom.xml","hash":"b2def7908ce47f50d1ded79fd3be9c8918afb0c5","modified":1574951157594},{"_id":"public/baidusitemap.xml","hash":"5a8177038583017c90e1199c524cd91748cdd326","modified":1574951157597},{"_id":"public/sitemap.xml","hash":"8f5e19470e83674f2afc72c2e5cd7d9e74ee70a6","modified":1574951180185},{"_id":"public/archives/page/6/index.html","hash":"8462e6f1063b4aa861695863acd188417e392806","modified":1574951160033},{"_id":"public/archives/2018/10/index.html","hash":"e2b1f61f6a06ff7f8533183d1a3407034c6fd690","modified":1574951160034},{"_id":"public/archives/2018/11/index.html","hash":"d70920fbc526b21e91e90fec1e5ba82a150b4668","modified":1574951160034},{"_id":"public/archives/2018/12/index.html","hash":"f0b1c1e1bd14513f23aec8d0c33725f1422c91f0","modified":1574951160035},{"_id":"public/archives/2019/page/5/index.html","hash":"0865c7eb7ef52d4ad9d93a919166da2a4e59b69c","modified":1574951160035},{"_id":"public/archives/2019/01/index.html","hash":"0f38648f3eabf1e1311fa61649430f3e59297194","modified":1574951160035},{"_id":"public/archives/2019/02/index.html","hash":"c2df2d2a1532d89e11f3a5429f2db149f496168b","modified":1574951160035},{"_id":"public/archives/2019/03/index.html","hash":"dabab7a5f6b53c1e74d6b47e5c2d3217b811a466","modified":1574951160036},{"_id":"public/archives/2019/07/index.html","hash":"decd2a253ae59fd0cf3c7cfd3f2c1dfa449e1ad7","modified":1574951160036},{"_id":"public/archives/2019/09/index.html","hash":"0d720179448b7b40c88bab14115c77d00a2785b3","modified":1574951160037},{"_id":"public/page/6/index.html","hash":"4d7928517eff9f3f9f4b320369cf2ab340fa2788","modified":1574951160037},{"_id":"public/tags/CMS/index.html","hash":"3a0295569fedcc16d920ee4e229650809773a866","modified":1574951160038},{"_id":"public/tags/CSRF/index.html","hash":"1730ce47e05a391517700e76c5b1ca0ac04c9fda","modified":1574951160038},{"_id":"public/tags/docker/index.html","hash":"b34ec51f4cce8009be6874ad12529be1b0a76514","modified":1574951160044},{"_id":"public/tags/php/index.html","hash":"9585f4cd923d4aff6e3d347ec0e48703c4c52273","modified":1574951160044},{"_id":"public/tags/mysql/index.html","hash":"55074f2bb4bc498cb2427d3cc5707c0178146963","modified":1574951160045},{"_id":"public/tags/nginx/index.html","hash":"fc88ed5fb0a2cbce28980110fa41d4042fe23acb","modified":1574951160045},{"_id":"public/tags/musical/index.html","hash":"0a9989921f0cad96833fc7419d8ca9b76d19b96d","modified":1574951160045},{"_id":"public/tags/Elisabeth/index.html","hash":"bf4122f0dc7ea28ba0109f43984ca901f177ba33","modified":1574951160045},{"_id":"public/tags/setting/index.html","hash":"3f0926eeaeae2ef789390c783772b5d837d9246d","modified":1574951160046},{"_id":"public/tags/extension/index.html","hash":"fbd1d3084fd573b71fc7f0d8d120ad85565fe25f","modified":1574951160046},{"_id":"public/tags/VSCode/index.html","hash":"5d02755a704d0c10bdf000d60d864817cd124289","modified":1574951160046},{"_id":"public/tags/Get/index.html","hash":"cd9b622bad24898dae9c172204ea8866fb6c7270","modified":1574951160047},{"_id":"public/tags/Post/index.html","hash":"e69bf7144079c725003c3a3f0df8668b58cc67b1","modified":1574951160047},{"_id":"public/tags/Git/index.html","hash":"defa97304a6962b1870e7265ebe7396f415d66bd","modified":1574951160047},{"_id":"public/tags/tip/index.html","hash":"17b18ca9c29018331bee1bf7dd689191a654be6b","modified":1574951160047},{"_id":"public/tags/homebrew/index.html","hash":"4f3277c811570806f168248e635ae385c9a22cf2","modified":1574951160048},{"_id":"public/tags/IconFont/index.html","hash":"369f8acb1d342abcfcb69412400b5a7c556057d6","modified":1574951160048},{"_id":"public/tags/react/index.html","hash":"ad64ae9f9b33ff3142833d58b788b96702cb72bb","modified":1574951160048},{"_id":"public/tags/github-pages/index.html","hash":"70fc9c7b2303a98177a9d67acc953e39d7fc4047","modified":1574951160048},{"_id":"public/tags/React/index.html","hash":"6536af1872b9da94275a162a9695049aa086ced3","modified":1574951160049},{"_id":"public/tags/Virtual-Dom/index.html","hash":"13c2b84d45d607fc749c79807f1cf315839a0447","modified":1574951160049},{"_id":"public/tags/JSX/index.html","hash":"d76298249072166d80d9f39af9a8af26221c7db2","modified":1574951160049},{"_id":"public/tags/webpack/index.html","hash":"fa40a8767143e1797660404e3e82d9e0d567711e","modified":1574951160049},{"_id":"public/tags/getting-started/index.html","hash":"85f0f712b35842cc07c4e3eb7f34ffbd150360fe","modified":1574951160049},{"_id":"public/tags/Documentary-film/index.html","hash":"da4ead8a649bccf9b32c85b4c8f65416c8264bf6","modified":1574951160049},{"_id":"public/tags/Dolphin-hunting/index.html","hash":"ddceaea84575a66c29e4d7d3c30992a2ca6d7f1a","modified":1574951160050},{"_id":"public/tags/Taiji/index.html","hash":"4c4d764cb0b25269e87185ae4ac6fad6b151c1fc","modified":1574951160050},{"_id":"public/tags/movie/index.html","hash":"6699eca8bfab3f800c39f100311292ae0c2ced8c","modified":1574951160050},{"_id":"public/tags/universe/index.html","hash":"25c0b5fe4a4b4aab3b0c0e5ccd3394eef37b6ae2","modified":1574951160050},{"_id":"public/tags/Npm/index.html","hash":"399816aacdc1dd4377807b2bee0876e671a7dcaf","modified":1574951160050},{"_id":"public/tags/Yarn/index.html","hash":"1a90dd30662898bbeac4a7b2b554fea70abb8919","modified":1574951160051},{"_id":"public/tags/Modx/index.html","hash":"2d5ae2d5deead1ba424d2feaad8ff733d005fb80","modified":1574951160051},{"_id":"public/tags/Modx-docker/index.html","hash":"03cc83cbf6fe579b52efb74173406b3ad9e369a3","modified":1574951160051},{"_id":"public/tags/Command/index.html","hash":"934d7c63cd5eb7d76b3f6fb71f30225252779b62","modified":1574951160051},{"_id":"public/tags/iTerm2/index.html","hash":"744ef4883326a2f09369aaeddc55905ca582058e","modified":1574951160051},{"_id":"public/tags/powerlevel9k/index.html","hash":"9ef6281d00280061f526b5c005d8edf3d2f58efe","modified":1574951160052},{"_id":"public/tags/SSH/index.html","hash":"35e5f3e2ceef5c865e064725966c1bdf4ce20bbc","modified":1574951160052},{"_id":"public/tags/Cyberduck/index.html","hash":"fff7b8ded93d3cb0a36a4f490dbf5fd6be941003","modified":1574951160052},{"_id":"public/tags/FTP/index.html","hash":"d7fa43c0f472090373557c85e9484907c0ba175f","modified":1574951160053},{"_id":"public/tags/SFTP/index.html","hash":"363738bed4dd4ffc6037dea971d9bbdc94049686","modified":1574951160053},{"_id":"public/tags/ajax/index.html","hash":"b9f785b4f4818aad98397b143eac0a07203b65a9","modified":1574951160053},{"_id":"public/tags/URL/index.html","hash":"1fecaa2ab542b7007a201ec5c2075feba6139e5e","modified":1574951160053},{"_id":"public/tags/BFC/index.html","hash":"5d4537224d080c5ebd371d59206e4cc69b8d251c","modified":1574951160054},{"_id":"public/tags/BOM/index.html","hash":"ab3593db822fc63b58afd8e5966f2e2364088a30","modified":1574951160054},{"_id":"public/tags/Session/index.html","hash":"41defe79cc904ba7c30b6e6ad0a4f182eb834622","modified":1574951160054},{"_id":"public/tags/LocalStorage/index.html","hash":"7eca59104d4b701c19985b12cfabc80d4c1cfa2a","modified":1574951160054},{"_id":"public/tags/Cookie/index.html","hash":"6d667f23b18da2126143295cc0dc00f1f41d2367","modified":1574951160054},{"_id":"public/tags/Event-Flow/index.html","hash":"249f28628c93b2df854310afcd72a7dc8b9a9ad0","modified":1574951160054},{"_id":"public/tags/Event-Capturing/index.html","hash":"bdb97413849710826d565fd81a590933f38a11b8","modified":1574951160055},{"_id":"public/tags/Dubbed-Bubbling/index.html","hash":"dfd09b0560b5b4c6f376e464ad6dc2f1d8a40d29","modified":1574951160055},{"_id":"public/tags/Mock/index.html","hash":"0b90378830ff56a3691edd9352da8bd3b6a66d9b","modified":1574951160055},{"_id":"public/tags/CORS/index.html","hash":"3ec02f876b78c073e74b3b5d23b099e4af38eea9","modified":1574951160055},{"_id":"public/tags/Browser/index.html","hash":"53cebe2cd9ba06371917a06d003181317dda932a","modified":1574951160055},{"_id":"public/tags/Closure/index.html","hash":"52c9c0e1cc16b198c81d08fe97ea8ae5ebcf1c7a","modified":1574951160056},{"_id":"public/tags/Redux/index.html","hash":"39cf64b6b0dede4649c25d464e120d4d778da262","modified":1574951160056},{"_id":"public/tags/hexo/index.html","hash":"63594b4535b46e08ec7a44fe3d4ccb19400d260e","modified":1574951160057},{"_id":"public/tags/blog/index.html","hash":"b2bf6ebd4b82effd30b19cbc53315f4f8962fa33","modified":1574951160057},{"_id":"public/tags/github/index.html","hash":"c9adb553e0a242dffa52e4688ff7a31bda3f99c2","modified":1574951160061},{"_id":"public/tags/Miss-Saigon/index.html","hash":"2e8f45d4fcb95a6fc90c686e7b347a15806c25d1","modified":1574951160061},{"_id":"public/all-categories/index.html","hash":"a02c5802aef7d11fef56f1b8bb18b22e8537b79b","modified":1574951160061},{"_id":"public/all-tags/index.html","hash":"9ef470896380279335deba3659d1b332d483dcb7","modified":1574951160061},{"_id":"public/all-archives/index.html","hash":"978bc5589ea893205521d762c52ef12ba49526ae","modified":1574951160062},{"_id":"public/2019/11/24/aboutnpm/index.html","hash":"b7228bf5b55d992ed989663030d96fd34da2dcbd","modified":1574951160062},{"_id":"public/2019/11/11/CreatePhpEnvironmentInDocker/index.html","hash":"424d78a2014ba425e0657e6391f3aa1fe002342b","modified":1574951160062},{"_id":"public/2019/11/11/ssh/index.html","hash":"abdf4ab830ac5748308a2f8dd942806ab885b2f3","modified":1574951160063},{"_id":"public/2019/11/07/dockercommand/index.html","hash":"f829e9f882374cf97923b8913fcab90da8b71ad0","modified":1574951160063},{"_id":"public/2019/11/02/AboutCMS/index.html","hash":"0bc351eff6b4715c7fe25a4010b60103e83cd488","modified":1574951160063},{"_id":"public/2019/10/31/createDockerModx/index.html","hash":"fcca5ca1c7e4b9fa2ac643d9d40f040c3698254f","modified":1574951160063},{"_id":"public/2019/10/20/MissSaigon/index.html","hash":"16f9db40eaff73b1fbc182130ffe4c5e4f64efb3","modified":1574951160064},{"_id":"public/2019/10/06/iTerm2/index.html","hash":"5b293c0d8d28a051c6db7f59b209a8fd945c0c12","modified":1574951160064},{"_id":"public/2019/10/05/Extension/index.html","hash":"ff77bb0a0b77c7b246669170f014f0ce7d3290c7","modified":1574951160064},{"_id":"public/2019/09/30/Pages/index.html","hash":"31101429b2d4e55c583a759fd6549caa8899fa50","modified":1574951160066},{"_id":"public/2019/09/29/Homebrew/index.html","hash":"5d52e407ef15c9a2e426098a87ff1135f5b3d6cb","modified":1574951160066},{"_id":"public/2019/09/26/Elisabeth/index.html","hash":"e52a58db1f79671d8ee7fb5a49bffc37e3081b56","modified":1574951160067},{"_id":"public/2019/09/14/Started/index.html","hash":"0bfd113255c6a4c428a893c27d62bbd27b672f6c","modified":1574951160067},{"_id":"public/2019/08/30/Ajax/index.html","hash":"6372d55282c599291f15bec5ed66618be3243061","modified":1574951160067},{"_id":"public/2019/08/30/Animation/index.html","hash":"5329c4e8d6b46c3a307e83790b23f6746ccd2641","modified":1574951160067},{"_id":"public/2019/08/27/jQuery绑定事件/index.html","hash":"af9bf79702a7779daa201da457647b94339db27e","modified":1574951160068},{"_id":"public/2019/08/25/TheCove/index.html","hash":"fbc78b476cea476f3286002c49a3a1eebb02b489","modified":1574951160069},{"_id":"public/2019/08/17/UNIVERSE/index.html","hash":"18dd1018967943bc2cd4a79ed6a125d4dadeb077","modified":1574951160069},{"_id":"public/2019/07/16/API/index.html","hash":"80e7255a758001cb2dac2bcf5caa73462773580e","modified":1574951160070},{"_id":"public/2019/07/12/jQuery/index.html","hash":"b5f1fecee62c59dd070340ddbf2809f0bb4d39b6","modified":1574951160070},{"_id":"public/2019/07/04/React-Virtual-Dom/index.html","hash":"d118f5688e0c358ac2a21f8c9d0fcdaee3b7b6d9","modified":1574951160070},{"_id":"public/2019/06/23/FirstBlog/index.html","hash":"25e510ffcd6506da4346d6a442d15ac6003443f5","modified":1574951160070},{"_id":"public/2019/06/23/关于闭包/index.html","hash":"d3c94d73b7d9f5536f6996475ee775d4c24b900d","modified":1574951160071},{"_id":"public/2019/06/20/系统式样统一页面的制作/index.html","hash":"7757802144cbada0af677c52d1af81ed1112b6f7","modified":1574951160071},{"_id":"public/2019/06/10/关于js跨域及解决方法/index.html","hash":"0e100f7cd0f184aa052327216818cd6ee25a91b5","modified":1574951160071},{"_id":"public/2019/06/05/什么是ajax/index.html","hash":"d104674b99bced77544cbc4043af1e24f13b69f9","modified":1574951160071},{"_id":"public/2019/05/28/超简单用hexo和github搭建个人博客/index.html","hash":"68f25dce39573aa3499ebfa4c234860a5a0afd2a","modified":1574951160071},{"_id":"public/2019/05/21/关于前端mock数据/index.html","hash":"76cbf974ab6280cde3943b44ff6ec7cc6ad01efd","modified":1574951160071},{"_id":"public/2019/05/20/关于事件传播机制/index.html","hash":"ba9eaef2966e66f342c7aa05ac88b02bd9c63747","modified":1574951160071},{"_id":"public/2019/05/10/关于LocalStorage-cookie和session/index.html","hash":"4a210c949a1b02b501af2c5d33adb63d1c6bf67a","modified":1574951160072},{"_id":"public/2019/04/25/关于BOM对象/index.html","hash":"3135d07d065eb698caeb1a4c9d6b36409f8c559d","modified":1574951160072},{"_id":"public/2019/04/20/实现一个翻转注册登陆页面/index.html","hash":"5bb56c11891c69ae718405b18d300f8e1134edac","modified":1574951160072},{"_id":"public/2019/04/06/Docker环境下使用bake自动生成页面/index.html","hash":"bcf70b72c3fcc5e0a2b977a3c49af70df336112e","modified":1574951160072},{"_id":"public/2019/04/03/使用Docker进行Cakephp3开发环境搭建/index.html","hash":"ed5d4e976d9e0563ffefb61ef722c5c22f25a3f4","modified":1574951160072},{"_id":"public/2019/03/22/JS-DOM元素以及DOM元素操作常用API/index.html","hash":"08d3bd772450dd3bafa93410fd9c881055472511","modified":1574951160073},{"_id":"public/2019/03/16/JS正则表达式/index.html","hash":"3c3936f02fdd28d0bc973861a627bfff28e5af71","modified":1574951160073},{"_id":"public/2019/03/02/JS立即执行函数表达式/index.html","hash":"4c9b11becee4f36450a60fa9fa0839b06818d0f0","modified":1574951160073},{"_id":"public/2019/02/26/JS函数关于if-xx-和-a-b/index.html","hash":"efff4a0853a2c0a5333bedadb334344f2f0d2797","modified":1574951160073},{"_id":"public/2019/02/23/关于浏览器渲染机制/index.html","hash":"bc5f1684ee0c2d377ede24fd62fdae184be0942a","modified":1574951160073},{"_id":"public/2019/02/10/JS发展简史/index.html","hash":"ddf5c43e8adbb743c0f4be878ade338c5a4b447b","modified":1574951160073},{"_id":"public/2019/01/22/CSS编码规范/index.html","hash":"ba5b20301af88feeb47dfaded919398bdf9df4f7","modified":1574951160074},{"_id":"public/2019/01/16/关于BFC及外边距合并/index.html","hash":"cd94b2c15d471dd0051c668e1875dcd2922f32df","modified":1574951160074},{"_id":"public/2019/01/11/CSSTip/index.html","hash":"1e2ee994fe249bb1f50c13660af0b178fd2b5d8d","modified":1574951160074},{"_id":"public/2018/12/30/关于CSS浮动/index.html","hash":"4387a41e66dc5500bcd13eb29af5c4b5559169cb","modified":1574951160075},{"_id":"public/2018/12/28/IconFont/index.html","hash":"80f8617a4b4f2e32fe0d3a978b28b417129160d9","modified":1574951160075},{"_id":"public/2018/12/06/GitTip/index.html","hash":"71cbf669c06a92a99e301638071ccfe5fee40999","modified":1574951160076},{"_id":"public/2018/11/25/关于CSS继承/index.html","hash":"f45f70ec86c5cf185058e921474f65f62ea6a84b","modified":1574951160076},{"_id":"public/2018/11/15/CSS选择器类型与用法/index.html","hash":"856472fe1998375783913fd912190e145535e1c2","modified":1574951160076},{"_id":"public/2018/11/10/从URL到页面展现/index.html","hash":"933c405c3f65099e8fef45665315bd436fb74824","modified":1574951160076},{"_id":"public/2018/10/29/常见浏览器及浏览器内核/index.html","hash":"0c4861c4d6ebf47c3e6aa1481db1711212bc0791","modified":1574951160076},{"_id":"public/2018/10/25/Get和Post提交数据有什么区别/index.html","hash":"f365ff5373d5c1fe5fb53343b9be25700f22c509","modified":1574951160076},{"_id":"public/2018/10/14/CSRF攻击及防范措施/index.html","hash":"872f2080ee0460e06e76fb71c3d63925a60d1d1a","modified":1574951160076},{"_id":"public/archives/index.html","hash":"c50d8b601c1a39419341fbbd4b90854ec3aa7678","modified":1574951160076},{"_id":"public/archives/page/2/index.html","hash":"fddd9fe39e49eba58b54f80614f95b110b3745cd","modified":1574951160077},{"_id":"public/archives/page/3/index.html","hash":"e3dda05b489e0c4406875e1c21b0150ab2701f8f","modified":1574951160077},{"_id":"public/archives/page/4/index.html","hash":"dbe07d1e596630deed5cdb440c0eee5c53549682","modified":1574951160077},{"_id":"public/archives/page/5/index.html","hash":"6988b13840afaa665c219987ec422a723d7ca04a","modified":1574951160077},{"_id":"public/archives/2018/index.html","hash":"6e3a748151d1691025f6abe98119946f90607660","modified":1574951160077},{"_id":"public/archives/2019/index.html","hash":"a5591010041eb2857fe7986f071c1bcd218f0007","modified":1574951160077},{"_id":"public/archives/2019/page/2/index.html","hash":"7ee1738455782e357eeb7708e6e18de8d7b2c7a3","modified":1574951160078},{"_id":"public/archives/2019/page/3/index.html","hash":"4cac462d58c5c31aa43d25cfa2bb2603f585c236","modified":1574951160078},{"_id":"public/archives/2019/page/4/index.html","hash":"da9dade8f80c0bab1d228105410b73a104fe79e2","modified":1574951160078},{"_id":"public/archives/2019/04/index.html","hash":"39d62efb1fcfa0094f224be342c20baec8d417b3","modified":1574951160078},{"_id":"public/archives/2019/05/index.html","hash":"c83a7b4707e2f6ec369a29667fb219c6a841c3c0","modified":1574951160078},{"_id":"public/archives/2019/06/index.html","hash":"c4bb6b0d7efa3adebc3addebba1ef566c5029856","modified":1574951160079},{"_id":"public/archives/2019/08/index.html","hash":"d414ecf0b161a6042f5457230105a4b54a08d8cc","modified":1574951160079},{"_id":"public/archives/2019/10/index.html","hash":"46543c70efeafc4110fef630d26db452338e8854","modified":1574951160079},{"_id":"public/archives/2019/11/index.html","hash":"6e512601da9ca5d3bf7c89c7ee359c9b69d17558","modified":1574951160080},{"_id":"public/index.html","hash":"599f5908af36da14adf0ff923a0f74dc3f74a8f3","modified":1574951160080},{"_id":"public/page/2/index.html","hash":"a913ecacd6b7459b3960dd695b8b9c736805bdf9","modified":1574951160080},{"_id":"public/page/3/index.html","hash":"958d3ddeb7b298b1e9db527b0365fe2702bcb964","modified":1574951160081},{"_id":"public/page/4/index.html","hash":"6b601e14b0a5a42a72c2f04a3cb7d68b6338516c","modified":1574951160081},{"_id":"public/page/5/index.html","hash":"5a0e17e2118c137114ce5aa89e1721db89166847","modified":1574951160081},{"_id":"public/tags/jQuery/index.html","hash":"c0a1e3e5c2a41e520b4cc6f5be7f87745f800eee","modified":1574951160081},{"_id":"public/tags/CSS/index.html","hash":"9b0aedaca807afd6203ba873a8986ce6348d36c1","modified":1574951160081},{"_id":"public/tags/JS/index.html","hash":"49e3053683df26f3207f543056ebf63730e7687c","modified":1574951160081},{"_id":"public/tags/Docker/index.html","hash":"a98b5809133866c67ce406adbb38d9bbd02dd28d","modified":1574951160082},{"_id":"public/categories/Back-end-Knowledge/index.html","hash":"c4c4289818234b7308ff8b978bf8d8e7f13be048","modified":1574951160082},{"_id":"public/categories/Front-end-Knowledge/index.html","hash":"106cd9408fa662360358025ca6b994758a512707","modified":1574951160082},{"_id":"public/categories/Front-end-Knowledge/page/2/index.html","hash":"e9de1c62393915e9594307210cd536ab38c32dc1","modified":1574951160083},{"_id":"public/categories/Front-end-Knowledge/page/3/index.html","hash":"f9676d7ba0addeaa03db06962909911d3d9f2476","modified":1574951160083},{"_id":"public/categories/Front-end-Knowledge/page/4/index.html","hash":"9e99c7c4e3bb281fe6ea22cf9866c9269e0329f3","modified":1574951160083},{"_id":"public/categories/About-Me/index.html","hash":"e76d1e9ea981e5325a5f157edbeb899df1cd9a64","modified":1574951160083},{"_id":"public/categories/System-Setting/index.html","hash":"169d3b36aac8ee4aa050ff391c50cb148aa05bda","modified":1574951160083},{"_id":"public/2019/11/02/AboutCMS/20191102.png","hash":"fe22874c6c7376dcdbc05510d2d363de101c19f0","modified":1574951160205},{"_id":"public/2019/08/30/Ajax/20190830.png","hash":"82fc1789e9eb25f5f027e3795de4fa02f4f47f0b","modified":1574951160206},{"_id":"public/2019/08/30/Animation/20190830.png","hash":"89d3fd35ed114d4364e0666e89666b0137611d21","modified":1574951160206},{"_id":"public/2018/10/25/Get和Post提交数据有什么区别/20181025.png","hash":"1e58d464417a97a1b27334a854113e64b2a36718","modified":1574951160206},{"_id":"public/2019/09/29/Homebrew/20190929.png","hash":"8ae4da23beb231972ee8ba1a141ae2bb99bfa369","modified":1574951160206},{"_id":"public/2019/02/26/JS函数关于if-xx-和-a-b/20190226.png","hash":"a7d62cae283abf8d95b7eb1d4c0588f20d43486b","modified":1574951160207},{"_id":"public/2019/02/10/JS发展简史/20190210.png","hash":"f3b6d870de9705132e9073e26f999e074c80d615","modified":1574951160207},{"_id":"public/2019/03/02/JS立即执行函数表达式/20190302.jpg","hash":"5a1311f00994eb233d31dd9f88215096acaeb8be","modified":1574951160207},{"_id":"public/2019/03/16/JS正则表达式/20190316.png","hash":"7b166a7fe939f0b91ff9833dc9127daed7631772","modified":1574951160207},{"_id":"public/2019/09/14/Started/20190914.png","hash":"d2c98137c20290d2dbae271d3b316e5eb57bd211","modified":1574951160207},{"_id":"public/2019/04/25/关于BOM对象/20190425.png","hash":"06139948756a52a898e5f1a094d19f9d7f1ccafb","modified":1574951160207},{"_id":"public/2019/06/05/什么是ajax/20190605.png","hash":"e1be8b2e968642b3b1f8676de301c2bbc60fae36","modified":1574951160207},{"_id":"public/2019/08/27/jQuery绑定事件/20190827.jpg","hash":"d9fd6399a86cb16765a5ceda32ec21397696a232","modified":1574951160207},{"_id":"public/2018/11/25/关于CSS继承/20181125.png","hash":"79d97830d1cf59b33d5ef6a499d9918285fffaa5","modified":1574951160208},{"_id":"public/2019/06/10/关于js跨域及解决方法/20190610.png","hash":"3fca8bd73c4ce9a04d8f8901c73c6046c1b9d709","modified":1574951160208},{"_id":"public/2019/06/23/关于闭包/20190623.jpg","hash":"f9616a17a58d301dfa653ead23546d0952890342","modified":1574951160208},{"_id":"public/2019/03/22/JS-DOM元素以及DOM元素操作常用API/20190322.png","hash":"bce03175c9c0bd825ddf8d01c2b3fb0b22e25cb4","modified":1574951160208},{"_id":"public/2019/11/07/dockercommand/20191107.png","hash":"f9b77c076fea15225317daa7a63300ef1f0d7aa7","modified":1574951160208},{"_id":"public/2018/11/15/CSS选择器类型与用法/20181115.png","hash":"84f44682a7608720e799a2b162aca97720057362","modified":1574951160208},{"_id":"public/2019/11/11/CreatePhpEnvironmentInDocker/20191111.png","hash":"8cd58917accb318825ac1a191d64a1b0e6280807","modified":1574951160208},{"_id":"public/2018/10/14/CSRF攻击及防范措施/20181014.png","hash":"0bbd6f2509fb5ef68c0428b0569f90855d3137ef","modified":1574951160208},{"_id":"public/2019/09/30/Pages/20190930.png","hash":"e93007fce3635463d0d0e00242748167d9ce1670","modified":1574951160208},{"_id":"public/2019/07/04/React-Virtual-Dom/20190704.png","hash":"cf6c71da1975827b019a9d51aac043a1f0bbbc6e","modified":1574951160208},{"_id":"public/2019/08/25/TheCove/1.jpg","hash":"d1c047eecbbaea32bd206a48c401e8295210991a","modified":1574951160208},{"_id":"public/2019/08/25/TheCove/2.jpg","hash":"c957235c8e00d0d9b15a9a273bd53f70f22d409c","modified":1574951160209},{"_id":"public/2019/08/25/TheCove/4.jpg","hash":"124147692f9af1a67838739c4f4f121ef2af2251","modified":1574951160209},{"_id":"public/2019/08/17/UNIVERSE/1.jpg","hash":"d87bbe45ac1cb33ec6b3051c8b1453c0e265c0ac","modified":1574951160209},{"_id":"public/2019/05/21/关于前端mock数据/20190521.png","hash":"98c34ddce3e8e1cfffcb8cf5e333c82600b49840","modified":1574951160209},{"_id":"public/2019/02/23/关于浏览器渲染机制/20190223.jpg","hash":"0486e963e7bd5effe97b2327e3abc75b907d14f9","modified":1574951160209},{"_id":"public/2019/05/20/关于事件传播机制/1.png","hash":"4b6ed13b6f8c528e1cb278d39eeef656f822d254","modified":1574951160209},{"_id":"public/2019/05/20/关于事件传播机制/2.png","hash":"998a31719aec73c1abe7aeaa2eac4d4ae5a3f122","modified":1574951160209},{"_id":"public/2019/05/20/关于事件传播机制/20190520.jpg","hash":"f680925479656c532dae6bffdb314b4395df9bf3","modified":1574951160209},{"_id":"public/2019/05/20/关于事件传播机制/3.png","hash":"bbeb7a8d7725dfa625afae3beb9838ca09d176be","modified":1574951160209},{"_id":"public/2019/06/23/FirstBlog/cat1.jpg","hash":"a544215f5b171e6bf0517a637532d3137054cd9d","modified":1574951160209},{"_id":"public/2019/06/23/FirstBlog/cat2.jpg","hash":"9209c3ad229eeee6f3b63e90ca9f44bb33141a76","modified":1574951160209},{"_id":"public/2019/06/23/FirstBlog/cat4.jpg","hash":"5425a3b41a2e43b80bb3b182df1c6d10def3f745","modified":1574951160209},{"_id":"public/2019/06/23/FirstBlog/cat5.jpg","hash":"0734be57bb09963c62275895912c755c6e010838","modified":1574951160210},{"_id":"public/2019/06/23/FirstBlog/tokyo.jpg","hash":"cb2164cd18edd876cbdd7457a597dc14232050d9","modified":1574951160210},{"_id":"public/2018/12/28/IconFont/20181228.jpg","hash":"d94f1fc76e7e8e5a873bb1d98c837fdad32fcd0d","modified":1574951160210},{"_id":"public/2018/12/28/IconFont/2.png","hash":"3ef139cc4b58a9314cb2bc29b11637ccf0365c9d","modified":1574951160210},{"_id":"public/2019/11/24/aboutnpm/20191124.png","hash":"9744258b5c413d764bca03d7c00d8cc7d1320b40","modified":1574951160210},{"_id":"public/2018/12/30/关于CSS浮动/20181230.png","hash":"c92c91933d0f74a2e2e4a51183ec901aee152a1a","modified":1574951160210},{"_id":"public/2019/05/28/超简单用hexo和github搭建个人博客/20190528.jpg","hash":"7bc820e50ed0b703eeda4a541cf60fada6176313","modified":1574951160210},{"_id":"public/2019/01/16/关于BFC及外边距合并/1.png","hash":"28ccff450aa77ce4d4728a4daac997ce6089814f","modified":1574951160211},{"_id":"public/2019/01/16/关于BFC及外边距合并/20190116.png","hash":"e61706673eeb88cf9730b38372d75a053e966e36","modified":1574951160211},{"_id":"public/2019/01/16/关于BFC及外边距合并/2.png","hash":"73eb8f4774137d1fa8c545e2b9f02b6407957539","modified":1574951160211},{"_id":"public/2019/01/16/关于BFC及外边距合并/3.png","hash":"ee0dab6cd9f992ea6355729c7844a2bddc2614e7","modified":1574951160211},{"_id":"public/2019/01/16/关于BFC及外边距合并/4.png","hash":"643126a4d18ffe9b1d992b296acd75348f49c07d","modified":1574951160211},{"_id":"public/2019/01/16/关于BFC及外边距合并/6.png","hash":"1756b37790c586073709fc7dce142bd02da9a299","modified":1574951160211},{"_id":"public/2019/01/16/关于BFC及外边距合并/5.png","hash":"3342d1658547e3815d5cd5d00d514c73c087eebb","modified":1574951160211},{"_id":"public/2019/06/20/系统式样统一页面的制作/20190620.jpg","hash":"66aa5d3c1151ba1f3173962a24e877a6f25f119a","modified":1574951160211},{"_id":"public/2019/11/11/ssh/1.png","hash":"dd302f9bab36ec2cf1bfe0e0b5c5128fef88c213","modified":1574951160211},{"_id":"public/2019/11/11/ssh/20191111.png","hash":"82b4d38cc0dc620a1ec544ace2519fa09a861bff","modified":1574951160212},{"_id":"public/2019/05/10/关于LocalStorage-cookie和session/20190510.png","hash":"a3744c50246fa9747e74d659c411c7af3badf91e","modified":1574951160212},{"_id":"public/2019/10/05/Extension/20191005.png","hash":"1352d21e2845bcf65157303c2cb6c3ca989eb4d3","modified":1574951160212},{"_id":"public/2019/10/05/Extension/3.jpg","hash":"d4e66c67cae8fd7c27b5907844cb902418b61674","modified":1574951160212},{"_id":"public/2019/10/05/Extension/5.jpg","hash":"1499f1f0244298a2b2e000602dab81d459ea04f1","modified":1574951160212},{"_id":"public/2019/10/05/Extension/8.jpg","hash":"1c2f2235d1000e9dc6e42bb9664d8f1b30c39e65","modified":1574951160212},{"_id":"public/2019/10/06/iTerm2/20191006.png","hash":"a970dcdfc2e984085af50833f7b6c9444f808b90","modified":1574951160212},{"_id":"public/2019/10/06/iTerm2/6.png","hash":"22212115b75b3f51925ff87bc6de4b3eb8ea8f89","modified":1574951160212},{"_id":"public/2019/10/06/iTerm2/8.png","hash":"d0f08cf08a82858b25d380e6e5008eb31f3e7c01","modified":1574951160213},{"_id":"public/2019/04/03/使用Docker进行Cakephp3开发环境搭建/1.png","hash":"3c0a379a165fa3c3cec1dfb8cf09fb6c52edbf0f","modified":1574951160214},{"_id":"public/2019/04/03/使用Docker进行Cakephp3开发环境搭建/20190403.png","hash":"308a040aa780483f8578cca412c7be554577f40f","modified":1574951160214},{"_id":"public/2019/04/03/使用Docker进行Cakephp3开发环境搭建/3.png","hash":"d2e954919e4e66370e4d0074852b80236538af48","modified":1574951160215},{"_id":"public/2019/04/03/使用Docker进行Cakephp3开发环境搭建/11.png","hash":"e2dfd00beab83f18712daedde9bc06b071488d52","modified":1574951160215},{"_id":"public/2019/09/26/Elisabeth/20190926.jpg","hash":"9b70c1c171b04c71b2eb38940a82a7ee15aadba3","modified":1574951160215},{"_id":"public/2019/07/12/jQuery/20190712.png","hash":"00387e9d2fff2e75d06fc97a5ed152ddc2297b9f","modified":1574951160215},{"_id":"public/2019/10/31/createDockerModx/20191031.png","hash":"b9bd69dd84d5780de4b64506ac3ea28e62b901fd","modified":1574951160215},{"_id":"public/2019/07/16/API/20190716.png","hash":"7b24e8bf1b7a0439c6731e5c536b27d90730f9e0","modified":1574951160216},{"_id":"public/2018/10/29/常见浏览器及浏览器内核/20181029.png","hash":"f25ed82a0d43c565740806f3867a63804aff4c48","modified":1574951160216},{"_id":"public/2019/04/06/Docker环境下使用bake自动生成页面/20190406.png","hash":"308a040aa780483f8578cca412c7be554577f40f","modified":1574951160216},{"_id":"public/2019/04/06/Docker环境下使用bake自动生成页面/1.png","hash":"4e0ab70758ad41aa7e0acc46205b4a03d18e781c","modified":1574951160216},{"_id":"public/2019/04/20/实现一个翻转注册登陆页面/20190420.png","hash":"295207ec9d0ead4f0c6ba74b93fbb83f0ee3f255","modified":1574951160216},{"_id":"public/2019/10/20/MissSaigon/20191020.jpg","hash":"93db50b327ffd771776d6c07a284bfca349e78a4","modified":1574951160216},{"_id":"public/2019/01/22/CSS编码规范/20190122.png","hash":"89e4219e26133c6370998f4a41674f05dc4d1e30","modified":1574951160217},{"_id":"public/2019/05/20/关于事件传播机制/4.png","hash":"6fdabac719c2258c5a116cd169b312902e9209c4","modified":1574951160265},{"_id":"public/2018/12/28/IconFont/1.png","hash":"df6ced59bfda8a47b6ad69a5ba4496dff3be5000","modified":1574951160265},{"_id":"public/2018/12/28/IconFont/3.png","hash":"d2d634096ee97870e9b86acdd609def48aec1203","modified":1574951160265},{"_id":"public/2019/05/28/超简单用hexo和github搭建个人博客/1.png","hash":"6ab9863e922602dee3d4fa9d726a3d6a8fcb5f5a","modified":1574951160265},{"_id":"public/2019/05/28/超简单用hexo和github搭建个人博客/3.png","hash":"d64d6849a44aa6fd6b825c3223b9c96cdb311482","modified":1574951160265},{"_id":"public/2019/06/20/系统式样统一页面的制作/5.png","hash":"011722fef8fe2a61841b7b6cdf3e6cf355ac70f8","modified":1574951160266},{"_id":"public/2019/10/05/Extension/6.png","hash":"cf2796a748cc364bfbb9e08a849edfad0a5fe576","modified":1574951160266},{"_id":"public/2019/10/05/Extension/9.png","hash":"e33ece76bef0efcb65ca91ac50c845e0c1dbf4e0","modified":1574951160266},{"_id":"public/2019/10/06/iTerm2/1.png","hash":"6ce9153273d90a66e505a145912015e8eda19a3e","modified":1574951160266},{"_id":"public/2019/10/06/iTerm2/2.png","hash":"36ace45f087355477924193857bb3269f43c07f0","modified":1574951160266},{"_id":"public/2019/10/06/iTerm2/3.png","hash":"3db775a96d08cf0375189d91dff5b8cdafc6d673","modified":1574951160267},{"_id":"public/2019/10/06/iTerm2/5.png","hash":"6283b92618227089b5a9662629f78ec054434ab9","modified":1574951160267},{"_id":"public/2019/10/06/iTerm2/7.png","hash":"699ed9e9e4c4f25adb9fc9aa51258c35e5b1582a","modified":1574951160267},{"_id":"public/2019/04/03/使用Docker进行Cakephp3开发环境搭建/4.png","hash":"6d07c6d886a7a01d459c0b0e13696a41b34cdc55","modified":1574951160267},{"_id":"public/2019/04/03/使用Docker进行Cakephp3开发环境搭建/10.png","hash":"9b0f11525966119b5dbc13247218f38f8cf785b3","modified":1574951160267},{"_id":"public/2019/04/03/使用Docker进行Cakephp3开发环境搭建/5.png","hash":"392d72a6a3857dfd9e429cda6bd6fa9e7ae6e337","modified":1574951160268},{"_id":"public/2019/04/03/使用Docker进行Cakephp3开发环境搭建/9.png","hash":"2e60879dd33e540bd1bd75f3e2a38a47c4f8c6ce","modified":1574951160268},{"_id":"public/2019/07/12/jQuery/10.png","hash":"d074bfc8f8084b0e5d3c5a177c5518f87cc365ce","modified":1574951160268},{"_id":"public/2019/07/12/jQuery/1.png","hash":"de40070b830b17f901348c542537fe4d2c60c3b4","modified":1574951160269},{"_id":"public/2019/07/12/jQuery/11.png","hash":"c03db97c2c4beb015b410a4d6f3ec00836aa24a2","modified":1574951160269},{"_id":"public/2019/07/12/jQuery/12.png","hash":"0cb135a73a0a4e99d5f8cd0170bc285bf7ffacb9","modified":1574951160269},{"_id":"public/2019/07/12/jQuery/13.png","hash":"5c599c71fe87a18d147062f739c3c59b305d1e93","modified":1574951160269},{"_id":"public/2019/07/12/jQuery/2.png","hash":"4e0de9eccfd5772aa815b99a13ceeff2543386ef","modified":1574951160269},{"_id":"public/2019/07/12/jQuery/3.png","hash":"5437341cfa022c9a1198c7131b2bbc3ce09fb561","modified":1574951160270},{"_id":"public/2019/07/12/jQuery/6.png","hash":"8c4498ffe94fd4e1ab1226be15133ffc140b7c90","modified":1574951160270},{"_id":"public/2019/07/12/jQuery/7.png","hash":"8fcaa46cfa12351bbf2f2b49d32b016d403e29f1","modified":1574951160270},{"_id":"public/2019/07/12/jQuery/9.png","hash":"15c8fa369aac2dc8774bf62992402705170c77de","modified":1574951160270},{"_id":"public/2019/07/12/jQuery/8.png","hash":"c6ee0608bbd90fa13b8e42d84332c5c031864ea3","modified":1574951160270},{"_id":"public/2019/10/31/createDockerModx/10.png","hash":"6ed98088779977d718270ccfcdebdac2dfa3f1a8","modified":1574951160271},{"_id":"public/2019/10/31/createDockerModx/12.png","hash":"9039144f17392e1a9a1e03f6a912a5dff06eaad6","modified":1574951160271},{"_id":"public/2019/07/04/React-Virtual-Dom/1.png","hash":"fca7d87fd0a86b60362b6dc3773a6f32e6d10bbf","modified":1574951160338},{"_id":"public/2019/06/20/系统式样统一页面的制作/2.png","hash":"4095ed0835593c6a71ea0066636e63aea9850ed1","modified":1574951160338},{"_id":"public/2019/03/22/JS-DOM元素以及DOM元素操作常用API/1.png","hash":"496ebd37022b369b9d2b11ecb63892dec7a0cd7a","modified":1574951160339},{"_id":"public/2019/09/30/Pages/2.png","hash":"e4813cd992258667d37a71475b54aac1eee7f80e","modified":1574951160339},{"_id":"public/2019/09/30/Pages/3.png","hash":"9f2335d1a7c53adbfb6c51ea01b8f7a5ed128aad","modified":1574951160339},{"_id":"public/2018/11/10/从URL到页面展现/2.png","hash":"d1358b4e218379039781b41548aadb52214b85c6","modified":1574951160339},{"_id":"public/2019/05/21/关于前端mock数据/1.png","hash":"210efb475b215dace1f8624b663052dcf00c176a","modified":1574951160340},{"_id":"public/2019/06/23/FirstBlog/cat3.jpg","hash":"666549db928e118186e54a31adda0649047c3076","modified":1574951160340},{"_id":"public/2019/05/10/关于LocalStorage-cookie和session/7.png","hash":"38f8d298b327768e7880c034cf3d1b1e08b5a4d3","modified":1574951160340},{"_id":"public/2019/07/12/jQuery/5.png","hash":"122c72996754c60d07409d98ab0040f6e68167d1","modified":1574951160340},{"_id":"public/2019/07/04/React-Virtual-Dom/3.png","hash":"d37539c1231f92faca7d5873a5e901fc34b665d4","modified":1574951160391},{"_id":"public/2019/09/30/Pages/1.png","hash":"6fee709e9e5e9e9fda1833d554dff0073a440d0e","modified":1574951160391},{"_id":"public/2019/07/04/React-Virtual-Dom/2.png","hash":"7e874077642152f9536393a681af36e8e759e1ec","modified":1574951160392},{"_id":"public/2019/10/31/createDockerModx/3.jpg","hash":"c0f53e8394186c791c5212243c7eacd3f05a399e","modified":1574951160393},{"_id":"public/2019/04/03/使用Docker进行Cakephp3开发环境搭建/6.png","hash":"a04dd2661757099c22996a1a946c7ab2e8ccbde1","modified":1574951160394},{"_id":"public/2019/05/10/关于LocalStorage-cookie和session/2.png","hash":"54463bb59a3922a3728f6996bfbbda9849671709","modified":1574951160394},{"_id":"public/2019/06/20/系统式样统一页面的制作/4.png","hash":"64bcdd192fd9bf402db684d4b35caf371acb4f3d","modified":1574951160395},{"_id":"public/2018/12/28/IconFont/4.png","hash":"b320bbfa4ebf287a6fec58feb4ea06fbbde21b23","modified":1574951160395},{"_id":"public/2019/04/03/使用Docker进行Cakephp3开发环境搭建/2.png","hash":"2ffdeb8f381fb15a7f72b03f453953f8bb07335d","modified":1574951160395},{"_id":"public/2019/07/12/jQuery/4.png","hash":"6a46439a527e314e0a39008f95c5c99fc65b5300","modified":1574951160396},{"_id":"public/2019/05/28/超简单用hexo和github搭建个人博客/2.png","hash":"23ff0a3d5596ca3c9710815c28a7257f31ec7c95","modified":1574951160396},{"_id":"public/2019/08/25/TheCove/3.jpg","hash":"ebedd51bd99c0f0d4e4f7bf94c26231d299162f6","modified":1574951160396},{"_id":"public/2019/11/11/ssh/2.png","hash":"092e94298257c9f81d4b027329e21ad7dbe93dc4","modified":1574951160397},{"_id":"public/2019/04/03/使用Docker进行Cakephp3开发环境搭建/7.png","hash":"a26267e9160d468afbfd4772f7b9927ac4c8b1f4","modified":1574951160397},{"_id":"public/2019/04/03/使用Docker进行Cakephp3开发环境搭建/8.png","hash":"84a1420ddf4536865fc2ad15b3ae57388f72cf41","modified":1574951160446},{"_id":"public/2019/11/11/CreatePhpEnvironmentInDocker/2.png","hash":"46eaefd0b087e3e5b174df3e0dce43fa7f715827","modified":1574951160446},{"_id":"public/2018/11/10/从URL到页面展现/1.png","hash":"95e80a3eff7f6df44fb0847a2f1e4a4ff89c3c5c","modified":1574951160447},{"_id":"public/2018/11/10/从URL到页面展现/3.png","hash":"dea03b403f6605908f8ae65b84143f7c9f013060","modified":1574951160447},{"_id":"public/2018/12/28/IconFont/5.png","hash":"9cf81cc2e20e2eb5a52373920193636b57444aba","modified":1574951160448},{"_id":"public/2019/11/11/ssh/6.png","hash":"e983ec151f2436d89752117faa930a1f23a3fd0a","modified":1574951160448},{"_id":"public/2019/06/20/系统式样统一页面的制作/3.png","hash":"e50dc141993b9f6f4e0284c26f86d255f1420ac0","modified":1574951160497},{"_id":"public/2019/05/10/关于LocalStorage-cookie和session/1.png","hash":"b7898d0e42d5601bb786dfe5fbdfcc417f6c9bb5","modified":1574951160498},{"_id":"public/2019/05/10/关于LocalStorage-cookie和session/6.png","hash":"0b64c20c4b613f674102d0abd96104191eb4b097","modified":1574951160499},{"_id":"public/2019/10/06/iTerm2/4.png","hash":"27e615d0ad09d1b30a14b0e9339e92257ec834cd","modified":1574951160500},{"_id":"public/2019/10/31/createDockerModx/5.png","hash":"6df096dda817cab044ab882e9b3808403e05f93f","modified":1574951160562},{"_id":"public/2018/11/15/CSS选择器类型与用法/2.png","hash":"d5417e0f907d6619e9d013fb1cdfe9bb9a5ef73f","modified":1574951160562},{"_id":"public/2018/11/10/从URL到页面展现/20181110.png","hash":"e3b35d137ca2d6c4b9d458de211476b24d54a591","modified":1574951160563},{"_id":"public/2019/05/21/关于前端mock数据/2.png","hash":"5606fba02ab3150e1e2b71b0a2c1e1887dbbc8e9","modified":1574951160564},{"_id":"public/2019/02/23/关于浏览器渲染机制/3.png","hash":"a11e50676ed5d622450364b115768ce4f99a1995","modified":1574951160564},{"_id":"public/2019/02/23/关于浏览器渲染机制/1.png","hash":"8b9df510a2afdd5a957544d1c6f2aa48cc26b506","modified":1574951160565},{"_id":"public/2019/02/23/关于浏览器渲染机制/2.png","hash":"39df90195904b13a6c9256c339ffa2a7320ebe16","modified":1574951160566},{"_id":"public/2019/09/26/Elisabeth/5.jpg","hash":"c3872e0c27239f9762225b684dca32a8eb79236a","modified":1574951160567},{"_id":"public/2019/09/26/Elisabeth/4.jpg","hash":"90bbd9f73b71ee846c898f23027e39a767bad01b","modified":1574951160568},{"_id":"public/2019/10/31/createDockerModx/4.jpg","hash":"9988b5d49b2236176db879af9260001a65cdbff1","modified":1574951160569},{"_id":"public/2019/11/11/CreatePhpEnvironmentInDocker/1.png","hash":"23e4325be92466b48b2df20ed89cc16c2367c228","modified":1574951160643},{"_id":"public/2018/10/14/CSRF攻击及防范措施/2.png","hash":"fdb994285e62f91b482201a635673411402da1e6","modified":1574951160643},{"_id":"public/2019/11/24/aboutnpm/1.png","hash":"416702630754dffd9d0e40e8b44858df0135f5ff","modified":1574951160643},{"_id":"public/2019/11/24/aboutnpm/2.png","hash":"ae9d127f8597ebff4e113779429cc0a914173211","modified":1574951160644},{"_id":"public/2019/11/24/aboutnpm/3.png","hash":"02f8fae0f839620fcbf64adbf2ad431cb49bd77a","modified":1574951160645},{"_id":"public/2018/12/30/关于CSS浮动/4.png","hash":"b7e33a26d7a6789b54617da5a4fe3a59053ababd","modified":1574951160645},{"_id":"public/2018/12/30/关于CSS浮动/5.png","hash":"2ed19ef0790c54cf0005f3411397c4a1a8512754","modified":1574951160646},{"_id":"public/2019/05/10/关于LocalStorage-cookie和session/4.png","hash":"79d93514255beaa640d37699d9eabad2dda36f1f","modified":1574951160647},{"_id":"public/2019/05/10/关于LocalStorage-cookie和session/5.png","hash":"4aec56bec8d965e94d0b7b318cf0109122899bcb","modified":1574951160647},{"_id":"public/2018/12/30/关于CSS浮动/3.png","hash":"5e5e4d631b38430041c33a5e9b8603c8fcf81ba4","modified":1574951160709},{"_id":"public/2019/11/11/ssh/3.png","hash":"b6ec5c222efe872622dab372a5064df3c9e76031","modified":1574951160710},{"_id":"public/2019/10/31/createDockerModx/5.jpg","hash":"da8a7ab63641050ae504bba57f4c39037ced3bb6","modified":1574951160710},{"_id":"public/2019/10/31/createDockerModx/6.png","hash":"749fcbb35b634c97e9ba451ddeb6c2771838fe77","modified":1574951160711},{"_id":"public/2018/10/14/CSRF攻击及防范措施/3.png","hash":"41c0f1a16eb77f943c3325f7bfbae310f34d1a06","modified":1574951160750},{"_id":"public/2019/05/21/关于前端mock数据/3.png","hash":"ed0bbd6e15d8366883a3348b58fbc2dd5afb4a09","modified":1574951160750},{"_id":"public/2018/12/30/关于CSS浮动/1.png","hash":"709955e1941c97a9e6d20e692673c30ebd1e63f3","modified":1574951160750},{"_id":"public/2019/06/20/系统式样统一页面的制作/1.png","hash":"2fee7ac95e2f26a4fd3d38f0ff6b25b157762c97","modified":1574951160751},{"_id":"public/2019/06/20/系统式样统一页面的制作/6.png","hash":"a266e9faf8964b736f394ca86f0e23827e024102","modified":1574951160754},{"_id":"public/2019/10/06/iTerm2/9.png","hash":"8f9d2347016053608ae5d9cb9a05128f855a59ee","modified":1574951160765},{"_id":"public/2019/09/26/Elisabeth/9.jpg","hash":"39505e0fc310c82bd926c6559aa3ed6ef754e668","modified":1574951160766},{"_id":"public/2019/10/31/createDockerModx/2.png","hash":"e2502e75ff60cbb05c587de156a13c67531be0f4","modified":1574951160766},{"_id":"public/2019/10/31/createDockerModx/8.png","hash":"f7d7e9165884d00235065d507940e661bef4ed43","modified":1574951160767},{"_id":"public/2018/11/15/CSS选择器类型与用法/1.png","hash":"6695d27f0b091f3ac04c2b035c88df70d2260a89","modified":1574951160794},{"_id":"public/2019/11/24/aboutnpm/5.png","hash":"bf93340933e8164c22cf1ec9c3929f62ec596a0c","modified":1574951160794},{"_id":"public/2018/12/30/关于CSS浮动/2.png","hash":"0e2e87f94d09c3c65cf724dcd602f795e85bc614","modified":1574951160795},{"_id":"public/2019/05/28/超简单用hexo和github搭建个人博客/5.png","hash":"26dad5b450942dc46d95143adc545018dad77b1a","modified":1574951160797},{"_id":"public/2019/11/11/ssh/5.png","hash":"82ed931322c6b14a8a7bee91300b960d6c6fef9f","modified":1574951160797},{"_id":"public/2019/05/10/关于LocalStorage-cookie和session/3.png","hash":"30a1421c6c8493e464377a1409387fa0d1f3814b","modified":1574951160798},{"_id":"public/2019/09/26/Elisabeth/7.jpg","hash":"d40ace5a8003998b4136411f76308dfb4ddf0502","modified":1574951160799},{"_id":"public/2019/10/31/createDockerModx/1.png","hash":"9d9a97dd7e5879719fd014e7731b4f06f7228a57","modified":1574951160800},{"_id":"public/2019/10/31/createDockerModx/11.png","hash":"c09b62e422a1a9e9b810bb7ecd26549e1add1453","modified":1574951160801},{"_id":"public/2019/11/24/aboutnpm/4.png","hash":"5f474443996a1377943ff45a42f3f8b168e2b840","modified":1574951160881},{"_id":"public/2019/09/26/Elisabeth/3.jpg","hash":"4c0b5f95e690e418d9374b93deef880dc429f75e","modified":1574951160881},{"_id":"public/2019/10/31/createDockerModx/9.png","hash":"ff06a2e9b160b09838e65e3810a61617b70a24a5","modified":1574951160885},{"_id":"public/2019/09/26/Elisabeth/10.jpg","hash":"e2b8cc71cccddd1e69040906a745f0de19f3b80a","modified":1574951160943},{"_id":"public/2019/10/20/MissSaigon/11.jpg","hash":"ed4652857e530004b8e4e99a2cc37bb557708e48","modified":1574951160960},{"_id":"public/2019/10/20/MissSaigon/13.jpg","hash":"627de43263a73c9135ee3f2d9695b67f309fcd90","modified":1574951160976},{"_id":"public/2019/11/07/dockercommand/1.png","hash":"69764b934cb3d236798ba4adb680a3e6b6ec75af","modified":1574951161003},{"_id":"public/2019/09/26/Elisabeth/11.jpg","hash":"abfb291129d41a40dc6ff548300444525d7be4f2","modified":1574951161003},{"_id":"public/2019/09/26/Elisabeth/8.jpg","hash":"2114cba6c944a967b2052edfe0a8d0efe6eef694","modified":1574951161005},{"_id":"public/2019/10/20/MissSaigon/10.jpg","hash":"e5a8e5b89c197b2a147cde19e69bb9eae07e0df6","modified":1574951161006},{"_id":"public/2019/10/20/MissSaigon/14.jpg","hash":"e88c0f507656c35388873939e7fed794c7b443e6","modified":1574951161007},{"_id":"public/2019/10/20/MissSaigon/18.jpg","hash":"a74b40afa49ba485c3c7fbf59a3c3579c75da8da","modified":1574951161009},{"_id":"public/2019/11/11/ssh/4.png","hash":"14083c6fc7765eccc57143763d4477ea8e72bbdd","modified":1574951161028},{"_id":"public/2019/09/26/Elisabeth/2.jpg","hash":"6ac454000cd75fbe19025f75266fdc5608ab134a","modified":1574951161028},{"_id":"public/2019/09/26/Elisabeth/6.jpg","hash":"ae8365c5e4a6eb5a0f401704c06ef657138dccea","modified":1574951161072},{"_id":"public/2019/10/31/createDockerModx/4.png","hash":"7208b5fd47652ed9f6379816537d949b3d922c0b","modified":1574951161072},{"_id":"public/2019/04/20/实现一个翻转注册登陆页面/1.png","hash":"c3c0242507e658959f67c7dbfb7c8bc347d57570","modified":1574951161074},{"_id":"public/2019/10/20/MissSaigon/2.jpg","hash":"15e60a850b7d9ad5aa0d7ff76b6f10759511d6bc","modified":1574951161076},{"_id":"public/2019/09/26/Elisabeth/12.jpg","hash":"01f97b3ce2a1da4e6d46bcf18b8eac209042523b","modified":1574951161088},{"_id":"public/2019/10/31/createDockerModx/6.jpg","hash":"c83df99071442f8353ab5fd46ddf03f52054e41c","modified":1574951161089},{"_id":"public/2019/09/26/Elisabeth/1.jpg","hash":"6b8f50222f7c7f77ab5963da4a67fb3f52bf34b8","modified":1574951161100},{"_id":"public/2019/10/20/MissSaigon/15.jpg","hash":"375fb708b4b1188b9e9991a57be391cf7d3a84d7","modified":1574951161111},{"_id":"public/2019/10/20/MissSaigon/16.jpg","hash":"09bfcec27b7ca6e8dfbb22feeb55d1abae8bbe42","modified":1574951161111},{"_id":"public/2019/10/20/MissSaigon/4.jpg","hash":"e2aa13b17c71630fe7826c974d734d7eab9cd38a","modified":1574951161113},{"_id":"public/2019/11/11/ssh/7.png","hash":"faa183d93ee3b0f7538d850bcbd4ff3fcfe43d6f","modified":1574951161124},{"_id":"public/2019/10/31/createDockerModx/3.png","hash":"ce1439c227c1fe5f50c817c17c97f94775a7bc4c","modified":1574951161124},{"_id":"public/2019/10/20/MissSaigon/17.jpg","hash":"3c42bb1c55668830e21485833e9fd8c6f2bcdc4f","modified":1574951161127},{"_id":"public/2019/10/20/MissSaigon/7.jpg","hash":"e7051f081d2e31046d114e62d338d8a5eb3f7eac","modified":1574951161130},{"_id":"public/2019/08/17/UNIVERSE/3.jpg","hash":"729f68dff22655b20f2cdef5ce880b8828d0e305","modified":1574951161175},{"_id":"public/2019/10/31/createDockerModx/7.png","hash":"c310f9ab41abd56601de4441dfdc2050aee76c55","modified":1574951161175},{"_id":"public/2019/10/20/MissSaigon/8.jpg","hash":"a098c2b4de9af6fdea9a419ff8c409f8cdb8d8e1","modified":1574951161177},{"_id":"public/2019/10/20/MissSaigon/9.jpg","hash":"d209cd882e06d056754baaf35e3bbe828e5c7d0e","modified":1574951161178},{"_id":"public/2019/10/20/MissSaigon/12.jpg","hash":"c6d0dcb56398d5ac556f34e4edbd373a46ee00b5","modified":1574951161186},{"_id":"public/2019/10/20/MissSaigon/3.jpg","hash":"a03223b1438ee21a34975de6d948ea2ffe6b77a1","modified":1574951161186},{"_id":"public/2019/10/20/MissSaigon/6.jpg","hash":"db6b139e03f858b15b4c8b0019394e8ed35c354b","modified":1574951161188},{"_id":"public/2019/10/20/MissSaigon/5.jpg","hash":"527302c0051154bf02ae2c7b9da3b60a16170705","modified":1574951161197},{"_id":"public/2019/05/28/超简单用hexo和github搭建个人博客/4.png","hash":"b5f14bc704b860da46869e5be0f6a9ca7c0d2e28","modified":1574951161206},{"_id":"public/2019/10/20/MissSaigon/1.jpg","hash":"ab9b56b6950f352a7621d2b4c3da4216c0d2020f","modified":1574951161206},{"_id":"public/2019/08/17/UNIVERSE/4.jpg","hash":"10e897cf897bc1218f99112dc0afa50d4aa9eb21","modified":1574951161234},{"_id":"public/2019/08/17/UNIVERSE/2.jpg","hash":"ac1b08096828f7fc471524e05182bb4f572b1acd","modified":1574951161241},{"_id":"public/2018/10/14/CSRF攻击及防范措施/1.png","hash":"42d578435dd8c0f499e859b716e7c0d2fade8d2c","modified":1574951161248},{"_id":"public/2019/10/05/Extension/7.gif","hash":"f25775215f25d34dd405ed7db4edcceb87d593b1","modified":1574951161261},{"_id":"public/2019/10/05/Extension/4.gif","hash":"f252e02bd4e6e9692b984d66a08f20cfc9bbe8c6","modified":1574951161297},{"_id":"public/2019/10/05/Extension/1.gif","hash":"6ebd7bbccb6bf0009ae6e511ef919f2a1a98219a","modified":1574951161405},{"_id":"public/2019/10/05/Extension/2.gif","hash":"15bc06e22a2d228865d1eb3ab51819f0b518d7fe","modified":1574951161505}],"Category":[{"name":"Back-end Knowledge","_id":"ck3it6k110004teyiji1hdnt6"},{"name":"Front-end Knowledge","_id":"ck3it6k1d000ateyi6irj5m3h"},{"name":"About Me","_id":"ck3it6k1v000uteyixj18ihdq"},{"name":"System Setting","_id":"ck3it6k240018teyicsx68p1f"}],"Data":[],"Page":[{"title":"all-categories","layout":"all-categories","comments":0,"_content":"","source":"all-categories/index.md","raw":"---\ntitle: \"all-categories\"\nlayout: \"all-categories\"\ncomments: false\n---\n","date":"2019-11-28T14:23:31.390Z","updated":"2019-11-23T23:54:38.000Z","path":"all-categories/index.html","_id":"ck3it6k0w0001teyic6vcefeu","content":"","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"","more":""},{"title":"all-tags","layout":"all-tags","comments":0,"_content":"","source":"all-tags/index.md","raw":"---\ntitle: \"all-tags\"\nlayout: \"all-tags\"\ncomments: false\n---","date":"2019-11-28T14:23:31.393Z","updated":"2019-11-23T23:54:38.000Z","path":"all-tags/index.html","_id":"ck3it6k0z0003teyig33qjb3e","content":"","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"","more":""},{"title":"all-archives","layout":"all-archives","comments":0,"_content":"","source":"all-archives/index.md","raw":"---\ntitle: \"all-archives\"\nlayout: \"all-archives\"\ncomments: false\n---","date":"2019-11-28T14:23:31.391Z","updated":"2019-11-23T23:54:38.000Z","path":"all-archives/index.html","_id":"ck3it6k150007teyi2if04t6g","content":"","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"","more":""}],"Post":[{"title":"About CMS","date":"2019-11-02T01:30:56.000Z","clearReading":true,"thumbnailImage":"20191102.png","thumbnailImagePosition":"left","coverImage":"cover.jpg","coverCaption":"Hello World, Hello Programming","coverSize":"partial","comments":0,"_content":"关于CMS\n<!--more-->\n#### 什么是CMS\nCMS是英语Content Management System的缩写，按英语的字面翻译就是内容管理系统，顾名思义，它主要是为了方便发布网络内容而存在的一体化Web管理系统。\n\n***\n### CMS的基本作用\n很久很久以前，人们做网站很多用静态HTML+CSS+Javascript直接写，也就是静态页面。\n\n但是如果有一组页面要维护，对于静态页面来说是一件很麻烦的事，比如我有一个人的Email地址变更了，这一组页面上所有出现的地方都要改，于是就有了适合Web的动态语言，如ASP，PHP，JAVA，.NET等等，它们把数据保存在数据库中，可以动态的引用，这样就能生产出较大规模的网站了。\n\n当时诞生了一批大型网站，叫做门户网站，比如新浪，网易，搜狐，他们的内容很丰富，很多。他们有一大批编辑来搜集整理网站的文章，但是总不可能让程序员帮他们把内容上传吧。\n\n于是CMS诞生了，通常CMS有一个后台，编辑通过登录后台进入一个可视化的操作界面，把文章录入进去，然后通过上一级的总编审核后发布到网站中。\n\n***\n### CMS的主要功能模块\n上面说的文章发布只是CMS的一个功能模块，通常还会有一个会员管理系统，这是最基本的2个功能模块。文章发布会带有一个富文本编辑器，可以直接插入和上传媒体文件，如图片和视频；还有分类以及排序，发布以及更新的时间戳，Tag标签等等，更有强大的CMS会添加自定义的字段，比如加入文章出处，原创作者等。\n\n会员系统会分级人员的权限，比如超级管理员能做所有后台能做的事情，而编辑只能添加和编辑删除某个分类下的文章，甚至只能看到这个分类，其他分类对于他是隐藏的。但是一个功能较强大的CMS远不止如此，他们会有各种各样奇奇怪怪的功能模块，比如留言板，评论系统，预约系统，多语言模块等等。博客系统也是一种CMS，只是它们更侧重于发布博客。\n***\n\n### 流行的CMS框架\nCMS最擅长的就是建设网站，最流行的CMS有：国外的：Wordpress，Drupal，Joomla，这是国外最流行的3大CMS。国内则是DedeCMS和帝国，PHPCMS等。国内的CMS会追求大而全，而国外的CMS更注重生态，更注重友好的接口，更多的功能留给第三方开发插件来实现。\n\n推荐几个比较新的：ProcessWire，OctoberCMS，CraftCMS每个CMS都有自己的一套管理组织方法，这个需要多读官网的文档。\n","source":"_posts/AboutCMS.md","raw":"---\ntitle: About CMS\ndate: 2019-11-02 10:30:56\ntags:\n- CMS\nclearReading: true\nthumbnailImage: 20191102.png\nthumbnailImagePosition: left\ncoverImage: cover.jpg\ncoverCaption: \"Hello World, Hello Programming\"\ncoverSize: partial\ncomments: false\ncategories: Back-end Knowledge\n---\n关于CMS\n<!--more-->\n#### 什么是CMS\nCMS是英语Content Management System的缩写，按英语的字面翻译就是内容管理系统，顾名思义，它主要是为了方便发布网络内容而存在的一体化Web管理系统。\n\n***\n### CMS的基本作用\n很久很久以前，人们做网站很多用静态HTML+CSS+Javascript直接写，也就是静态页面。\n\n但是如果有一组页面要维护，对于静态页面来说是一件很麻烦的事，比如我有一个人的Email地址变更了，这一组页面上所有出现的地方都要改，于是就有了适合Web的动态语言，如ASP，PHP，JAVA，.NET等等，它们把数据保存在数据库中，可以动态的引用，这样就能生产出较大规模的网站了。\n\n当时诞生了一批大型网站，叫做门户网站，比如新浪，网易，搜狐，他们的内容很丰富，很多。他们有一大批编辑来搜集整理网站的文章，但是总不可能让程序员帮他们把内容上传吧。\n\n于是CMS诞生了，通常CMS有一个后台，编辑通过登录后台进入一个可视化的操作界面，把文章录入进去，然后通过上一级的总编审核后发布到网站中。\n\n***\n### CMS的主要功能模块\n上面说的文章发布只是CMS的一个功能模块，通常还会有一个会员管理系统，这是最基本的2个功能模块。文章发布会带有一个富文本编辑器，可以直接插入和上传媒体文件，如图片和视频；还有分类以及排序，发布以及更新的时间戳，Tag标签等等，更有强大的CMS会添加自定义的字段，比如加入文章出处，原创作者等。\n\n会员系统会分级人员的权限，比如超级管理员能做所有后台能做的事情，而编辑只能添加和编辑删除某个分类下的文章，甚至只能看到这个分类，其他分类对于他是隐藏的。但是一个功能较强大的CMS远不止如此，他们会有各种各样奇奇怪怪的功能模块，比如留言板，评论系统，预约系统，多语言模块等等。博客系统也是一种CMS，只是它们更侧重于发布博客。\n***\n\n### 流行的CMS框架\nCMS最擅长的就是建设网站，最流行的CMS有：国外的：Wordpress，Drupal，Joomla，这是国外最流行的3大CMS。国内则是DedeCMS和帝国，PHPCMS等。国内的CMS会追求大而全，而国外的CMS更注重生态，更注重友好的接口，更多的功能留给第三方开发插件来实现。\n\n推荐几个比较新的：ProcessWire，OctoberCMS，CraftCMS每个CMS都有自己的一套管理组织方法，这个需要多读官网的文档。\n","slug":"AboutCMS","published":1,"updated":"2019-11-23T23:54:38.000Z","layout":"post","photos":[],"link":"","_id":"ck3it6k0s0000teyirt7mz96n","content":"<p>关于CMS</p>\n<a id=\"more\"></a>\n<h4 id=\"什么是CMS\"><a href=\"#什么是CMS\" class=\"headerlink\" title=\"什么是CMS\"></a>什么是CMS</h4><p>CMS是英语Content Management System的缩写，按英语的字面翻译就是内容管理系统，顾名思义，它主要是为了方便发布网络内容而存在的一体化Web管理系统。</p>\n<hr>\n<h3 id=\"CMS的基本作用\"><a href=\"#CMS的基本作用\" class=\"headerlink\" title=\"CMS的基本作用\"></a>CMS的基本作用</h3><p>很久很久以前，人们做网站很多用静态HTML+CSS+Javascript直接写，也就是静态页面。</p>\n<p>但是如果有一组页面要维护，对于静态页面来说是一件很麻烦的事，比如我有一个人的Email地址变更了，这一组页面上所有出现的地方都要改，于是就有了适合Web的动态语言，如ASP，PHP，JAVA，.NET等等，它们把数据保存在数据库中，可以动态的引用，这样就能生产出较大规模的网站了。</p>\n<p>当时诞生了一批大型网站，叫做门户网站，比如新浪，网易，搜狐，他们的内容很丰富，很多。他们有一大批编辑来搜集整理网站的文章，但是总不可能让程序员帮他们把内容上传吧。</p>\n<p>于是CMS诞生了，通常CMS有一个后台，编辑通过登录后台进入一个可视化的操作界面，把文章录入进去，然后通过上一级的总编审核后发布到网站中。</p>\n<hr>\n<h3 id=\"CMS的主要功能模块\"><a href=\"#CMS的主要功能模块\" class=\"headerlink\" title=\"CMS的主要功能模块\"></a>CMS的主要功能模块</h3><p>上面说的文章发布只是CMS的一个功能模块，通常还会有一个会员管理系统，这是最基本的2个功能模块。文章发布会带有一个富文本编辑器，可以直接插入和上传媒体文件，如图片和视频；还有分类以及排序，发布以及更新的时间戳，Tag标签等等，更有强大的CMS会添加自定义的字段，比如加入文章出处，原创作者等。</p>\n<p>会员系统会分级人员的权限，比如超级管理员能做所有后台能做的事情，而编辑只能添加和编辑删除某个分类下的文章，甚至只能看到这个分类，其他分类对于他是隐藏的。但是一个功能较强大的CMS远不止如此，他们会有各种各样奇奇怪怪的功能模块，比如留言板，评论系统，预约系统，多语言模块等等。博客系统也是一种CMS，只是它们更侧重于发布博客。</p>\n<hr>\n<h3 id=\"流行的CMS框架\"><a href=\"#流行的CMS框架\" class=\"headerlink\" title=\"流行的CMS框架\"></a>流行的CMS框架</h3><p>CMS最擅长的就是建设网站，最流行的CMS有：国外的：Wordpress，Drupal，Joomla，这是国外最流行的3大CMS。国内则是DedeCMS和帝国，PHPCMS等。国内的CMS会追求大而全，而国外的CMS更注重生态，更注重友好的接口，更多的功能留给第三方开发插件来实现。</p>\n<p>推荐几个比较新的：ProcessWire，OctoberCMS，CraftCMS每个CMS都有自己的一套管理组织方法，这个需要多读官网的文档。</p>\n","site":{"data":{}},"thumbnailImageUrl":"https://kisky3.github.io/2019/11/02/AboutCMS/20191102.png","excerpt":"<p>关于CMS</p>","more":"<h4 id=\"什么是CMS\"><a href=\"#什么是CMS\" class=\"headerlink\" title=\"什么是CMS\"></a>什么是CMS</h4><p>CMS是英语Content Management System的缩写，按英语的字面翻译就是内容管理系统，顾名思义，它主要是为了方便发布网络内容而存在的一体化Web管理系统。</p>\n<hr>\n<h3 id=\"CMS的基本作用\"><a href=\"#CMS的基本作用\" class=\"headerlink\" title=\"CMS的基本作用\"></a>CMS的基本作用</h3><p>很久很久以前，人们做网站很多用静态HTML+CSS+Javascript直接写，也就是静态页面。</p>\n<p>但是如果有一组页面要维护，对于静态页面来说是一件很麻烦的事，比如我有一个人的Email地址变更了，这一组页面上所有出现的地方都要改，于是就有了适合Web的动态语言，如ASP，PHP，JAVA，.NET等等，它们把数据保存在数据库中，可以动态的引用，这样就能生产出较大规模的网站了。</p>\n<p>当时诞生了一批大型网站，叫做门户网站，比如新浪，网易，搜狐，他们的内容很丰富，很多。他们有一大批编辑来搜集整理网站的文章，但是总不可能让程序员帮他们把内容上传吧。</p>\n<p>于是CMS诞生了，通常CMS有一个后台，编辑通过登录后台进入一个可视化的操作界面，把文章录入进去，然后通过上一级的总编审核后发布到网站中。</p>\n<hr>\n<h3 id=\"CMS的主要功能模块\"><a href=\"#CMS的主要功能模块\" class=\"headerlink\" title=\"CMS的主要功能模块\"></a>CMS的主要功能模块</h3><p>上面说的文章发布只是CMS的一个功能模块，通常还会有一个会员管理系统，这是最基本的2个功能模块。文章发布会带有一个富文本编辑器，可以直接插入和上传媒体文件，如图片和视频；还有分类以及排序，发布以及更新的时间戳，Tag标签等等，更有强大的CMS会添加自定义的字段，比如加入文章出处，原创作者等。</p>\n<p>会员系统会分级人员的权限，比如超级管理员能做所有后台能做的事情，而编辑只能添加和编辑删除某个分类下的文章，甚至只能看到这个分类，其他分类对于他是隐藏的。但是一个功能较强大的CMS远不止如此，他们会有各种各样奇奇怪怪的功能模块，比如留言板，评论系统，预约系统，多语言模块等等。博客系统也是一种CMS，只是它们更侧重于发布博客。</p>\n<hr>\n<h3 id=\"流行的CMS框架\"><a href=\"#流行的CMS框架\" class=\"headerlink\" title=\"流行的CMS框架\"></a>流行的CMS框架</h3><p>CMS最擅长的就是建设网站，最流行的CMS有：国外的：Wordpress，Drupal，Joomla，这是国外最流行的3大CMS。国内则是DedeCMS和帝国，PHPCMS等。国内的CMS会追求大而全，而国外的CMS更注重生态，更注重友好的接口，更多的功能留给第三方开发插件来实现。</p>\n<p>推荐几个比较新的：ProcessWire，OctoberCMS，CraftCMS每个CMS都有自己的一套管理组织方法，这个需要多读官网的文档。</p>"},{"title":"About jQuery ajax & jsonp","date":"2019-08-30T11:22:41.000Z","clearReading":true,"thumbnailImage":"20190830.png","thumbnailImagePosition":"left","coverImage":"cover.jpg","coverCaption":"Hello World, Hello Programming","coverSize":"partial","comments":0,"_content":"\n关于jQuery ajax & jsonp\n<!--more-->\n\n### jQuery.ajax([settings])\n   \n我们可以用ajax发送了请求(get/post)\n\najax方法提供了几个常用的setting\n\n- async：默认设置下，所有请求均为异步请求（也就是说这是默认设置为 true ）。如果需要发送同步请求，请将此选项设置为 false.\n\n- beforeSend：请求发送前的回调函数，用来修改请求发送前jqXHR对象，此功能用来设置自定义 HTTP 头信息，等等。该jqXHR和设置对象作为参数传递\n\n- cache：如果设置为 false ，浏览器将不缓存此页面。注意: 设置cache为 false将在 HEAD和GET请求中正常工作。它的工作原理是在GET请求参数中附加\"timestamp\"\n\n- context：这个对象用于设置Ajax相关回调函数的上下文。 默认情况下，这个上下文是一个ajax请求使用的参数设置对象.\n\n- data：发送到服务器的数据。将自动转换为请求字符串格式。GET 请求中将附加在 URL 后面，POST请求作为表单数据.\n\n- headers：一个额外的{键:值}对映射到请求一起发送。此设置会在beforeSend 函数调用之前被设置 ;因此，请求头中的设置值，会被beforeSend 函数内的设置覆盖\n\n- method：HTTP 请求方法 (比如：\"POST\", \"GET \", \"PUT\"，1.9之前使用“type”)。    \n\n了解了这些参数，使用jQuery处理ajax请求就简单了\n\n例子:\n\n```JS\n$.ajax({\n  method: \"POST\",\n  url: \"some.php\",\n  data: { name: \"John\", location: \"Boston\" }\n}).done(function( msg ) {\n  alert( \"Data Saved: \" + msg );\n});\n```\n***\n\n### jQuery.get( [settings] ) / jQuery.post( [settings ] )\n\n这两个方法专门用来处理get和post请求,\ndataType：从服务器返回的预期的数据类型。默认：智能猜测（xml, json, script, 或 html）\n\n```JS\n$.ajax({\n  url: url,\n  data: data,\n  success: success,\n  dataType: dataType\n});\n\n$.ajax({\n  type: \"POST\",\n  url: url,\n  data: data,\n  success: success,\n  dataType: dataType\n});\n```\n\n***\n\n### jQuery.getJSON( url [,data] [success(data, textStatus, jqXHR)])\n\n使用一个HTTP GET请求从服务器加载JSON编码的数据，这是一个Ajax函数的缩写，这相当于:\n```JS\n$.ajax({\n  dataType: \"json\",\n  url: url,\n  data: data,\n  success: success\n});\n```\n\n\n","source":"_posts/Ajax.md","raw":"---\ntitle: About jQuery ajax & jsonp\ndate: 2019-08-30 20:22:41\ntags:\n- jQuery\nclearReading: true\nthumbnailImage: 20190830.png\nthumbnailImagePosition: left\ncoverImage: cover.jpg\ncoverCaption: \"Hello World, Hello Programming\"\ncoverSize: partial\ncomments: false\ncategories: Front-end Knowledge\n---\n\n关于jQuery ajax & jsonp\n<!--more-->\n\n### jQuery.ajax([settings])\n   \n我们可以用ajax发送了请求(get/post)\n\najax方法提供了几个常用的setting\n\n- async：默认设置下，所有请求均为异步请求（也就是说这是默认设置为 true ）。如果需要发送同步请求，请将此选项设置为 false.\n\n- beforeSend：请求发送前的回调函数，用来修改请求发送前jqXHR对象，此功能用来设置自定义 HTTP 头信息，等等。该jqXHR和设置对象作为参数传递\n\n- cache：如果设置为 false ，浏览器将不缓存此页面。注意: 设置cache为 false将在 HEAD和GET请求中正常工作。它的工作原理是在GET请求参数中附加\"timestamp\"\n\n- context：这个对象用于设置Ajax相关回调函数的上下文。 默认情况下，这个上下文是一个ajax请求使用的参数设置对象.\n\n- data：发送到服务器的数据。将自动转换为请求字符串格式。GET 请求中将附加在 URL 后面，POST请求作为表单数据.\n\n- headers：一个额外的{键:值}对映射到请求一起发送。此设置会在beforeSend 函数调用之前被设置 ;因此，请求头中的设置值，会被beforeSend 函数内的设置覆盖\n\n- method：HTTP 请求方法 (比如：\"POST\", \"GET \", \"PUT\"，1.9之前使用“type”)。    \n\n了解了这些参数，使用jQuery处理ajax请求就简单了\n\n例子:\n\n```JS\n$.ajax({\n  method: \"POST\",\n  url: \"some.php\",\n  data: { name: \"John\", location: \"Boston\" }\n}).done(function( msg ) {\n  alert( \"Data Saved: \" + msg );\n});\n```\n***\n\n### jQuery.get( [settings] ) / jQuery.post( [settings ] )\n\n这两个方法专门用来处理get和post请求,\ndataType：从服务器返回的预期的数据类型。默认：智能猜测（xml, json, script, 或 html）\n\n```JS\n$.ajax({\n  url: url,\n  data: data,\n  success: success,\n  dataType: dataType\n});\n\n$.ajax({\n  type: \"POST\",\n  url: url,\n  data: data,\n  success: success,\n  dataType: dataType\n});\n```\n\n***\n\n### jQuery.getJSON( url [,data] [success(data, textStatus, jqXHR)])\n\n使用一个HTTP GET请求从服务器加载JSON编码的数据，这是一个Ajax函数的缩写，这相当于:\n```JS\n$.ajax({\n  dataType: \"json\",\n  url: url,\n  data: data,\n  success: success\n});\n```\n\n\n","slug":"Ajax","published":1,"updated":"2019-11-23T23:54:38.000Z","layout":"post","photos":[],"link":"","_id":"ck3it6k0y0002teyijv1g1ay2","content":"<p>关于jQuery ajax &amp; jsonp</p>\n<a id=\"more\"></a>\n\n<h3 id=\"jQuery-ajax-settings\"><a href=\"#jQuery-ajax-settings\" class=\"headerlink\" title=\"jQuery.ajax([settings])\"></a>jQuery.ajax([settings])</h3><p>我们可以用ajax发送了请求(get/post)</p>\n<p>ajax方法提供了几个常用的setting</p>\n<ul>\n<li><p>async：默认设置下，所有请求均为异步请求（也就是说这是默认设置为 true ）。如果需要发送同步请求，请将此选项设置为 false.</p>\n</li>\n<li><p>beforeSend：请求发送前的回调函数，用来修改请求发送前jqXHR对象，此功能用来设置自定义 HTTP 头信息，等等。该jqXHR和设置对象作为参数传递</p>\n</li>\n<li><p>cache：如果设置为 false ，浏览器将不缓存此页面。注意: 设置cache为 false将在 HEAD和GET请求中正常工作。它的工作原理是在GET请求参数中附加”timestamp”</p>\n</li>\n<li><p>context：这个对象用于设置Ajax相关回调函数的上下文。 默认情况下，这个上下文是一个ajax请求使用的参数设置对象.</p>\n</li>\n<li><p>data：发送到服务器的数据。将自动转换为请求字符串格式。GET 请求中将附加在 URL 后面，POST请求作为表单数据.</p>\n</li>\n<li><p>headers：一个额外的{键:值}对映射到请求一起发送。此设置会在beforeSend 函数调用之前被设置 ;因此，请求头中的设置值，会被beforeSend 函数内的设置覆盖</p>\n</li>\n<li><p>method：HTTP 请求方法 (比如：”POST”, “GET “, “PUT”，1.9之前使用“type”)。    </p>\n</li>\n</ul>\n<p>了解了这些参数，使用jQuery处理ajax请求就简单了</p>\n<p>例子:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">  method: <span class=\"string\">\"POST\"</span>,</span><br><span class=\"line\">  url: <span class=\"string\">\"some.php\"</span>,</span><br><span class=\"line\">  data: &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"John\"</span>, <span class=\"attr\">location</span>: <span class=\"string\">\"Boston\"</span> &#125;</span><br><span class=\"line\">&#125;).done(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> msg </span>) </span>&#123;</span><br><span class=\"line\">  alert( <span class=\"string\">\"Data Saved: \"</span> + msg );</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"jQuery-get-settings-jQuery-post-settings\"><a href=\"#jQuery-get-settings-jQuery-post-settings\" class=\"headerlink\" title=\"jQuery.get( [settings] ) / jQuery.post( [settings ] )\"></a>jQuery.get( [settings] ) / jQuery.post( [settings ] )</h3><p>这两个方法专门用来处理get和post请求,<br>dataType：从服务器返回的预期的数据类型。默认：智能猜测（xml, json, script, 或 html）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">  url: url,</span><br><span class=\"line\">  data: data,</span><br><span class=\"line\">  success: success,</span><br><span class=\"line\">  dataType: dataType</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">  type: <span class=\"string\">\"POST\"</span>,</span><br><span class=\"line\">  url: url,</span><br><span class=\"line\">  data: data,</span><br><span class=\"line\">  success: success,</span><br><span class=\"line\">  dataType: dataType</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"jQuery-getJSON-url-data-success-data-textStatus-jqXHR\"><a href=\"#jQuery-getJSON-url-data-success-data-textStatus-jqXHR\" class=\"headerlink\" title=\"jQuery.getJSON( url [,data] [success(data, textStatus, jqXHR)])\"></a>jQuery.getJSON( url [,data] [success(data, textStatus, jqXHR)])</h3><p>使用一个HTTP GET请求从服务器加载JSON编码的数据，这是一个Ajax函数的缩写，这相当于:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">  dataType: <span class=\"string\">\"json\"</span>,</span><br><span class=\"line\">  url: url,</span><br><span class=\"line\">  data: data,</span><br><span class=\"line\">  success: success</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"thumbnailImageUrl":"https://kisky3.github.io/2019/08/30/Ajax/20190830.png","excerpt":"<p>关于jQuery ajax &amp; jsonp</p>","more":"<h3 id=\"jQuery-ajax-settings\"><a href=\"#jQuery-ajax-settings\" class=\"headerlink\" title=\"jQuery.ajax([settings])\"></a>jQuery.ajax([settings])</h3><p>我们可以用ajax发送了请求(get/post)</p>\n<p>ajax方法提供了几个常用的setting</p>\n<ul>\n<li><p>async：默认设置下，所有请求均为异步请求（也就是说这是默认设置为 true ）。如果需要发送同步请求，请将此选项设置为 false.</p>\n</li>\n<li><p>beforeSend：请求发送前的回调函数，用来修改请求发送前jqXHR对象，此功能用来设置自定义 HTTP 头信息，等等。该jqXHR和设置对象作为参数传递</p>\n</li>\n<li><p>cache：如果设置为 false ，浏览器将不缓存此页面。注意: 设置cache为 false将在 HEAD和GET请求中正常工作。它的工作原理是在GET请求参数中附加”timestamp”</p>\n</li>\n<li><p>context：这个对象用于设置Ajax相关回调函数的上下文。 默认情况下，这个上下文是一个ajax请求使用的参数设置对象.</p>\n</li>\n<li><p>data：发送到服务器的数据。将自动转换为请求字符串格式。GET 请求中将附加在 URL 后面，POST请求作为表单数据.</p>\n</li>\n<li><p>headers：一个额外的{键:值}对映射到请求一起发送。此设置会在beforeSend 函数调用之前被设置 ;因此，请求头中的设置值，会被beforeSend 函数内的设置覆盖</p>\n</li>\n<li><p>method：HTTP 请求方法 (比如：”POST”, “GET “, “PUT”，1.9之前使用“type”)。    </p>\n</li>\n</ul>\n<p>了解了这些参数，使用jQuery处理ajax请求就简单了</p>\n<p>例子:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">  method: <span class=\"string\">\"POST\"</span>,</span><br><span class=\"line\">  url: <span class=\"string\">\"some.php\"</span>,</span><br><span class=\"line\">  data: &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"John\"</span>, <span class=\"attr\">location</span>: <span class=\"string\">\"Boston\"</span> &#125;</span><br><span class=\"line\">&#125;).done(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> msg </span>) </span>&#123;</span><br><span class=\"line\">  alert( <span class=\"string\">\"Data Saved: \"</span> + msg );</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"jQuery-get-settings-jQuery-post-settings\"><a href=\"#jQuery-get-settings-jQuery-post-settings\" class=\"headerlink\" title=\"jQuery.get( [settings] ) / jQuery.post( [settings ] )\"></a>jQuery.get( [settings] ) / jQuery.post( [settings ] )</h3><p>这两个方法专门用来处理get和post请求,<br>dataType：从服务器返回的预期的数据类型。默认：智能猜测（xml, json, script, 或 html）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">  url: url,</span><br><span class=\"line\">  data: data,</span><br><span class=\"line\">  success: success,</span><br><span class=\"line\">  dataType: dataType</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">  type: <span class=\"string\">\"POST\"</span>,</span><br><span class=\"line\">  url: url,</span><br><span class=\"line\">  data: data,</span><br><span class=\"line\">  success: success,</span><br><span class=\"line\">  dataType: dataType</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"jQuery-getJSON-url-data-success-data-textStatus-jqXHR\"><a href=\"#jQuery-getJSON-url-data-success-data-textStatus-jqXHR\" class=\"headerlink\" title=\"jQuery.getJSON( url [,data] [success(data, textStatus, jqXHR)])\"></a>jQuery.getJSON( url [,data] [success(data, textStatus, jqXHR)])</h3><p>使用一个HTTP GET请求从服务器加载JSON编码的数据，这是一个Ajax函数的缩写，这相当于:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">  dataType: <span class=\"string\">\"json\"</span>,</span><br><span class=\"line\">  url: url,</span><br><span class=\"line\">  data: data,</span><br><span class=\"line\">  success: success</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>"},{"title":"CSS TIPS","date":"2019-01-11T14:24:59.000Z","clearReading":true,"coverCaption":"Hello World, Hello Programming","coverImage":"cover.jpg","coverSize":"partial","comments":0,"top":true,"_content":"About common css tips. Continuously update here.\n<!--more-->\n{% alert info no-icon %}\n#### 1. CSS关闭按钮\n{% endalert %}\n\n```CSS\n.c-modal-close_button::before {\n   content: \"\\00D7\";\n}\n\n.c-modal-close_button {\n   position: absolute;\n   top: 8px;\n   right: 15px;\n   font-size: 25px;\n   color: var(--color-navy-e9);\n}\n```\n\n***\n{% alert info no-icon %}\n#### 2. [Input]伪类实现输入框active时改变背景颜色\n{% endalert %}\n```CSS\ninput[name=\"input\"]:focus{\n    background:var(--color-gray-f8);\n}\n```\n***\n{% alert info no-icon %}\n#### 3. [Input]去掉Input自带淡蓝色边框\n{% endalert %}\n```CSS\ninput[type=\"text\"],\ninput[type=\"password\"],\ntextarea,\nselect {\n    outline: none;\n}\n```\n***\n{% alert info no-icon %}\n#### 4. CSS伪元素实现三角形\n{% endalert %}\n```CSS\n.triangle{\n    width: 200px;\n    height: 100px;\n    border-radius: 5px;\n    border: 2px solid #000;\n    position: relative;\n }\n .triangle:after{\n    content: \"\";\n    position: absolute;\n    left: 200px;\n    top:12px;\n    width: 0;\n    height: 0;\n    border-top: 10px solid transparent;\n    border-left: 10px solid #fff;\n    border-right: 10px solid transparent;\n    border-bottom: 10px solid transparent;\n }\n .triangle:before{\n    content: \"\";\n    position: absolute;\n    left: 200px;\n    top:10px;\n    width: 0;\n    height: 0;\n    border-top: 12px solid transparent;\n    border-left: 12px solid #000;\n    border-right: 12px solid transparent;\n    border-bottom: 12px solid transparent;\n  }\n```\n***\n{% alert info no-icon %}\n#### 5. CSS上下跳动的动画效果\n{% endalert %}\n```CSS\n.c-style-item:hover {\n  background:var(--color-green-00);\n  color:red;\n  animation: shake 2s infinite;\n  opacity: 1;\n}\n\n@keyframes shake {\n  0% {\n    transform: translate(0px, 0px);\n  }\n  50% {\n    transform: translate(0px, -10px);\n  }\n  100% {\n    transform: translate(0px, 0px);\n  }\n}\n```\n***\n{% alert info no-icon %}\n#### 6.CSS不固定宽度模块屏幕居中\n{% endalert %}\n```CSS\n.c-dialog {\n     position: absolute;\n     left: 50%;\n     top: 50%;\n     transform: translate(-50%,-50%);\n     border: solid 1px #ccc;\n     background: #ccc;\n   }\n```\n\n***\n{% alert info no-icon %}\n#### 7. HTML使用pre的情况下，让长文字自动换行\n{% endalert %}\n```CSS\npre{\n  white-space:pre-wrap;\n  word-wrap:break-word;\n}\n\n/*Parent*/\n.c-modal {\n   ...\n   word-wrap: break-word;\n   white-space : normal\n}\n```\n***\n{% alert info no-icon %}\n#### 8. 纯CSS3实现点击行展开\n{% endalert %}\n```HTML\n  <label class=\"drop\" for=\"_1\">Collapse 1 </label>\n  <input id=\"_1\" type=\"checkbox\">\n  <div>This is content text 1</div>\n  \n  <label class=\"drop\" for=\"_2\">Collapse 1 </label>\n  <input id=\"_2\" type=\"checkbox\">\n  <div>This is content text 2</div>\n  \n  <label class=\"drop\" for=\"_3\">Collapse 1 </label>\n  <input id=\"_3\" type=\"checkbox\">\n  <div>This is content text 3</div>\n```\n\n```CSS\n.drop {\n  cursor: pointer;\n  display: block;\n  background: #090;\n   }\n\n.drop+input {\n  display: none;\n  /* hide the checkboxes */\n}\n\n.drop+input+div {\n  display: none;\n }\n\n.drop+input:checked+div {\n  display: block;\n }\n```\n","source":"_posts/CSSTip.md","raw":"---\ntitle: CSS TIPS\ndate: 2019-01-11 23:24:59\ntags:\n- CSS\nclearReading: true\ncoverCaption: \"Hello World, Hello Programming\"\ncoverImage: cover.jpg\ncoverSize: partial\ncomments: false\ncategories: Front-end Knowledge\ntop: true\n---\nAbout common css tips. Continuously update here.\n<!--more-->\n{% alert info no-icon %}\n#### 1. CSS关闭按钮\n{% endalert %}\n\n```CSS\n.c-modal-close_button::before {\n   content: \"\\00D7\";\n}\n\n.c-modal-close_button {\n   position: absolute;\n   top: 8px;\n   right: 15px;\n   font-size: 25px;\n   color: var(--color-navy-e9);\n}\n```\n\n***\n{% alert info no-icon %}\n#### 2. [Input]伪类实现输入框active时改变背景颜色\n{% endalert %}\n```CSS\ninput[name=\"input\"]:focus{\n    background:var(--color-gray-f8);\n}\n```\n***\n{% alert info no-icon %}\n#### 3. [Input]去掉Input自带淡蓝色边框\n{% endalert %}\n```CSS\ninput[type=\"text\"],\ninput[type=\"password\"],\ntextarea,\nselect {\n    outline: none;\n}\n```\n***\n{% alert info no-icon %}\n#### 4. CSS伪元素实现三角形\n{% endalert %}\n```CSS\n.triangle{\n    width: 200px;\n    height: 100px;\n    border-radius: 5px;\n    border: 2px solid #000;\n    position: relative;\n }\n .triangle:after{\n    content: \"\";\n    position: absolute;\n    left: 200px;\n    top:12px;\n    width: 0;\n    height: 0;\n    border-top: 10px solid transparent;\n    border-left: 10px solid #fff;\n    border-right: 10px solid transparent;\n    border-bottom: 10px solid transparent;\n }\n .triangle:before{\n    content: \"\";\n    position: absolute;\n    left: 200px;\n    top:10px;\n    width: 0;\n    height: 0;\n    border-top: 12px solid transparent;\n    border-left: 12px solid #000;\n    border-right: 12px solid transparent;\n    border-bottom: 12px solid transparent;\n  }\n```\n***\n{% alert info no-icon %}\n#### 5. CSS上下跳动的动画效果\n{% endalert %}\n```CSS\n.c-style-item:hover {\n  background:var(--color-green-00);\n  color:red;\n  animation: shake 2s infinite;\n  opacity: 1;\n}\n\n@keyframes shake {\n  0% {\n    transform: translate(0px, 0px);\n  }\n  50% {\n    transform: translate(0px, -10px);\n  }\n  100% {\n    transform: translate(0px, 0px);\n  }\n}\n```\n***\n{% alert info no-icon %}\n#### 6.CSS不固定宽度模块屏幕居中\n{% endalert %}\n```CSS\n.c-dialog {\n     position: absolute;\n     left: 50%;\n     top: 50%;\n     transform: translate(-50%,-50%);\n     border: solid 1px #ccc;\n     background: #ccc;\n   }\n```\n\n***\n{% alert info no-icon %}\n#### 7. HTML使用pre的情况下，让长文字自动换行\n{% endalert %}\n```CSS\npre{\n  white-space:pre-wrap;\n  word-wrap:break-word;\n}\n\n/*Parent*/\n.c-modal {\n   ...\n   word-wrap: break-word;\n   white-space : normal\n}\n```\n***\n{% alert info no-icon %}\n#### 8. 纯CSS3实现点击行展开\n{% endalert %}\n```HTML\n  <label class=\"drop\" for=\"_1\">Collapse 1 </label>\n  <input id=\"_1\" type=\"checkbox\">\n  <div>This is content text 1</div>\n  \n  <label class=\"drop\" for=\"_2\">Collapse 1 </label>\n  <input id=\"_2\" type=\"checkbox\">\n  <div>This is content text 2</div>\n  \n  <label class=\"drop\" for=\"_3\">Collapse 1 </label>\n  <input id=\"_3\" type=\"checkbox\">\n  <div>This is content text 3</div>\n```\n\n```CSS\n.drop {\n  cursor: pointer;\n  display: block;\n  background: #090;\n   }\n\n.drop+input {\n  display: none;\n  /* hide the checkboxes */\n}\n\n.drop+input+div {\n  display: none;\n }\n\n.drop+input:checked+div {\n  display: block;\n }\n```\n","slug":"CSSTip","published":1,"updated":"2019-11-23T23:54:38.000Z","layout":"post","photos":[],"link":"","_id":"ck3it6k140006teyih20glrf9","content":"<p>About common css tips. Continuously update here.</p>\n<a id=\"more\"></a>\n<div class=\"alert info no-icon\"><h4 id=\"1-CSS关闭按钮\"><a href=\"#1-CSS关闭按钮\" class=\"headerlink\" title=\"1. CSS关闭按钮\"></a>1. CSS关闭按钮</h4></div>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.c-modal-close_button</span><span class=\"selector-pseudo\">::before</span> &#123;</span><br><span class=\"line\">   <span class=\"attribute\">content</span>: <span class=\"string\">\"\\00D7\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.c-modal-close_button</span> &#123;</span><br><span class=\"line\">   <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">   <span class=\"attribute\">top</span>: <span class=\"number\">8px</span>;</span><br><span class=\"line\">   <span class=\"attribute\">right</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">   <span class=\"attribute\">font-size</span>: <span class=\"number\">25px</span>;</span><br><span class=\"line\">   <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-navy-e9);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<div class=\"alert info no-icon\"><h4 id=\"2-Input-伪类实现输入框active时改变背景颜色\"><a href=\"#2-Input-伪类实现输入框active时改变背景颜色\" class=\"headerlink\" title=\"2. [Input]伪类实现输入框active时改变背景颜色\"></a>2. [Input]伪类实现输入框active时改变背景颜色</h4></div>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-attr\">[name=\"input\"]</span><span class=\"selector-pseudo\">:focus</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:<span class=\"built_in\">var</span>(--color-gray-f8);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<div class=\"alert info no-icon\"><h4 id=\"3-Input-去掉Input自带淡蓝色边框\"><a href=\"#3-Input-去掉Input自带淡蓝色边框\" class=\"headerlink\" title=\"3. [Input]去掉Input自带淡蓝色边框\"></a>3. [Input]去掉Input自带淡蓝色边框</h4></div>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=\"text\"]</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=\"password\"]</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">textarea</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">select</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">outline</span>: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<div class=\"alert info no-icon\"><h4 id=\"4-CSS伪元素实现三角形\"><a href=\"#4-CSS伪元素实现三角形\" class=\"headerlink\" title=\"4. CSS伪元素实现三角形\"></a>4. CSS伪元素实现三角形</h4></div>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.triangle</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid <span class=\"number\">#000</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"selector-class\">.triangle</span><span class=\"selector-pseudo\">:after</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>:<span class=\"number\">12px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">10px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">border-left</span>: <span class=\"number\">10px</span> solid <span class=\"number\">#fff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-right</span>: <span class=\"number\">10px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">10px</span> solid transparent;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"selector-class\">.triangle</span><span class=\"selector-pseudo\">:before</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>:<span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">12px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">border-left</span>: <span class=\"number\">12px</span> solid <span class=\"number\">#000</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-right</span>: <span class=\"number\">12px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">12px</span> solid transparent;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<div class=\"alert info no-icon\"><h4 id=\"5-CSS上下跳动的动画效果\"><a href=\"#5-CSS上下跳动的动画效果\" class=\"headerlink\" title=\"5. CSS上下跳动的动画效果\"></a>5. CSS上下跳动的动画效果</h4></div>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.c-style-item</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:<span class=\"built_in\">var</span>(--color-green-00);</span><br><span class=\"line\">  <span class=\"attribute\">color</span>:red;</span><br><span class=\"line\">  <span class=\"attribute\">animation</span>: shake <span class=\"number\">2s</span> infinite;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"keyword\">keyframes</span> shake &#123;</span><br><span class=\"line\">  0% &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(0px, 0px);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  50% &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(0px, -10px);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  100% &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(0px, 0px);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<div class=\"alert info no-icon\"><h4 id=\"6-CSS不固定宽度模块屏幕居中\"><a href=\"#6-CSS不固定宽度模块屏幕居中\" class=\"headerlink\" title=\"6.CSS不固定宽度模块屏幕居中\"></a>6.CSS不固定宽度模块屏幕居中</h4></div>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.c-dialog</span> &#123;</span><br><span class=\"line\">     <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">     <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">     <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">     <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-50%,-50%);</span><br><span class=\"line\">     <span class=\"attribute\">border</span>: solid <span class=\"number\">1px</span> <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">     <span class=\"attribute\">background</span>: <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<div class=\"alert info no-icon\"><h4 id=\"7-HTML使用pre的情况下，让长文字自动换行\"><a href=\"#7-HTML使用pre的情况下，让长文字自动换行\" class=\"headerlink\" title=\"7. HTML使用pre的情况下，让长文字自动换行\"></a>7. HTML使用pre的情况下，让长文字自动换行</h4></div>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">pre</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">white-space</span>:pre-wrap;</span><br><span class=\"line\">  <span class=\"attribute\">word-wrap</span>:break-word;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*Parent*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.c-modal</span> &#123;</span><br><span class=\"line\">   ...</span><br><span class=\"line\">   <span class=\"selector-tag\">word-wrap</span>: <span class=\"selector-tag\">break-word</span>;</span><br><span class=\"line\">   <span class=\"selector-tag\">white-space</span> : <span class=\"selector-tag\">normal</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<div class=\"alert info no-icon\"><h4 id=\"8-纯CSS3实现点击行展开\"><a href=\"#8-纯CSS3实现点击行展开\" class=\"headerlink\" title=\"8. 纯CSS3实现点击行展开\"></a>8. 纯CSS3实现点击行展开</h4></div>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"drop\"</span> <span class=\"attr\">for</span>=<span class=\"string\">\"_1\"</span>&gt;</span>Collapse 1 <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"_1\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>This is content text 1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"drop\"</span> <span class=\"attr\">for</span>=<span class=\"string\">\"_2\"</span>&gt;</span>Collapse 1 <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"_2\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>This is content text 2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"drop\"</span> <span class=\"attr\">for</span>=<span class=\"string\">\"_3\"</span>&gt;</span>Collapse 1 <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"_3\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>This is content text 3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.drop</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#090</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.drop</span>+<span class=\"selector-tag\">input</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: none;</span><br><span class=\"line\">  <span class=\"comment\">/* hide the checkboxes */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.drop</span>+<span class=\"selector-tag\">input</span>+<span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: none;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.drop</span>+<span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">:checked+div</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"thumbnailImageUrl":"https://kisky3.github.io/2019/01/11/CSSTip/cover.jpg","excerpt":"<p>About common css tips. Continuously update here.</p>","more":"<div class=\"alert info no-icon\"><h4 id=\"1-CSS关闭按钮\"><a href=\"#1-CSS关闭按钮\" class=\"headerlink\" title=\"1. CSS关闭按钮\"></a>1. CSS关闭按钮</h4></div>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.c-modal-close_button</span><span class=\"selector-pseudo\">::before</span> &#123;</span><br><span class=\"line\">   <span class=\"attribute\">content</span>: <span class=\"string\">\"\\00D7\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.c-modal-close_button</span> &#123;</span><br><span class=\"line\">   <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">   <span class=\"attribute\">top</span>: <span class=\"number\">8px</span>;</span><br><span class=\"line\">   <span class=\"attribute\">right</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">   <span class=\"attribute\">font-size</span>: <span class=\"number\">25px</span>;</span><br><span class=\"line\">   <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-navy-e9);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<div class=\"alert info no-icon\"><h4 id=\"2-Input-伪类实现输入框active时改变背景颜色\"><a href=\"#2-Input-伪类实现输入框active时改变背景颜色\" class=\"headerlink\" title=\"2. [Input]伪类实现输入框active时改变背景颜色\"></a>2. [Input]伪类实现输入框active时改变背景颜色</h4></div>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-attr\">[name=\"input\"]</span><span class=\"selector-pseudo\">:focus</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:<span class=\"built_in\">var</span>(--color-gray-f8);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<div class=\"alert info no-icon\"><h4 id=\"3-Input-去掉Input自带淡蓝色边框\"><a href=\"#3-Input-去掉Input自带淡蓝色边框\" class=\"headerlink\" title=\"3. [Input]去掉Input自带淡蓝色边框\"></a>3. [Input]去掉Input自带淡蓝色边框</h4></div>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=\"text\"]</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=\"password\"]</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">textarea</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">select</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">outline</span>: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<div class=\"alert info no-icon\"><h4 id=\"4-CSS伪元素实现三角形\"><a href=\"#4-CSS伪元素实现三角形\" class=\"headerlink\" title=\"4. CSS伪元素实现三角形\"></a>4. CSS伪元素实现三角形</h4></div>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.triangle</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid <span class=\"number\">#000</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"selector-class\">.triangle</span><span class=\"selector-pseudo\">:after</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>:<span class=\"number\">12px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">10px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">border-left</span>: <span class=\"number\">10px</span> solid <span class=\"number\">#fff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-right</span>: <span class=\"number\">10px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">10px</span> solid transparent;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"selector-class\">.triangle</span><span class=\"selector-pseudo\">:before</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>:<span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">12px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">border-left</span>: <span class=\"number\">12px</span> solid <span class=\"number\">#000</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-right</span>: <span class=\"number\">12px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">12px</span> solid transparent;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<div class=\"alert info no-icon\"><h4 id=\"5-CSS上下跳动的动画效果\"><a href=\"#5-CSS上下跳动的动画效果\" class=\"headerlink\" title=\"5. CSS上下跳动的动画效果\"></a>5. CSS上下跳动的动画效果</h4></div>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.c-style-item</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:<span class=\"built_in\">var</span>(--color-green-00);</span><br><span class=\"line\">  <span class=\"attribute\">color</span>:red;</span><br><span class=\"line\">  <span class=\"attribute\">animation</span>: shake <span class=\"number\">2s</span> infinite;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"keyword\">keyframes</span> shake &#123;</span><br><span class=\"line\">  0% &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(0px, 0px);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  50% &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(0px, -10px);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  100% &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(0px, 0px);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<div class=\"alert info no-icon\"><h4 id=\"6-CSS不固定宽度模块屏幕居中\"><a href=\"#6-CSS不固定宽度模块屏幕居中\" class=\"headerlink\" title=\"6.CSS不固定宽度模块屏幕居中\"></a>6.CSS不固定宽度模块屏幕居中</h4></div>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.c-dialog</span> &#123;</span><br><span class=\"line\">     <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">     <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">     <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">     <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-50%,-50%);</span><br><span class=\"line\">     <span class=\"attribute\">border</span>: solid <span class=\"number\">1px</span> <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">     <span class=\"attribute\">background</span>: <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<div class=\"alert info no-icon\"><h4 id=\"7-HTML使用pre的情况下，让长文字自动换行\"><a href=\"#7-HTML使用pre的情况下，让长文字自动换行\" class=\"headerlink\" title=\"7. HTML使用pre的情况下，让长文字自动换行\"></a>7. HTML使用pre的情况下，让长文字自动换行</h4></div>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">pre</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">white-space</span>:pre-wrap;</span><br><span class=\"line\">  <span class=\"attribute\">word-wrap</span>:break-word;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*Parent*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.c-modal</span> &#123;</span><br><span class=\"line\">   ...</span><br><span class=\"line\">   <span class=\"selector-tag\">word-wrap</span>: <span class=\"selector-tag\">break-word</span>;</span><br><span class=\"line\">   <span class=\"selector-tag\">white-space</span> : <span class=\"selector-tag\">normal</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<div class=\"alert info no-icon\"><h4 id=\"8-纯CSS3实现点击行展开\"><a href=\"#8-纯CSS3实现点击行展开\" class=\"headerlink\" title=\"8. 纯CSS3实现点击行展开\"></a>8. 纯CSS3实现点击行展开</h4></div>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"drop\"</span> <span class=\"attr\">for</span>=<span class=\"string\">\"_1\"</span>&gt;</span>Collapse 1 <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"_1\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>This is content text 1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"drop\"</span> <span class=\"attr\">for</span>=<span class=\"string\">\"_2\"</span>&gt;</span>Collapse 1 <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"_2\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>This is content text 2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"drop\"</span> <span class=\"attr\">for</span>=<span class=\"string\">\"_3\"</span>&gt;</span>Collapse 1 <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"_3\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>This is content text 3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.drop</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#090</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.drop</span>+<span class=\"selector-tag\">input</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: none;</span><br><span class=\"line\">  <span class=\"comment\">/* hide the checkboxes */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.drop</span>+<span class=\"selector-tag\">input</span>+<span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: none;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.drop</span>+<span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">:checked+div</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>"},{"title":"CSRF Attack And Prevention","date":"2018-10-14T04:58:15.000Z","clearReading":true,"thumbnailImage":"20181014.png","thumbnailImagePosition":"left","coverImage":"cover.jpg","coverCaption":"Hello World, Hello Programming","coverSize":"partial","comments":0,"_content":"CSRF攻击及防范措施\n<!--more-->\n### CSRF是什么\nCSRF全称为跨站请求伪造（Cross-site request forgery），\n\n是一种网络攻击方式，也被称为 one-click attack 或者 session riding。\n简单说来就是已经利用登陆成功的User强制实行某些操作的恶意攻击行为。\n\n***\n\n### CSRF攻击原理\n其原理是攻击者构造网站后台某个功能接口的请求地址，诱导用户去点击或者用特殊方法让该请求地址自动加载。\n用户在登录状态下这个请求被服务端接收后会被误以为是用户合法的操作。对于 GET 形式的接口地址可轻易被攻击，\n对于 POST 形式的接口地址也不是百分百安全，攻击者可诱导用户进入带 Form 表单可用POST方式提交参数的页面。\n<img src=\"./1.png\" style=\"width:500px\">\n\n角色：\n- 正常浏览网页的用户： User\n- 正规的但是具有漏洞的网站： WebA\n- 利用CSRF进行攻击百度网站： WebB\n\n例子：\n比如有shop.example.com这样一个购物网站，用户通过用户名和密码可以登录。其中有点击按钮重设密码的功能。\n当用户点击按钮更改密码时，下图的送信请求将会被提交至WebA的服务器\n\nURL：\n 1. http://shop.example.com/password/change\n 2. Parmeter:\n 3. new_pass:XXXXX\n 4. new_pass_conf:XXXXX\n\n说明：\n1.User正常登陆网页WebA，WebA通过用户的认证并在User的浏览器中产生Cookie(证明是User本人登陆)\n\n2.攻击者伪造能发送同样请求的网站WebB。利用简单的Javascript便可达到目的。\n\n3.攻击者把该伪造的网站的URL放到img的src里上传，当User登陆后，打开网页时便会自动加载图片，WebB会利用用户的浏览器访问WebA。\n由于User是在登录状态下，所以User的浏览器根据WebB的要求，带着1中生成的Cookie访问WebA。\n\n4.WebA接收到User浏览器的请求，并带着用户的Cookie(如例子中的请求)，要求修改密码。\n\n5.WebA误以为是用户的操作，响应修改密码的请求。User密码被盗。\n\n以上Web便达到了在用户不知情的情况下，利用用户登陆后的Cookie进行用户的模拟操作过程。\n\n***\n### CSRF防范措施\n1.服务端在收到路由请求时，生成一个随机数，在渲染请求页面时把随机数埋入页面\n（一般埋入 form 表单内，）\n\n2.服务端设置setCookie，把该随机数作为session种入用户浏览器。\n(加入保存在Cookie中，旧Token消耗后，新的Token会被生成，造成用户混乱。而Session能避免此问题。)\n\n3.当用户发送 GET 或者 POST 请求时带上_csrf_token参数\n（对于 Form 表单直接提交即可，因为会自动把当前表单内所有的 input 提交给后台，包括_csrf_token）\n\n4.后台在接受到请求后解析请求的cookie获取_csrf_token的值，然后和用户请求提交的_csrf_token做个比较，如果相等表示请求是合法的。\n\n（下图是某电商网站的真实设置，这里页面上设置的 token和session里设置的token 虽然不直接相等，但 md5(‘1474357164624’) === ‘4bd4e512b0fbd9357150649adadedd4e’，后台还是很好计算的）\n\n<img src=\"./2.png\" style=\"width:500px\">\n\n<img src=\"./3.png\" style=\"width:500px\">\n\n注意：尽量避免使用Get。因为能在发送请求时能在URL处暴露token信息。\n\n***\n### 参考\n- [「每日一题」CSRF 是什么？](https://zhuanlan.zhihu.com/p/22521378);\n- [CSRF攻击原理及防护](https://www.jianshu.com/p/00fa457f6d3e);\n\n\n\n","source":"_posts/CSRF攻击及防范措施.md","raw":"---\ntitle: CSRF Attack And Prevention\ndate: 2018-10-14 13:58:15\nclearReading: true\nthumbnailImage: 20181014.png\nthumbnailImagePosition: left\ncoverImage: cover.jpg\ncoverCaption: \"Hello World, Hello Programming\"\ncoverSize: partial\ncomments: false\ntags: \n- CSRF\ncategories: Back-end Knowledge\n---\nCSRF攻击及防范措施\n<!--more-->\n### CSRF是什么\nCSRF全称为跨站请求伪造（Cross-site request forgery），\n\n是一种网络攻击方式，也被称为 one-click attack 或者 session riding。\n简单说来就是已经利用登陆成功的User强制实行某些操作的恶意攻击行为。\n\n***\n\n### CSRF攻击原理\n其原理是攻击者构造网站后台某个功能接口的请求地址，诱导用户去点击或者用特殊方法让该请求地址自动加载。\n用户在登录状态下这个请求被服务端接收后会被误以为是用户合法的操作。对于 GET 形式的接口地址可轻易被攻击，\n对于 POST 形式的接口地址也不是百分百安全，攻击者可诱导用户进入带 Form 表单可用POST方式提交参数的页面。\n<img src=\"./1.png\" style=\"width:500px\">\n\n角色：\n- 正常浏览网页的用户： User\n- 正规的但是具有漏洞的网站： WebA\n- 利用CSRF进行攻击百度网站： WebB\n\n例子：\n比如有shop.example.com这样一个购物网站，用户通过用户名和密码可以登录。其中有点击按钮重设密码的功能。\n当用户点击按钮更改密码时，下图的送信请求将会被提交至WebA的服务器\n\nURL：\n 1. http://shop.example.com/password/change\n 2. Parmeter:\n 3. new_pass:XXXXX\n 4. new_pass_conf:XXXXX\n\n说明：\n1.User正常登陆网页WebA，WebA通过用户的认证并在User的浏览器中产生Cookie(证明是User本人登陆)\n\n2.攻击者伪造能发送同样请求的网站WebB。利用简单的Javascript便可达到目的。\n\n3.攻击者把该伪造的网站的URL放到img的src里上传，当User登陆后，打开网页时便会自动加载图片，WebB会利用用户的浏览器访问WebA。\n由于User是在登录状态下，所以User的浏览器根据WebB的要求，带着1中生成的Cookie访问WebA。\n\n4.WebA接收到User浏览器的请求，并带着用户的Cookie(如例子中的请求)，要求修改密码。\n\n5.WebA误以为是用户的操作，响应修改密码的请求。User密码被盗。\n\n以上Web便达到了在用户不知情的情况下，利用用户登陆后的Cookie进行用户的模拟操作过程。\n\n***\n### CSRF防范措施\n1.服务端在收到路由请求时，生成一个随机数，在渲染请求页面时把随机数埋入页面\n（一般埋入 form 表单内，）\n\n2.服务端设置setCookie，把该随机数作为session种入用户浏览器。\n(加入保存在Cookie中，旧Token消耗后，新的Token会被生成，造成用户混乱。而Session能避免此问题。)\n\n3.当用户发送 GET 或者 POST 请求时带上_csrf_token参数\n（对于 Form 表单直接提交即可，因为会自动把当前表单内所有的 input 提交给后台，包括_csrf_token）\n\n4.后台在接受到请求后解析请求的cookie获取_csrf_token的值，然后和用户请求提交的_csrf_token做个比较，如果相等表示请求是合法的。\n\n（下图是某电商网站的真实设置，这里页面上设置的 token和session里设置的token 虽然不直接相等，但 md5(‘1474357164624’) === ‘4bd4e512b0fbd9357150649adadedd4e’，后台还是很好计算的）\n\n<img src=\"./2.png\" style=\"width:500px\">\n\n<img src=\"./3.png\" style=\"width:500px\">\n\n注意：尽量避免使用Get。因为能在发送请求时能在URL处暴露token信息。\n\n***\n### 参考\n- [「每日一题」CSRF 是什么？](https://zhuanlan.zhihu.com/p/22521378);\n- [CSRF攻击原理及防护](https://www.jianshu.com/p/00fa457f6d3e);\n\n\n\n","slug":"CSRF攻击及防范措施","published":1,"updated":"2019-11-23T23:54:38.000Z","layout":"post","photos":[],"link":"","_id":"ck3it6k180008teyi2btp4bxh","content":"<p>CSRF攻击及防范措施</p>\n<a id=\"more\"></a>\n<h3 id=\"CSRF是什么\"><a href=\"#CSRF是什么\" class=\"headerlink\" title=\"CSRF是什么\"></a>CSRF是什么</h3><p>CSRF全称为跨站请求伪造（Cross-site request forgery），</p>\n<p>是一种网络攻击方式，也被称为 one-click attack 或者 session riding。<br>简单说来就是已经利用登陆成功的User强制实行某些操作的恶意攻击行为。</p>\n<hr>\n<h3 id=\"CSRF攻击原理\"><a href=\"#CSRF攻击原理\" class=\"headerlink\" title=\"CSRF攻击原理\"></a>CSRF攻击原理</h3><p>其原理是攻击者构造网站后台某个功能接口的请求地址，诱导用户去点击或者用特殊方法让该请求地址自动加载。<br>用户在登录状态下这个请求被服务端接收后会被误以为是用户合法的操作。对于 GET 形式的接口地址可轻易被攻击，<br>对于 POST 形式的接口地址也不是百分百安全，攻击者可诱导用户进入带 Form 表单可用POST方式提交参数的页面。<br><img src=\"./1.png\" style=\"width:500px\"></p>\n<p>角色：</p>\n<ul>\n<li>正常浏览网页的用户： User</li>\n<li>正规的但是具有漏洞的网站： WebA</li>\n<li>利用CSRF进行攻击百度网站： WebB</li>\n</ul>\n<p>例子：<br>比如有shop.example.com这样一个购物网站，用户通过用户名和密码可以登录。其中有点击按钮重设密码的功能。<br>当用户点击按钮更改密码时，下图的送信请求将会被提交至WebA的服务器</p>\n<p>URL：</p>\n<ol>\n<li><a href=\"http://shop.example.com/password/change\" target=\"_blank\" rel=\"noopener\">http://shop.example.com/password/change</a></li>\n<li>Parmeter:</li>\n<li>new_pass:XXXXX</li>\n<li>new_pass_conf:XXXXX</li>\n</ol>\n<p>说明：<br>1.User正常登陆网页WebA，WebA通过用户的认证并在User的浏览器中产生Cookie(证明是User本人登陆)</p>\n<p>2.攻击者伪造能发送同样请求的网站WebB。利用简单的Javascript便可达到目的。</p>\n<p>3.攻击者把该伪造的网站的URL放到img的src里上传，当User登陆后，打开网页时便会自动加载图片，WebB会利用用户的浏览器访问WebA。<br>由于User是在登录状态下，所以User的浏览器根据WebB的要求，带着1中生成的Cookie访问WebA。</p>\n<p>4.WebA接收到User浏览器的请求，并带着用户的Cookie(如例子中的请求)，要求修改密码。</p>\n<p>5.WebA误以为是用户的操作，响应修改密码的请求。User密码被盗。</p>\n<p>以上Web便达到了在用户不知情的情况下，利用用户登陆后的Cookie进行用户的模拟操作过程。</p>\n<hr>\n<h3 id=\"CSRF防范措施\"><a href=\"#CSRF防范措施\" class=\"headerlink\" title=\"CSRF防范措施\"></a>CSRF防范措施</h3><p>1.服务端在收到路由请求时，生成一个随机数，在渲染请求页面时把随机数埋入页面<br>（一般埋入 form 表单内，）</p>\n<p>2.服务端设置setCookie，把该随机数作为session种入用户浏览器。<br>(加入保存在Cookie中，旧Token消耗后，新的Token会被生成，造成用户混乱。而Session能避免此问题。)</p>\n<p>3.当用户发送 GET 或者 POST 请求时带上_csrf_token参数<br>（对于 Form 表单直接提交即可，因为会自动把当前表单内所有的 input 提交给后台，包括_csrf_token）</p>\n<p>4.后台在接受到请求后解析请求的cookie获取_csrf_token的值，然后和用户请求提交的_csrf_token做个比较，如果相等表示请求是合法的。</p>\n<p>（下图是某电商网站的真实设置，这里页面上设置的 token和session里设置的token 虽然不直接相等，但 md5(‘1474357164624’) === ‘4bd4e512b0fbd9357150649adadedd4e’，后台还是很好计算的）</p>\n<img src=\"./2.png\" style=\"width:500px\">\n\n<img src=\"./3.png\" style=\"width:500px\">\n\n<p>注意：尽量避免使用Get。因为能在发送请求时能在URL处暴露token信息。</p>\n<hr>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/22521378\" target=\"_blank\" rel=\"noopener\">「每日一题」CSRF 是什么？</a>;</li>\n<li><a href=\"https://www.jianshu.com/p/00fa457f6d3e\" target=\"_blank\" rel=\"noopener\">CSRF攻击原理及防护</a>;</li>\n</ul>\n","site":{"data":{}},"thumbnailImageUrl":"https://kisky3.github.io/2018/10/14/CSRF攻击及防范措施/20181014.png","excerpt":"<p>CSRF攻击及防范措施</p>","more":"<h3 id=\"CSRF是什么\"><a href=\"#CSRF是什么\" class=\"headerlink\" title=\"CSRF是什么\"></a>CSRF是什么</h3><p>CSRF全称为跨站请求伪造（Cross-site request forgery），</p>\n<p>是一种网络攻击方式，也被称为 one-click attack 或者 session riding。<br>简单说来就是已经利用登陆成功的User强制实行某些操作的恶意攻击行为。</p>\n<hr>\n<h3 id=\"CSRF攻击原理\"><a href=\"#CSRF攻击原理\" class=\"headerlink\" title=\"CSRF攻击原理\"></a>CSRF攻击原理</h3><p>其原理是攻击者构造网站后台某个功能接口的请求地址，诱导用户去点击或者用特殊方法让该请求地址自动加载。<br>用户在登录状态下这个请求被服务端接收后会被误以为是用户合法的操作。对于 GET 形式的接口地址可轻易被攻击，<br>对于 POST 形式的接口地址也不是百分百安全，攻击者可诱导用户进入带 Form 表单可用POST方式提交参数的页面。<br><img src=\"./1.png\" style=\"width:500px\"></p>\n<p>角色：</p>\n<ul>\n<li>正常浏览网页的用户： User</li>\n<li>正规的但是具有漏洞的网站： WebA</li>\n<li>利用CSRF进行攻击百度网站： WebB</li>\n</ul>\n<p>例子：<br>比如有shop.example.com这样一个购物网站，用户通过用户名和密码可以登录。其中有点击按钮重设密码的功能。<br>当用户点击按钮更改密码时，下图的送信请求将会被提交至WebA的服务器</p>\n<p>URL：</p>\n<ol>\n<li><a href=\"http://shop.example.com/password/change\" target=\"_blank\" rel=\"noopener\">http://shop.example.com/password/change</a></li>\n<li>Parmeter:</li>\n<li>new_pass:XXXXX</li>\n<li>new_pass_conf:XXXXX</li>\n</ol>\n<p>说明：<br>1.User正常登陆网页WebA，WebA通过用户的认证并在User的浏览器中产生Cookie(证明是User本人登陆)</p>\n<p>2.攻击者伪造能发送同样请求的网站WebB。利用简单的Javascript便可达到目的。</p>\n<p>3.攻击者把该伪造的网站的URL放到img的src里上传，当User登陆后，打开网页时便会自动加载图片，WebB会利用用户的浏览器访问WebA。<br>由于User是在登录状态下，所以User的浏览器根据WebB的要求，带着1中生成的Cookie访问WebA。</p>\n<p>4.WebA接收到User浏览器的请求，并带着用户的Cookie(如例子中的请求)，要求修改密码。</p>\n<p>5.WebA误以为是用户的操作，响应修改密码的请求。User密码被盗。</p>\n<p>以上Web便达到了在用户不知情的情况下，利用用户登陆后的Cookie进行用户的模拟操作过程。</p>\n<hr>\n<h3 id=\"CSRF防范措施\"><a href=\"#CSRF防范措施\" class=\"headerlink\" title=\"CSRF防范措施\"></a>CSRF防范措施</h3><p>1.服务端在收到路由请求时，生成一个随机数，在渲染请求页面时把随机数埋入页面<br>（一般埋入 form 表单内，）</p>\n<p>2.服务端设置setCookie，把该随机数作为session种入用户浏览器。<br>(加入保存在Cookie中，旧Token消耗后，新的Token会被生成，造成用户混乱。而Session能避免此问题。)</p>\n<p>3.当用户发送 GET 或者 POST 请求时带上_csrf_token参数<br>（对于 Form 表单直接提交即可，因为会自动把当前表单内所有的 input 提交给后台，包括_csrf_token）</p>\n<p>4.后台在接受到请求后解析请求的cookie获取_csrf_token的值，然后和用户请求提交的_csrf_token做个比较，如果相等表示请求是合法的。</p>\n<p>（下图是某电商网站的真实设置，这里页面上设置的 token和session里设置的token 虽然不直接相等，但 md5(‘1474357164624’) === ‘4bd4e512b0fbd9357150649adadedd4e’，后台还是很好计算的）</p>\n<img src=\"./2.png\" style=\"width:500px\">\n\n<img src=\"./3.png\" style=\"width:500px\">\n\n<p>注意：尽量避免使用Get。因为能在发送请求时能在URL处暴露token信息。</p>\n<hr>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/22521378\" target=\"_blank\" rel=\"noopener\">「每日一题」CSRF 是什么？</a>;</li>\n<li><a href=\"https://www.jianshu.com/p/00fa457f6d3e\" target=\"_blank\" rel=\"noopener\">CSRF攻击原理及防护</a>;</li>\n</ul>"},{"title":"About jQuery animation","date":"2019-08-30T10:37:21.000Z","clearReading":true,"thumbnailImage":"20190830.png","thumbnailImagePosition":"left","coverImage":"cover.jpg","coverCaption":"Hello World, Hello Programming","coverSize":"partial","comments":0,"_content":"关于jQuery动画API\n<!--more-->\n\n### jQuery 主要的动画控制API\n\n1 .show()\n2 .hide()\n3 .slideUp\n4 .slideDown\n5 .slideToggle\n6 .fadeIn\n7 .fadeOut\n8 .animate\n\n如上函数如何使用？演示使用方式\n\n***\n\n#### .hide()\n.hide([duration ] [,easing ] [,complete ])\n用于隐藏元素，没有参数的时候等同于直接设置display属性,当我们给hide设置事件时：hide(2000)会有一个消失的过程\n示例：\n```JS\n<style>\n  div {\n    background:#ccc;\n    width: 100px;\n    height: 100px;\n    border: 1px solid;\n  }\n  </style>\n</head>\n<body>\n<div> \n</div>\n</body>\n<script>\n$('div').hide()  // ==  $('.target').css('display', 'none')\n</script>\n\n```\n\n***\n\n#### .show()\n.show( [duration ] [, easing ] [, complete ] )\n用于显示元素，用法和hide类似给显示元素设置一个现实的时间\n```JS\n$('div').hide(2000)  // 隐藏时间为2s\n$('div').show(2000) //显示时间为2s\n```\n\n#### .slideUp\n.slideUp( [duration ] [, easing ] [, complete ] )\n用滑动动画隐藏一个匹配元素，方法将给匹配元素的高度的动画，这会导致页面的下面部分滑上去，当一个隐藏动画后，高度值达到0的时候，display 样式属性被设置为none，以确保该元素不再影响页面布局。\n效果：（代码基于hide）\n\n```\n$('div').slideUp()\n```\n\n***\n\n#### .slideDown\n用滑动动画显示一个匹配元素，方法将给匹配元素的高度的动画，这会导致页面的下面部分滑下去，弥补了显示的方式\n效果：（代码基于slideUp）\n\n***\n\n#### .slideToggle\n用滑动动画显示或隐藏一个匹配元素，方法将给匹配元素的高度的动画，这会导致页面中，在这个元素下面的内容往下或往上滑。display属性值保存在jQuery的数据缓存中，所以display可以方便以后可以恢复到其初始值。\n\n如果一个元素的display属性值为inline，然后是隐藏和显示，这个元素将再次显示inline。当一个隐藏动画后，高度值达到0的时候，display 样式属性被设置为none，以确保该元素不再影响页面布局。\n\n效果：\n连续调用两次，和使用.slideUp()、.slideDown效果相同\n\n***\n\n#### .fadeIn\n.fadeIn( [duration ] [, easing ] [, complete ] )\n通过淡入的方式显示匹配元素，参数含义和上面相同\n给div的css属性设置display:none\n\n$('div').fadeIn(2000)\n\n***\n\n#### .fadeOut\n.fadeOut( [duration ] [, easing ] [, complete ] )\n通过淡出的方式隐藏匹配元素\n取消div的css中的display:none\n\n***\n\n上面几个简单的动画不能满足需求的时候，jquery提供了自定义动画行为的方法\n\n#### .animate\n.animate( properties [, duration ] [, easing ] [, complete ] )\n```JS\n<div id=\"clickme\">\n  Click here\n</div>\n<img id=\"book\" src=\"book.png\" alt=\"\" width=\"100\" height=\"123\"\n  style=\"position: relative; left: 10px;\">\n```\n\n```JS\n$( \"#clickme\" ).click(function() {\n  $( \"#book\" ).animate({\n    opacity: 0.25,  // 图片透明度  渐变\n    left: \"+=50\",   //向左移动距离 -- 原基础上+50px;\n    height: \"toggle\"  // \n  }, 5000, function() {\n    // Animation complete.\n  });\n});\n```\nheight属性的目标值是'toggle'。由于之前图像是可见的，因此动画会将高度缩小为0以隐藏它。第二次点击然后反转此转换\n\n***\n\n### jQuery动画队列\njQuery提供了以下几种方法来操作动画队列。\n\n- stop([clearQuery],[gotoEnd]):停止当前jQuery对象里每个DOM元素上正在执行的动画。\n\n- queue([queueName,]callback):将callback动画数添加到当前jQuery对象里所有DOM元素的动画函数队列的尾部。\n\n- queue([queueName,]naeQueue):用newQueue动画函数队列代替当前jQuery对象里所的DOM元素的动画函数队列。\n\n- dequeue():执行动画函数队列头的第一个动画函数，并将该动画函数移出队列。\n\n- clearQueue([queueName]):清空动画函数队列中的所有动画函数。可选的 callback 参数是动画完成后所执行的函数名称。\n\n例子：\n```JS\n<style>  \n    div {  \n        width: 60px;   \n        height: 60px;  \n        position:absolute;  \n        top:60px;   \n        background: #f0f;  \n        display:none;  \n    }  \n    </style>  \n</head>  \n<body>  \n    <script type=\"text/javascript\" src=\"../jquery-1.8.0.js\">  \n    </script>  \n    <p>动画队列的长度是：<span></span></p>  \n    <div></div>  \n    <script type=\"text/javascript\">  \n    var div = $(\"div\");  \n    function runIt()  \n    {  \n        // 第1个动画：显示出来  \n        div.show(\"slow\");  \n        // 第2个动画：自动动画，水平左移300px  \n        div.animate({left:'+=300'},2000);  \n        // 第3个动画：卷起来  \n        div.slideToggle(1000);  \n        // 第4个动画：放下来  \n        div.slideToggle(\"fast\");  \n        // 第5个动画：自动动画，水平右移300px  \n        div.animate({left:'-=300'},1500);  \n        // 第6个动画：隐藏出来  \n        div.hide(\"slow\");  \n        // 第7个动画：显示出来  \n        div.show(1200);  \n        // 第8个动画：卷起来，动画完成后回调runIt  \n        div.slideUp(\"normal\", runIt);  \n    }  \n    // 控制每0.1秒调用一次该方法，该方法用于显示动画队列的长度  \n    function showIt()  \n    {  \n        var n = div.queue();  \n        $(\"span\").text(n.length);  \n        setTimeout(showIt, 100);  \n    }  \n    runIt();  \n    showIt();  \n    </script>  \n```\n","source":"_posts/Animation.md","raw":"---\ntitle: About jQuery animation\ndate: 2019-08-30 19:37:21\ntags:\n- jQuery\nclearReading: true\nthumbnailImage: 20190830.png\nthumbnailImagePosition: left\ncoverImage: cover.jpg\ncoverCaption: \"Hello World, Hello Programming\"\ncoverSize: partial\ncomments: false\ncategories: Front-end Knowledge\n---\n关于jQuery动画API\n<!--more-->\n\n### jQuery 主要的动画控制API\n\n1 .show()\n2 .hide()\n3 .slideUp\n4 .slideDown\n5 .slideToggle\n6 .fadeIn\n7 .fadeOut\n8 .animate\n\n如上函数如何使用？演示使用方式\n\n***\n\n#### .hide()\n.hide([duration ] [,easing ] [,complete ])\n用于隐藏元素，没有参数的时候等同于直接设置display属性,当我们给hide设置事件时：hide(2000)会有一个消失的过程\n示例：\n```JS\n<style>\n  div {\n    background:#ccc;\n    width: 100px;\n    height: 100px;\n    border: 1px solid;\n  }\n  </style>\n</head>\n<body>\n<div> \n</div>\n</body>\n<script>\n$('div').hide()  // ==  $('.target').css('display', 'none')\n</script>\n\n```\n\n***\n\n#### .show()\n.show( [duration ] [, easing ] [, complete ] )\n用于显示元素，用法和hide类似给显示元素设置一个现实的时间\n```JS\n$('div').hide(2000)  // 隐藏时间为2s\n$('div').show(2000) //显示时间为2s\n```\n\n#### .slideUp\n.slideUp( [duration ] [, easing ] [, complete ] )\n用滑动动画隐藏一个匹配元素，方法将给匹配元素的高度的动画，这会导致页面的下面部分滑上去，当一个隐藏动画后，高度值达到0的时候，display 样式属性被设置为none，以确保该元素不再影响页面布局。\n效果：（代码基于hide）\n\n```\n$('div').slideUp()\n```\n\n***\n\n#### .slideDown\n用滑动动画显示一个匹配元素，方法将给匹配元素的高度的动画，这会导致页面的下面部分滑下去，弥补了显示的方式\n效果：（代码基于slideUp）\n\n***\n\n#### .slideToggle\n用滑动动画显示或隐藏一个匹配元素，方法将给匹配元素的高度的动画，这会导致页面中，在这个元素下面的内容往下或往上滑。display属性值保存在jQuery的数据缓存中，所以display可以方便以后可以恢复到其初始值。\n\n如果一个元素的display属性值为inline，然后是隐藏和显示，这个元素将再次显示inline。当一个隐藏动画后，高度值达到0的时候，display 样式属性被设置为none，以确保该元素不再影响页面布局。\n\n效果：\n连续调用两次，和使用.slideUp()、.slideDown效果相同\n\n***\n\n#### .fadeIn\n.fadeIn( [duration ] [, easing ] [, complete ] )\n通过淡入的方式显示匹配元素，参数含义和上面相同\n给div的css属性设置display:none\n\n$('div').fadeIn(2000)\n\n***\n\n#### .fadeOut\n.fadeOut( [duration ] [, easing ] [, complete ] )\n通过淡出的方式隐藏匹配元素\n取消div的css中的display:none\n\n***\n\n上面几个简单的动画不能满足需求的时候，jquery提供了自定义动画行为的方法\n\n#### .animate\n.animate( properties [, duration ] [, easing ] [, complete ] )\n```JS\n<div id=\"clickme\">\n  Click here\n</div>\n<img id=\"book\" src=\"book.png\" alt=\"\" width=\"100\" height=\"123\"\n  style=\"position: relative; left: 10px;\">\n```\n\n```JS\n$( \"#clickme\" ).click(function() {\n  $( \"#book\" ).animate({\n    opacity: 0.25,  // 图片透明度  渐变\n    left: \"+=50\",   //向左移动距离 -- 原基础上+50px;\n    height: \"toggle\"  // \n  }, 5000, function() {\n    // Animation complete.\n  });\n});\n```\nheight属性的目标值是'toggle'。由于之前图像是可见的，因此动画会将高度缩小为0以隐藏它。第二次点击然后反转此转换\n\n***\n\n### jQuery动画队列\njQuery提供了以下几种方法来操作动画队列。\n\n- stop([clearQuery],[gotoEnd]):停止当前jQuery对象里每个DOM元素上正在执行的动画。\n\n- queue([queueName,]callback):将callback动画数添加到当前jQuery对象里所有DOM元素的动画函数队列的尾部。\n\n- queue([queueName,]naeQueue):用newQueue动画函数队列代替当前jQuery对象里所的DOM元素的动画函数队列。\n\n- dequeue():执行动画函数队列头的第一个动画函数，并将该动画函数移出队列。\n\n- clearQueue([queueName]):清空动画函数队列中的所有动画函数。可选的 callback 参数是动画完成后所执行的函数名称。\n\n例子：\n```JS\n<style>  \n    div {  \n        width: 60px;   \n        height: 60px;  \n        position:absolute;  \n        top:60px;   \n        background: #f0f;  \n        display:none;  \n    }  \n    </style>  \n</head>  \n<body>  \n    <script type=\"text/javascript\" src=\"../jquery-1.8.0.js\">  \n    </script>  \n    <p>动画队列的长度是：<span></span></p>  \n    <div></div>  \n    <script type=\"text/javascript\">  \n    var div = $(\"div\");  \n    function runIt()  \n    {  \n        // 第1个动画：显示出来  \n        div.show(\"slow\");  \n        // 第2个动画：自动动画，水平左移300px  \n        div.animate({left:'+=300'},2000);  \n        // 第3个动画：卷起来  \n        div.slideToggle(1000);  \n        // 第4个动画：放下来  \n        div.slideToggle(\"fast\");  \n        // 第5个动画：自动动画，水平右移300px  \n        div.animate({left:'-=300'},1500);  \n        // 第6个动画：隐藏出来  \n        div.hide(\"slow\");  \n        // 第7个动画：显示出来  \n        div.show(1200);  \n        // 第8个动画：卷起来，动画完成后回调runIt  \n        div.slideUp(\"normal\", runIt);  \n    }  \n    // 控制每0.1秒调用一次该方法，该方法用于显示动画队列的长度  \n    function showIt()  \n    {  \n        var n = div.queue();  \n        $(\"span\").text(n.length);  \n        setTimeout(showIt, 100);  \n    }  \n    runIt();  \n    showIt();  \n    </script>  \n```\n","slug":"Animation","published":1,"updated":"2019-11-23T23:54:38.000Z","layout":"post","photos":[],"link":"","_id":"ck3it6k1c0009teyit1hqb43w","content":"<p>关于jQuery动画API</p>\n<a id=\"more\"></a>\n\n<h3 id=\"jQuery-主要的动画控制API\"><a href=\"#jQuery-主要的动画控制API\" class=\"headerlink\" title=\"jQuery 主要的动画控制API\"></a>jQuery 主要的动画控制API</h3><p>1 .show()<br>2 .hide()<br>3 .slideUp<br>4 .slideDown<br>5 .slideToggle<br>6 .fadeIn<br>7 .fadeOut<br>8 .animate</p>\n<p>如上函数如何使用？演示使用方式</p>\n<hr>\n<h4 id=\"hide\"><a href=\"#hide\" class=\"headerlink\" title=\".hide()\"></a>.hide()</h4><p>.hide([duration ] [,easing ] [,complete ])<br>用于隐藏元素，没有参数的时候等同于直接设置display属性,当我们给hide设置事件时：hide(2000)会有一个消失的过程<br>示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">  div &#123;</span><br><span class=\"line\">    background:#ccc;</span><br><span class=\"line\">    width: <span class=\"number\">100</span>px;</span><br><span class=\"line\">    height: <span class=\"number\">100</span>px;</span><br><span class=\"line\">    border: <span class=\"number\">1</span>px solid;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/style&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div&gt; </span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>body&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">$(<span class=\"string\">'div'</span>).hide()  <span class=\"comment\">// ==  $('.target').css('display', 'none')</span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"show\"><a href=\"#show\" class=\"headerlink\" title=\".show()\"></a>.show()</h4><p>.show( [duration ] [, easing ] [, complete ] )<br>用于显示元素，用法和hide类似给显示元素设置一个现实的时间</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">'div'</span>).hide(<span class=\"number\">2000</span>)  <span class=\"comment\">// 隐藏时间为2s</span></span><br><span class=\"line\">$(<span class=\"string\">'div'</span>).show(<span class=\"number\">2000</span>) <span class=\"comment\">//显示时间为2s</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"slideUp\"><a href=\"#slideUp\" class=\"headerlink\" title=\".slideUp\"></a>.slideUp</h4><p>.slideUp( [duration ] [, easing ] [, complete ] )<br>用滑动动画隐藏一个匹配元素，方法将给匹配元素的高度的动画，这会导致页面的下面部分滑上去，当一个隐藏动画后，高度值达到0的时候，display 样式属性被设置为none，以确保该元素不再影响页面布局。<br>效果：（代码基于hide）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;div&apos;).slideUp()</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"slideDown\"><a href=\"#slideDown\" class=\"headerlink\" title=\".slideDown\"></a>.slideDown</h4><p>用滑动动画显示一个匹配元素，方法将给匹配元素的高度的动画，这会导致页面的下面部分滑下去，弥补了显示的方式<br>效果：（代码基于slideUp）</p>\n<hr>\n<h4 id=\"slideToggle\"><a href=\"#slideToggle\" class=\"headerlink\" title=\".slideToggle\"></a>.slideToggle</h4><p>用滑动动画显示或隐藏一个匹配元素，方法将给匹配元素的高度的动画，这会导致页面中，在这个元素下面的内容往下或往上滑。display属性值保存在jQuery的数据缓存中，所以display可以方便以后可以恢复到其初始值。</p>\n<p>如果一个元素的display属性值为inline，然后是隐藏和显示，这个元素将再次显示inline。当一个隐藏动画后，高度值达到0的时候，display 样式属性被设置为none，以确保该元素不再影响页面布局。</p>\n<p>效果：<br>连续调用两次，和使用.slideUp()、.slideDown效果相同</p>\n<hr>\n<h4 id=\"fadeIn\"><a href=\"#fadeIn\" class=\"headerlink\" title=\".fadeIn\"></a>.fadeIn</h4><p>.fadeIn( [duration ] [, easing ] [, complete ] )<br>通过淡入的方式显示匹配元素，参数含义和上面相同<br>给div的css属性设置display:none</p>\n<p>$(‘div’).fadeIn(2000)</p>\n<hr>\n<h4 id=\"fadeOut\"><a href=\"#fadeOut\" class=\"headerlink\" title=\".fadeOut\"></a>.fadeOut</h4><p>.fadeOut( [duration ] [, easing ] [, complete ] )<br>通过淡出的方式隐藏匹配元素<br>取消div的css中的display:none</p>\n<hr>\n<p>上面几个简单的动画不能满足需求的时候，jquery提供了自定义动画行为的方法</p>\n<h4 id=\"animate\"><a href=\"#animate\" class=\"headerlink\" title=\".animate\"></a>.animate</h4><p>.animate( properties [, duration ] [, easing ] [, complete ] )</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"clickme\"</span>&gt;</span><br><span class=\"line\">  Click here</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;img id=\"book\" src=\"book.png\" alt=\"\" width=\"100\" height=\"123\"</span></span><br><span class=\"line\"><span class=\"regexp\">  style=\"position: relative; left: 10px;\"&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$( <span class=\"string\">\"#clickme\"</span> ).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $( <span class=\"string\">\"#book\"</span> ).animate(&#123;</span><br><span class=\"line\">    opacity: <span class=\"number\">0.25</span>,  <span class=\"comment\">// 图片透明度  渐变</span></span><br><span class=\"line\">    left: <span class=\"string\">\"+=50\"</span>,   <span class=\"comment\">//向左移动距离 -- 原基础上+50px;</span></span><br><span class=\"line\">    height: <span class=\"string\">\"toggle\"</span>  <span class=\"comment\">// </span></span><br><span class=\"line\">  &#125;, <span class=\"number\">5000</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Animation complete.</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>height属性的目标值是’toggle’。由于之前图像是可见的，因此动画会将高度缩小为0以隐藏它。第二次点击然后反转此转换</p>\n<hr>\n<h3 id=\"jQuery动画队列\"><a href=\"#jQuery动画队列\" class=\"headerlink\" title=\"jQuery动画队列\"></a>jQuery动画队列</h3><p>jQuery提供了以下几种方法来操作动画队列。</p>\n<ul>\n<li><p>stop([clearQuery],[gotoEnd]):停止当前jQuery对象里每个DOM元素上正在执行的动画。</p>\n</li>\n<li><p>queue([queueName,]callback):将callback动画数添加到当前jQuery对象里所有DOM元素的动画函数队列的尾部。</p>\n</li>\n<li><p>queue([queueName,]naeQueue):用newQueue动画函数队列代替当前jQuery对象里所的DOM元素的动画函数队列。</p>\n</li>\n<li><p>dequeue():执行动画函数队列头的第一个动画函数，并将该动画函数移出队列。</p>\n</li>\n<li><p>clearQueue([queueName]):清空动画函数队列中的所有动画函数。可选的 callback 参数是动画完成后所执行的函数名称。</p>\n</li>\n</ul>\n<p>例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;  </span><br><span class=\"line\">    div &#123;  </span><br><span class=\"line\">        width: <span class=\"number\">60</span>px;   </span><br><span class=\"line\">        height: <span class=\"number\">60</span>px;  </span><br><span class=\"line\">        position:absolute;  </span><br><span class=\"line\">        top:<span class=\"number\">60</span>px;   </span><br><span class=\"line\">        background: #f0f;  </span><br><span class=\"line\">        display:none;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    &lt;<span class=\"regexp\">/style&gt;  </span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>head&gt;  </span><br><span class=\"line\">&lt;body&gt;  </span><br><span class=\"line\">    &lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"../jquery-1.8.0.js\"</span>&gt;  </span><br><span class=\"line\">    &lt;<span class=\"regexp\">/script&gt;  </span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;p&gt;动画队列的长度是：&lt;span&gt;&lt;/</span>span&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span>  </span><br><span class=\"line\">    &lt;div&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>  </span><br><span class=\"line\">    &lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> div = $(<span class=\"string\">\"div\"</span>);  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runIt</span>(<span class=\"params\"></span>)  </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;  </span><br><span class=\"line\">        <span class=\"comment\">// 第1个动画：显示出来  </span></span><br><span class=\"line\">        div.show(<span class=\"string\">\"slow\"</span>);  </span><br><span class=\"line\">        <span class=\"comment\">// 第2个动画：自动动画，水平左移300px  </span></span><br><span class=\"line\">        div.animate(&#123;<span class=\"attr\">left</span>:<span class=\"string\">'+=300'</span>&#125;,<span class=\"number\">2000</span>);  </span><br><span class=\"line\">        <span class=\"comment\">// 第3个动画：卷起来  </span></span><br><span class=\"line\">        div.slideToggle(<span class=\"number\">1000</span>);  </span><br><span class=\"line\">        <span class=\"comment\">// 第4个动画：放下来  </span></span><br><span class=\"line\">        div.slideToggle(<span class=\"string\">\"fast\"</span>);  </span><br><span class=\"line\">        <span class=\"comment\">// 第5个动画：自动动画，水平右移300px  </span></span><br><span class=\"line\">        div.animate(&#123;<span class=\"attr\">left</span>:<span class=\"string\">'-=300'</span>&#125;,<span class=\"number\">1500</span>);  </span><br><span class=\"line\">        <span class=\"comment\">// 第6个动画：隐藏出来  </span></span><br><span class=\"line\">        div.hide(<span class=\"string\">\"slow\"</span>);  </span><br><span class=\"line\">        <span class=\"comment\">// 第7个动画：显示出来  </span></span><br><span class=\"line\">        div.show(<span class=\"number\">1200</span>);  </span><br><span class=\"line\">        <span class=\"comment\">// 第8个动画：卷起来，动画完成后回调runIt  </span></span><br><span class=\"line\">        div.slideUp(<span class=\"string\">\"normal\"</span>, runIt);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"comment\">// 控制每0.1秒调用一次该方法，该方法用于显示动画队列的长度  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showIt</span>(<span class=\"params\"></span>)  </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">var</span> n = div.queue();  </span><br><span class=\"line\">        $(<span class=\"string\">\"span\"</span>).text(n.length);  </span><br><span class=\"line\">        setTimeout(showIt, <span class=\"number\">100</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    runIt();  </span><br><span class=\"line\">    showIt();  </span><br><span class=\"line\">    &lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"thumbnailImageUrl":"https://kisky3.github.io/2019/08/30/Animation/20190830.png","excerpt":"<p>关于jQuery动画API</p>","more":"<h3 id=\"jQuery-主要的动画控制API\"><a href=\"#jQuery-主要的动画控制API\" class=\"headerlink\" title=\"jQuery 主要的动画控制API\"></a>jQuery 主要的动画控制API</h3><p>1 .show()<br>2 .hide()<br>3 .slideUp<br>4 .slideDown<br>5 .slideToggle<br>6 .fadeIn<br>7 .fadeOut<br>8 .animate</p>\n<p>如上函数如何使用？演示使用方式</p>\n<hr>\n<h4 id=\"hide\"><a href=\"#hide\" class=\"headerlink\" title=\".hide()\"></a>.hide()</h4><p>.hide([duration ] [,easing ] [,complete ])<br>用于隐藏元素，没有参数的时候等同于直接设置display属性,当我们给hide设置事件时：hide(2000)会有一个消失的过程<br>示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">  div &#123;</span><br><span class=\"line\">    background:#ccc;</span><br><span class=\"line\">    width: <span class=\"number\">100</span>px;</span><br><span class=\"line\">    height: <span class=\"number\">100</span>px;</span><br><span class=\"line\">    border: <span class=\"number\">1</span>px solid;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/style&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div&gt; </span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>body&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">$(<span class=\"string\">'div'</span>).hide()  <span class=\"comment\">// ==  $('.target').css('display', 'none')</span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"show\"><a href=\"#show\" class=\"headerlink\" title=\".show()\"></a>.show()</h4><p>.show( [duration ] [, easing ] [, complete ] )<br>用于显示元素，用法和hide类似给显示元素设置一个现实的时间</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">'div'</span>).hide(<span class=\"number\">2000</span>)  <span class=\"comment\">// 隐藏时间为2s</span></span><br><span class=\"line\">$(<span class=\"string\">'div'</span>).show(<span class=\"number\">2000</span>) <span class=\"comment\">//显示时间为2s</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"slideUp\"><a href=\"#slideUp\" class=\"headerlink\" title=\".slideUp\"></a>.slideUp</h4><p>.slideUp( [duration ] [, easing ] [, complete ] )<br>用滑动动画隐藏一个匹配元素，方法将给匹配元素的高度的动画，这会导致页面的下面部分滑上去，当一个隐藏动画后，高度值达到0的时候，display 样式属性被设置为none，以确保该元素不再影响页面布局。<br>效果：（代码基于hide）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;div&apos;).slideUp()</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"slideDown\"><a href=\"#slideDown\" class=\"headerlink\" title=\".slideDown\"></a>.slideDown</h4><p>用滑动动画显示一个匹配元素，方法将给匹配元素的高度的动画，这会导致页面的下面部分滑下去，弥补了显示的方式<br>效果：（代码基于slideUp）</p>\n<hr>\n<h4 id=\"slideToggle\"><a href=\"#slideToggle\" class=\"headerlink\" title=\".slideToggle\"></a>.slideToggle</h4><p>用滑动动画显示或隐藏一个匹配元素，方法将给匹配元素的高度的动画，这会导致页面中，在这个元素下面的内容往下或往上滑。display属性值保存在jQuery的数据缓存中，所以display可以方便以后可以恢复到其初始值。</p>\n<p>如果一个元素的display属性值为inline，然后是隐藏和显示，这个元素将再次显示inline。当一个隐藏动画后，高度值达到0的时候，display 样式属性被设置为none，以确保该元素不再影响页面布局。</p>\n<p>效果：<br>连续调用两次，和使用.slideUp()、.slideDown效果相同</p>\n<hr>\n<h4 id=\"fadeIn\"><a href=\"#fadeIn\" class=\"headerlink\" title=\".fadeIn\"></a>.fadeIn</h4><p>.fadeIn( [duration ] [, easing ] [, complete ] )<br>通过淡入的方式显示匹配元素，参数含义和上面相同<br>给div的css属性设置display:none</p>\n<p>$(‘div’).fadeIn(2000)</p>\n<hr>\n<h4 id=\"fadeOut\"><a href=\"#fadeOut\" class=\"headerlink\" title=\".fadeOut\"></a>.fadeOut</h4><p>.fadeOut( [duration ] [, easing ] [, complete ] )<br>通过淡出的方式隐藏匹配元素<br>取消div的css中的display:none</p>\n<hr>\n<p>上面几个简单的动画不能满足需求的时候，jquery提供了自定义动画行为的方法</p>\n<h4 id=\"animate\"><a href=\"#animate\" class=\"headerlink\" title=\".animate\"></a>.animate</h4><p>.animate( properties [, duration ] [, easing ] [, complete ] )</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"clickme\"</span>&gt;</span><br><span class=\"line\">  Click here</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;img id=\"book\" src=\"book.png\" alt=\"\" width=\"100\" height=\"123\"</span></span><br><span class=\"line\"><span class=\"regexp\">  style=\"position: relative; left: 10px;\"&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$( <span class=\"string\">\"#clickme\"</span> ).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $( <span class=\"string\">\"#book\"</span> ).animate(&#123;</span><br><span class=\"line\">    opacity: <span class=\"number\">0.25</span>,  <span class=\"comment\">// 图片透明度  渐变</span></span><br><span class=\"line\">    left: <span class=\"string\">\"+=50\"</span>,   <span class=\"comment\">//向左移动距离 -- 原基础上+50px;</span></span><br><span class=\"line\">    height: <span class=\"string\">\"toggle\"</span>  <span class=\"comment\">// </span></span><br><span class=\"line\">  &#125;, <span class=\"number\">5000</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Animation complete.</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>height属性的目标值是’toggle’。由于之前图像是可见的，因此动画会将高度缩小为0以隐藏它。第二次点击然后反转此转换</p>\n<hr>\n<h3 id=\"jQuery动画队列\"><a href=\"#jQuery动画队列\" class=\"headerlink\" title=\"jQuery动画队列\"></a>jQuery动画队列</h3><p>jQuery提供了以下几种方法来操作动画队列。</p>\n<ul>\n<li><p>stop([clearQuery],[gotoEnd]):停止当前jQuery对象里每个DOM元素上正在执行的动画。</p>\n</li>\n<li><p>queue([queueName,]callback):将callback动画数添加到当前jQuery对象里所有DOM元素的动画函数队列的尾部。</p>\n</li>\n<li><p>queue([queueName,]naeQueue):用newQueue动画函数队列代替当前jQuery对象里所的DOM元素的动画函数队列。</p>\n</li>\n<li><p>dequeue():执行动画函数队列头的第一个动画函数，并将该动画函数移出队列。</p>\n</li>\n<li><p>clearQueue([queueName]):清空动画函数队列中的所有动画函数。可选的 callback 参数是动画完成后所执行的函数名称。</p>\n</li>\n</ul>\n<p>例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;  </span><br><span class=\"line\">    div &#123;  </span><br><span class=\"line\">        width: <span class=\"number\">60</span>px;   </span><br><span class=\"line\">        height: <span class=\"number\">60</span>px;  </span><br><span class=\"line\">        position:absolute;  </span><br><span class=\"line\">        top:<span class=\"number\">60</span>px;   </span><br><span class=\"line\">        background: #f0f;  </span><br><span class=\"line\">        display:none;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    &lt;<span class=\"regexp\">/style&gt;  </span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>head&gt;  </span><br><span class=\"line\">&lt;body&gt;  </span><br><span class=\"line\">    &lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"../jquery-1.8.0.js\"</span>&gt;  </span><br><span class=\"line\">    &lt;<span class=\"regexp\">/script&gt;  </span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;p&gt;动画队列的长度是：&lt;span&gt;&lt;/</span>span&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span>  </span><br><span class=\"line\">    &lt;div&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>  </span><br><span class=\"line\">    &lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> div = $(<span class=\"string\">\"div\"</span>);  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runIt</span>(<span class=\"params\"></span>)  </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;  </span><br><span class=\"line\">        <span class=\"comment\">// 第1个动画：显示出来  </span></span><br><span class=\"line\">        div.show(<span class=\"string\">\"slow\"</span>);  </span><br><span class=\"line\">        <span class=\"comment\">// 第2个动画：自动动画，水平左移300px  </span></span><br><span class=\"line\">        div.animate(&#123;<span class=\"attr\">left</span>:<span class=\"string\">'+=300'</span>&#125;,<span class=\"number\">2000</span>);  </span><br><span class=\"line\">        <span class=\"comment\">// 第3个动画：卷起来  </span></span><br><span class=\"line\">        div.slideToggle(<span class=\"number\">1000</span>);  </span><br><span class=\"line\">        <span class=\"comment\">// 第4个动画：放下来  </span></span><br><span class=\"line\">        div.slideToggle(<span class=\"string\">\"fast\"</span>);  </span><br><span class=\"line\">        <span class=\"comment\">// 第5个动画：自动动画，水平右移300px  </span></span><br><span class=\"line\">        div.animate(&#123;<span class=\"attr\">left</span>:<span class=\"string\">'-=300'</span>&#125;,<span class=\"number\">1500</span>);  </span><br><span class=\"line\">        <span class=\"comment\">// 第6个动画：隐藏出来  </span></span><br><span class=\"line\">        div.hide(<span class=\"string\">\"slow\"</span>);  </span><br><span class=\"line\">        <span class=\"comment\">// 第7个动画：显示出来  </span></span><br><span class=\"line\">        div.show(<span class=\"number\">1200</span>);  </span><br><span class=\"line\">        <span class=\"comment\">// 第8个动画：卷起来，动画完成后回调runIt  </span></span><br><span class=\"line\">        div.slideUp(<span class=\"string\">\"normal\"</span>, runIt);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"comment\">// 控制每0.1秒调用一次该方法，该方法用于显示动画队列的长度  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showIt</span>(<span class=\"params\"></span>)  </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">var</span> n = div.queue();  </span><br><span class=\"line\">        $(<span class=\"string\">\"span\"</span>).text(n.length);  </span><br><span class=\"line\">        setTimeout(showIt, <span class=\"number\">100</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    runIt();  </span><br><span class=\"line\">    showIt();  </span><br><span class=\"line\">    &lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"About CSS Selectors","date":"2018-11-15T08:23:25.000Z","clearReading":true,"thumbnailImage":"20181115.png","thumbnailImagePosition":"left","coverImage":"cover.jpg","coverCaption":"Hello World, Hello Programming","coverSize":"partial","comments":0,"_content":"\nCSS选择器类型与用法\n<!--more-->\n### 选择器类型\n选择器分为基础选择器，组合选择器，属性选择器，伪类选择器，伪元素选择器\n\n***\n#### 基础选择器 \n\n| 选择器 |  含义  |\n| ----| ---- |\n|  *  |  通用元素选择器，匹配页面任何元素（这也就决定了我们很少使用）|\n|  #id  |  id选择器，匹配特定id元素  |\n|  .class  |  类选择器，匹配class包含（不是等于）特定类的元素  |\n|  element |  标签选择器  |\n\n例子：\n```CSS\n* {\n margin: 0;\npadding:0;\n}\n\n#id-selector {\n color:#333;\n}\n\n.class-selector {\n background: #ccc;\n}\n\np {\nfont-size: 20px;\n}\n```\n***\n### 组合选择器\n\n| 选择器 |  含义  |\n| ----| ---- |\n|  E,F  |  多元素选择器，用逗号分隔，同时匹配元素E或元素F|\n|  E F  |  后代选择器，用空格分隔，匹配E元素所有的后代（不只是子元素向下递归）元素F  |\n|  E>F  |  子元素选择器，用>分隔，匹配E元素的所有直接子元素  |\n|  E+F  |  直接相邻选择器，匹配E元素之后的相邻的同级元素F  |\n|  E~F  |  普通相邻选择器(弟弟选择器)，匹配E元素之后的同级元素F(无论直接相邻与否)  |\n|  .class1.class2  | id和class选择器和选择器连写的时候中间没有分隔符， 。和#本身充当分隔符的元素  |\n|  element#id  |  id和class 选择器和选择器连写的时候中间没有分隔符，。和#本身充当分隔符的元素  |\n\n例子：\n```CSS\n.p1,.p2 {\n color: red;\n}\n\n#ct .p2 {\n color:blue;\n}\n\n#ct >.p2 {\n color:blue;\n}\n\n.p1+p {\n color:red;\n}\n\n.p1~p {\n color:red;\n}\n\n.p2.active {\n color:red;\n}\n\ndiv#ct {\n background: red;\n}\n```\n### 属性选择器\n\n| 选择器 |  含义  |\n| ----| ---- |\n| E[attr]| 匹配所有具有属性attr的元素，div[id]就能取到所有有id属性的div |\n| E[attr=value]| 匹配属性attr 值为value的元素，div[id=test]，匹配id=test的div |\n| E[attr~=value]| 匹配所有属性attr具有多个空格分隔，其中一个值等于value的元素 |\n| E[attr^=value]| 匹配属性attr的值以value开头的元素 |\n| E[attr$=value]| 匹配属性attr的值以value结尾的元素 |\n| E[attr*=value]| 匹配属性attr的值包含value的元素 |\n\n***\n### 伪类选择器\n代表元素的一种状态\n\n| 选择器 |  含义  |\n| ----| ---- |\n| E:first-child| 匹配其E的父元素的第一个子元素 |\n| E:nth-child(n)| 匹配其E的父元素的第n个子元素(2n+1,2n) |\n| E:first-of-type| E的同种类型下的第一个元素 |\n| E:nth-of-type(n)| E的同种类型下的第n个元素 |\n| E:link| 匹配所有未被点击的链接 |\n| E:visited| 匹配所有已经被点击的链接 |\n| E:active| 匹配鼠标已经其上按下还没有释放的E元素 |\n| E:hover| 匹配鼠标悬停其上的E元素 |\n| E:focus|  匹配获得当前焦点的E元素|\n| E:enabled| 匹配表单中可用的元素 |\n| E:disabled| 匹配表单中禁用的元素 |\n| E:checked|  匹配表单中被选中的radio或checkoutbox元素|\n| E:selection| 匹配用户当前选中的元素 |\n\na链接伪类选择器时要注意伪类的顺序\n\n***\n\n### 伪元素选择器\n\n| 选择器 |  含义  |\n| ----| ---- |\n| E::first-line| 匹配E元素内容的第一行 |\n| E::first-letter| 匹配E元素内容的第一个字母 |\n| E::before| 在E元素之前插入生成的内容 |\n| E::after| 在E元素之后插入生成的内容 |\n\n***\n### 选择器的优先级\n<img src=\"./1.png\" style=\"width:500px\">\n\n注意：\n\n在一些复杂场景下，可以进行一些标记再进行比较\n假如选择器有两次则下面的样式会覆盖上面的样式\n<img src=\"./2.png\" style=\"width:500px\">\n\n","source":"_posts/CSS选择器类型与用法.md","raw":"---\ntitle: About CSS Selectors\ndate: 2018-11-15 17:23:25\ntags:\n- CSS\nclearReading: true\nthumbnailImage: 20181115.png\nthumbnailImagePosition: left\ncoverImage: cover.jpg\ncoverCaption: \"Hello World, Hello Programming\"\ncoverSize: partial\ncomments: false\ncategories: Front-end Knowledge\n---\n\nCSS选择器类型与用法\n<!--more-->\n### 选择器类型\n选择器分为基础选择器，组合选择器，属性选择器，伪类选择器，伪元素选择器\n\n***\n#### 基础选择器 \n\n| 选择器 |  含义  |\n| ----| ---- |\n|  *  |  通用元素选择器，匹配页面任何元素（这也就决定了我们很少使用）|\n|  #id  |  id选择器，匹配特定id元素  |\n|  .class  |  类选择器，匹配class包含（不是等于）特定类的元素  |\n|  element |  标签选择器  |\n\n例子：\n```CSS\n* {\n margin: 0;\npadding:0;\n}\n\n#id-selector {\n color:#333;\n}\n\n.class-selector {\n background: #ccc;\n}\n\np {\nfont-size: 20px;\n}\n```\n***\n### 组合选择器\n\n| 选择器 |  含义  |\n| ----| ---- |\n|  E,F  |  多元素选择器，用逗号分隔，同时匹配元素E或元素F|\n|  E F  |  后代选择器，用空格分隔，匹配E元素所有的后代（不只是子元素向下递归）元素F  |\n|  E>F  |  子元素选择器，用>分隔，匹配E元素的所有直接子元素  |\n|  E+F  |  直接相邻选择器，匹配E元素之后的相邻的同级元素F  |\n|  E~F  |  普通相邻选择器(弟弟选择器)，匹配E元素之后的同级元素F(无论直接相邻与否)  |\n|  .class1.class2  | id和class选择器和选择器连写的时候中间没有分隔符， 。和#本身充当分隔符的元素  |\n|  element#id  |  id和class 选择器和选择器连写的时候中间没有分隔符，。和#本身充当分隔符的元素  |\n\n例子：\n```CSS\n.p1,.p2 {\n color: red;\n}\n\n#ct .p2 {\n color:blue;\n}\n\n#ct >.p2 {\n color:blue;\n}\n\n.p1+p {\n color:red;\n}\n\n.p1~p {\n color:red;\n}\n\n.p2.active {\n color:red;\n}\n\ndiv#ct {\n background: red;\n}\n```\n### 属性选择器\n\n| 选择器 |  含义  |\n| ----| ---- |\n| E[attr]| 匹配所有具有属性attr的元素，div[id]就能取到所有有id属性的div |\n| E[attr=value]| 匹配属性attr 值为value的元素，div[id=test]，匹配id=test的div |\n| E[attr~=value]| 匹配所有属性attr具有多个空格分隔，其中一个值等于value的元素 |\n| E[attr^=value]| 匹配属性attr的值以value开头的元素 |\n| E[attr$=value]| 匹配属性attr的值以value结尾的元素 |\n| E[attr*=value]| 匹配属性attr的值包含value的元素 |\n\n***\n### 伪类选择器\n代表元素的一种状态\n\n| 选择器 |  含义  |\n| ----| ---- |\n| E:first-child| 匹配其E的父元素的第一个子元素 |\n| E:nth-child(n)| 匹配其E的父元素的第n个子元素(2n+1,2n) |\n| E:first-of-type| E的同种类型下的第一个元素 |\n| E:nth-of-type(n)| E的同种类型下的第n个元素 |\n| E:link| 匹配所有未被点击的链接 |\n| E:visited| 匹配所有已经被点击的链接 |\n| E:active| 匹配鼠标已经其上按下还没有释放的E元素 |\n| E:hover| 匹配鼠标悬停其上的E元素 |\n| E:focus|  匹配获得当前焦点的E元素|\n| E:enabled| 匹配表单中可用的元素 |\n| E:disabled| 匹配表单中禁用的元素 |\n| E:checked|  匹配表单中被选中的radio或checkoutbox元素|\n| E:selection| 匹配用户当前选中的元素 |\n\na链接伪类选择器时要注意伪类的顺序\n\n***\n\n### 伪元素选择器\n\n| 选择器 |  含义  |\n| ----| ---- |\n| E::first-line| 匹配E元素内容的第一行 |\n| E::first-letter| 匹配E元素内容的第一个字母 |\n| E::before| 在E元素之前插入生成的内容 |\n| E::after| 在E元素之后插入生成的内容 |\n\n***\n### 选择器的优先级\n<img src=\"./1.png\" style=\"width:500px\">\n\n注意：\n\n在一些复杂场景下，可以进行一些标记再进行比较\n假如选择器有两次则下面的样式会覆盖上面的样式\n<img src=\"./2.png\" style=\"width:500px\">\n\n","slug":"CSS选择器类型与用法","published":1,"updated":"2019-11-23T23:54:38.000Z","layout":"post","photos":[],"link":"","_id":"ck3it6k1f000dteyij8ui1j6v","content":"<p>CSS选择器类型与用法</p>\n<a id=\"more\"></a>\n<h3 id=\"选择器类型\"><a href=\"#选择器类型\" class=\"headerlink\" title=\"选择器类型\"></a>选择器类型</h3><p>选择器分为基础选择器，组合选择器，属性选择器，伪类选择器，伪元素选择器</p>\n<hr>\n<h4 id=\"基础选择器\"><a href=\"#基础选择器\" class=\"headerlink\" title=\"基础选择器\"></a>基础选择器</h4><table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>*</td>\n<td>通用元素选择器，匹配页面任何元素（这也就决定了我们很少使用）</td>\n</tr>\n<tr>\n<td>#id</td>\n<td>id选择器，匹配特定id元素</td>\n</tr>\n<tr>\n<td>.class</td>\n<td>类选择器，匹配class包含（不是等于）特定类的元素</td>\n</tr>\n<tr>\n<td>element</td>\n<td>标签选择器</td>\n</tr>\n</tbody></table>\n<p>例子：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* &#123;</span><br><span class=\"line\"> <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"attribute\">padding</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#id-selector</span> &#123;</span><br><span class=\"line\"> <span class=\"attribute\">color</span>:<span class=\"number\">#333</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.class-selector</span> &#123;</span><br><span class=\"line\"> <span class=\"attribute\">background</span>: <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"组合选择器\"><a href=\"#组合选择器\" class=\"headerlink\" title=\"组合选择器\"></a>组合选择器</h3><table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>E,F</td>\n<td>多元素选择器，用逗号分隔，同时匹配元素E或元素F</td>\n</tr>\n<tr>\n<td>E F</td>\n<td>后代选择器，用空格分隔，匹配E元素所有的后代（不只是子元素向下递归）元素F</td>\n</tr>\n<tr>\n<td>E&gt;F</td>\n<td>子元素选择器，用&gt;分隔，匹配E元素的所有直接子元素</td>\n</tr>\n<tr>\n<td>E+F</td>\n<td>直接相邻选择器，匹配E元素之后的相邻的同级元素F</td>\n</tr>\n<tr>\n<td>E~F</td>\n<td>普通相邻选择器(弟弟选择器)，匹配E元素之后的同级元素F(无论直接相邻与否)</td>\n</tr>\n<tr>\n<td>.class1.class2</td>\n<td>id和class选择器和选择器连写的时候中间没有分隔符， 。和#本身充当分隔符的元素</td>\n</tr>\n<tr>\n<td>element#id</td>\n<td>id和class 选择器和选择器连写的时候中间没有分隔符，。和#本身充当分隔符的元素</td>\n</tr>\n</tbody></table>\n<p>例子：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.p1</span>,<span class=\"selector-class\">.p2</span> &#123;</span><br><span class=\"line\"> <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#ct</span> <span class=\"selector-class\">.p2</span> &#123;</span><br><span class=\"line\"> <span class=\"attribute\">color</span>:blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#ct</span> &gt;<span class=\"selector-class\">.p2</span> &#123;</span><br><span class=\"line\"> <span class=\"attribute\">color</span>:blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.p1</span>+<span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\"> <span class=\"attribute\">color</span>:red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.p1</span>~<span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\"> <span class=\"attribute\">color</span>:red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.p2</span><span class=\"selector-class\">.active</span> &#123;</span><br><span class=\"line\"> <span class=\"attribute\">color</span>:red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">div</span><span class=\"selector-id\">#ct</span> &#123;</span><br><span class=\"line\"> <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"属性选择器\"><a href=\"#属性选择器\" class=\"headerlink\" title=\"属性选择器\"></a>属性选择器</h3><table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>E[attr]</td>\n<td>匹配所有具有属性attr的元素，div[id]就能取到所有有id属性的div</td>\n</tr>\n<tr>\n<td>E[attr=value]</td>\n<td>匹配属性attr 值为value的元素，div[id=test]，匹配id=test的div</td>\n</tr>\n<tr>\n<td>E[attr~=value]</td>\n<td>匹配所有属性attr具有多个空格分隔，其中一个值等于value的元素</td>\n</tr>\n<tr>\n<td>E[attr^=value]</td>\n<td>匹配属性attr的值以value开头的元素</td>\n</tr>\n<tr>\n<td>E[attr$=value]</td>\n<td>匹配属性attr的值以value结尾的元素</td>\n</tr>\n<tr>\n<td>E[attr*=value]</td>\n<td>匹配属性attr的值包含value的元素</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"伪类选择器\"><a href=\"#伪类选择器\" class=\"headerlink\" title=\"伪类选择器\"></a>伪类选择器</h3><p>代表元素的一种状态</p>\n<table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>E:first-child</td>\n<td>匹配其E的父元素的第一个子元素</td>\n</tr>\n<tr>\n<td>E:nth-child(n)</td>\n<td>匹配其E的父元素的第n个子元素(2n+1,2n)</td>\n</tr>\n<tr>\n<td>E:first-of-type</td>\n<td>E的同种类型下的第一个元素</td>\n</tr>\n<tr>\n<td>E:nth-of-type(n)</td>\n<td>E的同种类型下的第n个元素</td>\n</tr>\n<tr>\n<td>E:link</td>\n<td>匹配所有未被点击的链接</td>\n</tr>\n<tr>\n<td>E:visited</td>\n<td>匹配所有已经被点击的链接</td>\n</tr>\n<tr>\n<td>E:active</td>\n<td>匹配鼠标已经其上按下还没有释放的E元素</td>\n</tr>\n<tr>\n<td>E:hover</td>\n<td>匹配鼠标悬停其上的E元素</td>\n</tr>\n<tr>\n<td>E:focus</td>\n<td>匹配获得当前焦点的E元素</td>\n</tr>\n<tr>\n<td>E:enabled</td>\n<td>匹配表单中可用的元素</td>\n</tr>\n<tr>\n<td>E:disabled</td>\n<td>匹配表单中禁用的元素</td>\n</tr>\n<tr>\n<td>E:checked</td>\n<td>匹配表单中被选中的radio或checkoutbox元素</td>\n</tr>\n<tr>\n<td>E:selection</td>\n<td>匹配用户当前选中的元素</td>\n</tr>\n</tbody></table>\n<p>a链接伪类选择器时要注意伪类的顺序</p>\n<hr>\n<h3 id=\"伪元素选择器\"><a href=\"#伪元素选择器\" class=\"headerlink\" title=\"伪元素选择器\"></a>伪元素选择器</h3><table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>E::first-line</td>\n<td>匹配E元素内容的第一行</td>\n</tr>\n<tr>\n<td>E::first-letter</td>\n<td>匹配E元素内容的第一个字母</td>\n</tr>\n<tr>\n<td>E::before</td>\n<td>在E元素之前插入生成的内容</td>\n</tr>\n<tr>\n<td>E::after</td>\n<td>在E元素之后插入生成的内容</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"选择器的优先级\"><a href=\"#选择器的优先级\" class=\"headerlink\" title=\"选择器的优先级\"></a>选择器的优先级</h3><img src=\"./1.png\" style=\"width:500px\">\n\n<p>注意：</p>\n<p>在一些复杂场景下，可以进行一些标记再进行比较<br>假如选择器有两次则下面的样式会覆盖上面的样式<br><img src=\"./2.png\" style=\"width:500px\"></p>\n","site":{"data":{}},"thumbnailImageUrl":"https://kisky3.github.io/2018/11/15/CSS选择器类型与用法/20181115.png","excerpt":"<p>CSS选择器类型与用法</p>","more":"<h3 id=\"选择器类型\"><a href=\"#选择器类型\" class=\"headerlink\" title=\"选择器类型\"></a>选择器类型</h3><p>选择器分为基础选择器，组合选择器，属性选择器，伪类选择器，伪元素选择器</p>\n<hr>\n<h4 id=\"基础选择器\"><a href=\"#基础选择器\" class=\"headerlink\" title=\"基础选择器\"></a>基础选择器</h4><table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>*</td>\n<td>通用元素选择器，匹配页面任何元素（这也就决定了我们很少使用）</td>\n</tr>\n<tr>\n<td>#id</td>\n<td>id选择器，匹配特定id元素</td>\n</tr>\n<tr>\n<td>.class</td>\n<td>类选择器，匹配class包含（不是等于）特定类的元素</td>\n</tr>\n<tr>\n<td>element</td>\n<td>标签选择器</td>\n</tr>\n</tbody></table>\n<p>例子：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* &#123;</span><br><span class=\"line\"> <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"attribute\">padding</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#id-selector</span> &#123;</span><br><span class=\"line\"> <span class=\"attribute\">color</span>:<span class=\"number\">#333</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.class-selector</span> &#123;</span><br><span class=\"line\"> <span class=\"attribute\">background</span>: <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"组合选择器\"><a href=\"#组合选择器\" class=\"headerlink\" title=\"组合选择器\"></a>组合选择器</h3><table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>E,F</td>\n<td>多元素选择器，用逗号分隔，同时匹配元素E或元素F</td>\n</tr>\n<tr>\n<td>E F</td>\n<td>后代选择器，用空格分隔，匹配E元素所有的后代（不只是子元素向下递归）元素F</td>\n</tr>\n<tr>\n<td>E&gt;F</td>\n<td>子元素选择器，用&gt;分隔，匹配E元素的所有直接子元素</td>\n</tr>\n<tr>\n<td>E+F</td>\n<td>直接相邻选择器，匹配E元素之后的相邻的同级元素F</td>\n</tr>\n<tr>\n<td>E~F</td>\n<td>普通相邻选择器(弟弟选择器)，匹配E元素之后的同级元素F(无论直接相邻与否)</td>\n</tr>\n<tr>\n<td>.class1.class2</td>\n<td>id和class选择器和选择器连写的时候中间没有分隔符， 。和#本身充当分隔符的元素</td>\n</tr>\n<tr>\n<td>element#id</td>\n<td>id和class 选择器和选择器连写的时候中间没有分隔符，。和#本身充当分隔符的元素</td>\n</tr>\n</tbody></table>\n<p>例子：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.p1</span>,<span class=\"selector-class\">.p2</span> &#123;</span><br><span class=\"line\"> <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#ct</span> <span class=\"selector-class\">.p2</span> &#123;</span><br><span class=\"line\"> <span class=\"attribute\">color</span>:blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#ct</span> &gt;<span class=\"selector-class\">.p2</span> &#123;</span><br><span class=\"line\"> <span class=\"attribute\">color</span>:blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.p1</span>+<span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\"> <span class=\"attribute\">color</span>:red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.p1</span>~<span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\"> <span class=\"attribute\">color</span>:red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.p2</span><span class=\"selector-class\">.active</span> &#123;</span><br><span class=\"line\"> <span class=\"attribute\">color</span>:red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">div</span><span class=\"selector-id\">#ct</span> &#123;</span><br><span class=\"line\"> <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"属性选择器\"><a href=\"#属性选择器\" class=\"headerlink\" title=\"属性选择器\"></a>属性选择器</h3><table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>E[attr]</td>\n<td>匹配所有具有属性attr的元素，div[id]就能取到所有有id属性的div</td>\n</tr>\n<tr>\n<td>E[attr=value]</td>\n<td>匹配属性attr 值为value的元素，div[id=test]，匹配id=test的div</td>\n</tr>\n<tr>\n<td>E[attr~=value]</td>\n<td>匹配所有属性attr具有多个空格分隔，其中一个值等于value的元素</td>\n</tr>\n<tr>\n<td>E[attr^=value]</td>\n<td>匹配属性attr的值以value开头的元素</td>\n</tr>\n<tr>\n<td>E[attr$=value]</td>\n<td>匹配属性attr的值以value结尾的元素</td>\n</tr>\n<tr>\n<td>E[attr*=value]</td>\n<td>匹配属性attr的值包含value的元素</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"伪类选择器\"><a href=\"#伪类选择器\" class=\"headerlink\" title=\"伪类选择器\"></a>伪类选择器</h3><p>代表元素的一种状态</p>\n<table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>E:first-child</td>\n<td>匹配其E的父元素的第一个子元素</td>\n</tr>\n<tr>\n<td>E:nth-child(n)</td>\n<td>匹配其E的父元素的第n个子元素(2n+1,2n)</td>\n</tr>\n<tr>\n<td>E:first-of-type</td>\n<td>E的同种类型下的第一个元素</td>\n</tr>\n<tr>\n<td>E:nth-of-type(n)</td>\n<td>E的同种类型下的第n个元素</td>\n</tr>\n<tr>\n<td>E:link</td>\n<td>匹配所有未被点击的链接</td>\n</tr>\n<tr>\n<td>E:visited</td>\n<td>匹配所有已经被点击的链接</td>\n</tr>\n<tr>\n<td>E:active</td>\n<td>匹配鼠标已经其上按下还没有释放的E元素</td>\n</tr>\n<tr>\n<td>E:hover</td>\n<td>匹配鼠标悬停其上的E元素</td>\n</tr>\n<tr>\n<td>E:focus</td>\n<td>匹配获得当前焦点的E元素</td>\n</tr>\n<tr>\n<td>E:enabled</td>\n<td>匹配表单中可用的元素</td>\n</tr>\n<tr>\n<td>E:disabled</td>\n<td>匹配表单中禁用的元素</td>\n</tr>\n<tr>\n<td>E:checked</td>\n<td>匹配表单中被选中的radio或checkoutbox元素</td>\n</tr>\n<tr>\n<td>E:selection</td>\n<td>匹配用户当前选中的元素</td>\n</tr>\n</tbody></table>\n<p>a链接伪类选择器时要注意伪类的顺序</p>\n<hr>\n<h3 id=\"伪元素选择器\"><a href=\"#伪元素选择器\" class=\"headerlink\" title=\"伪元素选择器\"></a>伪元素选择器</h3><table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>E::first-line</td>\n<td>匹配E元素内容的第一行</td>\n</tr>\n<tr>\n<td>E::first-letter</td>\n<td>匹配E元素内容的第一个字母</td>\n</tr>\n<tr>\n<td>E::before</td>\n<td>在E元素之前插入生成的内容</td>\n</tr>\n<tr>\n<td>E::after</td>\n<td>在E元素之后插入生成的内容</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"选择器的优先级\"><a href=\"#选择器的优先级\" class=\"headerlink\" title=\"选择器的优先级\"></a>选择器的优先级</h3><img src=\"./1.png\" style=\"width:500px\">\n\n<p>注意：</p>\n<p>在一些复杂场景下，可以进行一些标记再进行比较<br>假如选择器有两次则下面的样式会覆盖上面的样式<br><img src=\"./2.png\" style=\"width:500px\"></p>"},{"title":"Create PHP Environment With Docker","date":"2019-11-11T14:05:48.000Z","clearReading":true,"thumbnailImage":"20191111.png","thumbnailImagePosition":"left","coverImage":"cover.jpg","coverCaption":"Hello World, Hello Programming","coverSize":"partial","comments":0,"_content":"用docker构建PHP开发环境（mysql、nginx）\n<!--more-->\n### 开发环境\n- Mac OS Mojave Version 10.14\n- Docker for Mac\n\n***\n### 利用Docker构建开发环境的方法\n首先，利用Docker构建PHP开发环境的时候，至少要具备Web服务器，PHP，和数据库这三个主要要素。\n其次，用Docker准备你所需要的东西的话有两个方法：\n- Docker Registory(DockerHub)开始一个一个的安装并build\n- docker-compose.yml里写入你需要的条件，然后一口气安装\n\n明显docker-compose会比较简单明了。\n\n***\n### Docker Compose\n首先安装Docker Compose\n```\ncurl -L https://github.com/docker/compose/releases/download/1.3.1/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose\nchmod +x /usr/local/bin/docker-compose\n```\n注意：如果出现这个错误，Permission denied则说明/usr/lical/bin路径没有读写权限。\n要使用superuser来执行。这个情况下执行sudo -i 之后再执行上面两个命令。\n\n确认docker compose安装情况及版本\n```\ndocker-compose version\n```\n***\n### 步骤\nDocker Compose会根据你写在docker-compose.yml文件里的内容来进行容器的管理。\n首先新建一个文件夹，文件结构如下：\n```\n├── docker-compose.yml\n├── nginx\n│   └── nginx.conf\n├── php\n│   ├── Dockerfile\n│   └── php.ini\n├── mysql\n│   └── data\n└── www\n    └── html\n        └── index.php\n```\n***\n### docker-compose.yml\n然后就是制作作为地基的docker-compose.yml。\ndocker-compose.yml\n```JS\nversion: '3'\nservices:\n  nginx:\n    image: nginx:latest\n    ports:\n      - 127.0.0.1.8080:8080\n    volumes:\n      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf\n      - ./www/html:/var/www/html\n    depends_on:\n      - php\n\n  php:\n    build: ./php\n    volumes:\n      - ./www/html:/var/www/html\n    depends_on:\n      - db\n\n  db:\n    image: mysql:5.7\n    ports:\n      - 13306:3306\n    volumes:\n      - ./mysql/data:/var/lib/mysql\n    environment:\n      MYSQL_ROOT_PASSWORD: secret\n\n  phpmyadmin:\n    image: phpmyadmin/phpmyadmin:latest\n    ports:\n      - 8888:80\n    depends_on:\n      - db\n```\n\nnginx/nginx.conf\n```JS\nserver {\n    listen 8080;\n    server_name _;\n\n    root  /var/www/html;\n    index index.php index.html;\n\n    access_log /var/log/nginx/access.log;\n    error_log  /var/log/nginx/error.log;\n\n    location / {\n        try_files $uri $uri/ /index.php$is_args$args;\n    }\n\n    location ~ \\.php$ {\n        fastcgi_pass php:9000;\n        fastcgi_index index.php;    \n        fastcgi_param SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n        include       fastcgi_params;\n    }\n}\n```\n\nphp/Dockerfile\n```JS\nFROM php:7.2-fpm\nCOPY php.ini /usr/local/etc/php/\n```\n\nphp.ini\n```\ndate.timezone = \"Asia/Tokyo\"\n```\n\nwww/html/index.php\n```\n<php\nphpinfo();\n```\n***\n### 启动容器\n```\ndocker-compose up -d\n```\n<br>\n<img src=\"./1.png\" style=\"width:600px\">\n\n打开localhost:8080就可以看到php的设置画面了。\n\n<br>\n<img src=\"./2.png\" style=\"width:600px\">\n<br>\n\n### 停止容器\n```\ndocker-compose down\n```\n***\n### mysql\n","source":"_posts/CreatePhpEnvironmentInDocker.md","raw":"---\ntitle: Create PHP Environment With Docker\ndate: 2019-11-11 23:05:48\ntags:\n- docker\n- php\n- mysql\n- nginx\nclearReading: true\nthumbnailImage: 20191111.png\nthumbnailImagePosition: left\ncoverImage: cover.jpg\ncoverCaption: \"Hello World, Hello Programming\"\ncoverSize: partial\ncomments: false\ncategories: Back-end Knowledge\n---\n用docker构建PHP开发环境（mysql、nginx）\n<!--more-->\n### 开发环境\n- Mac OS Mojave Version 10.14\n- Docker for Mac\n\n***\n### 利用Docker构建开发环境的方法\n首先，利用Docker构建PHP开发环境的时候，至少要具备Web服务器，PHP，和数据库这三个主要要素。\n其次，用Docker准备你所需要的东西的话有两个方法：\n- Docker Registory(DockerHub)开始一个一个的安装并build\n- docker-compose.yml里写入你需要的条件，然后一口气安装\n\n明显docker-compose会比较简单明了。\n\n***\n### Docker Compose\n首先安装Docker Compose\n```\ncurl -L https://github.com/docker/compose/releases/download/1.3.1/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose\nchmod +x /usr/local/bin/docker-compose\n```\n注意：如果出现这个错误，Permission denied则说明/usr/lical/bin路径没有读写权限。\n要使用superuser来执行。这个情况下执行sudo -i 之后再执行上面两个命令。\n\n确认docker compose安装情况及版本\n```\ndocker-compose version\n```\n***\n### 步骤\nDocker Compose会根据你写在docker-compose.yml文件里的内容来进行容器的管理。\n首先新建一个文件夹，文件结构如下：\n```\n├── docker-compose.yml\n├── nginx\n│   └── nginx.conf\n├── php\n│   ├── Dockerfile\n│   └── php.ini\n├── mysql\n│   └── data\n└── www\n    └── html\n        └── index.php\n```\n***\n### docker-compose.yml\n然后就是制作作为地基的docker-compose.yml。\ndocker-compose.yml\n```JS\nversion: '3'\nservices:\n  nginx:\n    image: nginx:latest\n    ports:\n      - 127.0.0.1.8080:8080\n    volumes:\n      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf\n      - ./www/html:/var/www/html\n    depends_on:\n      - php\n\n  php:\n    build: ./php\n    volumes:\n      - ./www/html:/var/www/html\n    depends_on:\n      - db\n\n  db:\n    image: mysql:5.7\n    ports:\n      - 13306:3306\n    volumes:\n      - ./mysql/data:/var/lib/mysql\n    environment:\n      MYSQL_ROOT_PASSWORD: secret\n\n  phpmyadmin:\n    image: phpmyadmin/phpmyadmin:latest\n    ports:\n      - 8888:80\n    depends_on:\n      - db\n```\n\nnginx/nginx.conf\n```JS\nserver {\n    listen 8080;\n    server_name _;\n\n    root  /var/www/html;\n    index index.php index.html;\n\n    access_log /var/log/nginx/access.log;\n    error_log  /var/log/nginx/error.log;\n\n    location / {\n        try_files $uri $uri/ /index.php$is_args$args;\n    }\n\n    location ~ \\.php$ {\n        fastcgi_pass php:9000;\n        fastcgi_index index.php;    \n        fastcgi_param SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n        include       fastcgi_params;\n    }\n}\n```\n\nphp/Dockerfile\n```JS\nFROM php:7.2-fpm\nCOPY php.ini /usr/local/etc/php/\n```\n\nphp.ini\n```\ndate.timezone = \"Asia/Tokyo\"\n```\n\nwww/html/index.php\n```\n<php\nphpinfo();\n```\n***\n### 启动容器\n```\ndocker-compose up -d\n```\n<br>\n<img src=\"./1.png\" style=\"width:600px\">\n\n打开localhost:8080就可以看到php的设置画面了。\n\n<br>\n<img src=\"./2.png\" style=\"width:600px\">\n<br>\n\n### 停止容器\n```\ndocker-compose down\n```\n***\n### mysql\n","slug":"CreatePhpEnvironmentInDocker","published":1,"updated":"2019-11-23T23:54:38.000Z","layout":"post","photos":[],"link":"","_id":"ck3it6k1j000eteyi9tsmbw9t","content":"<p>用docker构建PHP开发环境（mysql、nginx）</p>\n<a id=\"more\"></a>\n<h3 id=\"开发环境\"><a href=\"#开发环境\" class=\"headerlink\" title=\"开发环境\"></a>开发环境</h3><ul>\n<li>Mac OS Mojave Version 10.14</li>\n<li>Docker for Mac</li>\n</ul>\n<hr>\n<h3 id=\"利用Docker构建开发环境的方法\"><a href=\"#利用Docker构建开发环境的方法\" class=\"headerlink\" title=\"利用Docker构建开发环境的方法\"></a>利用Docker构建开发环境的方法</h3><p>首先，利用Docker构建PHP开发环境的时候，至少要具备Web服务器，PHP，和数据库这三个主要要素。<br>其次，用Docker准备你所需要的东西的话有两个方法：</p>\n<ul>\n<li>Docker Registory(DockerHub)开始一个一个的安装并build</li>\n<li>docker-compose.yml里写入你需要的条件，然后一口气安装</li>\n</ul>\n<p>明显docker-compose会比较简单明了。</p>\n<hr>\n<h3 id=\"Docker-Compose\"><a href=\"#Docker-Compose\" class=\"headerlink\" title=\"Docker Compose\"></a>Docker Compose</h3><p>首先安装Docker Compose</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L https://github.com/docker/compose/releases/download/1.3.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span><br><span class=\"line\">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>\n\n<p>注意：如果出现这个错误，Permission denied则说明/usr/lical/bin路径没有读写权限。<br>要使用superuser来执行。这个情况下执行sudo -i 之后再执行上面两个命令。</p>\n<p>确认docker compose安装情况及版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose version</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><p>Docker Compose会根据你写在docker-compose.yml文件里的内容来进行容器的管理。<br>首先新建一个文件夹，文件结构如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── docker-compose.yml</span><br><span class=\"line\">├── nginx</span><br><span class=\"line\">│   └── nginx.conf</span><br><span class=\"line\">├── php</span><br><span class=\"line\">│   ├── Dockerfile</span><br><span class=\"line\">│   └── php.ini</span><br><span class=\"line\">├── mysql</span><br><span class=\"line\">│   └── data</span><br><span class=\"line\">└── www</span><br><span class=\"line\">    └── html</span><br><span class=\"line\">        └── index.php</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"docker-compose-yml\"><a href=\"#docker-compose-yml\" class=\"headerlink\" title=\"docker-compose.yml\"></a>docker-compose.yml</h3><p>然后就是制作作为地基的docker-compose.yml。<br>docker-compose.yml</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: <span class=\"string\">'3'</span></span><br><span class=\"line\">services:</span><br><span class=\"line\">  nginx:</span><br><span class=\"line\">    image: nginx:latest</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"number\">.8080</span>:<span class=\"number\">8080</span></span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./nginx/nginx.conf:<span class=\"regexp\">/etc/</span>nginx/conf.d/<span class=\"keyword\">default</span>.conf</span><br><span class=\"line\">      - ./www/html:<span class=\"regexp\">/var/</span>www/html</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - php</span><br><span class=\"line\"></span><br><span class=\"line\">  php:</span><br><span class=\"line\">    build: ./php</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./www/html:<span class=\"regexp\">/var/</span>www/html</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - db</span><br><span class=\"line\"></span><br><span class=\"line\">  db:</span><br><span class=\"line\">    image: mysql:<span class=\"number\">5.7</span></span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - <span class=\"number\">13306</span>:<span class=\"number\">3306</span></span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./mysql/data:<span class=\"regexp\">/var/</span>lib/mysql</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      MYSQL_ROOT_PASSWORD: secret</span><br><span class=\"line\"></span><br><span class=\"line\">  phpmyadmin:</span><br><span class=\"line\">    image: phpmyadmin/phpmyadmin:latest</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - <span class=\"number\">8888</span>:<span class=\"number\">80</span></span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - db</span><br></pre></td></tr></table></figure>\n\n<p>nginx/nginx.conf</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen <span class=\"number\">8080</span>;</span><br><span class=\"line\">    server_name _;</span><br><span class=\"line\"></span><br><span class=\"line\">    root  /<span class=\"keyword\">var</span>/www/html;</span><br><span class=\"line\">    index index.php index.html;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log /<span class=\"keyword\">var</span>/log/nginx/access.log;</span><br><span class=\"line\">    error_log  /<span class=\"keyword\">var</span>/log/nginx/error.log;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        try_files $uri $uri/ <span class=\"regexp\">/index.php$is_args$args;</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">    location ~ \\.php$ &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        fastcgi_pass php:9000;</span></span><br><span class=\"line\"><span class=\"regexp\">        fastcgi_index index.php;    </span></span><br><span class=\"line\"><span class=\"regexp\">        fastcgi_param SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span></span><br><span class=\"line\"><span class=\"regexp\">        include       fastcgi_params;</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>php/Dockerfile</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM php:<span class=\"number\">7.2</span>-fpm</span><br><span class=\"line\">COPY php.ini /usr/local/etc/php/</span><br></pre></td></tr></table></figure>\n\n<p>php.ini</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">date.timezone = &quot;Asia/Tokyo&quot;</span><br></pre></td></tr></table></figure>\n\n<p>www/html/index.php</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;php</span><br><span class=\"line\">phpinfo();</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"启动容器\"><a href=\"#启动容器\" class=\"headerlink\" title=\"启动容器\"></a>启动容器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n<br>\n<img src=\"./1.png\" style=\"width:600px\">\n\n<p>打开localhost:8080就可以看到php的设置画面了。</p>\n<br>\n<img src=\"./2.png\" style=\"width:600px\">\n<br>\n\n<h3 id=\"停止容器\"><a href=\"#停止容器\" class=\"headerlink\" title=\"停止容器\"></a>停止容器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose down</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"mysql\"><a href=\"#mysql\" class=\"headerlink\" title=\"mysql\"></a>mysql</h3>","site":{"data":{}},"thumbnailImageUrl":"https://kisky3.github.io/2019/11/11/CreatePhpEnvironmentInDocker/20191111.png","excerpt":"<p>用docker构建PHP开发环境（mysql、nginx）</p>","more":"<h3 id=\"开发环境\"><a href=\"#开发环境\" class=\"headerlink\" title=\"开发环境\"></a>开发环境</h3><ul>\n<li>Mac OS Mojave Version 10.14</li>\n<li>Docker for Mac</li>\n</ul>\n<hr>\n<h3 id=\"利用Docker构建开发环境的方法\"><a href=\"#利用Docker构建开发环境的方法\" class=\"headerlink\" title=\"利用Docker构建开发环境的方法\"></a>利用Docker构建开发环境的方法</h3><p>首先，利用Docker构建PHP开发环境的时候，至少要具备Web服务器，PHP，和数据库这三个主要要素。<br>其次，用Docker准备你所需要的东西的话有两个方法：</p>\n<ul>\n<li>Docker Registory(DockerHub)开始一个一个的安装并build</li>\n<li>docker-compose.yml里写入你需要的条件，然后一口气安装</li>\n</ul>\n<p>明显docker-compose会比较简单明了。</p>\n<hr>\n<h3 id=\"Docker-Compose\"><a href=\"#Docker-Compose\" class=\"headerlink\" title=\"Docker Compose\"></a>Docker Compose</h3><p>首先安装Docker Compose</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L https://github.com/docker/compose/releases/download/1.3.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span><br><span class=\"line\">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>\n\n<p>注意：如果出现这个错误，Permission denied则说明/usr/lical/bin路径没有读写权限。<br>要使用superuser来执行。这个情况下执行sudo -i 之后再执行上面两个命令。</p>\n<p>确认docker compose安装情况及版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose version</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><p>Docker Compose会根据你写在docker-compose.yml文件里的内容来进行容器的管理。<br>首先新建一个文件夹，文件结构如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── docker-compose.yml</span><br><span class=\"line\">├── nginx</span><br><span class=\"line\">│   └── nginx.conf</span><br><span class=\"line\">├── php</span><br><span class=\"line\">│   ├── Dockerfile</span><br><span class=\"line\">│   └── php.ini</span><br><span class=\"line\">├── mysql</span><br><span class=\"line\">│   └── data</span><br><span class=\"line\">└── www</span><br><span class=\"line\">    └── html</span><br><span class=\"line\">        └── index.php</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"docker-compose-yml\"><a href=\"#docker-compose-yml\" class=\"headerlink\" title=\"docker-compose.yml\"></a>docker-compose.yml</h3><p>然后就是制作作为地基的docker-compose.yml。<br>docker-compose.yml</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: <span class=\"string\">'3'</span></span><br><span class=\"line\">services:</span><br><span class=\"line\">  nginx:</span><br><span class=\"line\">    image: nginx:latest</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"number\">.8080</span>:<span class=\"number\">8080</span></span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./nginx/nginx.conf:<span class=\"regexp\">/etc/</span>nginx/conf.d/<span class=\"keyword\">default</span>.conf</span><br><span class=\"line\">      - ./www/html:<span class=\"regexp\">/var/</span>www/html</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - php</span><br><span class=\"line\"></span><br><span class=\"line\">  php:</span><br><span class=\"line\">    build: ./php</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./www/html:<span class=\"regexp\">/var/</span>www/html</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - db</span><br><span class=\"line\"></span><br><span class=\"line\">  db:</span><br><span class=\"line\">    image: mysql:<span class=\"number\">5.7</span></span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - <span class=\"number\">13306</span>:<span class=\"number\">3306</span></span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./mysql/data:<span class=\"regexp\">/var/</span>lib/mysql</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      MYSQL_ROOT_PASSWORD: secret</span><br><span class=\"line\"></span><br><span class=\"line\">  phpmyadmin:</span><br><span class=\"line\">    image: phpmyadmin/phpmyadmin:latest</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - <span class=\"number\">8888</span>:<span class=\"number\">80</span></span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - db</span><br></pre></td></tr></table></figure>\n\n<p>nginx/nginx.conf</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen <span class=\"number\">8080</span>;</span><br><span class=\"line\">    server_name _;</span><br><span class=\"line\"></span><br><span class=\"line\">    root  /<span class=\"keyword\">var</span>/www/html;</span><br><span class=\"line\">    index index.php index.html;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log /<span class=\"keyword\">var</span>/log/nginx/access.log;</span><br><span class=\"line\">    error_log  /<span class=\"keyword\">var</span>/log/nginx/error.log;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        try_files $uri $uri/ <span class=\"regexp\">/index.php$is_args$args;</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">    location ~ \\.php$ &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        fastcgi_pass php:9000;</span></span><br><span class=\"line\"><span class=\"regexp\">        fastcgi_index index.php;    </span></span><br><span class=\"line\"><span class=\"regexp\">        fastcgi_param SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span></span><br><span class=\"line\"><span class=\"regexp\">        include       fastcgi_params;</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>php/Dockerfile</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM php:<span class=\"number\">7.2</span>-fpm</span><br><span class=\"line\">COPY php.ini /usr/local/etc/php/</span><br></pre></td></tr></table></figure>\n\n<p>php.ini</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">date.timezone = &quot;Asia/Tokyo&quot;</span><br></pre></td></tr></table></figure>\n\n<p>www/html/index.php</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;php</span><br><span class=\"line\">phpinfo();</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"启动容器\"><a href=\"#启动容器\" class=\"headerlink\" title=\"启动容器\"></a>启动容器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n<br>\n<img src=\"./1.png\" style=\"width:600px\">\n\n<p>打开localhost:8080就可以看到php的设置画面了。</p>\n<br>\n<img src=\"./2.png\" style=\"width:600px\">\n<br>\n\n<h3 id=\"停止容器\"><a href=\"#停止容器\" class=\"headerlink\" title=\"停止容器\"></a>停止容器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose down</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"mysql\"><a href=\"#mysql\" class=\"headerlink\" title=\"mysql\"></a>mysql</h3>"},{"title":"Elisabeth（musical 2005）","date":"2019-09-26T13:24:32.000Z","clearReading":true,"thumbnailImage":"20190926.jpg","thumbnailImagePosition":"top","coverImage":"cover.jpg","coverCaption":"Hello World, Hello Programming","coverSize":"partial","comments":0,"_content":"\n音乐剧：伊丽莎白（德 2005年）\n<!--more-->\n\n《伊丽莎白》是以巴伐利亚公主、奥地利皇后与匈牙利王后伊丽莎白·亚美莉·欧根妮（Elisabeth Amalie Eugenie）的一生为素材所创作的德语音乐剧。\n\n这部音乐剧讲述了奥地利与匈牙利王后伊丽莎白（茜茜公主）的故事，从她1854年的订婚和结婚开始，直至她在1898年被刺杀为止。\n通过对她对死亡越来越迷恋的刻画，反映出她的婚姻和她的帝国走向衰亡的过程。\n\n\n### 第一幕\n剧的开场为鲁凯尼在死后被审判。鲁凯尼声称自己刺杀伊丽莎白只是为了满足她的愿望，因为她与死亡（Der Tod）相爱。鲁凯尼把伊丽莎白生活的时代的亡魂叫来为他作证。自此拉开鲁凯尼讲述伊丽莎白一生的故事的序幕。\n\n伊丽莎白在自由自在、无忧无虑的环境中长大。当一次因为大胆调皮而从高处坠下时，她首次与死亡相遇，开始了她一生中与死亡之间既爱又恨的关系。\n\n<img src=\"./1.jpg\" style=\"width:500px;margin:40px 0\">\n<img src=\"./6.jpg\" style=\"width:500px;margin:40px 0\">\n一开始就可以见到伊丽莎白想要的其实是做梦，写诗，顺风骑马般的自由，只可惜造化弄人\n\n\n伊丽莎白的姐姐海伦娜被长辈们挑选为奥地利皇帝弗兰兹·约瑟夫的妻子，但弗兰兹·约瑟夫自己却选择了伊丽莎白。\n<img src=\"./2.jpg\" style=\"width:500px;margin:40px 0\">\n婚礼的全程暗色调揭开了着从此灰暗婚姻的序幕\n\n在婚礼时，死亡劝诱伊丽莎白，但被伊丽莎白拒绝。\n\n<img src=\"./3.jpg\" style=\"width:500px;margin:40px 0\">\n伊丽莎白在婚礼上与死神共舞，从此王朝终结故事转折开始\n\n与皇帝成婚后，这段看似童话般的婚姻很快出现问题。伊丽莎白无法适应宫廷生活，感觉被禁锢，被弗兰兹·约瑟夫之母索菲精神虐待，并感觉缺少丈夫的关心。伊丽莎白与弗兰兹·约瑟夫的孩子鲁道夫出生后，因为孩子的养育问题，伊丽莎白与索菲再次发生剧烈冲突。弗兰兹·约瑟夫无法解开婆媳之间的不和。\n\n与此同时，奥地利人民的生活陷入贫困，而伊丽莎白却过着骄奢的生活。（牛奶歌在此响起）鲁凯尼对此予以讽刺。\n\n伊丽莎白与丈夫争执后，灵魂呼唤着自由.\n<img src=\"./4.jpg\" style=\"width:500px;margin:40px 0\">\n<img src=\"./5.jpg\" style=\"width:500px;margin:40px 0\">\n（死神真的太魅惑）\n\n***\n### 第二幕\n（一开始的管风琴串戏到歌剧魅影...）\n死神再次诱惑着伊丽莎白，伊丽莎白与其共舞，但最终拒绝了他。（当我想跳舞在此响起）\n<img src=\"./7.jpg\" style=\"width:500px;margin:40px 0\">\n<img src=\"./8.jpg\" style=\"width:500px;margin:40px 0\">\n\n童年的鲁道夫被与母亲分离，在偌大宫殿的黑暗中只有死亡的陪伴，因此把死亡当作朋友。\n<img src=\"./9.jpg\" style=\"width:500px;margin:40px 0\">\n\n伊丽莎白参观疯人院后深受触动，灵魂再次呼唤自由。\n\n索菲和大臣们为了减弱伊丽莎白对弗兰兹·约瑟夫的影响力，设计让弗兰兹·约瑟夫接触别的女人。大臣前往妓院挑选女人。死亡扮成医生，告知伊丽莎白她已从丈夫处染上性病。弗兰兹·约瑟夫与索菲发生激烈争吵。\n经历了一系列变化，伊丽莎白变成了冷酷的女人。她抛开了皇宫、责任、孩子、家人，经年在世界各地独自旅行。\n\n<img src=\"./10.jpg\" style=\"width:500px;margin:40px 0\">\n长大后的鲁道夫与父亲政见不合，死亡鼓励他对抗父亲。\n\n鲁道夫与匈牙利人的合谋被弗兰兹·约瑟夫发现。鲁道夫向母亲伊丽莎白求助，但被伊丽莎白冷淡地忽略了。鲁道夫被死亡夺取了性命，自杀了。伊丽莎白对儿子的死非常伤心。\n\n在沉没的世界之船的甲板上，弗兰兹·约瑟夫与伊丽莎白会面，双方取得谅解，但已经物是人非。世界也已大变，欧洲皇室贵族不断没落或被推翻。奥匈帝国大厦将倾。\n<img src=\"./11.jpg\" style=\"width:500px;margin:40px 0\">\n鲁凯尼刺杀伊丽莎白。伊丽莎白终于投入死亡怀抱。故事完结！\n\n<img src=\"./12.jpg\" style=\"width:500px;margin:40px 0\"> \n（最后的死神之吻真的太帅了）\n\n***\n### 后记\n伊丽莎白公主并不是人们一般理解意义上的规矩的贵族女性。\n\n她并不美丽，瘦小且举止莽撞。（为什么画像和音乐剧选角这么美我也不知道）\n她不会弹琴，早期也不知道如何祝酒干杯，甚至不参加人生第一场舞会而躲在自己的房间里写诗。\n皇家对公主的礼仪要求是举止稳重，而茜茜公主则是步履如飞。\n\n她乐于在自然天性中成长，妄想做梦，写诗，顺风骑马。\n而她的家族则要求她成熟稳重、思虑周全、老成持重，他们不许茜茜公主笑，因为这会露出公主的黄牙。\n\n这是为何伊丽莎白一生都在与死神抗争的原因，她企图放飞被囚禁的灵魂，奈何却越陷越深。\n\n她倔强地一次次地拒绝死神的诱惑，但或许是因为那一份身不由己的责任感她从未成功摆脱过那份阴影。\n\n最终她并非死于自杀，而是遭到了刺杀。鲁凯尼在最开始的声辩时就说了，她其实是渴望解脱的，而最终她解脱了。\n\n\nElisabeth的意义绝不止于一部人物传记音乐剧。这作品也蕴含了某种私人与历史的二重性的特质，将皇后个人的悲剧和世纪之交的奥匈帝国以至大德意志文化圈的悲剧隐秘地连为一体。\n\n伊丽莎白之追求极致自由而不得、反被其追求而禁锢，和德奥文化中的精神洁癖式地追求自由，反而被民族主义裹挟、在一战前终于面临苦涩的失败，有某种异曲同工的相似性。\n\n「Die Schatten werden laenger」这首歌就唱出了一切。死神也不仅仅是伊丽莎白的死神，也是奥匈帝国（乃至整个君主政体）被民族主义推翻、日薄西山的象征。\n\n也就是说，一个人追求自由，最终成了自己的精神洁癖的奴隶；一个民族追逐自由和崛起（的意识形态），最后成了民族主义的奴隶，这两样东西某种程度上是相似的。\n\n时代洪流 造化弄人 奈何奈何。\n\n\n","source":"_posts/Elisabeth.md","raw":"---\ntitle: Elisabeth（musical 2005）\ndate: 2019-09-26 22:24:32\ntags:\n- musical\n- Elisabeth\nclearReading: true\nthumbnailImage: 20190926.jpg\nthumbnailImagePosition: top\ncoverImage: cover.jpg\ncoverCaption: \"Hello World, Hello Programming\"\ncoverSize: partial\ncomments: false\ncategories: About Me\n---\n\n音乐剧：伊丽莎白（德 2005年）\n<!--more-->\n\n《伊丽莎白》是以巴伐利亚公主、奥地利皇后与匈牙利王后伊丽莎白·亚美莉·欧根妮（Elisabeth Amalie Eugenie）的一生为素材所创作的德语音乐剧。\n\n这部音乐剧讲述了奥地利与匈牙利王后伊丽莎白（茜茜公主）的故事，从她1854年的订婚和结婚开始，直至她在1898年被刺杀为止。\n通过对她对死亡越来越迷恋的刻画，反映出她的婚姻和她的帝国走向衰亡的过程。\n\n\n### 第一幕\n剧的开场为鲁凯尼在死后被审判。鲁凯尼声称自己刺杀伊丽莎白只是为了满足她的愿望，因为她与死亡（Der Tod）相爱。鲁凯尼把伊丽莎白生活的时代的亡魂叫来为他作证。自此拉开鲁凯尼讲述伊丽莎白一生的故事的序幕。\n\n伊丽莎白在自由自在、无忧无虑的环境中长大。当一次因为大胆调皮而从高处坠下时，她首次与死亡相遇，开始了她一生中与死亡之间既爱又恨的关系。\n\n<img src=\"./1.jpg\" style=\"width:500px;margin:40px 0\">\n<img src=\"./6.jpg\" style=\"width:500px;margin:40px 0\">\n一开始就可以见到伊丽莎白想要的其实是做梦，写诗，顺风骑马般的自由，只可惜造化弄人\n\n\n伊丽莎白的姐姐海伦娜被长辈们挑选为奥地利皇帝弗兰兹·约瑟夫的妻子，但弗兰兹·约瑟夫自己却选择了伊丽莎白。\n<img src=\"./2.jpg\" style=\"width:500px;margin:40px 0\">\n婚礼的全程暗色调揭开了着从此灰暗婚姻的序幕\n\n在婚礼时，死亡劝诱伊丽莎白，但被伊丽莎白拒绝。\n\n<img src=\"./3.jpg\" style=\"width:500px;margin:40px 0\">\n伊丽莎白在婚礼上与死神共舞，从此王朝终结故事转折开始\n\n与皇帝成婚后，这段看似童话般的婚姻很快出现问题。伊丽莎白无法适应宫廷生活，感觉被禁锢，被弗兰兹·约瑟夫之母索菲精神虐待，并感觉缺少丈夫的关心。伊丽莎白与弗兰兹·约瑟夫的孩子鲁道夫出生后，因为孩子的养育问题，伊丽莎白与索菲再次发生剧烈冲突。弗兰兹·约瑟夫无法解开婆媳之间的不和。\n\n与此同时，奥地利人民的生活陷入贫困，而伊丽莎白却过着骄奢的生活。（牛奶歌在此响起）鲁凯尼对此予以讽刺。\n\n伊丽莎白与丈夫争执后，灵魂呼唤着自由.\n<img src=\"./4.jpg\" style=\"width:500px;margin:40px 0\">\n<img src=\"./5.jpg\" style=\"width:500px;margin:40px 0\">\n（死神真的太魅惑）\n\n***\n### 第二幕\n（一开始的管风琴串戏到歌剧魅影...）\n死神再次诱惑着伊丽莎白，伊丽莎白与其共舞，但最终拒绝了他。（当我想跳舞在此响起）\n<img src=\"./7.jpg\" style=\"width:500px;margin:40px 0\">\n<img src=\"./8.jpg\" style=\"width:500px;margin:40px 0\">\n\n童年的鲁道夫被与母亲分离，在偌大宫殿的黑暗中只有死亡的陪伴，因此把死亡当作朋友。\n<img src=\"./9.jpg\" style=\"width:500px;margin:40px 0\">\n\n伊丽莎白参观疯人院后深受触动，灵魂再次呼唤自由。\n\n索菲和大臣们为了减弱伊丽莎白对弗兰兹·约瑟夫的影响力，设计让弗兰兹·约瑟夫接触别的女人。大臣前往妓院挑选女人。死亡扮成医生，告知伊丽莎白她已从丈夫处染上性病。弗兰兹·约瑟夫与索菲发生激烈争吵。\n经历了一系列变化，伊丽莎白变成了冷酷的女人。她抛开了皇宫、责任、孩子、家人，经年在世界各地独自旅行。\n\n<img src=\"./10.jpg\" style=\"width:500px;margin:40px 0\">\n长大后的鲁道夫与父亲政见不合，死亡鼓励他对抗父亲。\n\n鲁道夫与匈牙利人的合谋被弗兰兹·约瑟夫发现。鲁道夫向母亲伊丽莎白求助，但被伊丽莎白冷淡地忽略了。鲁道夫被死亡夺取了性命，自杀了。伊丽莎白对儿子的死非常伤心。\n\n在沉没的世界之船的甲板上，弗兰兹·约瑟夫与伊丽莎白会面，双方取得谅解，但已经物是人非。世界也已大变，欧洲皇室贵族不断没落或被推翻。奥匈帝国大厦将倾。\n<img src=\"./11.jpg\" style=\"width:500px;margin:40px 0\">\n鲁凯尼刺杀伊丽莎白。伊丽莎白终于投入死亡怀抱。故事完结！\n\n<img src=\"./12.jpg\" style=\"width:500px;margin:40px 0\"> \n（最后的死神之吻真的太帅了）\n\n***\n### 后记\n伊丽莎白公主并不是人们一般理解意义上的规矩的贵族女性。\n\n她并不美丽，瘦小且举止莽撞。（为什么画像和音乐剧选角这么美我也不知道）\n她不会弹琴，早期也不知道如何祝酒干杯，甚至不参加人生第一场舞会而躲在自己的房间里写诗。\n皇家对公主的礼仪要求是举止稳重，而茜茜公主则是步履如飞。\n\n她乐于在自然天性中成长，妄想做梦，写诗，顺风骑马。\n而她的家族则要求她成熟稳重、思虑周全、老成持重，他们不许茜茜公主笑，因为这会露出公主的黄牙。\n\n这是为何伊丽莎白一生都在与死神抗争的原因，她企图放飞被囚禁的灵魂，奈何却越陷越深。\n\n她倔强地一次次地拒绝死神的诱惑，但或许是因为那一份身不由己的责任感她从未成功摆脱过那份阴影。\n\n最终她并非死于自杀，而是遭到了刺杀。鲁凯尼在最开始的声辩时就说了，她其实是渴望解脱的，而最终她解脱了。\n\n\nElisabeth的意义绝不止于一部人物传记音乐剧。这作品也蕴含了某种私人与历史的二重性的特质，将皇后个人的悲剧和世纪之交的奥匈帝国以至大德意志文化圈的悲剧隐秘地连为一体。\n\n伊丽莎白之追求极致自由而不得、反被其追求而禁锢，和德奥文化中的精神洁癖式地追求自由，反而被民族主义裹挟、在一战前终于面临苦涩的失败，有某种异曲同工的相似性。\n\n「Die Schatten werden laenger」这首歌就唱出了一切。死神也不仅仅是伊丽莎白的死神，也是奥匈帝国（乃至整个君主政体）被民族主义推翻、日薄西山的象征。\n\n也就是说，一个人追求自由，最终成了自己的精神洁癖的奴隶；一个民族追逐自由和崛起（的意识形态），最后成了民族主义的奴隶，这两样东西某种程度上是相似的。\n\n时代洪流 造化弄人 奈何奈何。\n\n\n","slug":"Elisabeth","published":1,"updated":"2019-11-23T23:54:38.000Z","layout":"post","photos":[],"link":"","_id":"ck3it6k1m000iteyi1tacr0kl","content":"<p>音乐剧：伊丽莎白（德 2005年）</p>\n<a id=\"more\"></a>\n\n<p>《伊丽莎白》是以巴伐利亚公主、奥地利皇后与匈牙利王后伊丽莎白·亚美莉·欧根妮（Elisabeth Amalie Eugenie）的一生为素材所创作的德语音乐剧。</p>\n<p>这部音乐剧讲述了奥地利与匈牙利王后伊丽莎白（茜茜公主）的故事，从她1854年的订婚和结婚开始，直至她在1898年被刺杀为止。<br>通过对她对死亡越来越迷恋的刻画，反映出她的婚姻和她的帝国走向衰亡的过程。</p>\n<h3 id=\"第一幕\"><a href=\"#第一幕\" class=\"headerlink\" title=\"第一幕\"></a>第一幕</h3><p>剧的开场为鲁凯尼在死后被审判。鲁凯尼声称自己刺杀伊丽莎白只是为了满足她的愿望，因为她与死亡（Der Tod）相爱。鲁凯尼把伊丽莎白生活的时代的亡魂叫来为他作证。自此拉开鲁凯尼讲述伊丽莎白一生的故事的序幕。</p>\n<p>伊丽莎白在自由自在、无忧无虑的环境中长大。当一次因为大胆调皮而从高处坠下时，她首次与死亡相遇，开始了她一生中与死亡之间既爱又恨的关系。</p>\n<img src=\"./1.jpg\" style=\"width:500px;margin:40px 0\">\n<img src=\"./6.jpg\" style=\"width:500px;margin:40px 0\">\n一开始就可以见到伊丽莎白想要的其实是做梦，写诗，顺风骑马般的自由，只可惜造化弄人\n\n\n<p>伊丽莎白的姐姐海伦娜被长辈们挑选为奥地利皇帝弗兰兹·约瑟夫的妻子，但弗兰兹·约瑟夫自己却选择了伊丽莎白。<br><img src=\"./2.jpg\" style=\"width:500px;margin:40px 0\"><br>婚礼的全程暗色调揭开了着从此灰暗婚姻的序幕</p>\n<p>在婚礼时，死亡劝诱伊丽莎白，但被伊丽莎白拒绝。</p>\n<img src=\"./3.jpg\" style=\"width:500px;margin:40px 0\">\n伊丽莎白在婚礼上与死神共舞，从此王朝终结故事转折开始\n\n<p>与皇帝成婚后，这段看似童话般的婚姻很快出现问题。伊丽莎白无法适应宫廷生活，感觉被禁锢，被弗兰兹·约瑟夫之母索菲精神虐待，并感觉缺少丈夫的关心。伊丽莎白与弗兰兹·约瑟夫的孩子鲁道夫出生后，因为孩子的养育问题，伊丽莎白与索菲再次发生剧烈冲突。弗兰兹·约瑟夫无法解开婆媳之间的不和。</p>\n<p>与此同时，奥地利人民的生活陷入贫困，而伊丽莎白却过着骄奢的生活。（牛奶歌在此响起）鲁凯尼对此予以讽刺。</p>\n<p>伊丽莎白与丈夫争执后，灵魂呼唤着自由.<br><img src=\"./4.jpg\" style=\"width:500px;margin:40px 0\"><br><img src=\"./5.jpg\" style=\"width:500px;margin:40px 0\"><br>（死神真的太魅惑）</p>\n<hr>\n<h3 id=\"第二幕\"><a href=\"#第二幕\" class=\"headerlink\" title=\"第二幕\"></a>第二幕</h3><p>（一开始的管风琴串戏到歌剧魅影…）<br>死神再次诱惑着伊丽莎白，伊丽莎白与其共舞，但最终拒绝了他。（当我想跳舞在此响起）<br><img src=\"./7.jpg\" style=\"width:500px;margin:40px 0\"><br><img src=\"./8.jpg\" style=\"width:500px;margin:40px 0\"></p>\n<p>童年的鲁道夫被与母亲分离，在偌大宫殿的黑暗中只有死亡的陪伴，因此把死亡当作朋友。<br><img src=\"./9.jpg\" style=\"width:500px;margin:40px 0\"></p>\n<p>伊丽莎白参观疯人院后深受触动，灵魂再次呼唤自由。</p>\n<p>索菲和大臣们为了减弱伊丽莎白对弗兰兹·约瑟夫的影响力，设计让弗兰兹·约瑟夫接触别的女人。大臣前往妓院挑选女人。死亡扮成医生，告知伊丽莎白她已从丈夫处染上性病。弗兰兹·约瑟夫与索菲发生激烈争吵。<br>经历了一系列变化，伊丽莎白变成了冷酷的女人。她抛开了皇宫、责任、孩子、家人，经年在世界各地独自旅行。</p>\n<img src=\"./10.jpg\" style=\"width:500px;margin:40px 0\">\n长大后的鲁道夫与父亲政见不合，死亡鼓励他对抗父亲。\n\n<p>鲁道夫与匈牙利人的合谋被弗兰兹·约瑟夫发现。鲁道夫向母亲伊丽莎白求助，但被伊丽莎白冷淡地忽略了。鲁道夫被死亡夺取了性命，自杀了。伊丽莎白对儿子的死非常伤心。</p>\n<p>在沉没的世界之船的甲板上，弗兰兹·约瑟夫与伊丽莎白会面，双方取得谅解，但已经物是人非。世界也已大变，欧洲皇室贵族不断没落或被推翻。奥匈帝国大厦将倾。<br><img src=\"./11.jpg\" style=\"width:500px;margin:40px 0\"><br>鲁凯尼刺杀伊丽莎白。伊丽莎白终于投入死亡怀抱。故事完结！</p>\n<img src=\"./12.jpg\" style=\"width:500px;margin:40px 0\"> \n（最后的死神之吻真的太帅了）\n\n<hr>\n<h3 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h3><p>伊丽莎白公主并不是人们一般理解意义上的规矩的贵族女性。</p>\n<p>她并不美丽，瘦小且举止莽撞。（为什么画像和音乐剧选角这么美我也不知道）<br>她不会弹琴，早期也不知道如何祝酒干杯，甚至不参加人生第一场舞会而躲在自己的房间里写诗。<br>皇家对公主的礼仪要求是举止稳重，而茜茜公主则是步履如飞。</p>\n<p>她乐于在自然天性中成长，妄想做梦，写诗，顺风骑马。<br>而她的家族则要求她成熟稳重、思虑周全、老成持重，他们不许茜茜公主笑，因为这会露出公主的黄牙。</p>\n<p>这是为何伊丽莎白一生都在与死神抗争的原因，她企图放飞被囚禁的灵魂，奈何却越陷越深。</p>\n<p>她倔强地一次次地拒绝死神的诱惑，但或许是因为那一份身不由己的责任感她从未成功摆脱过那份阴影。</p>\n<p>最终她并非死于自杀，而是遭到了刺杀。鲁凯尼在最开始的声辩时就说了，她其实是渴望解脱的，而最终她解脱了。</p>\n<p>Elisabeth的意义绝不止于一部人物传记音乐剧。这作品也蕴含了某种私人与历史的二重性的特质，将皇后个人的悲剧和世纪之交的奥匈帝国以至大德意志文化圈的悲剧隐秘地连为一体。</p>\n<p>伊丽莎白之追求极致自由而不得、反被其追求而禁锢，和德奥文化中的精神洁癖式地追求自由，反而被民族主义裹挟、在一战前终于面临苦涩的失败，有某种异曲同工的相似性。</p>\n<p>「Die Schatten werden laenger」这首歌就唱出了一切。死神也不仅仅是伊丽莎白的死神，也是奥匈帝国（乃至整个君主政体）被民族主义推翻、日薄西山的象征。</p>\n<p>也就是说，一个人追求自由，最终成了自己的精神洁癖的奴隶；一个民族追逐自由和崛起（的意识形态），最后成了民族主义的奴隶，这两样东西某种程度上是相似的。</p>\n<p>时代洪流 造化弄人 奈何奈何。</p>\n","site":{"data":{}},"thumbnailImageUrl":"https://kisky3.github.io/2019/09/26/Elisabeth/20190926.jpg","excerpt":"<p>音乐剧：伊丽莎白（德 2005年）</p>","more":"<p>《伊丽莎白》是以巴伐利亚公主、奥地利皇后与匈牙利王后伊丽莎白·亚美莉·欧根妮（Elisabeth Amalie Eugenie）的一生为素材所创作的德语音乐剧。</p>\n<p>这部音乐剧讲述了奥地利与匈牙利王后伊丽莎白（茜茜公主）的故事，从她1854年的订婚和结婚开始，直至她在1898年被刺杀为止。<br>通过对她对死亡越来越迷恋的刻画，反映出她的婚姻和她的帝国走向衰亡的过程。</p>\n<h3 id=\"第一幕\"><a href=\"#第一幕\" class=\"headerlink\" title=\"第一幕\"></a>第一幕</h3><p>剧的开场为鲁凯尼在死后被审判。鲁凯尼声称自己刺杀伊丽莎白只是为了满足她的愿望，因为她与死亡（Der Tod）相爱。鲁凯尼把伊丽莎白生活的时代的亡魂叫来为他作证。自此拉开鲁凯尼讲述伊丽莎白一生的故事的序幕。</p>\n<p>伊丽莎白在自由自在、无忧无虑的环境中长大。当一次因为大胆调皮而从高处坠下时，她首次与死亡相遇，开始了她一生中与死亡之间既爱又恨的关系。</p>\n<img src=\"./1.jpg\" style=\"width:500px;margin:40px 0\">\n<img src=\"./6.jpg\" style=\"width:500px;margin:40px 0\">\n一开始就可以见到伊丽莎白想要的其实是做梦，写诗，顺风骑马般的自由，只可惜造化弄人\n\n\n<p>伊丽莎白的姐姐海伦娜被长辈们挑选为奥地利皇帝弗兰兹·约瑟夫的妻子，但弗兰兹·约瑟夫自己却选择了伊丽莎白。<br><img src=\"./2.jpg\" style=\"width:500px;margin:40px 0\"><br>婚礼的全程暗色调揭开了着从此灰暗婚姻的序幕</p>\n<p>在婚礼时，死亡劝诱伊丽莎白，但被伊丽莎白拒绝。</p>\n<img src=\"./3.jpg\" style=\"width:500px;margin:40px 0\">\n伊丽莎白在婚礼上与死神共舞，从此王朝终结故事转折开始\n\n<p>与皇帝成婚后，这段看似童话般的婚姻很快出现问题。伊丽莎白无法适应宫廷生活，感觉被禁锢，被弗兰兹·约瑟夫之母索菲精神虐待，并感觉缺少丈夫的关心。伊丽莎白与弗兰兹·约瑟夫的孩子鲁道夫出生后，因为孩子的养育问题，伊丽莎白与索菲再次发生剧烈冲突。弗兰兹·约瑟夫无法解开婆媳之间的不和。</p>\n<p>与此同时，奥地利人民的生活陷入贫困，而伊丽莎白却过着骄奢的生活。（牛奶歌在此响起）鲁凯尼对此予以讽刺。</p>\n<p>伊丽莎白与丈夫争执后，灵魂呼唤着自由.<br><img src=\"./4.jpg\" style=\"width:500px;margin:40px 0\"><br><img src=\"./5.jpg\" style=\"width:500px;margin:40px 0\"><br>（死神真的太魅惑）</p>\n<hr>\n<h3 id=\"第二幕\"><a href=\"#第二幕\" class=\"headerlink\" title=\"第二幕\"></a>第二幕</h3><p>（一开始的管风琴串戏到歌剧魅影…）<br>死神再次诱惑着伊丽莎白，伊丽莎白与其共舞，但最终拒绝了他。（当我想跳舞在此响起）<br><img src=\"./7.jpg\" style=\"width:500px;margin:40px 0\"><br><img src=\"./8.jpg\" style=\"width:500px;margin:40px 0\"></p>\n<p>童年的鲁道夫被与母亲分离，在偌大宫殿的黑暗中只有死亡的陪伴，因此把死亡当作朋友。<br><img src=\"./9.jpg\" style=\"width:500px;margin:40px 0\"></p>\n<p>伊丽莎白参观疯人院后深受触动，灵魂再次呼唤自由。</p>\n<p>索菲和大臣们为了减弱伊丽莎白对弗兰兹·约瑟夫的影响力，设计让弗兰兹·约瑟夫接触别的女人。大臣前往妓院挑选女人。死亡扮成医生，告知伊丽莎白她已从丈夫处染上性病。弗兰兹·约瑟夫与索菲发生激烈争吵。<br>经历了一系列变化，伊丽莎白变成了冷酷的女人。她抛开了皇宫、责任、孩子、家人，经年在世界各地独自旅行。</p>\n<img src=\"./10.jpg\" style=\"width:500px;margin:40px 0\">\n长大后的鲁道夫与父亲政见不合，死亡鼓励他对抗父亲。\n\n<p>鲁道夫与匈牙利人的合谋被弗兰兹·约瑟夫发现。鲁道夫向母亲伊丽莎白求助，但被伊丽莎白冷淡地忽略了。鲁道夫被死亡夺取了性命，自杀了。伊丽莎白对儿子的死非常伤心。</p>\n<p>在沉没的世界之船的甲板上，弗兰兹·约瑟夫与伊丽莎白会面，双方取得谅解，但已经物是人非。世界也已大变，欧洲皇室贵族不断没落或被推翻。奥匈帝国大厦将倾。<br><img src=\"./11.jpg\" style=\"width:500px;margin:40px 0\"><br>鲁凯尼刺杀伊丽莎白。伊丽莎白终于投入死亡怀抱。故事完结！</p>\n<img src=\"./12.jpg\" style=\"width:500px;margin:40px 0\"> \n（最后的死神之吻真的太帅了）\n\n<hr>\n<h3 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h3><p>伊丽莎白公主并不是人们一般理解意义上的规矩的贵族女性。</p>\n<p>她并不美丽，瘦小且举止莽撞。（为什么画像和音乐剧选角这么美我也不知道）<br>她不会弹琴，早期也不知道如何祝酒干杯，甚至不参加人生第一场舞会而躲在自己的房间里写诗。<br>皇家对公主的礼仪要求是举止稳重，而茜茜公主则是步履如飞。</p>\n<p>她乐于在自然天性中成长，妄想做梦，写诗，顺风骑马。<br>而她的家族则要求她成熟稳重、思虑周全、老成持重，他们不许茜茜公主笑，因为这会露出公主的黄牙。</p>\n<p>这是为何伊丽莎白一生都在与死神抗争的原因，她企图放飞被囚禁的灵魂，奈何却越陷越深。</p>\n<p>她倔强地一次次地拒绝死神的诱惑，但或许是因为那一份身不由己的责任感她从未成功摆脱过那份阴影。</p>\n<p>最终她并非死于自杀，而是遭到了刺杀。鲁凯尼在最开始的声辩时就说了，她其实是渴望解脱的，而最终她解脱了。</p>\n<p>Elisabeth的意义绝不止于一部人物传记音乐剧。这作品也蕴含了某种私人与历史的二重性的特质，将皇后个人的悲剧和世纪之交的奥匈帝国以至大德意志文化圈的悲剧隐秘地连为一体。</p>\n<p>伊丽莎白之追求极致自由而不得、反被其追求而禁锢，和德奥文化中的精神洁癖式地追求自由，反而被民族主义裹挟、在一战前终于面临苦涩的失败，有某种异曲同工的相似性。</p>\n<p>「Die Schatten werden laenger」这首歌就唱出了一切。死神也不仅仅是伊丽莎白的死神，也是奥匈帝国（乃至整个君主政体）被民族主义推翻、日薄西山的象征。</p>\n<p>也就是说，一个人追求自由，最终成了自己的精神洁癖的奴隶；一个民族追逐自由和崛起（的意识形态），最后成了民族主义的奴隶，这两样东西某种程度上是相似的。</p>\n<p>时代洪流 造化弄人 奈何奈何。</p>"},{"title":"Welcome To My Blog","date":"2019-06-23T13:14:53.000Z","clearReading":true,"thumbnailImage":"cat5.jpg","coverImage":"cover.jpg","thumbnailImagePosition":"top","coverCaption":"Hello World, Hello Programming","coverSize":"partial","comments":0,"top":true,"_content":"Hey, I am Xiang Yu! :D Welcome to my blog. \n\nI want to be a good front-end developer who can speak two foreign languages\n(English and Japanese) in the furture.\n\nIndoor-outdoor, cat lover, has no sense of direction, like chanllenging something new in my way.\n\nLearning foreign languages, programming, keyboard, painting etc by myself just for fun XD. \nAll are half-baked tho.\n\nI will Continuously update this blog to record what I learned and experienced.\n\nThank you for taking the time to read it. Any helpful suggestions would be welcome！\n\n<!--more-->\n(* 'ᵕ' )ｲ\n","source":"_posts/FirstBlog.md","raw":"---\ntitle: Welcome To My Blog\ndate: 2019-06-23 22:14:53\nclearReading: true\nthumbnailImage: cat5.jpg\ncoverImage: cover.jpg\nthumbnailImagePosition: top\ncoverCaption: \"Hello World, Hello Programming\"\ncoverSize: partial\ncomments: false\ncategories: About Me\ntop: true\n---\nHey, I am Xiang Yu! :D Welcome to my blog. \n\nI want to be a good front-end developer who can speak two foreign languages\n(English and Japanese) in the furture.\n\nIndoor-outdoor, cat lover, has no sense of direction, like chanllenging something new in my way.\n\nLearning foreign languages, programming, keyboard, painting etc by myself just for fun XD. \nAll are half-baked tho.\n\nI will Continuously update this blog to record what I learned and experienced.\n\nThank you for taking the time to read it. Any helpful suggestions would be welcome！\n\n<!--more-->\n(* 'ᵕ' )ｲ\n","slug":"FirstBlog","published":1,"updated":"2019-11-23T23:54:38.000Z","layout":"post","photos":[],"link":"","_id":"ck3it6k1o000lteyieelvj9sf","content":"<p>Hey, I am Xiang Yu! :D Welcome to my blog. </p>\n<p>I want to be a good front-end developer who can speak two foreign languages<br>(English and Japanese) in the furture.</p>\n<p>Indoor-outdoor, cat lover, has no sense of direction, like chanllenging something new in my way.</p>\n<p>Learning foreign languages, programming, keyboard, painting etc by myself just for fun XD.<br>All are half-baked tho.</p>\n<p>I will Continuously update this blog to record what I learned and experienced.</p>\n<p>Thank you for taking the time to read it. Any helpful suggestions would be welcome！</p>\n<a id=\"more\"></a>\n<p>(* ‘ᵕ’ )ｲ</p>\n","site":{"data":{}},"thumbnailImageUrl":"https://kisky3.github.io/2019/06/23/FirstBlog/cat5.jpg","excerpt":"<p>Hey, I am Xiang Yu! :D Welcome to my blog. </p>\n<p>I want to be a good front-end developer who can speak two foreign languages<br>(English and Japanese) in the furture.</p>\n<p>Indoor-outdoor, cat lover, has no sense of direction, like chanllenging something new in my way.</p>\n<p>Learning foreign languages, programming, keyboard, painting etc by myself just for fun XD.<br>All are half-baked tho.</p>\n<p>I will Continuously update this blog to record what I learned and experienced.</p>\n<p>Thank you for taking the time to read it. Any helpful suggestions would be welcome！</p>","more":"<p>(* ‘ᵕ’ )ｲ</p>"},{"title":"About VSCode Extension （Plus Tips）","date":"2019-10-05T10:53:42.000Z","clearReading":true,"thumbnailImage":"20191005.png","thumbnailImagePosition":"left","coverImage":"cover.jpg","coverCaption":"Hello World, Hello Programming","coverSize":"partial","comments":0,"_content":"\n关于VSCode常用的扩展插件（以及设定技巧）\n<!--more-->\n### 1. [vscode-icons](https://marketplace.visualstudio.com/items?itemName=vscode-icons-team.vscode-icons)\n\n给项目文件添加icon.\n\n<img src=\"./1.gif\">\n\n***\n\n### 2. [GitLens](https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens)\n\n能够以commit为单位在文件内将修改标示出来.甩锅必备.\n\n<img src=\"./2.gif\">\n\n***\n\n### 3. [Prettier](https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode)\n\n自动调整code的format，默认快捷键是alt（option） + shift + f\n\n<img src=\"./3.jpg\">\n\n***\n\n### 4.[Git History](https://marketplace.visualstudio.com/items?itemName=donjayamanne.githistory)\n方便看git log\n\n<img src=\"./4.gif\">\n\n***\n\n### 5.[Bracket Pair Colorizer](https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer)\n\n能够为括号标注出不同的颜色！\n\n<img src=\"./5.jpg\">\n\n***\n\n### 6. [TODO Highlight](https://marketplace.visualstudio.com/items?itemName=wayou.vscode-todo-highlight)\n\n为你的TODO和FIXME之类的comment添加高亮，系统只能帮你到这份上了，记得以后要修复啊！\n\n<img src=\"./6.png\">\n\n***\n\n### 7. [ Path Autocomplete](https://marketplace.visualstudio.com/items?itemName=ionutvmi.path-autocomplete)\n\n为你补全path\n<img src=\"./7.gif\">\n\n***\n\n### 8. [Trailing Spaces](https://marketplace.visualstudio.com/items?itemName=shardulm94.trailing-spaces)\n\n强调行内不要的space.\n\n<img src=\"./8.jpg\">\n\n***\n\n### 9. [indent-rainbow](https://marketplace.visualstudio.com/items?itemName=oderwat.indent-rainbow)\n\n 给你的缩进添加颜色！\n\n <img src=\"./9.png\">\n\n***\n\n### 其他设定\n\n[Code] => [Preferences] => [Settings] ,直接编辑json 或者从GUI搜索\n\n##### 1.最终行的自动改行\n\nsettings.json\n```JS\n\"files.insertFinalNewline\": true\n```\n\n***\n\n##### 2.特殊字符的显示\n\n用于防止向github提交README时产生乱码的现象\n\nsettings.json\n```JS\n\"editor.renderControlCharacters\": true\n```\n\n***\n\n##### 3.关于自动换行\n\n过长的时候进行自动换行显示\n\nsettings.json\n```JS\n\"editor.wordWrap\": \"on\"\n```\n***\n\n##### 4.自动删除不需要的行\n\nsettings.json\n```JS\n\"files.trimFinalNewlines\": true\n```\n","source":"_posts/Extension.md","raw":"---\ntitle: About VSCode Extension （Plus Tips）\ndate: 2019-10-05 19:53:42\ntags:\n- setting\n- extension\n- VSCode\nclearReading: true\nthumbnailImage: 20191005.png\nthumbnailImagePosition: left\ncoverImage: cover.jpg\ncoverCaption: \"Hello World, Hello Programming\"\ncoverSize: partial\ncomments: false\ncategories: System Setting\n---\n\n关于VSCode常用的扩展插件（以及设定技巧）\n<!--more-->\n### 1. [vscode-icons](https://marketplace.visualstudio.com/items?itemName=vscode-icons-team.vscode-icons)\n\n给项目文件添加icon.\n\n<img src=\"./1.gif\">\n\n***\n\n### 2. [GitLens](https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens)\n\n能够以commit为单位在文件内将修改标示出来.甩锅必备.\n\n<img src=\"./2.gif\">\n\n***\n\n### 3. [Prettier](https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode)\n\n自动调整code的format，默认快捷键是alt（option） + shift + f\n\n<img src=\"./3.jpg\">\n\n***\n\n### 4.[Git History](https://marketplace.visualstudio.com/items?itemName=donjayamanne.githistory)\n方便看git log\n\n<img src=\"./4.gif\">\n\n***\n\n### 5.[Bracket Pair Colorizer](https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer)\n\n能够为括号标注出不同的颜色！\n\n<img src=\"./5.jpg\">\n\n***\n\n### 6. [TODO Highlight](https://marketplace.visualstudio.com/items?itemName=wayou.vscode-todo-highlight)\n\n为你的TODO和FIXME之类的comment添加高亮，系统只能帮你到这份上了，记得以后要修复啊！\n\n<img src=\"./6.png\">\n\n***\n\n### 7. [ Path Autocomplete](https://marketplace.visualstudio.com/items?itemName=ionutvmi.path-autocomplete)\n\n为你补全path\n<img src=\"./7.gif\">\n\n***\n\n### 8. [Trailing Spaces](https://marketplace.visualstudio.com/items?itemName=shardulm94.trailing-spaces)\n\n强调行内不要的space.\n\n<img src=\"./8.jpg\">\n\n***\n\n### 9. [indent-rainbow](https://marketplace.visualstudio.com/items?itemName=oderwat.indent-rainbow)\n\n 给你的缩进添加颜色！\n\n <img src=\"./9.png\">\n\n***\n\n### 其他设定\n\n[Code] => [Preferences] => [Settings] ,直接编辑json 或者从GUI搜索\n\n##### 1.最终行的自动改行\n\nsettings.json\n```JS\n\"files.insertFinalNewline\": true\n```\n\n***\n\n##### 2.特殊字符的显示\n\n用于防止向github提交README时产生乱码的现象\n\nsettings.json\n```JS\n\"editor.renderControlCharacters\": true\n```\n\n***\n\n##### 3.关于自动换行\n\n过长的时候进行自动换行显示\n\nsettings.json\n```JS\n\"editor.wordWrap\": \"on\"\n```\n***\n\n##### 4.自动删除不需要的行\n\nsettings.json\n```JS\n\"files.trimFinalNewlines\": true\n```\n","slug":"Extension","published":1,"updated":"2019-11-23T23:54:38.000Z","layout":"post","photos":[],"link":"","_id":"ck3it6k1q000pteyid4ygf7bd","content":"<p>关于VSCode常用的扩展插件（以及设定技巧）</p>\n<a id=\"more\"></a>\n<h3 id=\"1-vscode-icons\"><a href=\"#1-vscode-icons\" class=\"headerlink\" title=\"1. vscode-icons\"></a>1. <a href=\"https://marketplace.visualstudio.com/items?itemName=vscode-icons-team.vscode-icons\" target=\"_blank\" rel=\"noopener\">vscode-icons</a></h3><p>给项目文件添加icon.</p>\n<img src=\"./1.gif\">\n\n<hr>\n<h3 id=\"2-GitLens\"><a href=\"#2-GitLens\" class=\"headerlink\" title=\"2. GitLens\"></a>2. <a href=\"https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens\" target=\"_blank\" rel=\"noopener\">GitLens</a></h3><p>能够以commit为单位在文件内将修改标示出来.甩锅必备.</p>\n<img src=\"./2.gif\">\n\n<hr>\n<h3 id=\"3-Prettier\"><a href=\"#3-Prettier\" class=\"headerlink\" title=\"3. Prettier\"></a>3. <a href=\"https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode\" target=\"_blank\" rel=\"noopener\">Prettier</a></h3><p>自动调整code的format，默认快捷键是alt（option） + shift + f</p>\n<img src=\"./3.jpg\">\n\n<hr>\n<h3 id=\"4-Git-History\"><a href=\"#4-Git-History\" class=\"headerlink\" title=\"4.Git History\"></a>4.<a href=\"https://marketplace.visualstudio.com/items?itemName=donjayamanne.githistory\" target=\"_blank\" rel=\"noopener\">Git History</a></h3><p>方便看git log</p>\n<img src=\"./4.gif\">\n\n<hr>\n<h3 id=\"5-Bracket-Pair-Colorizer\"><a href=\"#5-Bracket-Pair-Colorizer\" class=\"headerlink\" title=\"5.Bracket Pair Colorizer\"></a>5.<a href=\"https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer\" target=\"_blank\" rel=\"noopener\">Bracket Pair Colorizer</a></h3><p>能够为括号标注出不同的颜色！</p>\n<img src=\"./5.jpg\">\n\n<hr>\n<h3 id=\"6-TODO-Highlight\"><a href=\"#6-TODO-Highlight\" class=\"headerlink\" title=\"6. TODO Highlight\"></a>6. <a href=\"https://marketplace.visualstudio.com/items?itemName=wayou.vscode-todo-highlight\" target=\"_blank\" rel=\"noopener\">TODO Highlight</a></h3><p>为你的TODO和FIXME之类的comment添加高亮，系统只能帮你到这份上了，记得以后要修复啊！</p>\n<img src=\"./6.png\">\n\n<hr>\n<h3 id=\"7-Path-Autocomplete\"><a href=\"#7-Path-Autocomplete\" class=\"headerlink\" title=\"7.  Path Autocomplete\"></a>7. <a href=\"https://marketplace.visualstudio.com/items?itemName=ionutvmi.path-autocomplete\" target=\"_blank\" rel=\"noopener\"> Path Autocomplete</a></h3><p>为你补全path<br><img src=\"./7.gif\"></p>\n<hr>\n<h3 id=\"8-Trailing-Spaces\"><a href=\"#8-Trailing-Spaces\" class=\"headerlink\" title=\"8. Trailing Spaces\"></a>8. <a href=\"https://marketplace.visualstudio.com/items?itemName=shardulm94.trailing-spaces\" target=\"_blank\" rel=\"noopener\">Trailing Spaces</a></h3><p>强调行内不要的space.</p>\n<img src=\"./8.jpg\">\n\n<hr>\n<h3 id=\"9-indent-rainbow\"><a href=\"#9-indent-rainbow\" class=\"headerlink\" title=\"9. indent-rainbow\"></a>9. <a href=\"https://marketplace.visualstudio.com/items?itemName=oderwat.indent-rainbow\" target=\"_blank\" rel=\"noopener\">indent-rainbow</a></h3><p> 给你的缩进添加颜色！</p>\n <img src=\"./9.png\">\n\n<hr>\n<h3 id=\"其他设定\"><a href=\"#其他设定\" class=\"headerlink\" title=\"其他设定\"></a>其他设定</h3><p>[Code] =&gt; [Preferences] =&gt; [Settings] ,直接编辑json 或者从GUI搜索</p>\n<h5 id=\"1-最终行的自动改行\"><a href=\"#1-最终行的自动改行\" class=\"headerlink\" title=\"1.最终行的自动改行\"></a>1.最终行的自动改行</h5><p>settings.json</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"files.insertFinalNewline\"</span>: <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h5 id=\"2-特殊字符的显示\"><a href=\"#2-特殊字符的显示\" class=\"headerlink\" title=\"2.特殊字符的显示\"></a>2.特殊字符的显示</h5><p>用于防止向github提交README时产生乱码的现象</p>\n<p>settings.json</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"editor.renderControlCharacters\"</span>: <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h5 id=\"3-关于自动换行\"><a href=\"#3-关于自动换行\" class=\"headerlink\" title=\"3.关于自动换行\"></a>3.关于自动换行</h5><p>过长的时候进行自动换行显示</p>\n<p>settings.json</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"editor.wordWrap\"</span>: <span class=\"string\">\"on\"</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h5 id=\"4-自动删除不需要的行\"><a href=\"#4-自动删除不需要的行\" class=\"headerlink\" title=\"4.自动删除不需要的行\"></a>4.自动删除不需要的行</h5><p>settings.json</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"files.trimFinalNewlines\"</span>: <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"thumbnailImageUrl":"https://kisky3.github.io/2019/10/05/Extension/20191005.png","excerpt":"<p>关于VSCode常用的扩展插件（以及设定技巧）</p>","more":"<h3 id=\"1-vscode-icons\"><a href=\"#1-vscode-icons\" class=\"headerlink\" title=\"1. vscode-icons\"></a>1. <a href=\"https://marketplace.visualstudio.com/items?itemName=vscode-icons-team.vscode-icons\" target=\"_blank\" rel=\"noopener\">vscode-icons</a></h3><p>给项目文件添加icon.</p>\n<img src=\"./1.gif\">\n\n<hr>\n<h3 id=\"2-GitLens\"><a href=\"#2-GitLens\" class=\"headerlink\" title=\"2. GitLens\"></a>2. <a href=\"https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens\" target=\"_blank\" rel=\"noopener\">GitLens</a></h3><p>能够以commit为单位在文件内将修改标示出来.甩锅必备.</p>\n<img src=\"./2.gif\">\n\n<hr>\n<h3 id=\"3-Prettier\"><a href=\"#3-Prettier\" class=\"headerlink\" title=\"3. Prettier\"></a>3. <a href=\"https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode\" target=\"_blank\" rel=\"noopener\">Prettier</a></h3><p>自动调整code的format，默认快捷键是alt（option） + shift + f</p>\n<img src=\"./3.jpg\">\n\n<hr>\n<h3 id=\"4-Git-History\"><a href=\"#4-Git-History\" class=\"headerlink\" title=\"4.Git History\"></a>4.<a href=\"https://marketplace.visualstudio.com/items?itemName=donjayamanne.githistory\" target=\"_blank\" rel=\"noopener\">Git History</a></h3><p>方便看git log</p>\n<img src=\"./4.gif\">\n\n<hr>\n<h3 id=\"5-Bracket-Pair-Colorizer\"><a href=\"#5-Bracket-Pair-Colorizer\" class=\"headerlink\" title=\"5.Bracket Pair Colorizer\"></a>5.<a href=\"https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer\" target=\"_blank\" rel=\"noopener\">Bracket Pair Colorizer</a></h3><p>能够为括号标注出不同的颜色！</p>\n<img src=\"./5.jpg\">\n\n<hr>\n<h3 id=\"6-TODO-Highlight\"><a href=\"#6-TODO-Highlight\" class=\"headerlink\" title=\"6. TODO Highlight\"></a>6. <a href=\"https://marketplace.visualstudio.com/items?itemName=wayou.vscode-todo-highlight\" target=\"_blank\" rel=\"noopener\">TODO Highlight</a></h3><p>为你的TODO和FIXME之类的comment添加高亮，系统只能帮你到这份上了，记得以后要修复啊！</p>\n<img src=\"./6.png\">\n\n<hr>\n<h3 id=\"7-Path-Autocomplete\"><a href=\"#7-Path-Autocomplete\" class=\"headerlink\" title=\"7.  Path Autocomplete\"></a>7. <a href=\"https://marketplace.visualstudio.com/items?itemName=ionutvmi.path-autocomplete\" target=\"_blank\" rel=\"noopener\"> Path Autocomplete</a></h3><p>为你补全path<br><img src=\"./7.gif\"></p>\n<hr>\n<h3 id=\"8-Trailing-Spaces\"><a href=\"#8-Trailing-Spaces\" class=\"headerlink\" title=\"8. Trailing Spaces\"></a>8. <a href=\"https://marketplace.visualstudio.com/items?itemName=shardulm94.trailing-spaces\" target=\"_blank\" rel=\"noopener\">Trailing Spaces</a></h3><p>强调行内不要的space.</p>\n<img src=\"./8.jpg\">\n\n<hr>\n<h3 id=\"9-indent-rainbow\"><a href=\"#9-indent-rainbow\" class=\"headerlink\" title=\"9. indent-rainbow\"></a>9. <a href=\"https://marketplace.visualstudio.com/items?itemName=oderwat.indent-rainbow\" target=\"_blank\" rel=\"noopener\">indent-rainbow</a></h3><p> 给你的缩进添加颜色！</p>\n <img src=\"./9.png\">\n\n<hr>\n<h3 id=\"其他设定\"><a href=\"#其他设定\" class=\"headerlink\" title=\"其他设定\"></a>其他设定</h3><p>[Code] =&gt; [Preferences] =&gt; [Settings] ,直接编辑json 或者从GUI搜索</p>\n<h5 id=\"1-最终行的自动改行\"><a href=\"#1-最终行的自动改行\" class=\"headerlink\" title=\"1.最终行的自动改行\"></a>1.最终行的自动改行</h5><p>settings.json</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"files.insertFinalNewline\"</span>: <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h5 id=\"2-特殊字符的显示\"><a href=\"#2-特殊字符的显示\" class=\"headerlink\" title=\"2.特殊字符的显示\"></a>2.特殊字符的显示</h5><p>用于防止向github提交README时产生乱码的现象</p>\n<p>settings.json</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"editor.renderControlCharacters\"</span>: <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h5 id=\"3-关于自动换行\"><a href=\"#3-关于自动换行\" class=\"headerlink\" title=\"3.关于自动换行\"></a>3.关于自动换行</h5><p>过长的时候进行自动换行显示</p>\n<p>settings.json</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"editor.wordWrap\"</span>: <span class=\"string\">\"on\"</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h5 id=\"4-自动删除不需要的行\"><a href=\"#4-自动删除不需要的行\" class=\"headerlink\" title=\"4.自动删除不需要的行\"></a>4.自动删除不需要的行</h5><p>settings.json</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"files.trimFinalNewlines\"</span>: <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>"},{"title":"HTTP Methods GET vs POST","date":"2018-10-25T07:18:03.000Z","clearReading":true,"thumbnailImage":"20181025.png","thumbnailImagePosition":"left","coverImage":"cover.jpg","coverCaption":"Hello World, Hello Programming","coverSize":"partial","comments":0,"_content":"Get和Post提交数据有什么区别\n<!--more-->\n{% hl_text #FFCCCC %}1.post更安全，安全要求高的用post 要求低的用get{% endhl_text %}\n<br>\n\n<br>\n{% hl_text #FFCCCC %}2.post发送的数据更大（get有url长度限制）{% endhl_text %}\n<br>\n<br>\n{% hl_text #FFCCCC %}3.post能发送更多的数据类型{% endhl_text %}\n<br>\n<br>\n{% hl_text #FFCCCC %}4.post比get慢{% endhl_text %}\n<br>\n(原因:post在真正接收数据之前会先将请求头发送给服务器进行确认，服务器返回100 Continue响应之后才真正发送数据 )\n<br>\n<br>\n{% hl_text #FFCCCC %}5.post用于向后台传数据，get一般用于向后台要数据。{% endhl_text %}","source":"_posts/Get和Post提交数据有什么区别.md","raw":"---\ntitle: HTTP Methods GET vs POST\ndate: 2018-10-25 16:18:03\ntags:\n- Get\n- Post\nclearReading: true\nthumbnailImage: 20181025.png\nthumbnailImagePosition: left\ncoverImage: cover.jpg\ncoverCaption: \"Hello World, Hello Programming\"\ncoverSize: partial\ncomments: false\ncategories: Front-end Knowledge\n---\nGet和Post提交数据有什么区别\n<!--more-->\n{% hl_text #FFCCCC %}1.post更安全，安全要求高的用post 要求低的用get{% endhl_text %}\n<br>\n\n<br>\n{% hl_text #FFCCCC %}2.post发送的数据更大（get有url长度限制）{% endhl_text %}\n<br>\n<br>\n{% hl_text #FFCCCC %}3.post能发送更多的数据类型{% endhl_text %}\n<br>\n<br>\n{% hl_text #FFCCCC %}4.post比get慢{% endhl_text %}\n<br>\n(原因:post在真正接收数据之前会先将请求头发送给服务器进行确认，服务器返回100 Continue响应之后才真正发送数据 )\n<br>\n<br>\n{% hl_text #FFCCCC %}5.post用于向后台传数据，get一般用于向后台要数据。{% endhl_text %}","slug":"Get和Post提交数据有什么区别","published":1,"updated":"2019-11-23T23:54:38.000Z","layout":"post","photos":[],"link":"","_id":"ck3it6k1u000steyijpkjlhrm","content":"<p>Get和Post提交数据有什么区别</p>\n<a id=\"more\"></a>\n<span class=\"highlight-text\" style=\"background-color:#FFCCCC;\">1.post更安全，安全要求高的用post 要求低的用get</span>\n<br>\n\n<br>\n<span class=\"highlight-text\" style=\"background-color:#FFCCCC;\">2.post发送的数据更大（get有url长度限制）</span>\n<br>\n<br>\n<span class=\"highlight-text\" style=\"background-color:#FFCCCC;\">3.post能发送更多的数据类型</span>\n<br>\n<br>\n<span class=\"highlight-text\" style=\"background-color:#FFCCCC;\">4.post比get慢</span>\n<br>\n(原因:post在真正接收数据之前会先将请求头发送给服务器进行确认，服务器返回100 Continue响应之后才真正发送数据 )\n<br>\n<br>\n<span class=\"highlight-text\" style=\"background-color:#FFCCCC;\">5.post用于向后台传数据，get一般用于向后台要数据。</span>","site":{"data":{}},"thumbnailImageUrl":"https://kisky3.github.io/2018/10/25/Get和Post提交数据有什么区别/20181025.png","excerpt":"<p>Get和Post提交数据有什么区别</p>","more":"<span class=\"highlight-text\" style=\"background-color:#FFCCCC;\">1.post更安全，安全要求高的用post 要求低的用get</span>\n<br>\n\n<br>\n<span class=\"highlight-text\" style=\"background-color:#FFCCCC;\">2.post发送的数据更大（get有url长度限制）</span>\n<br>\n<br>\n<span class=\"highlight-text\" style=\"background-color:#FFCCCC;\">3.post能发送更多的数据类型</span>\n<br>\n<br>\n<span class=\"highlight-text\" style=\"background-color:#FFCCCC;\">4.post比get慢</span>\n<br>\n(原因:post在真正接收数据之前会先将请求头发送给服务器进行确认，服务器返回100 Continue响应之后才真正发送数据 )\n<br>\n<br>\n<span class=\"highlight-text\" style=\"background-color:#FFCCCC;\">5.post用于向后台传数据，get一般用于向后台要数据。</span>"},{"title":"GIT TIPS","date":"2018-12-06T09:28:52.000Z","clearReading":true,"coverCaption":"Hello World, Hello Programming","coverImage":"cover.jpg","coverSize":"partial","comments":0,"top":true,"_content":"\nAbout common git tips. Continuously update here.\n\n<!--more-->\n{% alert success no-icon %}\n#### 1. git pull时 「Error：The following untracked working tree files would be overwritten by merge:」\n{% endalert %}\n输入以下代码后再进行修改，然后再push就好 （本地做的修改会不见 修改多的时候不建议！)\n\n```\ngit fetch origin\ngit reset --hard FETCH_HEAD\n```\n***\n<br>\n{% alert success no-icon %}\n#### 2. git本地版本回退与远端版本回退\n{% endalert %}\n\n##### 本地回滚\n1.在Github上或者下面的命令行查看想回退版本的版本号。\n \n ```\n git reflog\n ```\n\n2.接着回退版本\n```\ngit reset --hard *****(版本号)\n```\n\n##### 远程回滚\n###### 方法一：\n如果错误提交已经推送到自己的远程分支了，那么就需要回滚远程分支了。 以下方法只能在自己一人的branch下使用。\n强制回滚会消除别人提交的修改。慎用！\n\n1. 首先回退本地分支步骤参见本地回滚\n\n2. 强制推送到远程分支\n\n```\ngit push -f *****(你的分支名)\n```\n\n###### 方法二：\ngit revert 命令意思是撤销某次提交。\n它会产生一个新的提交，虽然代码回退了，但是版本依然是向前的，所以，当你用revert回退之后，所有人pull之后，他们的代码也自动的回退了。\n如果使用 revert 撤销的不是最近一次提交，那么一定会有代码冲突，需要你合并代码，合并代码只需要把当前的代码全部去掉，保留之前版本的代码就可以了.\n撤销最近一次提交\n\n```\ngit revert HEAD\n```\n\n撤销上上次提交\n```\ngit revert HEAD～1\n```\n\n撤销这次提交\n```\ngit revert *****(版本号)\n```\n***\n<br>\n{% alert success no-icon %}\n#### 3. git 将当前branch1的一部分抽出merge 剩余部分在另一个branch2上开发\n{% endalert %}\n\n1. 切换回master\n2. 在master上创建一个新的branch2作为继续开发的branch\n3. 在branch2上merge branch1\n4. 将branch1 返回到想merge的范围，然后强制push回滚 之后merge\n5. 在branch2 上进行后续开发\n\n***\n<br>\n{% alert success no-icon %}\n### 4. Git 撤销修改\n{% endalert %}\n1.本地修改了一堆文件(并没有使用git add到暂存区)，想放弃修改。\n```\ngit checkout -- filename\n```\n\n2.撤销所有文件/文件夹的修改\n```\ngit checkout .\n```\n\n3.本地新增了一堆文件(并没有git add到暂存区)，想放弃修改。\n【单个文件】\n```\nrm filename / rm dir -rf\n```\n\n【所有文件/文件夹：】\n```\ngit clean -xdf\n```\n\n4.本地修改/新增了一堆文件，已经git add到暂存区，想放弃修改。\n【单个文件/文件夹：】\n```\ngit reset HEAD filename\n```\n\n【所有文件/文件夹：】\n```\ngit reset HEAD .\n```\n\n5.本地通过git add & git commit 之后，想要撤销此次commit\n```\ngit reset commit_id\n```\n***\n<br>\n{% alert success no-icon %}\n#### 5. git 将当前的branch的commit移动到另一个新的branch\n{% endalert %}\n\ngit cherry-pick可以理解为”挑拣”提交，它会获取某一个分支的单笔提交，并作为一个新的提交引入到你当前分支上。 当我们需要在本地合入其他分支的提交时，如果我们不想对整个分支进行合并，而是只想将某一次提交合入到本地当前分支上，那么就要使用git cherry-pick了。\n\n查看你需要的commit，然后切换到master上建立新分支。\n\n###### 一个commit的情况下\n```\ngit cherry-pick 版本号\n```\n\n###### 复数commit的情况下\n```\ngit cherry-pick [起点版本号]..[终点版本号]\n```\n\n###### 终止cherry-pick\n```\ngit cherry-pick --abort\n```\n\n如果发生conflict则需要解决冲突并commit。复数的情况下利用下面的comment查看状态并继续cheery-pick\n```\ngit status\ngit cherry-pick --continue\n```\n\n最后成功后git push到新分支便可以获得所需commit（不是新分支的情况下也适用。）\n\n***\n<br>\n{% alert success no-icon %}\n#### 6. git删除分支\n{% endalert %}\n\n###### 删除已经push的远程分支\n```\ngit branch -r -d origin/branch-name\ngit push origin :branch-name\n```\n\n但是本地查看branch还是能看到删除的分支。利用下面的命令行可删除远程仓库不存在的分支。\n\n```\ngit remote prune origin\n```\n\n###### 删除本地分支\n```\ngit branch -d\n```\n***\n<br>\n{% alert success no-icon %}\n#### 7. 出现错误 fatal: remote origin already exists\n{% endalert %}\n\n当要把本地文件夹上传到git时要执行下面的代码：\n\n```\ngit remote add origin 〜\n```\n\n但是有时会出现fatal: remote origin already exists.的错误信息，\n此时需要使用git remote rm origin删除origin，然后再次上传即可\n\n```\n$ git remote rm origin\n$ git remote add origin git@github.com:user_name/repository_name.git\n$ git push -u origin master\n```\n","source":"_posts/GitTip.md","raw":"---\ntitle: GIT TIPS\ndate: 2018-12-06 18:28:52\ntags:\n- Git\nclearReading: true\ncoverCaption: \"Hello World, Hello Programming\"\ncoverImage: cover.jpg\ncoverSize: partial\ncomments: false\ncategories: Front-end Knowledge\ntop: true\n---\n\nAbout common git tips. Continuously update here.\n\n<!--more-->\n{% alert success no-icon %}\n#### 1. git pull时 「Error：The following untracked working tree files would be overwritten by merge:」\n{% endalert %}\n输入以下代码后再进行修改，然后再push就好 （本地做的修改会不见 修改多的时候不建议！)\n\n```\ngit fetch origin\ngit reset --hard FETCH_HEAD\n```\n***\n<br>\n{% alert success no-icon %}\n#### 2. git本地版本回退与远端版本回退\n{% endalert %}\n\n##### 本地回滚\n1.在Github上或者下面的命令行查看想回退版本的版本号。\n \n ```\n git reflog\n ```\n\n2.接着回退版本\n```\ngit reset --hard *****(版本号)\n```\n\n##### 远程回滚\n###### 方法一：\n如果错误提交已经推送到自己的远程分支了，那么就需要回滚远程分支了。 以下方法只能在自己一人的branch下使用。\n强制回滚会消除别人提交的修改。慎用！\n\n1. 首先回退本地分支步骤参见本地回滚\n\n2. 强制推送到远程分支\n\n```\ngit push -f *****(你的分支名)\n```\n\n###### 方法二：\ngit revert 命令意思是撤销某次提交。\n它会产生一个新的提交，虽然代码回退了，但是版本依然是向前的，所以，当你用revert回退之后，所有人pull之后，他们的代码也自动的回退了。\n如果使用 revert 撤销的不是最近一次提交，那么一定会有代码冲突，需要你合并代码，合并代码只需要把当前的代码全部去掉，保留之前版本的代码就可以了.\n撤销最近一次提交\n\n```\ngit revert HEAD\n```\n\n撤销上上次提交\n```\ngit revert HEAD～1\n```\n\n撤销这次提交\n```\ngit revert *****(版本号)\n```\n***\n<br>\n{% alert success no-icon %}\n#### 3. git 将当前branch1的一部分抽出merge 剩余部分在另一个branch2上开发\n{% endalert %}\n\n1. 切换回master\n2. 在master上创建一个新的branch2作为继续开发的branch\n3. 在branch2上merge branch1\n4. 将branch1 返回到想merge的范围，然后强制push回滚 之后merge\n5. 在branch2 上进行后续开发\n\n***\n<br>\n{% alert success no-icon %}\n### 4. Git 撤销修改\n{% endalert %}\n1.本地修改了一堆文件(并没有使用git add到暂存区)，想放弃修改。\n```\ngit checkout -- filename\n```\n\n2.撤销所有文件/文件夹的修改\n```\ngit checkout .\n```\n\n3.本地新增了一堆文件(并没有git add到暂存区)，想放弃修改。\n【单个文件】\n```\nrm filename / rm dir -rf\n```\n\n【所有文件/文件夹：】\n```\ngit clean -xdf\n```\n\n4.本地修改/新增了一堆文件，已经git add到暂存区，想放弃修改。\n【单个文件/文件夹：】\n```\ngit reset HEAD filename\n```\n\n【所有文件/文件夹：】\n```\ngit reset HEAD .\n```\n\n5.本地通过git add & git commit 之后，想要撤销此次commit\n```\ngit reset commit_id\n```\n***\n<br>\n{% alert success no-icon %}\n#### 5. git 将当前的branch的commit移动到另一个新的branch\n{% endalert %}\n\ngit cherry-pick可以理解为”挑拣”提交，它会获取某一个分支的单笔提交，并作为一个新的提交引入到你当前分支上。 当我们需要在本地合入其他分支的提交时，如果我们不想对整个分支进行合并，而是只想将某一次提交合入到本地当前分支上，那么就要使用git cherry-pick了。\n\n查看你需要的commit，然后切换到master上建立新分支。\n\n###### 一个commit的情况下\n```\ngit cherry-pick 版本号\n```\n\n###### 复数commit的情况下\n```\ngit cherry-pick [起点版本号]..[终点版本号]\n```\n\n###### 终止cherry-pick\n```\ngit cherry-pick --abort\n```\n\n如果发生conflict则需要解决冲突并commit。复数的情况下利用下面的comment查看状态并继续cheery-pick\n```\ngit status\ngit cherry-pick --continue\n```\n\n最后成功后git push到新分支便可以获得所需commit（不是新分支的情况下也适用。）\n\n***\n<br>\n{% alert success no-icon %}\n#### 6. git删除分支\n{% endalert %}\n\n###### 删除已经push的远程分支\n```\ngit branch -r -d origin/branch-name\ngit push origin :branch-name\n```\n\n但是本地查看branch还是能看到删除的分支。利用下面的命令行可删除远程仓库不存在的分支。\n\n```\ngit remote prune origin\n```\n\n###### 删除本地分支\n```\ngit branch -d\n```\n***\n<br>\n{% alert success no-icon %}\n#### 7. 出现错误 fatal: remote origin already exists\n{% endalert %}\n\n当要把本地文件夹上传到git时要执行下面的代码：\n\n```\ngit remote add origin 〜\n```\n\n但是有时会出现fatal: remote origin already exists.的错误信息，\n此时需要使用git remote rm origin删除origin，然后再次上传即可\n\n```\n$ git remote rm origin\n$ git remote add origin git@github.com:user_name/repository_name.git\n$ git push -u origin master\n```\n","slug":"GitTip","published":1,"updated":"2019-11-23T23:54:38.000Z","layout":"post","photos":[],"link":"","_id":"ck3it6k1w000wteyisklho8gf","content":"<p>About common git tips. Continuously update here.</p>\n<a id=\"more\"></a>\n<div class=\"alert success no-icon\"><h4 id=\"1-git-pull时-「Error：The-following-untracked-working-tree-files-would-be-overwritten-by-merge-」\"><a href=\"#1-git-pull时-「Error：The-following-untracked-working-tree-files-would-be-overwritten-by-merge-」\" class=\"headerlink\" title=\"1. git pull时 「Error：The following untracked working tree files would be overwritten by merge:」\"></a>1. git pull时 「Error：The following untracked working tree files would be overwritten by merge:」</h4></div>\n<p>输入以下代码后再进行修改，然后再push就好 （本地做的修改会不见 修改多的时候不建议！)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch origin</span><br><span class=\"line\">git reset --hard FETCH_HEAD</span><br></pre></td></tr></table></figure>\n\n<hr>\n<br>\n<div class=\"alert success no-icon\"><h4 id=\"2-git本地版本回退与远端版本回退\"><a href=\"#2-git本地版本回退与远端版本回退\" class=\"headerlink\" title=\"2. git本地版本回退与远端版本回退\"></a>2. git本地版本回退与远端版本回退</h4></div>\n\n<h5 id=\"本地回滚\"><a href=\"#本地回滚\" class=\"headerlink\" title=\"本地回滚\"></a>本地回滚</h5><p>1.在Github上或者下面的命令行查看想回退版本的版本号。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reflog</span><br></pre></td></tr></table></figure>\n\n<p>2.接着回退版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard *****(版本号)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"远程回滚\"><a href=\"#远程回滚\" class=\"headerlink\" title=\"远程回滚\"></a>远程回滚</h5><h6 id=\"方法一：\"><a href=\"#方法一：\" class=\"headerlink\" title=\"方法一：\"></a>方法一：</h6><p>如果错误提交已经推送到自己的远程分支了，那么就需要回滚远程分支了。 以下方法只能在自己一人的branch下使用。<br>强制回滚会消除别人提交的修改。慎用！</p>\n<ol>\n<li><p>首先回退本地分支步骤参见本地回滚</p>\n</li>\n<li><p>强制推送到远程分支</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -f *****(你的分支名)</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"方法二：\"><a href=\"#方法二：\" class=\"headerlink\" title=\"方法二：\"></a>方法二：</h6><p>git revert 命令意思是撤销某次提交。<br>它会产生一个新的提交，虽然代码回退了，但是版本依然是向前的，所以，当你用revert回退之后，所有人pull之后，他们的代码也自动的回退了。<br>如果使用 revert 撤销的不是最近一次提交，那么一定会有代码冲突，需要你合并代码，合并代码只需要把当前的代码全部去掉，保留之前版本的代码就可以了.<br>撤销最近一次提交</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git revert HEAD</span><br></pre></td></tr></table></figure>\n\n<p>撤销上上次提交</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git revert HEAD～1</span><br></pre></td></tr></table></figure>\n\n<p>撤销这次提交</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git revert *****(版本号)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<br>\n<div class=\"alert success no-icon\"><h4 id=\"3-git-将当前branch1的一部分抽出merge-剩余部分在另一个branch2上开发\"><a href=\"#3-git-将当前branch1的一部分抽出merge-剩余部分在另一个branch2上开发\" class=\"headerlink\" title=\"3. git 将当前branch1的一部分抽出merge 剩余部分在另一个branch2上开发\"></a>3. git 将当前branch1的一部分抽出merge 剩余部分在另一个branch2上开发</h4></div>\n\n<ol>\n<li>切换回master</li>\n<li>在master上创建一个新的branch2作为继续开发的branch</li>\n<li>在branch2上merge branch1</li>\n<li>将branch1 返回到想merge的范围，然后强制push回滚 之后merge</li>\n<li>在branch2 上进行后续开发</li>\n</ol>\n<hr>\n<br>\n<div class=\"alert success no-icon\"><h3 id=\"4-Git-撤销修改\"><a href=\"#4-Git-撤销修改\" class=\"headerlink\" title=\"4. Git 撤销修改\"></a>4. Git 撤销修改</h3></div>\n1.本地修改了一堆文件(并没有使用git add到暂存区)，想放弃修改。\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -- filename</span><br></pre></td></tr></table></figure>\n\n<p>2.撤销所有文件/文件夹的修改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout .</span><br></pre></td></tr></table></figure>\n\n<p>3.本地新增了一堆文件(并没有git add到暂存区)，想放弃修改。<br>【单个文件】</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm filename / rm dir -rf</span><br></pre></td></tr></table></figure>\n\n<p>【所有文件/文件夹：】</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clean -xdf</span><br></pre></td></tr></table></figure>\n\n<p>4.本地修改/新增了一堆文件，已经git add到暂存区，想放弃修改。<br>【单个文件/文件夹：】</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset HEAD filename</span><br></pre></td></tr></table></figure>\n\n<p>【所有文件/文件夹：】</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset HEAD .</span><br></pre></td></tr></table></figure>\n\n<p>5.本地通过git add &amp; git commit 之后，想要撤销此次commit</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset commit_id</span><br></pre></td></tr></table></figure>\n\n<hr>\n<br>\n<div class=\"alert success no-icon\"><h4 id=\"5-git-将当前的branch的commit移动到另一个新的branch\"><a href=\"#5-git-将当前的branch的commit移动到另一个新的branch\" class=\"headerlink\" title=\"5. git 将当前的branch的commit移动到另一个新的branch\"></a>5. git 将当前的branch的commit移动到另一个新的branch</h4></div>\n\n<p>git cherry-pick可以理解为”挑拣”提交，它会获取某一个分支的单笔提交，并作为一个新的提交引入到你当前分支上。 当我们需要在本地合入其他分支的提交时，如果我们不想对整个分支进行合并，而是只想将某一次提交合入到本地当前分支上，那么就要使用git cherry-pick了。</p>\n<p>查看你需要的commit，然后切换到master上建立新分支。</p>\n<h6 id=\"一个commit的情况下\"><a href=\"#一个commit的情况下\" class=\"headerlink\" title=\"一个commit的情况下\"></a>一个commit的情况下</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git cherry-pick 版本号</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"复数commit的情况下\"><a href=\"#复数commit的情况下\" class=\"headerlink\" title=\"复数commit的情况下\"></a>复数commit的情况下</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git cherry-pick [起点版本号]..[终点版本号]</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"终止cherry-pick\"><a href=\"#终止cherry-pick\" class=\"headerlink\" title=\"终止cherry-pick\"></a>终止cherry-pick</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git cherry-pick --abort</span><br></pre></td></tr></table></figure>\n\n<p>如果发生conflict则需要解决冲突并commit。复数的情况下利用下面的comment查看状态并继续cheery-pick</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br><span class=\"line\">git cherry-pick --continue</span><br></pre></td></tr></table></figure>\n\n<p>最后成功后git push到新分支便可以获得所需commit（不是新分支的情况下也适用。）</p>\n<hr>\n<br>\n<div class=\"alert success no-icon\"><h4 id=\"6-git删除分支\"><a href=\"#6-git删除分支\" class=\"headerlink\" title=\"6. git删除分支\"></a>6. git删除分支</h4></div>\n\n<h6 id=\"删除已经push的远程分支\"><a href=\"#删除已经push的远程分支\" class=\"headerlink\" title=\"删除已经push的远程分支\"></a>删除已经push的远程分支</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -r -d origin/branch-name</span><br><span class=\"line\">git push origin :branch-name</span><br></pre></td></tr></table></figure>\n\n<p>但是本地查看branch还是能看到删除的分支。利用下面的命令行可删除远程仓库不存在的分支。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote prune origin</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"删除本地分支\"><a href=\"#删除本地分支\" class=\"headerlink\" title=\"删除本地分支\"></a>删除本地分支</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d</span><br></pre></td></tr></table></figure>\n\n<hr>\n<br>\n<div class=\"alert success no-icon\"><h4 id=\"7-出现错误-fatal-remote-origin-already-exists\"><a href=\"#7-出现错误-fatal-remote-origin-already-exists\" class=\"headerlink\" title=\"7. 出现错误 fatal: remote origin already exists\"></a>7. 出现错误 fatal: remote origin already exists</h4></div>\n\n<p>当要把本地文件夹上传到git时要执行下面的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin 〜</span><br></pre></td></tr></table></figure>\n\n<p>但是有时会出现fatal: remote origin already exists.的错误信息，<br>此时需要使用git remote rm origin删除origin，然后再次上传即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote rm origin</span><br><span class=\"line\">$ git remote add origin git@github.com:user_name/repository_name.git</span><br><span class=\"line\">$ git push -u origin master</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"thumbnailImageUrl":"https://kisky3.github.io/2018/12/06/GitTip/cover.jpg","excerpt":"<p>About common git tips. Continuously update here.</p>","more":"<div class=\"alert success no-icon\"><h4 id=\"1-git-pull时-「Error：The-following-untracked-working-tree-files-would-be-overwritten-by-merge-」\"><a href=\"#1-git-pull时-「Error：The-following-untracked-working-tree-files-would-be-overwritten-by-merge-」\" class=\"headerlink\" title=\"1. git pull时 「Error：The following untracked working tree files would be overwritten by merge:」\"></a>1. git pull时 「Error：The following untracked working tree files would be overwritten by merge:」</h4></div>\n<p>输入以下代码后再进行修改，然后再push就好 （本地做的修改会不见 修改多的时候不建议！)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch origin</span><br><span class=\"line\">git reset --hard FETCH_HEAD</span><br></pre></td></tr></table></figure>\n\n<hr>\n<br>\n<div class=\"alert success no-icon\"><h4 id=\"2-git本地版本回退与远端版本回退\"><a href=\"#2-git本地版本回退与远端版本回退\" class=\"headerlink\" title=\"2. git本地版本回退与远端版本回退\"></a>2. git本地版本回退与远端版本回退</h4></div>\n\n<h5 id=\"本地回滚\"><a href=\"#本地回滚\" class=\"headerlink\" title=\"本地回滚\"></a>本地回滚</h5><p>1.在Github上或者下面的命令行查看想回退版本的版本号。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reflog</span><br></pre></td></tr></table></figure>\n\n<p>2.接着回退版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard *****(版本号)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"远程回滚\"><a href=\"#远程回滚\" class=\"headerlink\" title=\"远程回滚\"></a>远程回滚</h5><h6 id=\"方法一：\"><a href=\"#方法一：\" class=\"headerlink\" title=\"方法一：\"></a>方法一：</h6><p>如果错误提交已经推送到自己的远程分支了，那么就需要回滚远程分支了。 以下方法只能在自己一人的branch下使用。<br>强制回滚会消除别人提交的修改。慎用！</p>\n<ol>\n<li><p>首先回退本地分支步骤参见本地回滚</p>\n</li>\n<li><p>强制推送到远程分支</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -f *****(你的分支名)</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"方法二：\"><a href=\"#方法二：\" class=\"headerlink\" title=\"方法二：\"></a>方法二：</h6><p>git revert 命令意思是撤销某次提交。<br>它会产生一个新的提交，虽然代码回退了，但是版本依然是向前的，所以，当你用revert回退之后，所有人pull之后，他们的代码也自动的回退了。<br>如果使用 revert 撤销的不是最近一次提交，那么一定会有代码冲突，需要你合并代码，合并代码只需要把当前的代码全部去掉，保留之前版本的代码就可以了.<br>撤销最近一次提交</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git revert HEAD</span><br></pre></td></tr></table></figure>\n\n<p>撤销上上次提交</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git revert HEAD～1</span><br></pre></td></tr></table></figure>\n\n<p>撤销这次提交</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git revert *****(版本号)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<br>\n<div class=\"alert success no-icon\"><h4 id=\"3-git-将当前branch1的一部分抽出merge-剩余部分在另一个branch2上开发\"><a href=\"#3-git-将当前branch1的一部分抽出merge-剩余部分在另一个branch2上开发\" class=\"headerlink\" title=\"3. git 将当前branch1的一部分抽出merge 剩余部分在另一个branch2上开发\"></a>3. git 将当前branch1的一部分抽出merge 剩余部分在另一个branch2上开发</h4></div>\n\n<ol>\n<li>切换回master</li>\n<li>在master上创建一个新的branch2作为继续开发的branch</li>\n<li>在branch2上merge branch1</li>\n<li>将branch1 返回到想merge的范围，然后强制push回滚 之后merge</li>\n<li>在branch2 上进行后续开发</li>\n</ol>\n<hr>\n<br>\n<div class=\"alert success no-icon\"><h3 id=\"4-Git-撤销修改\"><a href=\"#4-Git-撤销修改\" class=\"headerlink\" title=\"4. Git 撤销修改\"></a>4. Git 撤销修改</h3></div>\n1.本地修改了一堆文件(并没有使用git add到暂存区)，想放弃修改。\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -- filename</span><br></pre></td></tr></table></figure>\n\n<p>2.撤销所有文件/文件夹的修改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout .</span><br></pre></td></tr></table></figure>\n\n<p>3.本地新增了一堆文件(并没有git add到暂存区)，想放弃修改。<br>【单个文件】</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm filename / rm dir -rf</span><br></pre></td></tr></table></figure>\n\n<p>【所有文件/文件夹：】</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clean -xdf</span><br></pre></td></tr></table></figure>\n\n<p>4.本地修改/新增了一堆文件，已经git add到暂存区，想放弃修改。<br>【单个文件/文件夹：】</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset HEAD filename</span><br></pre></td></tr></table></figure>\n\n<p>【所有文件/文件夹：】</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset HEAD .</span><br></pre></td></tr></table></figure>\n\n<p>5.本地通过git add &amp; git commit 之后，想要撤销此次commit</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset commit_id</span><br></pre></td></tr></table></figure>\n\n<hr>\n<br>\n<div class=\"alert success no-icon\"><h4 id=\"5-git-将当前的branch的commit移动到另一个新的branch\"><a href=\"#5-git-将当前的branch的commit移动到另一个新的branch\" class=\"headerlink\" title=\"5. git 将当前的branch的commit移动到另一个新的branch\"></a>5. git 将当前的branch的commit移动到另一个新的branch</h4></div>\n\n<p>git cherry-pick可以理解为”挑拣”提交，它会获取某一个分支的单笔提交，并作为一个新的提交引入到你当前分支上。 当我们需要在本地合入其他分支的提交时，如果我们不想对整个分支进行合并，而是只想将某一次提交合入到本地当前分支上，那么就要使用git cherry-pick了。</p>\n<p>查看你需要的commit，然后切换到master上建立新分支。</p>\n<h6 id=\"一个commit的情况下\"><a href=\"#一个commit的情况下\" class=\"headerlink\" title=\"一个commit的情况下\"></a>一个commit的情况下</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git cherry-pick 版本号</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"复数commit的情况下\"><a href=\"#复数commit的情况下\" class=\"headerlink\" title=\"复数commit的情况下\"></a>复数commit的情况下</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git cherry-pick [起点版本号]..[终点版本号]</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"终止cherry-pick\"><a href=\"#终止cherry-pick\" class=\"headerlink\" title=\"终止cherry-pick\"></a>终止cherry-pick</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git cherry-pick --abort</span><br></pre></td></tr></table></figure>\n\n<p>如果发生conflict则需要解决冲突并commit。复数的情况下利用下面的comment查看状态并继续cheery-pick</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br><span class=\"line\">git cherry-pick --continue</span><br></pre></td></tr></table></figure>\n\n<p>最后成功后git push到新分支便可以获得所需commit（不是新分支的情况下也适用。）</p>\n<hr>\n<br>\n<div class=\"alert success no-icon\"><h4 id=\"6-git删除分支\"><a href=\"#6-git删除分支\" class=\"headerlink\" title=\"6. git删除分支\"></a>6. git删除分支</h4></div>\n\n<h6 id=\"删除已经push的远程分支\"><a href=\"#删除已经push的远程分支\" class=\"headerlink\" title=\"删除已经push的远程分支\"></a>删除已经push的远程分支</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -r -d origin/branch-name</span><br><span class=\"line\">git push origin :branch-name</span><br></pre></td></tr></table></figure>\n\n<p>但是本地查看branch还是能看到删除的分支。利用下面的命令行可删除远程仓库不存在的分支。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote prune origin</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"删除本地分支\"><a href=\"#删除本地分支\" class=\"headerlink\" title=\"删除本地分支\"></a>删除本地分支</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d</span><br></pre></td></tr></table></figure>\n\n<hr>\n<br>\n<div class=\"alert success no-icon\"><h4 id=\"7-出现错误-fatal-remote-origin-already-exists\"><a href=\"#7-出现错误-fatal-remote-origin-already-exists\" class=\"headerlink\" title=\"7. 出现错误 fatal: remote origin already exists\"></a>7. 出现错误 fatal: remote origin already exists</h4></div>\n\n<p>当要把本地文件夹上传到git时要执行下面的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin 〜</span><br></pre></td></tr></table></figure>\n\n<p>但是有时会出现fatal: remote origin already exists.的错误信息，<br>此时需要使用git remote rm origin删除origin，然后再次上传即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote rm origin</span><br><span class=\"line\">$ git remote add origin git@github.com:user_name/repository_name.git</span><br><span class=\"line\">$ git push -u origin master</span><br></pre></td></tr></table></figure>"},{"title":"Install homebrew","date":"2019-09-29T14:03:54.000Z","clearReading":true,"thumbnailImage":"20190929.png","thumbnailImagePosition":"left","coverImage":"cover.jpg","coverCaption":"Hello World, Hello Programming","coverSize":"partial","comments":0,"_content":"安装homebrew\n<!--more-->\n\n\n### 1. AppStore下载Xcode\n\n### 2. global install\n```\nxcode-select --install\n```\n\n### 3.安装Homebrew\n```\n\"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n### 4. 确认\n```\nbrew doctor\n```\n\n没有安装 yarn。create-react-app 需要你事先安装好了 yarn，如果你没有安装，那就需要去下载 安装即可。如果你没安装 yarn，会自动降级为 npm.\nMac 安装 yarn 的方式很简单: brew install yarn 即可。\n","source":"_posts/Homebrew.md","raw":"---\ntitle: Install homebrew\ndate: 2019-09-29 23:03:54\ntags:\n- tip\n- homebrew\nclearReading: true\nthumbnailImage: 20190929.png\nthumbnailImagePosition: left\ncoverImage: cover.jpg\ncoverCaption: \"Hello World, Hello Programming\"\ncoverSize: partial\ncomments: false\ncategories: System Setting\n---\n安装homebrew\n<!--more-->\n\n\n### 1. AppStore下载Xcode\n\n### 2. global install\n```\nxcode-select --install\n```\n\n### 3.安装Homebrew\n```\n\"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n### 4. 确认\n```\nbrew doctor\n```\n\n没有安装 yarn。create-react-app 需要你事先安装好了 yarn，如果你没有安装，那就需要去下载 安装即可。如果你没安装 yarn，会自动降级为 npm.\nMac 安装 yarn 的方式很简单: brew install yarn 即可。\n","slug":"Homebrew","published":1,"updated":"2019-11-23T23:54:38.000Z","layout":"post","photos":[],"link":"","_id":"ck3it6k1z000zteyievxyior3","content":"<p>安装homebrew</p>\n<a id=\"more\"></a>\n\n\n<h3 id=\"1-AppStore下载Xcode\"><a href=\"#1-AppStore下载Xcode\" class=\"headerlink\" title=\"1. AppStore下载Xcode\"></a>1. AppStore下载Xcode</h3><h3 id=\"2-global-install\"><a href=\"#2-global-install\" class=\"headerlink\" title=\"2. global install\"></a>2. global install</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcode-select --install</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-安装Homebrew\"><a href=\"#3-安装Homebrew\" class=\"headerlink\" title=\"3.安装Homebrew\"></a>3.安装Homebrew</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-确认\"><a href=\"#4-确认\" class=\"headerlink\" title=\"4. 确认\"></a>4. 确认</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew doctor</span><br></pre></td></tr></table></figure>\n\n<p>没有安装 yarn。create-react-app 需要你事先安装好了 yarn，如果你没有安装，那就需要去下载 安装即可。如果你没安装 yarn，会自动降级为 npm.<br>Mac 安装 yarn 的方式很简单: brew install yarn 即可。</p>\n","site":{"data":{}},"thumbnailImageUrl":"https://kisky3.github.io/2019/09/29/Homebrew/20190929.png","excerpt":"<p>安装homebrew</p>","more":"<h3 id=\"1-AppStore下载Xcode\"><a href=\"#1-AppStore下载Xcode\" class=\"headerlink\" title=\"1. AppStore下载Xcode\"></a>1. AppStore下载Xcode</h3><h3 id=\"2-global-install\"><a href=\"#2-global-install\" class=\"headerlink\" title=\"2. global install\"></a>2. global install</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcode-select --install</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-安装Homebrew\"><a href=\"#3-安装Homebrew\" class=\"headerlink\" title=\"3.安装Homebrew\"></a>3.安装Homebrew</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-确认\"><a href=\"#4-确认\" class=\"headerlink\" title=\"4. 确认\"></a>4. 确认</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew doctor</span><br></pre></td></tr></table></figure>\n\n<p>没有安装 yarn。create-react-app 需要你事先安装好了 yarn，如果你没有安装，那就需要去下载 安装即可。如果你没安装 yarn，会自动降级为 npm.<br>Mac 安装 yarn 的方式很简单: brew install yarn 即可。</p>"},{"title":"About IconFont","date":"2018-12-28T10:38:46.000Z","clearReading":true,"thumbnailImage":"20181228.jpg","thumbnailImagePosition":"left","coverImage":"cover.jpg","coverCaption":"Hello World, Hello Programming","coverSize":"partial","comments":0,"_content":"\n关于 IconFont\n<!--more-->\nIcon Font简而言之也就是把字体做成图标\n### Icon Font的原理\n\n例：\n\n```HTML\n<p>Hello &#x9965; &#x4eba;&#x8c37;</p>\n<style>\np{\n  font-family: serif;\n}\n</style>\n```\n这里把「饥人谷」这几个字改为 unicode 编码，此时页面上仍然能以serif 字体展示「饥人谷」三个字。\n使用浏览器打开页面时，浏览器会读取 HTML 文件进行解析渲染。当读到「饥人谷」三个字时会转换成对应的 unicode码（可以认为是世界上任意一种文字的特定编号）。再根据HTML 里设置的 font-family （如果没设置则使用浏览器默认设置）去查找电脑里（如果有自定义字体@font-face ，则加载对应字体文件）对应字体的字体文件。找到文件后根据 unicode 码去查找绘制外形，找到后绘制到页面上。 所以对于第二个范例， 「&#9965」是「饥」的 unicede 码，所以用户最终也能看到serf字体样式的「饥」字。\n\n***\n\n### Icon Font生成和使用步骤\n\n#### 1.制作字体文件\n这个需要设计师把字体文件做好。一般不属于前端工作范畴，在这里掠过不讲。\n\n#### 2.声明font-family\n- 使用本地链接\n- 使用第三方链接\n\n#### 3.使用font-family\n- 使用HTML实体\n- 使用CSS：before\n\n***\n\n### 最常用的Icon Font生成步骤\n\n#### 1. 点击打开[阿里巴巴的免费字体工具网站](https://www.iconfont.cn/)\n\n#### 2. 在搜索栏里搜索自己需要的图标（英文）\n\n<img src=\"./1.png\" style=\"width:500px\">\n\n#### 3. 用Github登陆后选择自己中意的图标，添加入库\n\n<img src=\"./2.png\" style=\"width:500px\">\n\n#### 4. 可以选择添加至项目或者直接下载至本地\n\n下图的search下的&#xe71d为HTML实体，可以用实体显示但是不便记忆所以不推荐\n也可以使用CSS before 的content加上/ 导出icon\n\n```CSS\n.icon-search:before { content: \"\\e71d\"; }\n\n```\n\n<img src=\"./3.png\" style=\"width:500px\">\n\n#### 5. 下载至本地后解压\n\n为了浏览器兼容，建议复制后缀名为.eot,svg,ttf和woff的4个文件到自己的目录下\n\n<img src=\"./4.png\" style=\"width:500px\">\n\n#### 6. 复制iconfont.css的内容到自己的页面，并直接添加span和class引用生产的字体文件\n\n<img src=\"./5.png\" style=\"width:500px\">\n\n#### 7. 保存并查看\n","source":"_posts/IconFont.md","raw":"---\ntitle: About IconFont\ndate: 2018-12-28 19:38:46\ntags:\n- IconFont\n- CSS\nclearReading: true\nthumbnailImage: 20181228.jpg\nthumbnailImagePosition: left\ncoverImage: cover.jpg\ncoverCaption: \"Hello World, Hello Programming\"\ncoverSize: partial\ncomments: false\ncategories: Front-end Knowledge\n---\n\n关于 IconFont\n<!--more-->\nIcon Font简而言之也就是把字体做成图标\n### Icon Font的原理\n\n例：\n\n```HTML\n<p>Hello &#x9965; &#x4eba;&#x8c37;</p>\n<style>\np{\n  font-family: serif;\n}\n</style>\n```\n这里把「饥人谷」这几个字改为 unicode 编码，此时页面上仍然能以serif 字体展示「饥人谷」三个字。\n使用浏览器打开页面时，浏览器会读取 HTML 文件进行解析渲染。当读到「饥人谷」三个字时会转换成对应的 unicode码（可以认为是世界上任意一种文字的特定编号）。再根据HTML 里设置的 font-family （如果没设置则使用浏览器默认设置）去查找电脑里（如果有自定义字体@font-face ，则加载对应字体文件）对应字体的字体文件。找到文件后根据 unicode 码去查找绘制外形，找到后绘制到页面上。 所以对于第二个范例， 「&#9965」是「饥」的 unicede 码，所以用户最终也能看到serf字体样式的「饥」字。\n\n***\n\n### Icon Font生成和使用步骤\n\n#### 1.制作字体文件\n这个需要设计师把字体文件做好。一般不属于前端工作范畴，在这里掠过不讲。\n\n#### 2.声明font-family\n- 使用本地链接\n- 使用第三方链接\n\n#### 3.使用font-family\n- 使用HTML实体\n- 使用CSS：before\n\n***\n\n### 最常用的Icon Font生成步骤\n\n#### 1. 点击打开[阿里巴巴的免费字体工具网站](https://www.iconfont.cn/)\n\n#### 2. 在搜索栏里搜索自己需要的图标（英文）\n\n<img src=\"./1.png\" style=\"width:500px\">\n\n#### 3. 用Github登陆后选择自己中意的图标，添加入库\n\n<img src=\"./2.png\" style=\"width:500px\">\n\n#### 4. 可以选择添加至项目或者直接下载至本地\n\n下图的search下的&#xe71d为HTML实体，可以用实体显示但是不便记忆所以不推荐\n也可以使用CSS before 的content加上/ 导出icon\n\n```CSS\n.icon-search:before { content: \"\\e71d\"; }\n\n```\n\n<img src=\"./3.png\" style=\"width:500px\">\n\n#### 5. 下载至本地后解压\n\n为了浏览器兼容，建议复制后缀名为.eot,svg,ttf和woff的4个文件到自己的目录下\n\n<img src=\"./4.png\" style=\"width:500px\">\n\n#### 6. 复制iconfont.css的内容到自己的页面，并直接添加span和class引用生产的字体文件\n\n<img src=\"./5.png\" style=\"width:500px\">\n\n#### 7. 保存并查看\n","slug":"IconFont","published":1,"updated":"2019-11-23T23:54:38.000Z","layout":"post","photos":[],"link":"","_id":"ck3it6k220013teyiaks7g039","content":"<p>关于 IconFont</p>\n<a id=\"more\"></a>\n<p>Icon Font简而言之也就是把字体做成图标</p>\n<h3 id=\"Icon-Font的原理\"><a href=\"#Icon-Font的原理\" class=\"headerlink\" title=\"Icon Font的原理\"></a>Icon Font的原理</h3><p>例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hello &amp;#x9965; &amp;#x4eba;&amp;#x8c37;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">p&#123;</span><br><span class=\"line\">  font-family: serif;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里把「饥人谷」这几个字改为 unicode 编码，此时页面上仍然能以serif 字体展示「饥人谷」三个字。<br>使用浏览器打开页面时，浏览器会读取 HTML 文件进行解析渲染。当读到「饥人谷」三个字时会转换成对应的 unicode码（可以认为是世界上任意一种文字的特定编号）。再根据HTML 里设置的 font-family （如果没设置则使用浏览器默认设置）去查找电脑里（如果有自定义字体@font-face ，则加载对应字体文件）对应字体的字体文件。找到文件后根据 unicode 码去查找绘制外形，找到后绘制到页面上。 所以对于第二个范例， 「&amp;#9965」是「饥」的 unicede 码，所以用户最终也能看到serf字体样式的「饥」字。</p>\n<hr>\n<h3 id=\"Icon-Font生成和使用步骤\"><a href=\"#Icon-Font生成和使用步骤\" class=\"headerlink\" title=\"Icon Font生成和使用步骤\"></a>Icon Font生成和使用步骤</h3><h4 id=\"1-制作字体文件\"><a href=\"#1-制作字体文件\" class=\"headerlink\" title=\"1.制作字体文件\"></a>1.制作字体文件</h4><p>这个需要设计师把字体文件做好。一般不属于前端工作范畴，在这里掠过不讲。</p>\n<h4 id=\"2-声明font-family\"><a href=\"#2-声明font-family\" class=\"headerlink\" title=\"2.声明font-family\"></a>2.声明font-family</h4><ul>\n<li>使用本地链接</li>\n<li>使用第三方链接</li>\n</ul>\n<h4 id=\"3-使用font-family\"><a href=\"#3-使用font-family\" class=\"headerlink\" title=\"3.使用font-family\"></a>3.使用font-family</h4><ul>\n<li>使用HTML实体</li>\n<li>使用CSS：before</li>\n</ul>\n<hr>\n<h3 id=\"最常用的Icon-Font生成步骤\"><a href=\"#最常用的Icon-Font生成步骤\" class=\"headerlink\" title=\"最常用的Icon Font生成步骤\"></a>最常用的Icon Font生成步骤</h3><h4 id=\"1-点击打开阿里巴巴的免费字体工具网站\"><a href=\"#1-点击打开阿里巴巴的免费字体工具网站\" class=\"headerlink\" title=\"1. 点击打开阿里巴巴的免费字体工具网站\"></a>1. 点击打开<a href=\"https://www.iconfont.cn/\" target=\"_blank\" rel=\"noopener\">阿里巴巴的免费字体工具网站</a></h4><h4 id=\"2-在搜索栏里搜索自己需要的图标（英文）\"><a href=\"#2-在搜索栏里搜索自己需要的图标（英文）\" class=\"headerlink\" title=\"2. 在搜索栏里搜索自己需要的图标（英文）\"></a>2. 在搜索栏里搜索自己需要的图标（英文）</h4><img src=\"./1.png\" style=\"width:500px\">\n\n<h4 id=\"3-用Github登陆后选择自己中意的图标，添加入库\"><a href=\"#3-用Github登陆后选择自己中意的图标，添加入库\" class=\"headerlink\" title=\"3. 用Github登陆后选择自己中意的图标，添加入库\"></a>3. 用Github登陆后选择自己中意的图标，添加入库</h4><img src=\"./2.png\" style=\"width:500px\">\n\n<h4 id=\"4-可以选择添加至项目或者直接下载至本地\"><a href=\"#4-可以选择添加至项目或者直接下载至本地\" class=\"headerlink\" title=\"4. 可以选择添加至项目或者直接下载至本地\"></a>4. 可以选择添加至项目或者直接下载至本地</h4><p>下图的search下的&amp;#xe71d为HTML实体，可以用实体显示但是不便记忆所以不推荐<br>也可以使用CSS before 的content加上/ 导出icon</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.icon-search</span><span class=\"selector-pseudo\">:before</span> &#123; <span class=\"attribute\">content</span>: <span class=\"string\">\"\\e71d\"</span>; &#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"./3.png\" style=\"width:500px\">\n\n<h4 id=\"5-下载至本地后解压\"><a href=\"#5-下载至本地后解压\" class=\"headerlink\" title=\"5. 下载至本地后解压\"></a>5. 下载至本地后解压</h4><p>为了浏览器兼容，建议复制后缀名为.eot,svg,ttf和woff的4个文件到自己的目录下</p>\n<img src=\"./4.png\" style=\"width:500px\">\n\n<h4 id=\"6-复制iconfont-css的内容到自己的页面，并直接添加span和class引用生产的字体文件\"><a href=\"#6-复制iconfont-css的内容到自己的页面，并直接添加span和class引用生产的字体文件\" class=\"headerlink\" title=\"6. 复制iconfont.css的内容到自己的页面，并直接添加span和class引用生产的字体文件\"></a>6. 复制iconfont.css的内容到自己的页面，并直接添加span和class引用生产的字体文件</h4><img src=\"./5.png\" style=\"width:500px\">\n\n<h4 id=\"7-保存并查看\"><a href=\"#7-保存并查看\" class=\"headerlink\" title=\"7. 保存并查看\"></a>7. 保存并查看</h4>","site":{"data":{}},"thumbnailImageUrl":"https://kisky3.github.io/2018/12/28/IconFont/20181228.jpg","excerpt":"<p>关于 IconFont</p>","more":"<p>Icon Font简而言之也就是把字体做成图标</p>\n<h3 id=\"Icon-Font的原理\"><a href=\"#Icon-Font的原理\" class=\"headerlink\" title=\"Icon Font的原理\"></a>Icon Font的原理</h3><p>例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hello &amp;#x9965; &amp;#x4eba;&amp;#x8c37;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">p&#123;</span><br><span class=\"line\">  font-family: serif;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里把「饥人谷」这几个字改为 unicode 编码，此时页面上仍然能以serif 字体展示「饥人谷」三个字。<br>使用浏览器打开页面时，浏览器会读取 HTML 文件进行解析渲染。当读到「饥人谷」三个字时会转换成对应的 unicode码（可以认为是世界上任意一种文字的特定编号）。再根据HTML 里设置的 font-family （如果没设置则使用浏览器默认设置）去查找电脑里（如果有自定义字体@font-face ，则加载对应字体文件）对应字体的字体文件。找到文件后根据 unicode 码去查找绘制外形，找到后绘制到页面上。 所以对于第二个范例， 「&amp;#9965」是「饥」的 unicede 码，所以用户最终也能看到serf字体样式的「饥」字。</p>\n<hr>\n<h3 id=\"Icon-Font生成和使用步骤\"><a href=\"#Icon-Font生成和使用步骤\" class=\"headerlink\" title=\"Icon Font生成和使用步骤\"></a>Icon Font生成和使用步骤</h3><h4 id=\"1-制作字体文件\"><a href=\"#1-制作字体文件\" class=\"headerlink\" title=\"1.制作字体文件\"></a>1.制作字体文件</h4><p>这个需要设计师把字体文件做好。一般不属于前端工作范畴，在这里掠过不讲。</p>\n<h4 id=\"2-声明font-family\"><a href=\"#2-声明font-family\" class=\"headerlink\" title=\"2.声明font-family\"></a>2.声明font-family</h4><ul>\n<li>使用本地链接</li>\n<li>使用第三方链接</li>\n</ul>\n<h4 id=\"3-使用font-family\"><a href=\"#3-使用font-family\" class=\"headerlink\" title=\"3.使用font-family\"></a>3.使用font-family</h4><ul>\n<li>使用HTML实体</li>\n<li>使用CSS：before</li>\n</ul>\n<hr>\n<h3 id=\"最常用的Icon-Font生成步骤\"><a href=\"#最常用的Icon-Font生成步骤\" class=\"headerlink\" title=\"最常用的Icon Font生成步骤\"></a>最常用的Icon Font生成步骤</h3><h4 id=\"1-点击打开阿里巴巴的免费字体工具网站\"><a href=\"#1-点击打开阿里巴巴的免费字体工具网站\" class=\"headerlink\" title=\"1. 点击打开阿里巴巴的免费字体工具网站\"></a>1. 点击打开<a href=\"https://www.iconfont.cn/\" target=\"_blank\" rel=\"noopener\">阿里巴巴的免费字体工具网站</a></h4><h4 id=\"2-在搜索栏里搜索自己需要的图标（英文）\"><a href=\"#2-在搜索栏里搜索自己需要的图标（英文）\" class=\"headerlink\" title=\"2. 在搜索栏里搜索自己需要的图标（英文）\"></a>2. 在搜索栏里搜索自己需要的图标（英文）</h4><img src=\"./1.png\" style=\"width:500px\">\n\n<h4 id=\"3-用Github登陆后选择自己中意的图标，添加入库\"><a href=\"#3-用Github登陆后选择自己中意的图标，添加入库\" class=\"headerlink\" title=\"3. 用Github登陆后选择自己中意的图标，添加入库\"></a>3. 用Github登陆后选择自己中意的图标，添加入库</h4><img src=\"./2.png\" style=\"width:500px\">\n\n<h4 id=\"4-可以选择添加至项目或者直接下载至本地\"><a href=\"#4-可以选择添加至项目或者直接下载至本地\" class=\"headerlink\" title=\"4. 可以选择添加至项目或者直接下载至本地\"></a>4. 可以选择添加至项目或者直接下载至本地</h4><p>下图的search下的&amp;#xe71d为HTML实体，可以用实体显示但是不便记忆所以不推荐<br>也可以使用CSS before 的content加上/ 导出icon</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.icon-search</span><span class=\"selector-pseudo\">:before</span> &#123; <span class=\"attribute\">content</span>: <span class=\"string\">\"\\e71d\"</span>; &#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"./3.png\" style=\"width:500px\">\n\n<h4 id=\"5-下载至本地后解压\"><a href=\"#5-下载至本地后解压\" class=\"headerlink\" title=\"5. 下载至本地后解压\"></a>5. 下载至本地后解压</h4><p>为了浏览器兼容，建议复制后缀名为.eot,svg,ttf和woff的4个文件到自己的目录下</p>\n<img src=\"./4.png\" style=\"width:500px\">\n\n<h4 id=\"6-复制iconfont-css的内容到自己的页面，并直接添加span和class引用生产的字体文件\"><a href=\"#6-复制iconfont-css的内容到自己的页面，并直接添加span和class引用生产的字体文件\" class=\"headerlink\" title=\"6. 复制iconfont.css的内容到自己的页面，并直接添加span和class引用生产的字体文件\"></a>6. 复制iconfont.css的内容到自己的页面，并直接添加span和class引用生产的字体文件</h4><img src=\"./5.png\" style=\"width:500px\">\n\n<h4 id=\"7-保存并查看\"><a href=\"#7-保存并查看\" class=\"headerlink\" title=\"7. 保存并查看\"></a>7. 保存并查看</h4>"},{"title":"About JS-DOM Elements And Common API","date":"2019-03-22T10:36:45.000Z","clearReading":true,"thumbnailImage":"20190322.png","thumbnailImagePosition":"left","coverImage":"cover.jpg","coverCaption":"Hello World, Hello Programming","coverSize":"partial","comments":0,"_content":"\nJS-DOM元素以及DOM元素操作常用API\n<!--more-->\n\n### 什么是DOM\n文档对象模型（DOM）是HTML和XML文档的编程借口。\n\n在HTML里我们可以看到很多可折叠的标签。Js可以选择这些页面上对应的文档元素然后进行操作它，这些文档是对象，有相应的属性和方法。\n所以称为文档对象模型。相当于把文档对象化，之后可以用Js进行对象的操作。\n要改变页面的某个东西，Js就需要获得对HTML文档中所有元素进行访问的入口。\n这个入口连同对HTML元素进行添加，移动，改变或移除的方法和属性，都是通过DOM来获得的。\n\n<img src=\"./1.png\" style=\"500px\">\n\n***\n\n### DOM获取元素的方式\n\n- document 对象\n每个载入浏览器的HTML文档都会成为document对象。\ndocument对象包含了文档的基本信息，我们可以通过JavaScript对HTML页面中的所有元素进行访问、修改。\n\n- Element\n除了document对象，在DOM中最常用的就是Element对象了，Element对象表示HTML元素。\n\nElement 对象可以拥有类型为元素节点、文本节点、注释节点的子节点，DOM提供了一系列的方法可以进行元素的增、删、改、查操作\n\n***\n\n### DOM元素选取常用API\n\n1.getElementById()\n\n2.getElementsByClassName()\n\n3.getElementsByTagName()\n\n4.getElementsByName()\n\n5.querySelector()\n\nquerySelector方法返回匹配指定的CSS选择器的元素节点。如果有多个节点满足匹配条件，则返回第一个匹配的节点。如果没有发现匹配的节点，则返回null。\n可以完成getElementById和getElementsByTagName的工作\n\n6.querySelectorAll()\n\nquerySelectorAll方法返回匹配指定的CSS选择器的所有节点，返回的是NodeList类型的对象。NodeList对象不是动态集合，所以元素节点的变化无法实时反映在返回结果中。\nstr = document.querySelectorAll(selectors);\nquerySelectorAll方法的参数，可以是逗号分隔的多个CSS选择器，返回所有匹配其中一个选择器的元素。\n\n***\n\n### 创建和添加DOM元素\n\n#### 创建元素:\n\n用createElement()来创建元素节点，如\n\n```JS\nvar div = document.createElement(\"div\")\n```\n\n用creatTextNode()来创建文本节点，如\n\n```JS\nvar text = document.createTextNode(\"hello\")\n```\n\n用createDocumentFragment()生成一个Dom片段，不属在文档流中,如\n\n```JS\nvar docFragment = document.createDocumentFragment();\n```\n\n#### 添加元素：\n\n用appendChild()，在元素末尾添加子元素，如：\n\n```JS\nvar div = document.createElement(\"div\")\nvar text = document.createTextNode(\"hello\")\ndiv.appendChild(text)\n```\n\n如需向 HTML DOM 添加新元素，必须首先创建该元素（元素节点），然后向一个已存在的元素追加该元素。\n\n```HTML\n<div id=\"div1\">\n<p id=\"p1\">这是一个段落</p>\n<p id=\"p2\">这是另一个段落</p>\n</div>\n\n<script>\n// 这段代码创建新的 <p> 元素：\nvar para=document.createElement(\"p\");\n\n// 如需向 <p> 元素添加文本，您必须首先创建文本节点。这段代码创建了一个文本节点：\nvar node=document.createTextNode(\"这是新段落。\");\n\n// 然后向 <p> 元素追加这个文本节点：\npara.appendChild(node);\n\n// 最后您必须向一个已有的元素追加这个新元素。这段代码找到一个已有的元素：\nvar element=document.getElementById(\"div1\");\n\n// 这段代码向这个已有的元素追加新元素：\nelement.appendChild(para);\n</script>\n```","source":"_posts/JS-DOM元素以及DOM元素操作常用API.md","raw":"---\ntitle: About JS-DOM Elements And Common API\ndate: 2019-03-22 19:36:45\ntags:\n- JS\nclearReading: true\nthumbnailImage: 20190322.png\nthumbnailImagePosition: left\ncoverImage: cover.jpg\ncoverCaption: \"Hello World, Hello Programming\"\ncoverSize: partial\ncomments: false\ncategories: Front-end Knowledge\n---\n\nJS-DOM元素以及DOM元素操作常用API\n<!--more-->\n\n### 什么是DOM\n文档对象模型（DOM）是HTML和XML文档的编程借口。\n\n在HTML里我们可以看到很多可折叠的标签。Js可以选择这些页面上对应的文档元素然后进行操作它，这些文档是对象，有相应的属性和方法。\n所以称为文档对象模型。相当于把文档对象化，之后可以用Js进行对象的操作。\n要改变页面的某个东西，Js就需要获得对HTML文档中所有元素进行访问的入口。\n这个入口连同对HTML元素进行添加，移动，改变或移除的方法和属性，都是通过DOM来获得的。\n\n<img src=\"./1.png\" style=\"500px\">\n\n***\n\n### DOM获取元素的方式\n\n- document 对象\n每个载入浏览器的HTML文档都会成为document对象。\ndocument对象包含了文档的基本信息，我们可以通过JavaScript对HTML页面中的所有元素进行访问、修改。\n\n- Element\n除了document对象，在DOM中最常用的就是Element对象了，Element对象表示HTML元素。\n\nElement 对象可以拥有类型为元素节点、文本节点、注释节点的子节点，DOM提供了一系列的方法可以进行元素的增、删、改、查操作\n\n***\n\n### DOM元素选取常用API\n\n1.getElementById()\n\n2.getElementsByClassName()\n\n3.getElementsByTagName()\n\n4.getElementsByName()\n\n5.querySelector()\n\nquerySelector方法返回匹配指定的CSS选择器的元素节点。如果有多个节点满足匹配条件，则返回第一个匹配的节点。如果没有发现匹配的节点，则返回null。\n可以完成getElementById和getElementsByTagName的工作\n\n6.querySelectorAll()\n\nquerySelectorAll方法返回匹配指定的CSS选择器的所有节点，返回的是NodeList类型的对象。NodeList对象不是动态集合，所以元素节点的变化无法实时反映在返回结果中。\nstr = document.querySelectorAll(selectors);\nquerySelectorAll方法的参数，可以是逗号分隔的多个CSS选择器，返回所有匹配其中一个选择器的元素。\n\n***\n\n### 创建和添加DOM元素\n\n#### 创建元素:\n\n用createElement()来创建元素节点，如\n\n```JS\nvar div = document.createElement(\"div\")\n```\n\n用creatTextNode()来创建文本节点，如\n\n```JS\nvar text = document.createTextNode(\"hello\")\n```\n\n用createDocumentFragment()生成一个Dom片段，不属在文档流中,如\n\n```JS\nvar docFragment = document.createDocumentFragment();\n```\n\n#### 添加元素：\n\n用appendChild()，在元素末尾添加子元素，如：\n\n```JS\nvar div = document.createElement(\"div\")\nvar text = document.createTextNode(\"hello\")\ndiv.appendChild(text)\n```\n\n如需向 HTML DOM 添加新元素，必须首先创建该元素（元素节点），然后向一个已存在的元素追加该元素。\n\n```HTML\n<div id=\"div1\">\n<p id=\"p1\">这是一个段落</p>\n<p id=\"p2\">这是另一个段落</p>\n</div>\n\n<script>\n// 这段代码创建新的 <p> 元素：\nvar para=document.createElement(\"p\");\n\n// 如需向 <p> 元素添加文本，您必须首先创建文本节点。这段代码创建了一个文本节点：\nvar node=document.createTextNode(\"这是新段落。\");\n\n// 然后向 <p> 元素追加这个文本节点：\npara.appendChild(node);\n\n// 最后您必须向一个已有的元素追加这个新元素。这段代码找到一个已有的元素：\nvar element=document.getElementById(\"div1\");\n\n// 这段代码向这个已有的元素追加新元素：\nelement.appendChild(para);\n</script>\n```","slug":"JS-DOM元素以及DOM元素操作常用API","published":1,"updated":"2019-11-23T23:54:38.000Z","layout":"post","photos":[],"link":"","_id":"ck3it6k230016teyig29zxi45","content":"<p>JS-DOM元素以及DOM元素操作常用API</p>\n<a id=\"more\"></a>\n\n<h3 id=\"什么是DOM\"><a href=\"#什么是DOM\" class=\"headerlink\" title=\"什么是DOM\"></a>什么是DOM</h3><p>文档对象模型（DOM）是HTML和XML文档的编程借口。</p>\n<p>在HTML里我们可以看到很多可折叠的标签。Js可以选择这些页面上对应的文档元素然后进行操作它，这些文档是对象，有相应的属性和方法。<br>所以称为文档对象模型。相当于把文档对象化，之后可以用Js进行对象的操作。<br>要改变页面的某个东西，Js就需要获得对HTML文档中所有元素进行访问的入口。<br>这个入口连同对HTML元素进行添加，移动，改变或移除的方法和属性，都是通过DOM来获得的。</p>\n<img src=\"./1.png\" style=\"500px\">\n\n<hr>\n<h3 id=\"DOM获取元素的方式\"><a href=\"#DOM获取元素的方式\" class=\"headerlink\" title=\"DOM获取元素的方式\"></a>DOM获取元素的方式</h3><ul>\n<li><p>document 对象<br>每个载入浏览器的HTML文档都会成为document对象。<br>document对象包含了文档的基本信息，我们可以通过JavaScript对HTML页面中的所有元素进行访问、修改。</p>\n</li>\n<li><p>Element<br>除了document对象，在DOM中最常用的就是Element对象了，Element对象表示HTML元素。</p>\n</li>\n</ul>\n<p>Element 对象可以拥有类型为元素节点、文本节点、注释节点的子节点，DOM提供了一系列的方法可以进行元素的增、删、改、查操作</p>\n<hr>\n<h3 id=\"DOM元素选取常用API\"><a href=\"#DOM元素选取常用API\" class=\"headerlink\" title=\"DOM元素选取常用API\"></a>DOM元素选取常用API</h3><p>1.getElementById()</p>\n<p>2.getElementsByClassName()</p>\n<p>3.getElementsByTagName()</p>\n<p>4.getElementsByName()</p>\n<p>5.querySelector()</p>\n<p>querySelector方法返回匹配指定的CSS选择器的元素节点。如果有多个节点满足匹配条件，则返回第一个匹配的节点。如果没有发现匹配的节点，则返回null。<br>可以完成getElementById和getElementsByTagName的工作</p>\n<p>6.querySelectorAll()</p>\n<p>querySelectorAll方法返回匹配指定的CSS选择器的所有节点，返回的是NodeList类型的对象。NodeList对象不是动态集合，所以元素节点的变化无法实时反映在返回结果中。<br>str = document.querySelectorAll(selectors);<br>querySelectorAll方法的参数，可以是逗号分隔的多个CSS选择器，返回所有匹配其中一个选择器的元素。</p>\n<hr>\n<h3 id=\"创建和添加DOM元素\"><a href=\"#创建和添加DOM元素\" class=\"headerlink\" title=\"创建和添加DOM元素\"></a>创建和添加DOM元素</h3><h4 id=\"创建元素\"><a href=\"#创建元素\" class=\"headerlink\" title=\"创建元素:\"></a>创建元素:</h4><p>用createElement()来创建元素节点，如</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>用creatTextNode()来创建文本节点，如</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> text = <span class=\"built_in\">document</span>.createTextNode(<span class=\"string\">\"hello\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>用createDocumentFragment()生成一个Dom片段，不属在文档流中,如</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> docFragment = <span class=\"built_in\">document</span>.createDocumentFragment();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"添加元素：\"><a href=\"#添加元素：\" class=\"headerlink\" title=\"添加元素：\"></a>添加元素：</h4><p>用appendChild()，在元素末尾添加子元素，如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> text = <span class=\"built_in\">document</span>.createTextNode(<span class=\"string\">\"hello\"</span>)</span><br><span class=\"line\">div.appendChild(text)</span><br></pre></td></tr></table></figure>\n\n<p>如需向 HTML DOM 添加新元素，必须首先创建该元素（元素节点），然后向一个已存在的元素追加该元素。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"div1\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"p1\"</span>&gt;</span>这是一个段落<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"p2\"</span>&gt;</span>这是另一个段落<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">// 这段代码创建新的 &lt;p&gt; 元素：</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> para=<span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"p\"</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">// 如需向 &lt;p&gt; 元素添加文本，您必须首先创建文本节点。这段代码创建了一个文本节点：</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> node=<span class=\"built_in\">document</span>.createTextNode(<span class=\"string\">\"这是新段落。\"</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">// 然后向 &lt;p&gt; 元素追加这个文本节点：</span></span></span><br><span class=\"line\">para.appendChild(node);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">// 最后您必须向一个已有的元素追加这个新元素。这段代码找到一个已有的元素：</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> element=<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"div1\"</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">// 这段代码向这个已有的元素追加新元素：</span></span></span><br><span class=\"line\">element.appendChild(para);</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"thumbnailImageUrl":"https://kisky3.github.io/2019/03/22/JS-DOM元素以及DOM元素操作常用API/20190322.png","excerpt":"<p>JS-DOM元素以及DOM元素操作常用API</p>","more":"<h3 id=\"什么是DOM\"><a href=\"#什么是DOM\" class=\"headerlink\" title=\"什么是DOM\"></a>什么是DOM</h3><p>文档对象模型（DOM）是HTML和XML文档的编程借口。</p>\n<p>在HTML里我们可以看到很多可折叠的标签。Js可以选择这些页面上对应的文档元素然后进行操作它，这些文档是对象，有相应的属性和方法。<br>所以称为文档对象模型。相当于把文档对象化，之后可以用Js进行对象的操作。<br>要改变页面的某个东西，Js就需要获得对HTML文档中所有元素进行访问的入口。<br>这个入口连同对HTML元素进行添加，移动，改变或移除的方法和属性，都是通过DOM来获得的。</p>\n<img src=\"./1.png\" style=\"500px\">\n\n<hr>\n<h3 id=\"DOM获取元素的方式\"><a href=\"#DOM获取元素的方式\" class=\"headerlink\" title=\"DOM获取元素的方式\"></a>DOM获取元素的方式</h3><ul>\n<li><p>document 对象<br>每个载入浏览器的HTML文档都会成为document对象。<br>document对象包含了文档的基本信息，我们可以通过JavaScript对HTML页面中的所有元素进行访问、修改。</p>\n</li>\n<li><p>Element<br>除了document对象，在DOM中最常用的就是Element对象了，Element对象表示HTML元素。</p>\n</li>\n</ul>\n<p>Element 对象可以拥有类型为元素节点、文本节点、注释节点的子节点，DOM提供了一系列的方法可以进行元素的增、删、改、查操作</p>\n<hr>\n<h3 id=\"DOM元素选取常用API\"><a href=\"#DOM元素选取常用API\" class=\"headerlink\" title=\"DOM元素选取常用API\"></a>DOM元素选取常用API</h3><p>1.getElementById()</p>\n<p>2.getElementsByClassName()</p>\n<p>3.getElementsByTagName()</p>\n<p>4.getElementsByName()</p>\n<p>5.querySelector()</p>\n<p>querySelector方法返回匹配指定的CSS选择器的元素节点。如果有多个节点满足匹配条件，则返回第一个匹配的节点。如果没有发现匹配的节点，则返回null。<br>可以完成getElementById和getElementsByTagName的工作</p>\n<p>6.querySelectorAll()</p>\n<p>querySelectorAll方法返回匹配指定的CSS选择器的所有节点，返回的是NodeList类型的对象。NodeList对象不是动态集合，所以元素节点的变化无法实时反映在返回结果中。<br>str = document.querySelectorAll(selectors);<br>querySelectorAll方法的参数，可以是逗号分隔的多个CSS选择器，返回所有匹配其中一个选择器的元素。</p>\n<hr>\n<h3 id=\"创建和添加DOM元素\"><a href=\"#创建和添加DOM元素\" class=\"headerlink\" title=\"创建和添加DOM元素\"></a>创建和添加DOM元素</h3><h4 id=\"创建元素\"><a href=\"#创建元素\" class=\"headerlink\" title=\"创建元素:\"></a>创建元素:</h4><p>用createElement()来创建元素节点，如</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>用creatTextNode()来创建文本节点，如</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> text = <span class=\"built_in\">document</span>.createTextNode(<span class=\"string\">\"hello\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>用createDocumentFragment()生成一个Dom片段，不属在文档流中,如</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> docFragment = <span class=\"built_in\">document</span>.createDocumentFragment();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"添加元素：\"><a href=\"#添加元素：\" class=\"headerlink\" title=\"添加元素：\"></a>添加元素：</h4><p>用appendChild()，在元素末尾添加子元素，如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> text = <span class=\"built_in\">document</span>.createTextNode(<span class=\"string\">\"hello\"</span>)</span><br><span class=\"line\">div.appendChild(text)</span><br></pre></td></tr></table></figure>\n\n<p>如需向 HTML DOM 添加新元素，必须首先创建该元素（元素节点），然后向一个已存在的元素追加该元素。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"div1\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"p1\"</span>&gt;</span>这是一个段落<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"p2\"</span>&gt;</span>这是另一个段落<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">// 这段代码创建新的 &lt;p&gt; 元素：</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> para=<span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"p\"</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">// 如需向 &lt;p&gt; 元素添加文本，您必须首先创建文本节点。这段代码创建了一个文本节点：</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> node=<span class=\"built_in\">document</span>.createTextNode(<span class=\"string\">\"这是新段落。\"</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">// 然后向 &lt;p&gt; 元素追加这个文本节点：</span></span></span><br><span class=\"line\">para.appendChild(node);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">// 最后您必须向一个已有的元素追加这个新元素。这段代码找到一个已有的元素：</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> element=<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"div1\"</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">// 这段代码向这个已有的元素追加新元素：</span></span></span><br><span class=\"line\">element.appendChild(para);</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"JS About if-xx- And -a-b","date":"2019-02-26T09:35:02.000Z","clearReading":true,"thumbnailImage":"20190226.png","thumbnailImagePosition":"left","coverImage":"cover.jpg","coverCaption":"Hello World, Hello Programming","coverSize":"partial","comments":0,"_content":"\nJS函数关于if-xx-和-a-b\n<!--more-->\n\n### JS函数:f(xx)\nJS对于括号里的表达式，会被强制转换成布尔类型\n\n基本原理如下表：\n\n| type |  result  |\n| ----| ---- |\n|  Undefined | false  |\n|  Null  |  false  |\n|  Boolean  | 直接判断  |\n|  Number |  +0，-0，或者NaN为false，其他为true  |\n|  String |  空字符串为false，其他都为true  |\n|  Object |  true  |\n\n***\n\n### JS函数：a==b\n\nJS对于a==b类型会进行变形比较，原理如下表：\n基本上遇到数字以外的类型可以先考虑往数字上转型\n\n| x |  y  |  结果  |\n| ----| ---- | ---- |\n|  null | undefined  | true  |\n|  Number  |  String  | x == toNumber(y)  |\n|  Boolean  | (any)  | toNumber(x) == y |\n|  Object |  String or Number  | toPrimitive(x) == y |\n|  otherwise |  otherwise  | false |\n\n***\n\n### toNumber\n\n其他类型转换成数字用toNumber：\n\n| type |  result  |\n| ----| ---- |\n|  Undefined | NaN |\n|  Null  |  0 |\n|  Boolean  | true -> 1, false -> 0  |\n|  String |  “abc” -> NaN, “123” -> 123  |\n\n***\n\n### toPrimitive\n\n对于Object类型，先尝试调用.v3alueOf方法获取结果。如果没定义，再尝试调用.toString方法获取结果。\n","source":"_posts/JS函数关于if-xx-和-a-b.md","raw":"---\ntitle: JS About if-xx- And -a-b\ndate: 2019-02-26 18:35:02\ntags:\n- JS\nclearReading: true\nthumbnailImage: 20190226.png\nthumbnailImagePosition: left\ncoverImage: cover.jpg\ncoverCaption: \"Hello World, Hello Programming\"\ncoverSize: partial\ncomments: false\ncategories: Front-end Knowledge\n---\n\nJS函数关于if-xx-和-a-b\n<!--more-->\n\n### JS函数:f(xx)\nJS对于括号里的表达式，会被强制转换成布尔类型\n\n基本原理如下表：\n\n| type |  result  |\n| ----| ---- |\n|  Undefined | false  |\n|  Null  |  false  |\n|  Boolean  | 直接判断  |\n|  Number |  +0，-0，或者NaN为false，其他为true  |\n|  String |  空字符串为false，其他都为true  |\n|  Object |  true  |\n\n***\n\n### JS函数：a==b\n\nJS对于a==b类型会进行变形比较，原理如下表：\n基本上遇到数字以外的类型可以先考虑往数字上转型\n\n| x |  y  |  结果  |\n| ----| ---- | ---- |\n|  null | undefined  | true  |\n|  Number  |  String  | x == toNumber(y)  |\n|  Boolean  | (any)  | toNumber(x) == y |\n|  Object |  String or Number  | toPrimitive(x) == y |\n|  otherwise |  otherwise  | false |\n\n***\n\n### toNumber\n\n其他类型转换成数字用toNumber：\n\n| type |  result  |\n| ----| ---- |\n|  Undefined | NaN |\n|  Null  |  0 |\n|  Boolean  | true -> 1, false -> 0  |\n|  String |  “abc” -> NaN, “123” -> 123  |\n\n***\n\n### toPrimitive\n\n对于Object类型，先尝试调用.v3alueOf方法获取结果。如果没定义，再尝试调用.toString方法获取结果。\n","slug":"JS函数关于if-xx-和-a-b","published":1,"updated":"2019-11-23T23:54:38.000Z","layout":"post","photos":[],"link":"","_id":"ck3it6k24001ateyisktuocs6","content":"<p>JS函数关于if-xx-和-a-b</p>\n<a id=\"more\"></a>\n\n<h3 id=\"JS函数-f-xx\"><a href=\"#JS函数-f-xx\" class=\"headerlink\" title=\"JS函数:f(xx)\"></a>JS函数:f(xx)</h3><p>JS对于括号里的表达式，会被强制转换成布尔类型</p>\n<p>基本原理如下表：</p>\n<table>\n<thead>\n<tr>\n<th>type</th>\n<th>result</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Undefined</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Null</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Boolean</td>\n<td>直接判断</td>\n</tr>\n<tr>\n<td>Number</td>\n<td>+0，-0，或者NaN为false，其他为true</td>\n</tr>\n<tr>\n<td>String</td>\n<td>空字符串为false，其他都为true</td>\n</tr>\n<tr>\n<td>Object</td>\n<td>true</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"JS函数：a-b\"><a href=\"#JS函数：a-b\" class=\"headerlink\" title=\"JS函数：a==b\"></a>JS函数：a==b</h3><p>JS对于a==b类型会进行变形比较，原理如下表：<br>基本上遇到数字以外的类型可以先考虑往数字上转型</p>\n<table>\n<thead>\n<tr>\n<th>x</th>\n<th>y</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>null</td>\n<td>undefined</td>\n<td>true</td>\n</tr>\n<tr>\n<td>Number</td>\n<td>String</td>\n<td>x == toNumber(y)</td>\n</tr>\n<tr>\n<td>Boolean</td>\n<td>(any)</td>\n<td>toNumber(x) == y</td>\n</tr>\n<tr>\n<td>Object</td>\n<td>String or Number</td>\n<td>toPrimitive(x) == y</td>\n</tr>\n<tr>\n<td>otherwise</td>\n<td>otherwise</td>\n<td>false</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"toNumber\"><a href=\"#toNumber\" class=\"headerlink\" title=\"toNumber\"></a>toNumber</h3><p>其他类型转换成数字用toNumber：</p>\n<table>\n<thead>\n<tr>\n<th>type</th>\n<th>result</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Undefined</td>\n<td>NaN</td>\n</tr>\n<tr>\n<td>Null</td>\n<td>0</td>\n</tr>\n<tr>\n<td>Boolean</td>\n<td>true -&gt; 1, false -&gt; 0</td>\n</tr>\n<tr>\n<td>String</td>\n<td>“abc” -&gt; NaN, “123” -&gt; 123</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"toPrimitive\"><a href=\"#toPrimitive\" class=\"headerlink\" title=\"toPrimitive\"></a>toPrimitive</h3><p>对于Object类型，先尝试调用.v3alueOf方法获取结果。如果没定义，再尝试调用.toString方法获取结果。</p>\n","site":{"data":{}},"thumbnailImageUrl":"https://kisky3.github.io/2019/02/26/JS函数关于if-xx-和-a-b/20190226.png","excerpt":"<p>JS函数关于if-xx-和-a-b</p>","more":"<h3 id=\"JS函数-f-xx\"><a href=\"#JS函数-f-xx\" class=\"headerlink\" title=\"JS函数:f(xx)\"></a>JS函数:f(xx)</h3><p>JS对于括号里的表达式，会被强制转换成布尔类型</p>\n<p>基本原理如下表：</p>\n<table>\n<thead>\n<tr>\n<th>type</th>\n<th>result</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Undefined</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Null</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Boolean</td>\n<td>直接判断</td>\n</tr>\n<tr>\n<td>Number</td>\n<td>+0，-0，或者NaN为false，其他为true</td>\n</tr>\n<tr>\n<td>String</td>\n<td>空字符串为false，其他都为true</td>\n</tr>\n<tr>\n<td>Object</td>\n<td>true</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"JS函数：a-b\"><a href=\"#JS函数：a-b\" class=\"headerlink\" title=\"JS函数：a==b\"></a>JS函数：a==b</h3><p>JS对于a==b类型会进行变形比较，原理如下表：<br>基本上遇到数字以外的类型可以先考虑往数字上转型</p>\n<table>\n<thead>\n<tr>\n<th>x</th>\n<th>y</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>null</td>\n<td>undefined</td>\n<td>true</td>\n</tr>\n<tr>\n<td>Number</td>\n<td>String</td>\n<td>x == toNumber(y)</td>\n</tr>\n<tr>\n<td>Boolean</td>\n<td>(any)</td>\n<td>toNumber(x) == y</td>\n</tr>\n<tr>\n<td>Object</td>\n<td>String or Number</td>\n<td>toPrimitive(x) == y</td>\n</tr>\n<tr>\n<td>otherwise</td>\n<td>otherwise</td>\n<td>false</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"toNumber\"><a href=\"#toNumber\" class=\"headerlink\" title=\"toNumber\"></a>toNumber</h3><p>其他类型转换成数字用toNumber：</p>\n<table>\n<thead>\n<tr>\n<th>type</th>\n<th>result</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Undefined</td>\n<td>NaN</td>\n</tr>\n<tr>\n<td>Null</td>\n<td>0</td>\n</tr>\n<tr>\n<td>Boolean</td>\n<td>true -&gt; 1, false -&gt; 0</td>\n</tr>\n<tr>\n<td>String</td>\n<td>“abc” -&gt; NaN, “123” -&gt; 123</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"toPrimitive\"><a href=\"#toPrimitive\" class=\"headerlink\" title=\"toPrimitive\"></a>toPrimitive</h3><p>对于Object类型，先尝试调用.v3alueOf方法获取结果。如果没定义，再尝试调用.toString方法获取结果。</p>"},{"title":"JS Developing History And New Characteristics Of ES6","date":"2019-02-10T08:59:27.000Z","clearReading":true,"thumbnailImage":"20190210.png","thumbnailImagePosition":"left","coverImage":"cover.jpg","coverCaption":"Hello World, Hello Programming","coverSize":"partial","comments":0,"_content":"\nJS发展简史及ES6新特性\n<!--more-->\n\n### JS标准制定简史\n1995年，只花了10天时间 Brendan 就开发完成了当时被称作Mocha的初版 JavaScript 原型。\n\n那时候的JS比较简陋，没有数组和字面量的对象的概念，所有的报错都只能通过丑陋的alert展示，缺乏异常处理机制，出错时很多运算的结果会是NaN或undefined。不过 Brendan 对 DOM 0 的描述及初版的JavaScript还是成为了最初的标准。\n\n1995年9月，JavaScript也被包装为LiveScript一同面世。1995年12月，Netscape Navigator 2.0 beta3发布，LiveScript在这时被改名为JavaScript(当时这个商标为Sun公司所有，现在属甲骨文公司)。之后不久,网景推出了LiveWire，一种在其服务器（Netscape Enterprise Server）上的JavaScript实现1。\n\n1996年，微软推出了JScript，同ie3捆绑发行,JScript在微软的IIS服务器上同样可用。\n\n1996年开始,JS语言开始走上规范之路，由于当时Sun公司不愿意转让JavaScript这一商标，虽然微软愿意转让JScript这一商标,但却遭到其它公司成员的反对，因此这一语言的名字就成了我们熟悉的ECMAScript。\n\n1997年6月ECMA-262的第一版发布，之后一年中，规范依据ISO / IEC 16262国际标准进行了改进，并由ISO认证机构大量审查，1997年6月ECMAScript规范正式发布第二版。\n\n1999年12月，ES3也发布了，这一版的规范带来了正则表达式，switch，do/while,try/catch，Object#hasOwnProperty以及其它的一些改变，同时新增的大部分规范在网景的新版浏览器SpiderMonkey中也得以实现。\nES4标准的草案在之后不久就被TC39提出，这一草案直接影响了2000年中期的JScript,.NET等的开发，2006年Flash推出了ActionScript 3也深受其影响。\n\n但是关于JavaScript语言该如何发展，当时的意见非常矛盾，这使规范制定的工作停滞不前。这在Web标准指定史上是一个非常尴尬且奇妙的时刻，当时微软掌握着主动权，但是它对规范的改进却没太大的兴趣。\n\n两年后，随着火狐浏览器市场占有率不断增高，就职于 Mozilla 的 Brendan 迫使微软回到标准指定的议程中。2005年中期开始，TC39委员会又开始了例会。重新开始讨论起ES4，他们计划在ES4中引入模块系统，类，迭代器，生成器，解构，类型注释，适当的尾调用，新的数据类型和各种其他功能,由于这个工程的野心太大，ES4的制定因而被一而再的延期。\n\n2007年，TC39委员会被迫分为两部分，一部分负责ES3的渐进加强版ES3.1标准的制定，另一部分则负责重新设计改动巨大的ES4标准。\n2008年8月，ES3.1被认为是正确的选择，随后其更名为ES5， ES4也随之被废弃，不过值得庆幸的是 ES4 提出的很多新功能被融入到了 ES6 ，也有一些功能仍然在考虑之中，另一些则已被放弃，拒绝或撤回。兼容ES3.1 成为 ES4 标准提出的功能可能被采纳的前提。 2009年12月，ES3发布10周年后，第五版ECMAScript才得以发布。这个版本把十年来各浏览器中已有的普遍实践标准化了，新增了get`set`，改进了数组原型的函数式特征，原生支持了JSON的解析，提出了严格模式。 2011年6月，ES5标准再次修改并改进为 ISO/IEC 16262:2011标准 的第三版，并以ES5.1的名义正式发布。 2015年6月，也就是ES5.1发布的四年后，TC39公布了JS语言有史以来最大的更新 ES6， 其中包含了很多ES4中提出草案。\n\nES6的发布是JS标准制定历史上的一个重要里程碑。除了数十种引入注目的新功能，ES6 的发布也标志着 ECMAScript 标准将持续更新。\n\n***\n\n### ES6中的新特性\n\nES6改动非常大，这从规范的页数就可以看出，ES5.1 258页，ES6 566页。总的来说新增的规范可以划分为以下不同类别：\n\n- 语法糖\n\n- 新机制\n\n- 更好的语义化\n\n- 更多内置的方法\n\n现存局限方法的非破坏性解决方案\n\n语法糖是ES6所有改变中最重要的一块，class语法可简洁的构建对象实例，支持使用箭头函数，简写的对象属性方法，解构，剩余值，和拓展，等提供语义良好的编写程序的方法。\n\nES6为我们提供了几种控制异步代码流的机制：包括可靠的promises，表征一系列值的iterators，特殊的iterators–> generators。基于这些新概念,ES2017还有了了async/await语法，让我们以同步的方式来书写异步代码。\n\nES6提供了一些新的内置类型来管理set和map,这些新类型不具有仅使用字符串键的限制\n\nProxy对象重新定义了我们通过JavaScript reflection可以做什么，Proxy对象类似于其它上下文中的代理。可以用以修改与JavaScript对象的任何交互，如定义、删除或访问属性。考虑到代理对象的工作机制，他们不能彻底通过ployfill实现，事实上相关的ployfill也是存在的，但是由于存在局限性使得他们在某些方面与规范有所不一致。\n\n除此之外，ES6还在语言层面上为我们提供了模块系统,ES6对Number,Math,Array和string等都进行了更新，提供了新的api。","source":"_posts/JS发展简史.md","raw":"---\ntitle: JS Developing History And New Characteristics Of ES6\ndate: 2019-02-10 17:59:27\ntags:\n- JS\nclearReading: true\nthumbnailImage: 20190210.png\nthumbnailImagePosition: left\ncoverImage: cover.jpg\ncoverCaption: \"Hello World, Hello Programming\"\ncoverSize: partial\ncomments: false\ncategories: Front-end Knowledge\n---\n\nJS发展简史及ES6新特性\n<!--more-->\n\n### JS标准制定简史\n1995年，只花了10天时间 Brendan 就开发完成了当时被称作Mocha的初版 JavaScript 原型。\n\n那时候的JS比较简陋，没有数组和字面量的对象的概念，所有的报错都只能通过丑陋的alert展示，缺乏异常处理机制，出错时很多运算的结果会是NaN或undefined。不过 Brendan 对 DOM 0 的描述及初版的JavaScript还是成为了最初的标准。\n\n1995年9月，JavaScript也被包装为LiveScript一同面世。1995年12月，Netscape Navigator 2.0 beta3发布，LiveScript在这时被改名为JavaScript(当时这个商标为Sun公司所有，现在属甲骨文公司)。之后不久,网景推出了LiveWire，一种在其服务器（Netscape Enterprise Server）上的JavaScript实现1。\n\n1996年，微软推出了JScript，同ie3捆绑发行,JScript在微软的IIS服务器上同样可用。\n\n1996年开始,JS语言开始走上规范之路，由于当时Sun公司不愿意转让JavaScript这一商标，虽然微软愿意转让JScript这一商标,但却遭到其它公司成员的反对，因此这一语言的名字就成了我们熟悉的ECMAScript。\n\n1997年6月ECMA-262的第一版发布，之后一年中，规范依据ISO / IEC 16262国际标准进行了改进，并由ISO认证机构大量审查，1997年6月ECMAScript规范正式发布第二版。\n\n1999年12月，ES3也发布了，这一版的规范带来了正则表达式，switch，do/while,try/catch，Object#hasOwnProperty以及其它的一些改变，同时新增的大部分规范在网景的新版浏览器SpiderMonkey中也得以实现。\nES4标准的草案在之后不久就被TC39提出，这一草案直接影响了2000年中期的JScript,.NET等的开发，2006年Flash推出了ActionScript 3也深受其影响。\n\n但是关于JavaScript语言该如何发展，当时的意见非常矛盾，这使规范制定的工作停滞不前。这在Web标准指定史上是一个非常尴尬且奇妙的时刻，当时微软掌握着主动权，但是它对规范的改进却没太大的兴趣。\n\n两年后，随着火狐浏览器市场占有率不断增高，就职于 Mozilla 的 Brendan 迫使微软回到标准指定的议程中。2005年中期开始，TC39委员会又开始了例会。重新开始讨论起ES4，他们计划在ES4中引入模块系统，类，迭代器，生成器，解构，类型注释，适当的尾调用，新的数据类型和各种其他功能,由于这个工程的野心太大，ES4的制定因而被一而再的延期。\n\n2007年，TC39委员会被迫分为两部分，一部分负责ES3的渐进加强版ES3.1标准的制定，另一部分则负责重新设计改动巨大的ES4标准。\n2008年8月，ES3.1被认为是正确的选择，随后其更名为ES5， ES4也随之被废弃，不过值得庆幸的是 ES4 提出的很多新功能被融入到了 ES6 ，也有一些功能仍然在考虑之中，另一些则已被放弃，拒绝或撤回。兼容ES3.1 成为 ES4 标准提出的功能可能被采纳的前提。 2009年12月，ES3发布10周年后，第五版ECMAScript才得以发布。这个版本把十年来各浏览器中已有的普遍实践标准化了，新增了get`set`，改进了数组原型的函数式特征，原生支持了JSON的解析，提出了严格模式。 2011年6月，ES5标准再次修改并改进为 ISO/IEC 16262:2011标准 的第三版，并以ES5.1的名义正式发布。 2015年6月，也就是ES5.1发布的四年后，TC39公布了JS语言有史以来最大的更新 ES6， 其中包含了很多ES4中提出草案。\n\nES6的发布是JS标准制定历史上的一个重要里程碑。除了数十种引入注目的新功能，ES6 的发布也标志着 ECMAScript 标准将持续更新。\n\n***\n\n### ES6中的新特性\n\nES6改动非常大，这从规范的页数就可以看出，ES5.1 258页，ES6 566页。总的来说新增的规范可以划分为以下不同类别：\n\n- 语法糖\n\n- 新机制\n\n- 更好的语义化\n\n- 更多内置的方法\n\n现存局限方法的非破坏性解决方案\n\n语法糖是ES6所有改变中最重要的一块，class语法可简洁的构建对象实例，支持使用箭头函数，简写的对象属性方法，解构，剩余值，和拓展，等提供语义良好的编写程序的方法。\n\nES6为我们提供了几种控制异步代码流的机制：包括可靠的promises，表征一系列值的iterators，特殊的iterators–> generators。基于这些新概念,ES2017还有了了async/await语法，让我们以同步的方式来书写异步代码。\n\nES6提供了一些新的内置类型来管理set和map,这些新类型不具有仅使用字符串键的限制\n\nProxy对象重新定义了我们通过JavaScript reflection可以做什么，Proxy对象类似于其它上下文中的代理。可以用以修改与JavaScript对象的任何交互，如定义、删除或访问属性。考虑到代理对象的工作机制，他们不能彻底通过ployfill实现，事实上相关的ployfill也是存在的，但是由于存在局限性使得他们在某些方面与规范有所不一致。\n\n除此之外，ES6还在语言层面上为我们提供了模块系统,ES6对Number,Math,Array和string等都进行了更新，提供了新的api。","slug":"JS发展简史","published":1,"updated":"2019-11-23T23:54:38.000Z","layout":"post","photos":[],"link":"","_id":"ck3it6k28001dteyi2wrdfvb8","content":"<p>JS发展简史及ES6新特性</p>\n<a id=\"more\"></a>\n\n<h3 id=\"JS标准制定简史\"><a href=\"#JS标准制定简史\" class=\"headerlink\" title=\"JS标准制定简史\"></a>JS标准制定简史</h3><p>1995年，只花了10天时间 Brendan 就开发完成了当时被称作Mocha的初版 JavaScript 原型。</p>\n<p>那时候的JS比较简陋，没有数组和字面量的对象的概念，所有的报错都只能通过丑陋的alert展示，缺乏异常处理机制，出错时很多运算的结果会是NaN或undefined。不过 Brendan 对 DOM 0 的描述及初版的JavaScript还是成为了最初的标准。</p>\n<p>1995年9月，JavaScript也被包装为LiveScript一同面世。1995年12月，Netscape Navigator 2.0 beta3发布，LiveScript在这时被改名为JavaScript(当时这个商标为Sun公司所有，现在属甲骨文公司)。之后不久,网景推出了LiveWire，一种在其服务器（Netscape Enterprise Server）上的JavaScript实现1。</p>\n<p>1996年，微软推出了JScript，同ie3捆绑发行,JScript在微软的IIS服务器上同样可用。</p>\n<p>1996年开始,JS语言开始走上规范之路，由于当时Sun公司不愿意转让JavaScript这一商标，虽然微软愿意转让JScript这一商标,但却遭到其它公司成员的反对，因此这一语言的名字就成了我们熟悉的ECMAScript。</p>\n<p>1997年6月ECMA-262的第一版发布，之后一年中，规范依据ISO / IEC 16262国际标准进行了改进，并由ISO认证机构大量审查，1997年6月ECMAScript规范正式发布第二版。</p>\n<p>1999年12月，ES3也发布了，这一版的规范带来了正则表达式，switch，do/while,try/catch，Object#hasOwnProperty以及其它的一些改变，同时新增的大部分规范在网景的新版浏览器SpiderMonkey中也得以实现。<br>ES4标准的草案在之后不久就被TC39提出，这一草案直接影响了2000年中期的JScript,.NET等的开发，2006年Flash推出了ActionScript 3也深受其影响。</p>\n<p>但是关于JavaScript语言该如何发展，当时的意见非常矛盾，这使规范制定的工作停滞不前。这在Web标准指定史上是一个非常尴尬且奇妙的时刻，当时微软掌握着主动权，但是它对规范的改进却没太大的兴趣。</p>\n<p>两年后，随着火狐浏览器市场占有率不断增高，就职于 Mozilla 的 Brendan 迫使微软回到标准指定的议程中。2005年中期开始，TC39委员会又开始了例会。重新开始讨论起ES4，他们计划在ES4中引入模块系统，类，迭代器，生成器，解构，类型注释，适当的尾调用，新的数据类型和各种其他功能,由于这个工程的野心太大，ES4的制定因而被一而再的延期。</p>\n<p>2007年，TC39委员会被迫分为两部分，一部分负责ES3的渐进加强版ES3.1标准的制定，另一部分则负责重新设计改动巨大的ES4标准。<br>2008年8月，ES3.1被认为是正确的选择，随后其更名为ES5， ES4也随之被废弃，不过值得庆幸的是 ES4 提出的很多新功能被融入到了 ES6 ，也有一些功能仍然在考虑之中，另一些则已被放弃，拒绝或撤回。兼容ES3.1 成为 ES4 标准提出的功能可能被采纳的前提。 2009年12月，ES3发布10周年后，第五版ECMAScript才得以发布。这个版本把十年来各浏览器中已有的普遍实践标准化了，新增了get<code>set</code>，改进了数组原型的函数式特征，原生支持了JSON的解析，提出了严格模式。 2011年6月，ES5标准再次修改并改进为 ISO/IEC 16262:2011标准 的第三版，并以ES5.1的名义正式发布。 2015年6月，也就是ES5.1发布的四年后，TC39公布了JS语言有史以来最大的更新 ES6， 其中包含了很多ES4中提出草案。</p>\n<p>ES6的发布是JS标准制定历史上的一个重要里程碑。除了数十种引入注目的新功能，ES6 的发布也标志着 ECMAScript 标准将持续更新。</p>\n<hr>\n<h3 id=\"ES6中的新特性\"><a href=\"#ES6中的新特性\" class=\"headerlink\" title=\"ES6中的新特性\"></a>ES6中的新特性</h3><p>ES6改动非常大，这从规范的页数就可以看出，ES5.1 258页，ES6 566页。总的来说新增的规范可以划分为以下不同类别：</p>\n<ul>\n<li><p>语法糖</p>\n</li>\n<li><p>新机制</p>\n</li>\n<li><p>更好的语义化</p>\n</li>\n<li><p>更多内置的方法</p>\n</li>\n</ul>\n<p>现存局限方法的非破坏性解决方案</p>\n<p>语法糖是ES6所有改变中最重要的一块，class语法可简洁的构建对象实例，支持使用箭头函数，简写的对象属性方法，解构，剩余值，和拓展，等提供语义良好的编写程序的方法。</p>\n<p>ES6为我们提供了几种控制异步代码流的机制：包括可靠的promises，表征一系列值的iterators，特殊的iterators–&gt; generators。基于这些新概念,ES2017还有了了async/await语法，让我们以同步的方式来书写异步代码。</p>\n<p>ES6提供了一些新的内置类型来管理set和map,这些新类型不具有仅使用字符串键的限制</p>\n<p>Proxy对象重新定义了我们通过JavaScript reflection可以做什么，Proxy对象类似于其它上下文中的代理。可以用以修改与JavaScript对象的任何交互，如定义、删除或访问属性。考虑到代理对象的工作机制，他们不能彻底通过ployfill实现，事实上相关的ployfill也是存在的，但是由于存在局限性使得他们在某些方面与规范有所不一致。</p>\n<p>除此之外，ES6还在语言层面上为我们提供了模块系统,ES6对Number,Math,Array和string等都进行了更新，提供了新的api。</p>\n","site":{"data":{}},"thumbnailImageUrl":"https://kisky3.github.io/2019/02/10/JS发展简史/20190210.png","excerpt":"<p>JS发展简史及ES6新特性</p>","more":"<h3 id=\"JS标准制定简史\"><a href=\"#JS标准制定简史\" class=\"headerlink\" title=\"JS标准制定简史\"></a>JS标准制定简史</h3><p>1995年，只花了10天时间 Brendan 就开发完成了当时被称作Mocha的初版 JavaScript 原型。</p>\n<p>那时候的JS比较简陋，没有数组和字面量的对象的概念，所有的报错都只能通过丑陋的alert展示，缺乏异常处理机制，出错时很多运算的结果会是NaN或undefined。不过 Brendan 对 DOM 0 的描述及初版的JavaScript还是成为了最初的标准。</p>\n<p>1995年9月，JavaScript也被包装为LiveScript一同面世。1995年12月，Netscape Navigator 2.0 beta3发布，LiveScript在这时被改名为JavaScript(当时这个商标为Sun公司所有，现在属甲骨文公司)。之后不久,网景推出了LiveWire，一种在其服务器（Netscape Enterprise Server）上的JavaScript实现1。</p>\n<p>1996年，微软推出了JScript，同ie3捆绑发行,JScript在微软的IIS服务器上同样可用。</p>\n<p>1996年开始,JS语言开始走上规范之路，由于当时Sun公司不愿意转让JavaScript这一商标，虽然微软愿意转让JScript这一商标,但却遭到其它公司成员的反对，因此这一语言的名字就成了我们熟悉的ECMAScript。</p>\n<p>1997年6月ECMA-262的第一版发布，之后一年中，规范依据ISO / IEC 16262国际标准进行了改进，并由ISO认证机构大量审查，1997年6月ECMAScript规范正式发布第二版。</p>\n<p>1999年12月，ES3也发布了，这一版的规范带来了正则表达式，switch，do/while,try/catch，Object#hasOwnProperty以及其它的一些改变，同时新增的大部分规范在网景的新版浏览器SpiderMonkey中也得以实现。<br>ES4标准的草案在之后不久就被TC39提出，这一草案直接影响了2000年中期的JScript,.NET等的开发，2006年Flash推出了ActionScript 3也深受其影响。</p>\n<p>但是关于JavaScript语言该如何发展，当时的意见非常矛盾，这使规范制定的工作停滞不前。这在Web标准指定史上是一个非常尴尬且奇妙的时刻，当时微软掌握着主动权，但是它对规范的改进却没太大的兴趣。</p>\n<p>两年后，随着火狐浏览器市场占有率不断增高，就职于 Mozilla 的 Brendan 迫使微软回到标准指定的议程中。2005年中期开始，TC39委员会又开始了例会。重新开始讨论起ES4，他们计划在ES4中引入模块系统，类，迭代器，生成器，解构，类型注释，适当的尾调用，新的数据类型和各种其他功能,由于这个工程的野心太大，ES4的制定因而被一而再的延期。</p>\n<p>2007年，TC39委员会被迫分为两部分，一部分负责ES3的渐进加强版ES3.1标准的制定，另一部分则负责重新设计改动巨大的ES4标准。<br>2008年8月，ES3.1被认为是正确的选择，随后其更名为ES5， ES4也随之被废弃，不过值得庆幸的是 ES4 提出的很多新功能被融入到了 ES6 ，也有一些功能仍然在考虑之中，另一些则已被放弃，拒绝或撤回。兼容ES3.1 成为 ES4 标准提出的功能可能被采纳的前提。 2009年12月，ES3发布10周年后，第五版ECMAScript才得以发布。这个版本把十年来各浏览器中已有的普遍实践标准化了，新增了get<code>set</code>，改进了数组原型的函数式特征，原生支持了JSON的解析，提出了严格模式。 2011年6月，ES5标准再次修改并改进为 ISO/IEC 16262:2011标准 的第三版，并以ES5.1的名义正式发布。 2015年6月，也就是ES5.1发布的四年后，TC39公布了JS语言有史以来最大的更新 ES6， 其中包含了很多ES4中提出草案。</p>\n<p>ES6的发布是JS标准制定历史上的一个重要里程碑。除了数十种引入注目的新功能，ES6 的发布也标志着 ECMAScript 标准将持续更新。</p>\n<hr>\n<h3 id=\"ES6中的新特性\"><a href=\"#ES6中的新特性\" class=\"headerlink\" title=\"ES6中的新特性\"></a>ES6中的新特性</h3><p>ES6改动非常大，这从规范的页数就可以看出，ES5.1 258页，ES6 566页。总的来说新增的规范可以划分为以下不同类别：</p>\n<ul>\n<li><p>语法糖</p>\n</li>\n<li><p>新机制</p>\n</li>\n<li><p>更好的语义化</p>\n</li>\n<li><p>更多内置的方法</p>\n</li>\n</ul>\n<p>现存局限方法的非破坏性解决方案</p>\n<p>语法糖是ES6所有改变中最重要的一块，class语法可简洁的构建对象实例，支持使用箭头函数，简写的对象属性方法，解构，剩余值，和拓展，等提供语义良好的编写程序的方法。</p>\n<p>ES6为我们提供了几种控制异步代码流的机制：包括可靠的promises，表征一系列值的iterators，特殊的iterators–&gt; generators。基于这些新概念,ES2017还有了了async/await语法，让我们以同步的方式来书写异步代码。</p>\n<p>ES6提供了一些新的内置类型来管理set和map,这些新类型不具有仅使用字符串键的限制</p>\n<p>Proxy对象重新定义了我们通过JavaScript reflection可以做什么，Proxy对象类似于其它上下文中的代理。可以用以修改与JavaScript对象的任何交互，如定义、删除或访问属性。考虑到代理对象的工作机制，他们不能彻底通过ployfill实现，事实上相关的ployfill也是存在的，但是由于存在局限性使得他们在某些方面与规范有所不一致。</p>\n<p>除此之外，ES6还在语言层面上为我们提供了模块系统,ES6对Number,Math,Array和string等都进行了更新，提供了新的api。</p>"},{"title":"JS Immediately Invoked Function Expression","date":"2019-03-02T10:13:39.000Z","clearReading":true,"thumbnailImage":"20190302.jpg","thumbnailImagePosition":"left","coverImage":"cover.jpg","coverCaption":"Hello World, Hello Programming","coverSize":"partial","comments":0,"_content":"\nJS立即执行函数表达式\n<!--more-->\n\n### 什么是JS作用域\nJS作用域表示变量或函数起作用的区域，指代了它们在什么样的上下文中执行，亦即上下文执行环境。\n\nJavascript 的作用域只有两种：全局作用域和本地作用域，本地作用域是按照函数来区分的。       \n\n#### 全局变量：\n\n声明在函数外部的变量，在代码中任何地方都能访问到的对象拥有全局作用域（所有没有var直接赋值的变量都属于全局变量）\n\n\n1.最外层函数和在最外层函数外面定义的变量拥有全局作用域         \n  \n```JS\nvar authorName=\"Dream\";\nfunction doSomething(){\n    var blogName=\"blogName\";\n    function innerSay(){\n        alert(blogName);\n    }\n    innerSay();\n}\nalert(authorName); //Dream\nalert(blogName); //脚本错误\ndoSomething(); //blogName\ninnerSay() //脚本错误\n```\n\n2.所有末定义直接赋值的变量自动声明为拥有全局作用域\n例：变量blogName拥有全局作用域，而authorName在函数外部无法访问到。\n\n```JS\nfunction doSomething(){\n    var authorName=\"Dream\";\n    blogName=\"blogName\";\n    alert(authorName);\n}\ndoSomething(); //Dream\nalert(blogName); //blogName\nalert(authorName); //脚本错误\n```\n\n#### 局部变量（函数作用域）：\n\n声明在函数内部的变量，和全局作用域相反，局部作用域一般只在固定的代码片段内可访问到。\n例：代码中的blogName和函数innerSay都只拥有局部作用域。\n\n```JS\nfunction doSomething(){\n    var blogName=\"Dream\";\n    function innerSay(){\n        alert(blogName);\n    }\n    innerSay();\n}\nalert(blogName); //脚本错误\ninnerSay(); //脚本错误\n```\n\n***\n\n### 什么是JS作用域链\n\n每当执行一个函数就会进入一个新的作用域下，当使用一个变量时首先从自己的作用域找，如果找到就输出，如果没有再从自己的上层作用域找，也就是该函数声明的作用域。\n这就是js的作用域链。\n\n例：执行下面fn（）时输出结果为 2\n\n- 因为return fn3，所以执行fn3内的fn2，\n- 首先从fn2的作用域内找变量a，\n- 而fn2内没有声明变量a，所以从fn2的上层作用域，也就是声明fn2的fn1下找变量a，\n- 在fn1下找到 var a = 2\n\n```JS\nvar a = 1\nfunction fn1() {\n  function fn2(){\n    console.log(a);\n  }\n  function fn3() {\n    var a = 4\n    fn2()\n  }\n  var a = 2\n  return fn3\n}\nvar fn = fn1()\nfn() // 2\n```\n***\n\n### 什么是JS立即执行函数\n\n首先声明一个匿名函数 function(){alert(‘我是匿名函数’)}。然后在匿名函数后面接一对括号 ()，调用这个匿名函数。\n\n```JS\n(function(){alert('我是匿名函数')})()\n```\n\n用括号把函数包起来其实是为了兼容 JS 的语法。如果我们不加另一对括号，直接写成下面这样浏览器会报语法错误。\n\n```JS\nfunction(){alert('我是匿名函数')}()\n```\n\n立即执行函数只有一个作用：创建一个独立的作用域。\n这个作用域里面的变量，外面访问不到（即避免「变量污染」）。","source":"_posts/JS立即执行函数表达式.md","raw":"---\ntitle: JS Immediately Invoked Function Expression\ndate: 2019-03-02 19:13:39\ntags:\n- JS\nclearReading: true\nthumbnailImage: 20190302.jpg  \nthumbnailImagePosition: left\ncoverImage: cover.jpg\ncoverCaption: \"Hello World, Hello Programming\"\ncoverSize: partial\ncomments: false\ncategories: Front-end Knowledge\n---\n\nJS立即执行函数表达式\n<!--more-->\n\n### 什么是JS作用域\nJS作用域表示变量或函数起作用的区域，指代了它们在什么样的上下文中执行，亦即上下文执行环境。\n\nJavascript 的作用域只有两种：全局作用域和本地作用域，本地作用域是按照函数来区分的。       \n\n#### 全局变量：\n\n声明在函数外部的变量，在代码中任何地方都能访问到的对象拥有全局作用域（所有没有var直接赋值的变量都属于全局变量）\n\n\n1.最外层函数和在最外层函数外面定义的变量拥有全局作用域         \n  \n```JS\nvar authorName=\"Dream\";\nfunction doSomething(){\n    var blogName=\"blogName\";\n    function innerSay(){\n        alert(blogName);\n    }\n    innerSay();\n}\nalert(authorName); //Dream\nalert(blogName); //脚本错误\ndoSomething(); //blogName\ninnerSay() //脚本错误\n```\n\n2.所有末定义直接赋值的变量自动声明为拥有全局作用域\n例：变量blogName拥有全局作用域，而authorName在函数外部无法访问到。\n\n```JS\nfunction doSomething(){\n    var authorName=\"Dream\";\n    blogName=\"blogName\";\n    alert(authorName);\n}\ndoSomething(); //Dream\nalert(blogName); //blogName\nalert(authorName); //脚本错误\n```\n\n#### 局部变量（函数作用域）：\n\n声明在函数内部的变量，和全局作用域相反，局部作用域一般只在固定的代码片段内可访问到。\n例：代码中的blogName和函数innerSay都只拥有局部作用域。\n\n```JS\nfunction doSomething(){\n    var blogName=\"Dream\";\n    function innerSay(){\n        alert(blogName);\n    }\n    innerSay();\n}\nalert(blogName); //脚本错误\ninnerSay(); //脚本错误\n```\n\n***\n\n### 什么是JS作用域链\n\n每当执行一个函数就会进入一个新的作用域下，当使用一个变量时首先从自己的作用域找，如果找到就输出，如果没有再从自己的上层作用域找，也就是该函数声明的作用域。\n这就是js的作用域链。\n\n例：执行下面fn（）时输出结果为 2\n\n- 因为return fn3，所以执行fn3内的fn2，\n- 首先从fn2的作用域内找变量a，\n- 而fn2内没有声明变量a，所以从fn2的上层作用域，也就是声明fn2的fn1下找变量a，\n- 在fn1下找到 var a = 2\n\n```JS\nvar a = 1\nfunction fn1() {\n  function fn2(){\n    console.log(a);\n  }\n  function fn3() {\n    var a = 4\n    fn2()\n  }\n  var a = 2\n  return fn3\n}\nvar fn = fn1()\nfn() // 2\n```\n***\n\n### 什么是JS立即执行函数\n\n首先声明一个匿名函数 function(){alert(‘我是匿名函数’)}。然后在匿名函数后面接一对括号 ()，调用这个匿名函数。\n\n```JS\n(function(){alert('我是匿名函数')})()\n```\n\n用括号把函数包起来其实是为了兼容 JS 的语法。如果我们不加另一对括号，直接写成下面这样浏览器会报语法错误。\n\n```JS\nfunction(){alert('我是匿名函数')}()\n```\n\n立即执行函数只有一个作用：创建一个独立的作用域。\n这个作用域里面的变量，外面访问不到（即避免「变量污染」）。","slug":"JS立即执行函数表达式","published":1,"updated":"2019-11-23T23:54:38.000Z","layout":"post","photos":[],"link":"","_id":"ck3it6k29001gteyibwg3vfl7","content":"<p>JS立即执行函数表达式</p>\n<a id=\"more\"></a>\n\n<h3 id=\"什么是JS作用域\"><a href=\"#什么是JS作用域\" class=\"headerlink\" title=\"什么是JS作用域\"></a>什么是JS作用域</h3><p>JS作用域表示变量或函数起作用的区域，指代了它们在什么样的上下文中执行，亦即上下文执行环境。</p>\n<p>Javascript 的作用域只有两种：全局作用域和本地作用域，本地作用域是按照函数来区分的。       </p>\n<h4 id=\"全局变量：\"><a href=\"#全局变量：\" class=\"headerlink\" title=\"全局变量：\"></a>全局变量：</h4><p>声明在函数外部的变量，在代码中任何地方都能访问到的对象拥有全局作用域（所有没有var直接赋值的变量都属于全局变量）</p>\n<p>1.最外层函数和在最外层函数外面定义的变量拥有全局作用域         </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> authorName=<span class=\"string\">\"Dream\"</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSomething</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> blogName=<span class=\"string\">\"blogName\"</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">innerSay</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        alert(blogName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    innerSay();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">alert(authorName); <span class=\"comment\">//Dream</span></span><br><span class=\"line\">alert(blogName); <span class=\"comment\">//脚本错误</span></span><br><span class=\"line\">doSomething(); <span class=\"comment\">//blogName</span></span><br><span class=\"line\">innerSay() <span class=\"comment\">//脚本错误</span></span><br></pre></td></tr></table></figure>\n\n<p>2.所有末定义直接赋值的变量自动声明为拥有全局作用域<br>例：变量blogName拥有全局作用域，而authorName在函数外部无法访问到。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSomething</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> authorName=<span class=\"string\">\"Dream\"</span>;</span><br><span class=\"line\">    blogName=<span class=\"string\">\"blogName\"</span>;</span><br><span class=\"line\">    alert(authorName);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">doSomething(); <span class=\"comment\">//Dream</span></span><br><span class=\"line\">alert(blogName); <span class=\"comment\">//blogName</span></span><br><span class=\"line\">alert(authorName); <span class=\"comment\">//脚本错误</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"局部变量（函数作用域）：\"><a href=\"#局部变量（函数作用域）：\" class=\"headerlink\" title=\"局部变量（函数作用域）：\"></a>局部变量（函数作用域）：</h4><p>声明在函数内部的变量，和全局作用域相反，局部作用域一般只在固定的代码片段内可访问到。<br>例：代码中的blogName和函数innerSay都只拥有局部作用域。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSomething</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> blogName=<span class=\"string\">\"Dream\"</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">innerSay</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        alert(blogName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    innerSay();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">alert(blogName); <span class=\"comment\">//脚本错误</span></span><br><span class=\"line\">innerSay(); <span class=\"comment\">//脚本错误</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"什么是JS作用域链\"><a href=\"#什么是JS作用域链\" class=\"headerlink\" title=\"什么是JS作用域链\"></a>什么是JS作用域链</h3><p>每当执行一个函数就会进入一个新的作用域下，当使用一个变量时首先从自己的作用域找，如果找到就输出，如果没有再从自己的上层作用域找，也就是该函数声明的作用域。<br>这就是js的作用域链。</p>\n<p>例：执行下面fn（）时输出结果为 2</p>\n<ul>\n<li>因为return fn3，所以执行fn3内的fn2，</li>\n<li>首先从fn2的作用域内找变量a，</li>\n<li>而fn2内没有声明变量a，所以从fn2的上层作用域，也就是声明fn2的fn1下找变量a，</li>\n<li>在fn1下找到 var a = 2</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn2</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn3</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">4</span></span><br><span class=\"line\">    fn2()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> fn3</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> fn = fn1()</span><br><span class=\"line\">fn() <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"什么是JS立即执行函数\"><a href=\"#什么是JS立即执行函数\" class=\"headerlink\" title=\"什么是JS立即执行函数\"></a>什么是JS立即执行函数</h3><p>首先声明一个匿名函数 function(){alert(‘我是匿名函数’)}。然后在匿名函数后面接一对括号 ()，调用这个匿名函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;alert(<span class=\"string\">'我是匿名函数'</span>)&#125;)()</span><br></pre></td></tr></table></figure>\n\n<p>用括号把函数包起来其实是为了兼容 JS 的语法。如果我们不加另一对括号，直接写成下面这样浏览器会报语法错误。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;alert(<span class=\"string\">'我是匿名函数'</span>)&#125;()</span><br></pre></td></tr></table></figure>\n\n<p>立即执行函数只有一个作用：创建一个独立的作用域。<br>这个作用域里面的变量，外面访问不到（即避免「变量污染」）。</p>\n","site":{"data":{}},"thumbnailImageUrl":"https://kisky3.github.io/2019/03/02/JS立即执行函数表达式/20190302.jpg","excerpt":"<p>JS立即执行函数表达式</p>","more":"<h3 id=\"什么是JS作用域\"><a href=\"#什么是JS作用域\" class=\"headerlink\" title=\"什么是JS作用域\"></a>什么是JS作用域</h3><p>JS作用域表示变量或函数起作用的区域，指代了它们在什么样的上下文中执行，亦即上下文执行环境。</p>\n<p>Javascript 的作用域只有两种：全局作用域和本地作用域，本地作用域是按照函数来区分的。       </p>\n<h4 id=\"全局变量：\"><a href=\"#全局变量：\" class=\"headerlink\" title=\"全局变量：\"></a>全局变量：</h4><p>声明在函数外部的变量，在代码中任何地方都能访问到的对象拥有全局作用域（所有没有var直接赋值的变量都属于全局变量）</p>\n<p>1.最外层函数和在最外层函数外面定义的变量拥有全局作用域         </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> authorName=<span class=\"string\">\"Dream\"</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSomething</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> blogName=<span class=\"string\">\"blogName\"</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">innerSay</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        alert(blogName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    innerSay();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">alert(authorName); <span class=\"comment\">//Dream</span></span><br><span class=\"line\">alert(blogName); <span class=\"comment\">//脚本错误</span></span><br><span class=\"line\">doSomething(); <span class=\"comment\">//blogName</span></span><br><span class=\"line\">innerSay() <span class=\"comment\">//脚本错误</span></span><br></pre></td></tr></table></figure>\n\n<p>2.所有末定义直接赋值的变量自动声明为拥有全局作用域<br>例：变量blogName拥有全局作用域，而authorName在函数外部无法访问到。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSomething</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> authorName=<span class=\"string\">\"Dream\"</span>;</span><br><span class=\"line\">    blogName=<span class=\"string\">\"blogName\"</span>;</span><br><span class=\"line\">    alert(authorName);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">doSomething(); <span class=\"comment\">//Dream</span></span><br><span class=\"line\">alert(blogName); <span class=\"comment\">//blogName</span></span><br><span class=\"line\">alert(authorName); <span class=\"comment\">//脚本错误</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"局部变量（函数作用域）：\"><a href=\"#局部变量（函数作用域）：\" class=\"headerlink\" title=\"局部变量（函数作用域）：\"></a>局部变量（函数作用域）：</h4><p>声明在函数内部的变量，和全局作用域相反，局部作用域一般只在固定的代码片段内可访问到。<br>例：代码中的blogName和函数innerSay都只拥有局部作用域。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSomething</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> blogName=<span class=\"string\">\"Dream\"</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">innerSay</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        alert(blogName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    innerSay();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">alert(blogName); <span class=\"comment\">//脚本错误</span></span><br><span class=\"line\">innerSay(); <span class=\"comment\">//脚本错误</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"什么是JS作用域链\"><a href=\"#什么是JS作用域链\" class=\"headerlink\" title=\"什么是JS作用域链\"></a>什么是JS作用域链</h3><p>每当执行一个函数就会进入一个新的作用域下，当使用一个变量时首先从自己的作用域找，如果找到就输出，如果没有再从自己的上层作用域找，也就是该函数声明的作用域。<br>这就是js的作用域链。</p>\n<p>例：执行下面fn（）时输出结果为 2</p>\n<ul>\n<li>因为return fn3，所以执行fn3内的fn2，</li>\n<li>首先从fn2的作用域内找变量a，</li>\n<li>而fn2内没有声明变量a，所以从fn2的上层作用域，也就是声明fn2的fn1下找变量a，</li>\n<li>在fn1下找到 var a = 2</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn2</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn3</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">4</span></span><br><span class=\"line\">    fn2()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> fn3</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> fn = fn1()</span><br><span class=\"line\">fn() <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"什么是JS立即执行函数\"><a href=\"#什么是JS立即执行函数\" class=\"headerlink\" title=\"什么是JS立即执行函数\"></a>什么是JS立即执行函数</h3><p>首先声明一个匿名函数 function(){alert(‘我是匿名函数’)}。然后在匿名函数后面接一对括号 ()，调用这个匿名函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;alert(<span class=\"string\">'我是匿名函数'</span>)&#125;)()</span><br></pre></td></tr></table></figure>\n\n<p>用括号把函数包起来其实是为了兼容 JS 的语法。如果我们不加另一对括号，直接写成下面这样浏览器会报语法错误。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;alert(<span class=\"string\">'我是匿名函数'</span>)&#125;()</span><br></pre></td></tr></table></figure>\n\n<p>立即执行函数只有一个作用：创建一个独立的作用域。<br>这个作用域里面的变量，外面访问不到（即避免「变量污染」）。</p>"},{"title":"JS Regular Expression","date":"2019-03-16T10:23:28.000Z","clearReading":true,"thumbnailImage":"20190316.png","thumbnailImagePosition":"left","coverImage":"cover.jpg","coverCaption":"Hello World, Hello Programming","coverSize":"partial","comments":0,"_content":"\nJS正则表达式\n<!--more-->\n\n### 什么是JS正则表达式\n正则表达式是计算机科学的一个概念，正则表达式使用单个字符串来描述，匹配一系列符合某个句法规则的字符串。\n\n在很多文本编辑器里，正则表达式常被用来检索替换某些符合某个模式的文本。\n\n### 正则表达式的创建\n\n1.构造函数\n\n```\nvar reg = new RegExp('<%[^%]+%>','g');\n```\n\n2.字面量\n\n```\nvar reg =/<%[^%]%>/g;\n```\n\n最后的g代表全局搜索，不添加的画搜索到第一个结果停止搜索\n\n***\n\n### 预定义类\n\n| 字符 |  等价类  |  含义  |\n| ----| ---- | ---- |\n|  . | [^\b\\r\\n]  | 除了回车符和换行符之外的所有字符  |\n|  \\d  |  [0-9]\t | 数字字符 |\n|  \\D  | [^0-9]  | 非数字字符 |\n|  \\s |  [\\t\\n\\x0B\\f\\r]  | 空白符 |\n|  \\S |  [^\\t\\n\\x0B\\f\\r]\t  | 非空白符 |\n|  \\w |  [a-zA-Z_0-9]\t  | 单词字符，字母，数字下划线 |\n|  \\W |  [^a-zA-Z_0-9]  | 非单词字符 |\n\n***\n\n### 边界\n\n正则表达式还提供里几个常用的边界匹配字符串\n\n| 字符 |  含义  |\n| ----| ---- |\n|  ^ | 以xxx开头 |\n|  $ |  以xxx结尾 |\n|  \\b | 单词边界  |\n|  \\B |  非单词边界  |\n\n***\n\n### 量词\n\n正则表达式还提供里几个常用的边界匹配字符串\n\n| 字符 |  含义  |\n| ----| ---- |\n|  ? | 出现零次或一次（最多出现一次） |\n|  + |  出现一次或多次（至少出现一次） |\n|  * | 出现零次或多次（任意次）  |\n|  {n} |  出现n次  |\n|  {n，m}\t |  出现n到m次  |\n|  {n，} |  至少出现n次  |\n\n***\n\n### 前瞻\n\n| 字符 |  含义  |\n| ----| ---- |\n|  exp1(?=exp2) | 匹配后面是exp2的exp1 |\n|  exp1(?！=exp2) | 匹配后面不是exp2的exp1 |\n\n***\n\n### 贪婪模式与非贪婪模式\n\n#### 贪婪模式\n\n在贪婪模式下（一般为默认模式），正则引擎尽可能多的重复匹配字符\n也就是匹配时先忽略下一个条件，优先以当前条件进行匹配，完成当前条件之后才开始回溯以下一条件进行匹配\n\n#### 非贪婪模式\n\n非贪婪模式和贪婪模式相反，可通过在代表适量的表示符后放置？来开启非贪婪模式\n如？，+？甚至是？？？，\n非贪婪模式是不只看当前条件还看下一条件进行检索，正则引擎尝试用最小可能的重复次数来进行匹配\n\n例\n\n```JS\nvar str = 'a \"witch\" and her \"broom\" is one';\n str.match( /\".*\"/g);\n```\n\n在贪婪模式下，匹配到 “witch” and her “broom” 一个字符串\n\n而在非贪婪模式下匹配到的是”witch”和”broom”\n\n\n","source":"_posts/JS正则表达式.md","raw":"---\ntitle: JS Regular Expression\ndate: 2019-03-16 19:23:28\ntags:\n- JS\nclearReading: true\nthumbnailImage: 20190316.png\nthumbnailImagePosition: left\ncoverImage: cover.jpg\ncoverCaption: \"Hello World, Hello Programming\"\ncoverSize: partial\ncomments: false\ncategories: Front-end Knowledge\n---\n\nJS正则表达式\n<!--more-->\n\n### 什么是JS正则表达式\n正则表达式是计算机科学的一个概念，正则表达式使用单个字符串来描述，匹配一系列符合某个句法规则的字符串。\n\n在很多文本编辑器里，正则表达式常被用来检索替换某些符合某个模式的文本。\n\n### 正则表达式的创建\n\n1.构造函数\n\n```\nvar reg = new RegExp('<%[^%]+%>','g');\n```\n\n2.字面量\n\n```\nvar reg =/<%[^%]%>/g;\n```\n\n最后的g代表全局搜索，不添加的画搜索到第一个结果停止搜索\n\n***\n\n### 预定义类\n\n| 字符 |  等价类  |  含义  |\n| ----| ---- | ---- |\n|  . | [^\b\\r\\n]  | 除了回车符和换行符之外的所有字符  |\n|  \\d  |  [0-9]\t | 数字字符 |\n|  \\D  | [^0-9]  | 非数字字符 |\n|  \\s |  [\\t\\n\\x0B\\f\\r]  | 空白符 |\n|  \\S |  [^\\t\\n\\x0B\\f\\r]\t  | 非空白符 |\n|  \\w |  [a-zA-Z_0-9]\t  | 单词字符，字母，数字下划线 |\n|  \\W |  [^a-zA-Z_0-9]  | 非单词字符 |\n\n***\n\n### 边界\n\n正则表达式还提供里几个常用的边界匹配字符串\n\n| 字符 |  含义  |\n| ----| ---- |\n|  ^ | 以xxx开头 |\n|  $ |  以xxx结尾 |\n|  \\b | 单词边界  |\n|  \\B |  非单词边界  |\n\n***\n\n### 量词\n\n正则表达式还提供里几个常用的边界匹配字符串\n\n| 字符 |  含义  |\n| ----| ---- |\n|  ? | 出现零次或一次（最多出现一次） |\n|  + |  出现一次或多次（至少出现一次） |\n|  * | 出现零次或多次（任意次）  |\n|  {n} |  出现n次  |\n|  {n，m}\t |  出现n到m次  |\n|  {n，} |  至少出现n次  |\n\n***\n\n### 前瞻\n\n| 字符 |  含义  |\n| ----| ---- |\n|  exp1(?=exp2) | 匹配后面是exp2的exp1 |\n|  exp1(?！=exp2) | 匹配后面不是exp2的exp1 |\n\n***\n\n### 贪婪模式与非贪婪模式\n\n#### 贪婪模式\n\n在贪婪模式下（一般为默认模式），正则引擎尽可能多的重复匹配字符\n也就是匹配时先忽略下一个条件，优先以当前条件进行匹配，完成当前条件之后才开始回溯以下一条件进行匹配\n\n#### 非贪婪模式\n\n非贪婪模式和贪婪模式相反，可通过在代表适量的表示符后放置？来开启非贪婪模式\n如？，+？甚至是？？？，\n非贪婪模式是不只看当前条件还看下一条件进行检索，正则引擎尝试用最小可能的重复次数来进行匹配\n\n例\n\n```JS\nvar str = 'a \"witch\" and her \"broom\" is one';\n str.match( /\".*\"/g);\n```\n\n在贪婪模式下，匹配到 “witch” and her “broom” 一个字符串\n\n而在非贪婪模式下匹配到的是”witch”和”broom”\n\n\n","slug":"JS正则表达式","published":1,"updated":"2019-11-23T23:54:38.000Z","layout":"post","photos":[],"link":"","_id":"ck3it6k2a001jteyiutow0ptc","content":"<p>JS正则表达式</p>\n<a id=\"more\"></a>\n\n<h3 id=\"什么是JS正则表达式\"><a href=\"#什么是JS正则表达式\" class=\"headerlink\" title=\"什么是JS正则表达式\"></a>什么是JS正则表达式</h3><p>正则表达式是计算机科学的一个概念，正则表达式使用单个字符串来描述，匹配一系列符合某个句法规则的字符串。</p>\n<p>在很多文本编辑器里，正则表达式常被用来检索替换某些符合某个模式的文本。</p>\n<h3 id=\"正则表达式的创建\"><a href=\"#正则表达式的创建\" class=\"headerlink\" title=\"正则表达式的创建\"></a>正则表达式的创建</h3><p>1.构造函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var reg = new RegExp(&apos;&lt;%[^%]+%&gt;&apos;,&apos;g&apos;);</span><br></pre></td></tr></table></figure>\n\n<p>2.字面量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var reg =/&lt;%[^%]%&gt;/g;</span><br></pre></td></tr></table></figure>\n\n<p>最后的g代表全局搜索，不添加的画搜索到第一个结果停止搜索</p>\n<hr>\n<h3 id=\"预定义类\"><a href=\"#预定义类\" class=\"headerlink\" title=\"预定义类\"></a>预定义类</h3><table>\n<thead>\n<tr>\n<th>字符</th>\n<th>等价类</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>.</td>\n<td>[^\b\\r\\n]</td>\n<td>除了回车符和换行符之外的所有字符</td>\n</tr>\n<tr>\n<td>\\d</td>\n<td>[0-9]</td>\n<td>数字字符</td>\n</tr>\n<tr>\n<td>\\D</td>\n<td>[^0-9]</td>\n<td>非数字字符</td>\n</tr>\n<tr>\n<td>\\s</td>\n<td>[\\t\\n\\x0B\\f\\r]</td>\n<td>空白符</td>\n</tr>\n<tr>\n<td>\\S</td>\n<td>[^\\t\\n\\x0B\\f\\r]</td>\n<td>非空白符</td>\n</tr>\n<tr>\n<td>\\w</td>\n<td>[a-zA-Z_0-9]</td>\n<td>单词字符，字母，数字下划线</td>\n</tr>\n<tr>\n<td>\\W</td>\n<td>[^a-zA-Z_0-9]</td>\n<td>非单词字符</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"边界\"><a href=\"#边界\" class=\"headerlink\" title=\"边界\"></a>边界</h3><p>正则表达式还提供里几个常用的边界匹配字符串</p>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>^</td>\n<td>以xxx开头</td>\n</tr>\n<tr>\n<td>$</td>\n<td>以xxx结尾</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>单词边界</td>\n</tr>\n<tr>\n<td>\\B</td>\n<td>非单词边界</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"量词\"><a href=\"#量词\" class=\"headerlink\" title=\"量词\"></a>量词</h3><p>正则表达式还提供里几个常用的边界匹配字符串</p>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>?</td>\n<td>出现零次或一次（最多出现一次）</td>\n</tr>\n<tr>\n<td>+</td>\n<td>出现一次或多次（至少出现一次）</td>\n</tr>\n<tr>\n<td>*</td>\n<td>出现零次或多次（任意次）</td>\n</tr>\n<tr>\n<td>{n}</td>\n<td>出现n次</td>\n</tr>\n<tr>\n<td>{n，m}</td>\n<td>出现n到m次</td>\n</tr>\n<tr>\n<td>{n，}</td>\n<td>至少出现n次</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"前瞻\"><a href=\"#前瞻\" class=\"headerlink\" title=\"前瞻\"></a>前瞻</h3><table>\n<thead>\n<tr>\n<th>字符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>exp1(?=exp2)</td>\n<td>匹配后面是exp2的exp1</td>\n</tr>\n<tr>\n<td>exp1(?！=exp2)</td>\n<td>匹配后面不是exp2的exp1</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"贪婪模式与非贪婪模式\"><a href=\"#贪婪模式与非贪婪模式\" class=\"headerlink\" title=\"贪婪模式与非贪婪模式\"></a>贪婪模式与非贪婪模式</h3><h4 id=\"贪婪模式\"><a href=\"#贪婪模式\" class=\"headerlink\" title=\"贪婪模式\"></a>贪婪模式</h4><p>在贪婪模式下（一般为默认模式），正则引擎尽可能多的重复匹配字符<br>也就是匹配时先忽略下一个条件，优先以当前条件进行匹配，完成当前条件之后才开始回溯以下一条件进行匹配</p>\n<h4 id=\"非贪婪模式\"><a href=\"#非贪婪模式\" class=\"headerlink\" title=\"非贪婪模式\"></a>非贪婪模式</h4><p>非贪婪模式和贪婪模式相反，可通过在代表适量的表示符后放置？来开启非贪婪模式<br>如？，+？甚至是？？？，<br>非贪婪模式是不只看当前条件还看下一条件进行检索，正则引擎尝试用最小可能的重复次数来进行匹配</p>\n<p>例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'a \"witch\" and her \"broom\" is one'</span>;</span><br><span class=\"line\"> str.match( <span class=\"regexp\">/\".*\"/g</span>);</span><br></pre></td></tr></table></figure>\n\n<p>在贪婪模式下，匹配到 “witch” and her “broom” 一个字符串</p>\n<p>而在非贪婪模式下匹配到的是”witch”和”broom”</p>\n","site":{"data":{}},"thumbnailImageUrl":"https://kisky3.github.io/2019/03/16/JS正则表达式/20190316.png","excerpt":"<p>JS正则表达式</p>","more":"<h3 id=\"什么是JS正则表达式\"><a href=\"#什么是JS正则表达式\" class=\"headerlink\" title=\"什么是JS正则表达式\"></a>什么是JS正则表达式</h3><p>正则表达式是计算机科学的一个概念，正则表达式使用单个字符串来描述，匹配一系列符合某个句法规则的字符串。</p>\n<p>在很多文本编辑器里，正则表达式常被用来检索替换某些符合某个模式的文本。</p>\n<h3 id=\"正则表达式的创建\"><a href=\"#正则表达式的创建\" class=\"headerlink\" title=\"正则表达式的创建\"></a>正则表达式的创建</h3><p>1.构造函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var reg = new RegExp(&apos;&lt;%[^%]+%&gt;&apos;,&apos;g&apos;);</span><br></pre></td></tr></table></figure>\n\n<p>2.字面量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var reg =/&lt;%[^%]%&gt;/g;</span><br></pre></td></tr></table></figure>\n\n<p>最后的g代表全局搜索，不添加的画搜索到第一个结果停止搜索</p>\n<hr>\n<h3 id=\"预定义类\"><a href=\"#预定义类\" class=\"headerlink\" title=\"预定义类\"></a>预定义类</h3><table>\n<thead>\n<tr>\n<th>字符</th>\n<th>等价类</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>.</td>\n<td>[^\b\\r\\n]</td>\n<td>除了回车符和换行符之外的所有字符</td>\n</tr>\n<tr>\n<td>\\d</td>\n<td>[0-9]</td>\n<td>数字字符</td>\n</tr>\n<tr>\n<td>\\D</td>\n<td>[^0-9]</td>\n<td>非数字字符</td>\n</tr>\n<tr>\n<td>\\s</td>\n<td>[\\t\\n\\x0B\\f\\r]</td>\n<td>空白符</td>\n</tr>\n<tr>\n<td>\\S</td>\n<td>[^\\t\\n\\x0B\\f\\r]</td>\n<td>非空白符</td>\n</tr>\n<tr>\n<td>\\w</td>\n<td>[a-zA-Z_0-9]</td>\n<td>单词字符，字母，数字下划线</td>\n</tr>\n<tr>\n<td>\\W</td>\n<td>[^a-zA-Z_0-9]</td>\n<td>非单词字符</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"边界\"><a href=\"#边界\" class=\"headerlink\" title=\"边界\"></a>边界</h3><p>正则表达式还提供里几个常用的边界匹配字符串</p>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>^</td>\n<td>以xxx开头</td>\n</tr>\n<tr>\n<td>$</td>\n<td>以xxx结尾</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>单词边界</td>\n</tr>\n<tr>\n<td>\\B</td>\n<td>非单词边界</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"量词\"><a href=\"#量词\" class=\"headerlink\" title=\"量词\"></a>量词</h3><p>正则表达式还提供里几个常用的边界匹配字符串</p>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>?</td>\n<td>出现零次或一次（最多出现一次）</td>\n</tr>\n<tr>\n<td>+</td>\n<td>出现一次或多次（至少出现一次）</td>\n</tr>\n<tr>\n<td>*</td>\n<td>出现零次或多次（任意次）</td>\n</tr>\n<tr>\n<td>{n}</td>\n<td>出现n次</td>\n</tr>\n<tr>\n<td>{n，m}</td>\n<td>出现n到m次</td>\n</tr>\n<tr>\n<td>{n，}</td>\n<td>至少出现n次</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"前瞻\"><a href=\"#前瞻\" class=\"headerlink\" title=\"前瞻\"></a>前瞻</h3><table>\n<thead>\n<tr>\n<th>字符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>exp1(?=exp2)</td>\n<td>匹配后面是exp2的exp1</td>\n</tr>\n<tr>\n<td>exp1(?！=exp2)</td>\n<td>匹配后面不是exp2的exp1</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"贪婪模式与非贪婪模式\"><a href=\"#贪婪模式与非贪婪模式\" class=\"headerlink\" title=\"贪婪模式与非贪婪模式\"></a>贪婪模式与非贪婪模式</h3><h4 id=\"贪婪模式\"><a href=\"#贪婪模式\" class=\"headerlink\" title=\"贪婪模式\"></a>贪婪模式</h4><p>在贪婪模式下（一般为默认模式），正则引擎尽可能多的重复匹配字符<br>也就是匹配时先忽略下一个条件，优先以当前条件进行匹配，完成当前条件之后才开始回溯以下一条件进行匹配</p>\n<h4 id=\"非贪婪模式\"><a href=\"#非贪婪模式\" class=\"headerlink\" title=\"非贪婪模式\"></a>非贪婪模式</h4><p>非贪婪模式和贪婪模式相反，可通过在代表适量的表示符后放置？来开启非贪婪模式<br>如？，+？甚至是？？？，<br>非贪婪模式是不只看当前条件还看下一条件进行检索，正则引擎尝试用最小可能的重复次数来进行匹配</p>\n<p>例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'a \"witch\" and her \"broom\" is one'</span>;</span><br><span class=\"line\"> str.match( <span class=\"regexp\">/\".*\"/g</span>);</span><br></pre></td></tr></table></figure>\n\n<p>在贪婪模式下，匹配到 “witch” and her “broom” 一个字符串</p>\n<p>而在非贪婪模式下匹配到的是”witch”和”broom”</p>"},{"title":"Deploying React Applications to Github Pages","date":"2019-09-29T16:46:01.000Z","clearReading":true,"thumbnailImage":"20190930.png","thumbnailImagePosition":"left","coverImage":"cover.jpg","coverCaption":"Hello World, Hello Programming","coverSize":"partial","comments":0,"_content":"\n把React项目部署到Github Page线上环境\n<!--more-->\n\n#### 1. 在github上新建仓库\n貌似必须要新建仓库，如果在已有仓库的分支下想预览不成功（因为并不是master，所以也会对别的分支有影响.\n\n***\n\n#### 2. 将本地代码同步\n参照新建仓库里的说明初始化并push就好.\n\n***\n\n#### 3. 修改本地React项目的 package.json文件\n\n##### 配置homepage\n\n这里需要把你的github仓库地址稍微修改一下，例如我的\"homepage\": \"https://Kisky3.github.io/react-todolist\".\n\n##### 配置发布选项\n\n在scripts里添加以下两行\n\npredeploy:是将你的项目预编译成静态文件放在build文件夹\ndeploy:是使用gh-pages 部署你的build文件夹下的内容.\n\n```JS\n  \"scripts\": {\n    ...\n    \"predeploy\": \"npm run build\",\n    \"deploy\": \"gh-pages -d build\"\n  },\n```\n\n修改后的package.json\n```JS\n{\n  \"name\": \"todolist\",\n  \"version\": \"0.1.0\",\n  \"homepage\": \"https://Kisky3.github.io/react-todolist\",\n  \"private\": true,\n  \"dependencies\": {\n    \"react\": \"^16.4.1\",\n    \"react-dom\": \"^16.4.1\",\n    \"react-scripts\": \"1.1.4\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test --env=jsdom\",\n    \"eject\": \"react-scripts eject\",\n    \"predeploy\": \"npm run build\",\n    \"deploy\": \"gh-pages -d build\"\n  },\n  \"devDependencies\": {\n    \"gh-pages\": \"^2.0.1\"\n  },\n  \"browserslist\": {\n    \"production\": [\n      \">0.2%\",\n      \"not dead\",\n      \"not op_mini all\"\n    ],\n    \"development\": [\n      \"last 1 chrome version\",\n      \"last 1 firefox version\",\n      \"last 1 safari version\"\n    ]\n  }\n}\n```\n\n##### 安装 gh-pages\n\n```\nnpm install gh-pages --save-dev\n```\n\n##### 部署项目到github page上\n```\nnpm run deploy\n```\n\n***\n\n#### 4. GIthub上的分支切换\n\n配置完之后，打开github上的仓库，你会发现原先的项目多了一个gh-pages分支，里面存放的是我们打包编译完成之后的静态文件。\n一定要手动切换到gh-pages分支 而不是master！\n\n<img src=\"./1.png\" style=\"width:500px;margin:40px 0\">\n\n再切换到setting下，我们可以看到现在项目已经被成功部署到 https://Kisky3.github.io/react-todolist 上了\n\n<img src=\"./2.png\" style=\"width:500px;margin:40px 0\">\n\n打开 https://Kisky3.github.io/react-todolist 检验是否能预览\n\n<img src=\"./3.png\" style=\"width:500px;margin:40px 0\">\n","source":"_posts/Pages.md","raw":"---\ntitle: Deploying React Applications to Github Pages\ndate: 2019-09-30 01:46:01\ntags:\n- react\n- github pages\nclearReading: true\nthumbnailImage: 20190930.png\nthumbnailImagePosition: left\ncoverImage: cover.jpg\ncoverCaption: \"Hello World, Hello Programming\"\ncoverSize: partial\ncomments: false\ncategories: Front-end Knowledge\n---\n\n把React项目部署到Github Page线上环境\n<!--more-->\n\n#### 1. 在github上新建仓库\n貌似必须要新建仓库，如果在已有仓库的分支下想预览不成功（因为并不是master，所以也会对别的分支有影响.\n\n***\n\n#### 2. 将本地代码同步\n参照新建仓库里的说明初始化并push就好.\n\n***\n\n#### 3. 修改本地React项目的 package.json文件\n\n##### 配置homepage\n\n这里需要把你的github仓库地址稍微修改一下，例如我的\"homepage\": \"https://Kisky3.github.io/react-todolist\".\n\n##### 配置发布选项\n\n在scripts里添加以下两行\n\npredeploy:是将你的项目预编译成静态文件放在build文件夹\ndeploy:是使用gh-pages 部署你的build文件夹下的内容.\n\n```JS\n  \"scripts\": {\n    ...\n    \"predeploy\": \"npm run build\",\n    \"deploy\": \"gh-pages -d build\"\n  },\n```\n\n修改后的package.json\n```JS\n{\n  \"name\": \"todolist\",\n  \"version\": \"0.1.0\",\n  \"homepage\": \"https://Kisky3.github.io/react-todolist\",\n  \"private\": true,\n  \"dependencies\": {\n    \"react\": \"^16.4.1\",\n    \"react-dom\": \"^16.4.1\",\n    \"react-scripts\": \"1.1.4\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test --env=jsdom\",\n    \"eject\": \"react-scripts eject\",\n    \"predeploy\": \"npm run build\",\n    \"deploy\": \"gh-pages -d build\"\n  },\n  \"devDependencies\": {\n    \"gh-pages\": \"^2.0.1\"\n  },\n  \"browserslist\": {\n    \"production\": [\n      \">0.2%\",\n      \"not dead\",\n      \"not op_mini all\"\n    ],\n    \"development\": [\n      \"last 1 chrome version\",\n      \"last 1 firefox version\",\n      \"last 1 safari version\"\n    ]\n  }\n}\n```\n\n##### 安装 gh-pages\n\n```\nnpm install gh-pages --save-dev\n```\n\n##### 部署项目到github page上\n```\nnpm run deploy\n```\n\n***\n\n#### 4. GIthub上的分支切换\n\n配置完之后，打开github上的仓库，你会发现原先的项目多了一个gh-pages分支，里面存放的是我们打包编译完成之后的静态文件。\n一定要手动切换到gh-pages分支 而不是master！\n\n<img src=\"./1.png\" style=\"width:500px;margin:40px 0\">\n\n再切换到setting下，我们可以看到现在项目已经被成功部署到 https://Kisky3.github.io/react-todolist 上了\n\n<img src=\"./2.png\" style=\"width:500px;margin:40px 0\">\n\n打开 https://Kisky3.github.io/react-todolist 检验是否能预览\n\n<img src=\"./3.png\" style=\"width:500px;margin:40px 0\">\n","slug":"Pages","published":1,"updated":"2019-11-23T23:54:38.000Z","layout":"post","photos":[],"link":"","_id":"ck3it6k2b001lteyim6n3qzx3","content":"<p>把React项目部署到Github Page线上环境</p>\n<a id=\"more\"></a>\n\n<h4 id=\"1-在github上新建仓库\"><a href=\"#1-在github上新建仓库\" class=\"headerlink\" title=\"1. 在github上新建仓库\"></a>1. 在github上新建仓库</h4><p>貌似必须要新建仓库，如果在已有仓库的分支下想预览不成功（因为并不是master，所以也会对别的分支有影响.</p>\n<hr>\n<h4 id=\"2-将本地代码同步\"><a href=\"#2-将本地代码同步\" class=\"headerlink\" title=\"2. 将本地代码同步\"></a>2. 将本地代码同步</h4><p>参照新建仓库里的说明初始化并push就好.</p>\n<hr>\n<h4 id=\"3-修改本地React项目的-package-json文件\"><a href=\"#3-修改本地React项目的-package-json文件\" class=\"headerlink\" title=\"3. 修改本地React项目的 package.json文件\"></a>3. 修改本地React项目的 package.json文件</h4><h5 id=\"配置homepage\"><a href=\"#配置homepage\" class=\"headerlink\" title=\"配置homepage\"></a>配置homepage</h5><p>这里需要把你的github仓库地址稍微修改一下，例如我的”homepage”: “<a href=\"https://Kisky3.github.io/react-todolist&quot;\">https://Kisky3.github.io/react-todolist&quot;</a>.</p>\n<h5 id=\"配置发布选项\"><a href=\"#配置发布选项\" class=\"headerlink\" title=\"配置发布选项\"></a>配置发布选项</h5><p>在scripts里添加以下两行</p>\n<p>predeploy:是将你的项目预编译成静态文件放在build文件夹<br>deploy:是使用gh-pages 部署你的build文件夹下的内容.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"string\">\"predeploy\"</span>: <span class=\"string\">\"npm run build\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"deploy\"</span>: <span class=\"string\">\"gh-pages -d build\"</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>修改后的package.json</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"todolist\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"0.1.0\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"homepage\"</span>: <span class=\"string\">\"https://Kisky3.github.io/react-todolist\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"private\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">\"dependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"react\"</span>: <span class=\"string\">\"^16.4.1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"react-dom\"</span>: <span class=\"string\">\"^16.4.1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"react-scripts\"</span>: <span class=\"string\">\"1.1.4\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"start\"</span>: <span class=\"string\">\"react-scripts start\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"build\"</span>: <span class=\"string\">\"react-scripts build\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"react-scripts test --env=jsdom\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"eject\"</span>: <span class=\"string\">\"react-scripts eject\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"predeploy\"</span>: <span class=\"string\">\"npm run build\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"deploy\"</span>: <span class=\"string\">\"gh-pages -d build\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"gh-pages\"</span>: <span class=\"string\">\"^2.0.1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"browserslist\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"production\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"&gt;0.2%\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"not dead\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"not op_mini all\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">\"development\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"last 1 chrome version\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"last 1 firefox version\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"last 1 safari version\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"安装-gh-pages\"><a href=\"#安装-gh-pages\" class=\"headerlink\" title=\"安装 gh-pages\"></a>安装 gh-pages</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gh-pages --save-dev</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"部署项目到github-page上\"><a href=\"#部署项目到github-page上\" class=\"headerlink\" title=\"部署项目到github page上\"></a>部署项目到github page上</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run deploy</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"4-GIthub上的分支切换\"><a href=\"#4-GIthub上的分支切换\" class=\"headerlink\" title=\"4. GIthub上的分支切换\"></a>4. GIthub上的分支切换</h4><p>配置完之后，打开github上的仓库，你会发现原先的项目多了一个gh-pages分支，里面存放的是我们打包编译完成之后的静态文件。<br>一定要手动切换到gh-pages分支 而不是master！</p>\n<img src=\"./1.png\" style=\"width:500px;margin:40px 0\">\n\n<p>再切换到setting下，我们可以看到现在项目已经被成功部署到 <a href=\"https://Kisky3.github.io/react-todolist\">https://Kisky3.github.io/react-todolist</a> 上了</p>\n<img src=\"./2.png\" style=\"width:500px;margin:40px 0\">\n\n<p>打开 <a href=\"https://Kisky3.github.io/react-todolist\">https://Kisky3.github.io/react-todolist</a> 检验是否能预览</p>\n<img src=\"./3.png\" style=\"width:500px;margin:40px 0\">\n","site":{"data":{}},"thumbnailImageUrl":"https://kisky3.github.io/2019/09/30/Pages/20190930.png","excerpt":"<p>把React项目部署到Github Page线上环境</p>","more":"<h4 id=\"1-在github上新建仓库\"><a href=\"#1-在github上新建仓库\" class=\"headerlink\" title=\"1. 在github上新建仓库\"></a>1. 在github上新建仓库</h4><p>貌似必须要新建仓库，如果在已有仓库的分支下想预览不成功（因为并不是master，所以也会对别的分支有影响.</p>\n<hr>\n<h4 id=\"2-将本地代码同步\"><a href=\"#2-将本地代码同步\" class=\"headerlink\" title=\"2. 将本地代码同步\"></a>2. 将本地代码同步</h4><p>参照新建仓库里的说明初始化并push就好.</p>\n<hr>\n<h4 id=\"3-修改本地React项目的-package-json文件\"><a href=\"#3-修改本地React项目的-package-json文件\" class=\"headerlink\" title=\"3. 修改本地React项目的 package.json文件\"></a>3. 修改本地React项目的 package.json文件</h4><h5 id=\"配置homepage\"><a href=\"#配置homepage\" class=\"headerlink\" title=\"配置homepage\"></a>配置homepage</h5><p>这里需要把你的github仓库地址稍微修改一下，例如我的”homepage”: “<a href=\"https://Kisky3.github.io/react-todolist&quot;\">https://Kisky3.github.io/react-todolist&quot;</a>.</p>\n<h5 id=\"配置发布选项\"><a href=\"#配置发布选项\" class=\"headerlink\" title=\"配置发布选项\"></a>配置发布选项</h5><p>在scripts里添加以下两行</p>\n<p>predeploy:是将你的项目预编译成静态文件放在build文件夹<br>deploy:是使用gh-pages 部署你的build文件夹下的内容.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"string\">\"predeploy\"</span>: <span class=\"string\">\"npm run build\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"deploy\"</span>: <span class=\"string\">\"gh-pages -d build\"</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>修改后的package.json</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"todolist\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"0.1.0\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"homepage\"</span>: <span class=\"string\">\"https://Kisky3.github.io/react-todolist\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"private\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">\"dependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"react\"</span>: <span class=\"string\">\"^16.4.1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"react-dom\"</span>: <span class=\"string\">\"^16.4.1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"react-scripts\"</span>: <span class=\"string\">\"1.1.4\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"start\"</span>: <span class=\"string\">\"react-scripts start\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"build\"</span>: <span class=\"string\">\"react-scripts build\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"react-scripts test --env=jsdom\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"eject\"</span>: <span class=\"string\">\"react-scripts eject\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"predeploy\"</span>: <span class=\"string\">\"npm run build\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"deploy\"</span>: <span class=\"string\">\"gh-pages -d build\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"gh-pages\"</span>: <span class=\"string\">\"^2.0.1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"browserslist\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"production\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"&gt;0.2%\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"not dead\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"not op_mini all\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">\"development\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"last 1 chrome version\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"last 1 firefox version\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"last 1 safari version\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"安装-gh-pages\"><a href=\"#安装-gh-pages\" class=\"headerlink\" title=\"安装 gh-pages\"></a>安装 gh-pages</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gh-pages --save-dev</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"部署项目到github-page上\"><a href=\"#部署项目到github-page上\" class=\"headerlink\" title=\"部署项目到github page上\"></a>部署项目到github page上</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run deploy</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"4-GIthub上的分支切换\"><a href=\"#4-GIthub上的分支切换\" class=\"headerlink\" title=\"4. GIthub上的分支切换\"></a>4. GIthub上的分支切换</h4><p>配置完之后，打开github上的仓库，你会发现原先的项目多了一个gh-pages分支，里面存放的是我们打包编译完成之后的静态文件。<br>一定要手动切换到gh-pages分支 而不是master！</p>\n<img src=\"./1.png\" style=\"width:500px;margin:40px 0\">\n\n<p>再切换到setting下，我们可以看到现在项目已经被成功部署到 <a href=\"https://Kisky3.github.io/react-todolist\">https://Kisky3.github.io/react-todolist</a> 上了</p>\n<img src=\"./2.png\" style=\"width:500px;margin:40px 0\">\n\n<p>打开 <a href=\"https://Kisky3.github.io/react-todolist\">https://Kisky3.github.io/react-todolist</a> 检验是否能预览</p>\n<img src=\"./3.png\" style=\"width:500px;margin:40px 0\">"},{"title":"About React Virtual Dom And JSX","date":"2019-07-04T13:47:43.000Z","clearReading":true,"thumbnailImage":"20190704.png","thumbnailImagePosition":"left","coverImage":"cover.jpg","coverCaption":"Hello World, Hello Programming","coverSize":"partial","comments":0,"_content":"\n关于React的虚拟Dom和JSX\n<!--more-->\n### React的实行理念 \n首先JS的DOM操作一般经历了从页面获取已存在的元素，进行修改操作，再渲染回页面这三个过程。\n比如页面里有一个span标签，JS想要编辑的时候需要先从页面获取标签(利用id等),进行操作(数字加1),再将编辑后的数据返回页面（innerText等）。\n<img src=\"./1.png\" style=\"width:600px;margin:40px 0\">\n\n而react有一种更先进的理念，也就相当于不从Dom获取数据，而是只是向页面更新数据。\n比如一开始页面里什么都没有，react里有一个number变量，并且在JSX里生成一个span的对象（虚拟Dom),再将对象生同步成到页面中，JSX里进行span内容的修改操作，然后再一次自动更新到页面的span里。\n<img src=\"./2.png\" style=\"width:600px;margin:40px 0\">\n\nreact在生成新的虚拟Dom之后,会与旧的虚拟Dom的内容进行比较,再将有变化的那一部分,同步到页面中。\n而进行内部对象span的更新速度远比JS直接更新Dom的速度要快很多,并且少了从页面获取元素的这一过程,导致react的效率和性能都高于普通JS。\n\n### 关于JSX\nJSX不是html,而是相当于利用Html的形式来更简便地写JS。\n\nJSX就是将下面的语法2翻译成上面的JS语法1，这相当于以简便的Html的形式来写JS，这里包含了几个虚拟Dom，也就是表示DOM节点的对象。\n```JS\n// JS语法1\nfunction render(){\n  let h = React.createElement;\n  let div = \n  h('div',{className:'parent'},\n    h('span',{className:'red'},number),\n    h('button',{onClick:onClickButton},'+'),\n    h('button',{onClickButton},'-')\n  )\n}\n\n// 语法2\n<div className=\"parent\">\n  <span className=\"red\">{number}</span>\n  <button onClick = {onClickButton}>+</button>\n  <button onClick = {onClickButton2}>-</button>\n</div>\n```\n不同的是将对象和函数用括号括起来{},然后JS就会从当前作用域往上找相应的变量。\n- class要写作className（有时两种写法都可以）。\n- 在onClick = {onClickButton}时要向react传递一个对象而不是返回值，相当于React.createElement('button',{onClick:onClickButton}),所以不加括号。\n\n完整代码例子：\n\n```JS\nlet number = 0;\n\nlet onClickButton = ()=> {\n  number +=1\n  render();\n}\n\nlet onClickButton2 = ()=> {\n  number -= 1\n  render();\n}\n\n// JS语法1\nfunction render(){\n  let h = React.createElement;\n  let div = \n  h('div',{className:'parent'},\n    h('span',{className:'red'},number),\n    h('button',{onClick:onClickButton},'+'),\n    h('button',{onClickButton},'-')\n  )\n}\n\n// 语法2\n<div className=\"parent\">\n  <span className=\"red\">{number}</span>\n  <button onClick = {onClickButton}>+</button>\n  <button onClick = {onClickButton2}>-</button>\n</div>\n\nReactDOM.render(div,document.querySelector('#root'));\n```\n\nJSX的翻译机制\n下面的左右代码是等价的。\n<img src=\"./3.png\" style=\"width:800px;margin:40px 0\">\n","source":"_posts/React-Virtual-Dom.md","raw":"---\ntitle: About React Virtual Dom And JSX\ndate: 2019-07-04 22:47:43\ntags:\n- React\n- Virtual Dom\n- JSX\nclearReading: true\nthumbnailImage: 20190704.png\nthumbnailImagePosition: left\ncoverImage: cover.jpg\ncoverCaption: \"Hello World, Hello Programming\"\ncoverSize: partial\ncomments: false\ncategories: Front-end Knowledge\n---\n\n关于React的虚拟Dom和JSX\n<!--more-->\n### React的实行理念 \n首先JS的DOM操作一般经历了从页面获取已存在的元素，进行修改操作，再渲染回页面这三个过程。\n比如页面里有一个span标签，JS想要编辑的时候需要先从页面获取标签(利用id等),进行操作(数字加1),再将编辑后的数据返回页面（innerText等）。\n<img src=\"./1.png\" style=\"width:600px;margin:40px 0\">\n\n而react有一种更先进的理念，也就相当于不从Dom获取数据，而是只是向页面更新数据。\n比如一开始页面里什么都没有，react里有一个number变量，并且在JSX里生成一个span的对象（虚拟Dom),再将对象生同步成到页面中，JSX里进行span内容的修改操作，然后再一次自动更新到页面的span里。\n<img src=\"./2.png\" style=\"width:600px;margin:40px 0\">\n\nreact在生成新的虚拟Dom之后,会与旧的虚拟Dom的内容进行比较,再将有变化的那一部分,同步到页面中。\n而进行内部对象span的更新速度远比JS直接更新Dom的速度要快很多,并且少了从页面获取元素的这一过程,导致react的效率和性能都高于普通JS。\n\n### 关于JSX\nJSX不是html,而是相当于利用Html的形式来更简便地写JS。\n\nJSX就是将下面的语法2翻译成上面的JS语法1，这相当于以简便的Html的形式来写JS，这里包含了几个虚拟Dom，也就是表示DOM节点的对象。\n```JS\n// JS语法1\nfunction render(){\n  let h = React.createElement;\n  let div = \n  h('div',{className:'parent'},\n    h('span',{className:'red'},number),\n    h('button',{onClick:onClickButton},'+'),\n    h('button',{onClickButton},'-')\n  )\n}\n\n// 语法2\n<div className=\"parent\">\n  <span className=\"red\">{number}</span>\n  <button onClick = {onClickButton}>+</button>\n  <button onClick = {onClickButton2}>-</button>\n</div>\n```\n不同的是将对象和函数用括号括起来{},然后JS就会从当前作用域往上找相应的变量。\n- class要写作className（有时两种写法都可以）。\n- 在onClick = {onClickButton}时要向react传递一个对象而不是返回值，相当于React.createElement('button',{onClick:onClickButton}),所以不加括号。\n\n完整代码例子：\n\n```JS\nlet number = 0;\n\nlet onClickButton = ()=> {\n  number +=1\n  render();\n}\n\nlet onClickButton2 = ()=> {\n  number -= 1\n  render();\n}\n\n// JS语法1\nfunction render(){\n  let h = React.createElement;\n  let div = \n  h('div',{className:'parent'},\n    h('span',{className:'red'},number),\n    h('button',{onClick:onClickButton},'+'),\n    h('button',{onClickButton},'-')\n  )\n}\n\n// 语法2\n<div className=\"parent\">\n  <span className=\"red\">{number}</span>\n  <button onClick = {onClickButton}>+</button>\n  <button onClick = {onClickButton2}>-</button>\n</div>\n\nReactDOM.render(div,document.querySelector('#root'));\n```\n\nJSX的翻译机制\n下面的左右代码是等价的。\n<img src=\"./3.png\" style=\"width:800px;margin:40px 0\">\n","slug":"React-Virtual-Dom","published":1,"updated":"2019-11-23T23:54:38.000Z","layout":"post","photos":[],"link":"","_id":"ck3it6k2b001oteyiknakn1w4","content":"<p>关于React的虚拟Dom和JSX</p>\n<a id=\"more\"></a>\n<h3 id=\"React的实行理念\"><a href=\"#React的实行理念\" class=\"headerlink\" title=\"React的实行理念\"></a>React的实行理念</h3><p>首先JS的DOM操作一般经历了从页面获取已存在的元素，进行修改操作，再渲染回页面这三个过程。<br>比如页面里有一个span标签，JS想要编辑的时候需要先从页面获取标签(利用id等),进行操作(数字加1),再将编辑后的数据返回页面（innerText等）。<br><img src=\"./1.png\" style=\"width:600px;margin:40px 0\"></p>\n<p>而react有一种更先进的理念，也就相当于不从Dom获取数据，而是只是向页面更新数据。<br>比如一开始页面里什么都没有，react里有一个number变量，并且在JSX里生成一个span的对象（虚拟Dom),再将对象生同步成到页面中，JSX里进行span内容的修改操作，然后再一次自动更新到页面的span里。<br><img src=\"./2.png\" style=\"width:600px;margin:40px 0\"></p>\n<p>react在生成新的虚拟Dom之后,会与旧的虚拟Dom的内容进行比较,再将有变化的那一部分,同步到页面中。<br>而进行内部对象span的更新速度远比JS直接更新Dom的速度要快很多,并且少了从页面获取元素的这一过程,导致react的效率和性能都高于普通JS。</p>\n<h3 id=\"关于JSX\"><a href=\"#关于JSX\" class=\"headerlink\" title=\"关于JSX\"></a>关于JSX</h3><p>JSX不是html,而是相当于利用Html的形式来更简便地写JS。</p>\n<p>JSX就是将下面的语法2翻译成上面的JS语法1，这相当于以简便的Html的形式来写JS，这里包含了几个虚拟Dom，也就是表示DOM节点的对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// JS语法1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> h = React.createElement;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> div = </span><br><span class=\"line\">  h(<span class=\"string\">'div'</span>,&#123;<span class=\"attr\">className</span>:<span class=\"string\">'parent'</span>&#125;,</span><br><span class=\"line\">    h(<span class=\"string\">'span'</span>,&#123;<span class=\"attr\">className</span>:<span class=\"string\">'red'</span>&#125;,number),</span><br><span class=\"line\">    h(<span class=\"string\">'button'</span>,&#123;<span class=\"attr\">onClick</span>:onClickButton&#125;,<span class=\"string\">'+'</span>),</span><br><span class=\"line\">    h(<span class=\"string\">'button'</span>,&#123;onClickButton&#125;,<span class=\"string\">'-'</span>)</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 语法2</span></span><br><span class=\"line\">&lt;div className=<span class=\"string\">\"parent\"</span>&gt;</span><br><span class=\"line\">  &lt;span className=<span class=\"string\">\"red\"</span>&gt;&#123;number&#125;&lt;<span class=\"regexp\">/span&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;button onClick = &#123;onClickButton&#125;&gt;+&lt;/</span>button&gt;</span><br><span class=\"line\">  &lt;button onClick = &#123;onClickButton2&#125;&gt;-<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>不同的是将对象和函数用括号括起来{},然后JS就会从当前作用域往上找相应的变量。</p>\n<ul>\n<li>class要写作className（有时两种写法都可以）。</li>\n<li>在onClick = {onClickButton}时要向react传递一个对象而不是返回值，相当于React.createElement(‘button’,{onClick:onClickButton}),所以不加括号。</li>\n</ul>\n<p>完整代码例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> number = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> onClickButton = <span class=\"function\"><span class=\"params\">()</span>=&gt;</span> &#123;</span><br><span class=\"line\">  number +=<span class=\"number\">1</span></span><br><span class=\"line\">  render();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> onClickButton2 = <span class=\"function\"><span class=\"params\">()</span>=&gt;</span> &#123;</span><br><span class=\"line\">  number -= <span class=\"number\">1</span></span><br><span class=\"line\">  render();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// JS语法1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> h = React.createElement;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> div = </span><br><span class=\"line\">  h(<span class=\"string\">'div'</span>,&#123;<span class=\"attr\">className</span>:<span class=\"string\">'parent'</span>&#125;,</span><br><span class=\"line\">    h(<span class=\"string\">'span'</span>,&#123;<span class=\"attr\">className</span>:<span class=\"string\">'red'</span>&#125;,number),</span><br><span class=\"line\">    h(<span class=\"string\">'button'</span>,&#123;<span class=\"attr\">onClick</span>:onClickButton&#125;,<span class=\"string\">'+'</span>),</span><br><span class=\"line\">    h(<span class=\"string\">'button'</span>,&#123;onClickButton&#125;,<span class=\"string\">'-'</span>)</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 语法2</span></span><br><span class=\"line\">&lt;div className=<span class=\"string\">\"parent\"</span>&gt;</span><br><span class=\"line\">  &lt;span className=<span class=\"string\">\"red\"</span>&gt;&#123;number&#125;&lt;<span class=\"regexp\">/span&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;button onClick = &#123;onClickButton&#125;&gt;+&lt;/</span>button&gt;</span><br><span class=\"line\">  &lt;button onClick = &#123;onClickButton2&#125;&gt;-<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">ReactDOM.render(div,document.querySelector('#root'));</span></span><br></pre></td></tr></table></figure>\n\n<p>JSX的翻译机制<br>下面的左右代码是等价的。<br><img src=\"./3.png\" style=\"width:800px;margin:40px 0\"></p>\n","site":{"data":{}},"thumbnailImageUrl":"https://kisky3.github.io/2019/07/04/React-Virtual-Dom/20190704.png","excerpt":"<p>关于React的虚拟Dom和JSX</p>","more":"<h3 id=\"React的实行理念\"><a href=\"#React的实行理念\" class=\"headerlink\" title=\"React的实行理念\"></a>React的实行理念</h3><p>首先JS的DOM操作一般经历了从页面获取已存在的元素，进行修改操作，再渲染回页面这三个过程。<br>比如页面里有一个span标签，JS想要编辑的时候需要先从页面获取标签(利用id等),进行操作(数字加1),再将编辑后的数据返回页面（innerText等）。<br><img src=\"./1.png\" style=\"width:600px;margin:40px 0\"></p>\n<p>而react有一种更先进的理念，也就相当于不从Dom获取数据，而是只是向页面更新数据。<br>比如一开始页面里什么都没有，react里有一个number变量，并且在JSX里生成一个span的对象（虚拟Dom),再将对象生同步成到页面中，JSX里进行span内容的修改操作，然后再一次自动更新到页面的span里。<br><img src=\"./2.png\" style=\"width:600px;margin:40px 0\"></p>\n<p>react在生成新的虚拟Dom之后,会与旧的虚拟Dom的内容进行比较,再将有变化的那一部分,同步到页面中。<br>而进行内部对象span的更新速度远比JS直接更新Dom的速度要快很多,并且少了从页面获取元素的这一过程,导致react的效率和性能都高于普通JS。</p>\n<h3 id=\"关于JSX\"><a href=\"#关于JSX\" class=\"headerlink\" title=\"关于JSX\"></a>关于JSX</h3><p>JSX不是html,而是相当于利用Html的形式来更简便地写JS。</p>\n<p>JSX就是将下面的语法2翻译成上面的JS语法1，这相当于以简便的Html的形式来写JS，这里包含了几个虚拟Dom，也就是表示DOM节点的对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// JS语法1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> h = React.createElement;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> div = </span><br><span class=\"line\">  h(<span class=\"string\">'div'</span>,&#123;<span class=\"attr\">className</span>:<span class=\"string\">'parent'</span>&#125;,</span><br><span class=\"line\">    h(<span class=\"string\">'span'</span>,&#123;<span class=\"attr\">className</span>:<span class=\"string\">'red'</span>&#125;,number),</span><br><span class=\"line\">    h(<span class=\"string\">'button'</span>,&#123;<span class=\"attr\">onClick</span>:onClickButton&#125;,<span class=\"string\">'+'</span>),</span><br><span class=\"line\">    h(<span class=\"string\">'button'</span>,&#123;onClickButton&#125;,<span class=\"string\">'-'</span>)</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 语法2</span></span><br><span class=\"line\">&lt;div className=<span class=\"string\">\"parent\"</span>&gt;</span><br><span class=\"line\">  &lt;span className=<span class=\"string\">\"red\"</span>&gt;&#123;number&#125;&lt;<span class=\"regexp\">/span&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;button onClick = &#123;onClickButton&#125;&gt;+&lt;/</span>button&gt;</span><br><span class=\"line\">  &lt;button onClick = &#123;onClickButton2&#125;&gt;-<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>不同的是将对象和函数用括号括起来{},然后JS就会从当前作用域往上找相应的变量。</p>\n<ul>\n<li>class要写作className（有时两种写法都可以）。</li>\n<li>在onClick = {onClickButton}时要向react传递一个对象而不是返回值，相当于React.createElement(‘button’,{onClick:onClickButton}),所以不加括号。</li>\n</ul>\n<p>完整代码例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> number = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> onClickButton = <span class=\"function\"><span class=\"params\">()</span>=&gt;</span> &#123;</span><br><span class=\"line\">  number +=<span class=\"number\">1</span></span><br><span class=\"line\">  render();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> onClickButton2 = <span class=\"function\"><span class=\"params\">()</span>=&gt;</span> &#123;</span><br><span class=\"line\">  number -= <span class=\"number\">1</span></span><br><span class=\"line\">  render();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// JS语法1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> h = React.createElement;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> div = </span><br><span class=\"line\">  h(<span class=\"string\">'div'</span>,&#123;<span class=\"attr\">className</span>:<span class=\"string\">'parent'</span>&#125;,</span><br><span class=\"line\">    h(<span class=\"string\">'span'</span>,&#123;<span class=\"attr\">className</span>:<span class=\"string\">'red'</span>&#125;,number),</span><br><span class=\"line\">    h(<span class=\"string\">'button'</span>,&#123;<span class=\"attr\">onClick</span>:onClickButton&#125;,<span class=\"string\">'+'</span>),</span><br><span class=\"line\">    h(<span class=\"string\">'button'</span>,&#123;onClickButton&#125;,<span class=\"string\">'-'</span>)</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 语法2</span></span><br><span class=\"line\">&lt;div className=<span class=\"string\">\"parent\"</span>&gt;</span><br><span class=\"line\">  &lt;span className=<span class=\"string\">\"red\"</span>&gt;&#123;number&#125;&lt;<span class=\"regexp\">/span&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;button onClick = &#123;onClickButton&#125;&gt;+&lt;/</span>button&gt;</span><br><span class=\"line\">  &lt;button onClick = &#123;onClickButton2&#125;&gt;-<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">ReactDOM.render(div,document.querySelector('#root'));</span></span><br></pre></td></tr></table></figure>\n\n<p>JSX的翻译机制<br>下面的左右代码是等价的。<br><img src=\"./3.png\" style=\"width:800px;margin:40px 0\"></p>"},{"title":"Webpack Getting Started","date":"2019-09-14T09:28:10.000Z","clearReading":true,"thumbnailImage":"20190914.png","thumbnailImagePosition":"left","coverImage":"cover.jpg","coverCaption":"Hello World, Hello Programming","coverSize":"partial","comments":0,"_content":"\nWebpack的环境设置\n<!--more-->\n\n2018年8月25日更新，目前 webpack 已经更新值 4.17.1！不用配置很复杂的config也能运行了!!\n今天搭建webpack环境时顺便记录一下.\n\n### 什么是webpack\n>webpack is used to compile JavaScript modules. Once installed, you can interface with webpack either from its CLI or API. If you're still new to webpack, please read through the core concepts and this comparison to learn why you might use it over the other tools that are out in the community.\n\n<br>\nWebPack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其转换和打包为合适的格式供浏览器使用。\n\n***\n\n### 为什么要使用webpack\n很多人开发了各种优秀的 JavaScript 模块或组件，我们不想重复发明轮子，而是想直接利用别人的模块，就是类似 require 或 include 这样的机制，把别人的模块引入进来，这就是modules(模块化).\n但是 JavaScript 又没有 类或包 这样的概念，那应该如何做呢？如何去引入别人的模块？引入之后保证各种依赖关系不出错？这就是 webpack 要解决的问题。\nWebpack的处理速度更快更直接，能打包更多不同类型的文件。\n\n[Webpack与其他打包工具的比较](https://webpack.js.org/comparison/)\n[Webpack的核心原理](https://webpack.js.org/concepts/)\n\n***\n\n### Webpack的安装（版本4.40.1）\n1.首先创建自己的文件夹，初始化npm，安装本地化webpack并安装webpack-cli(一个能在命令行运行webpack的工具)\n\n```JS\nmkdir webpack-demo\ncd webpack-demo\nnpm init -y\nnpm install webpack --save-dev\nnpm install webpack-cli --save-dev\n```\n\n2.创建以下的文件结构以及内容\n\nproject:\n```JS\n  webpack-demo\n  |- package.json\n+ |- index.html\n+ |- /src\n+   |- index.js\n```\n\nsrc/index.js\n```JS\nfunction component() {\n  const element = document.createElement('div');\n\n  // Lodash, currently included via a script, is required for this line to work\n  element.innerHTML = _.join(['Hello', 'webpack'], ' ');\n\n  return element;\n}\n\ndocument.body.appendChild(component());\n```\n\nimdex.html\n```JS\n<!doctype html>\n<html>\n  <head>\n    <title>Getting Started</title>\n    <script src='https://unpkg.com/lodash@4.16.6'></script>\n  </head>\n  <body>\n    <script src='./src/index.js'></script>\n  </body>\n</html>\n```\n\n我们还想需要编辑package.json文件，使其我们的package私有化，并同时移除main入口，防止代码误公开。\n\npackage.json\n```JS\n{\n    \"name\": \"webpack-demo\",\n    \"version\": \"1.0.0\",\n    \"description\": \"\",\n+   \"private\": true,\n-   \"main\": \"index.js\",\n    \"scripts\": {\n      \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n    },\n    \"keywords\": [],\n    \"author\": \"\",\n    \"license\": \"ISC\",\n    \"devDependencies\": {\n      \"webpack\": \"^4.20.2\",\n      \"webpack-cli\": \"^3.1.2\"\n    },\n    \"dependencies\": {}\n  }\n```\n\n这个例子与&lt;script&gt;标签有默认依存关系，我们的index.js文件是依存于lodash并且在运行前是包含在网页里的.\n这是因为index.js并没有明确声明需要lodash，它只是假定默认了全局变量'_'的存在.\n所以我们需要创建打包.\n\n***\n\n### 创建打包\n在以上的步骤中我们微调整了文件树结构，将源代码从发布代码中分离开.\n源代码就是我们可以直接编辑和修改的代码，发布代码就是通过压缩和最优化之后,在打包时最终输出的代码.它最终将会被加载到浏览器上.\n\nproject\n```JS\n  webpack-demo\n  |- package.json\n+ |- /dist\n+   |- index.html\n- |- index.html\n  |- /src\n    |- index.js\n```\n\n为了打包依存于index.js的lodash，我们需要安装本地包.\n```JS\nnpm install --save lodash\n```\n\n然后引用lodash到我们的script里\nsrc/index.js\n```JS\n+ import _ from 'lodash';\n+\n  function component() {\n    const element = document.createElement('div');\n\n-   // Lodash, currently included via a script, is required for this line to work\n    element.innerHTML = _.join(['Hello', 'webpack'], ' ');\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n```\n现在，因为我们已经打包了script,我们需要更新index.html文件，删除原有的lodash&lt;script&gt;并import之后加入另一个&lt;script&gt;来加载打包.(替换/src文件)\n\n***\ndist/index.html\n```JS\n  <!doctype html>\n  <html>\n   <head>\n     <title>Getting Started</title>\n-    <script src=\"https://unpkg.com/lodash@4.16.6\"></script>\n   </head>\n   <body>\n-    <script src=\"./src/index.js\"></script>\n+    <script src=\"main.js\"></script>\n   </body>\n  </html>\n```\n在这个设置中，index.js 显式要求引入的 lodash 必须存在，然后将它绑定为 _（没有全局作用域污染）。通过声明模块所需的依赖，webpack 能够利用这些信息去构建依赖图，然后使用图生成一个会以正确顺序执行的优化 bundle。\n\n可以这样说，执行 npx webpack，会将我们的脚本 src/index.js 作为 入口起点，也会生成 dist/main.js 作为 输出。Node 8.2/npm 5.2.0 以上版本提供的 npx 命令，可以运行在开始安装的 webpack package 中的 webpack 二进制文件（即 ./node_modules/.bin/webpack）\n\n***\n```JS\nnpx webpack\n\n...\nBuilt at: 13/06/2018 11:52:07\n  Asset      Size  Chunks             Chunk Names\nmain.js  70.4 KiB       0  [emitted]  main\n...\n\nWARNING in configuration(配置警告)\nThe 'mode' option has not been set, webpack will fallback to 'production' for this value. Set 'mode' option to 'development' or 'production' to enable defaults for each environment.\nYou can also set it to 'none' to disable any default behavior. Learn more: https://webpack.js.org/concepts/mode/('mode' 选项还未设置，webpack 会将其值回退至 'production'。将 'mode' 选项设置为 'development' 或 'production'，来启用对应环境的默认优化设置。)\n```\n在浏览器中打开 index.html，如果一切正常，你应该能看到以下文本：'Hello webpack'\n","source":"_posts/Started.md","raw":"---\ntitle: Webpack Getting Started\ndate: 2019-09-14 18:28:10\ntags:\n- webpack\n- getting started\nclearReading: true\nthumbnailImage: 20190914.png\nthumbnailImagePosition: left\ncoverImage: cover.jpg\ncoverCaption: \"Hello World, Hello Programming\"\ncoverSize: partial\ncomments: false\ncategories: System Setting\n---\n\nWebpack的环境设置\n<!--more-->\n\n2018年8月25日更新，目前 webpack 已经更新值 4.17.1！不用配置很复杂的config也能运行了!!\n今天搭建webpack环境时顺便记录一下.\n\n### 什么是webpack\n>webpack is used to compile JavaScript modules. Once installed, you can interface with webpack either from its CLI or API. If you're still new to webpack, please read through the core concepts and this comparison to learn why you might use it over the other tools that are out in the community.\n\n<br>\nWebPack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其转换和打包为合适的格式供浏览器使用。\n\n***\n\n### 为什么要使用webpack\n很多人开发了各种优秀的 JavaScript 模块或组件，我们不想重复发明轮子，而是想直接利用别人的模块，就是类似 require 或 include 这样的机制，把别人的模块引入进来，这就是modules(模块化).\n但是 JavaScript 又没有 类或包 这样的概念，那应该如何做呢？如何去引入别人的模块？引入之后保证各种依赖关系不出错？这就是 webpack 要解决的问题。\nWebpack的处理速度更快更直接，能打包更多不同类型的文件。\n\n[Webpack与其他打包工具的比较](https://webpack.js.org/comparison/)\n[Webpack的核心原理](https://webpack.js.org/concepts/)\n\n***\n\n### Webpack的安装（版本4.40.1）\n1.首先创建自己的文件夹，初始化npm，安装本地化webpack并安装webpack-cli(一个能在命令行运行webpack的工具)\n\n```JS\nmkdir webpack-demo\ncd webpack-demo\nnpm init -y\nnpm install webpack --save-dev\nnpm install webpack-cli --save-dev\n```\n\n2.创建以下的文件结构以及内容\n\nproject:\n```JS\n  webpack-demo\n  |- package.json\n+ |- index.html\n+ |- /src\n+   |- index.js\n```\n\nsrc/index.js\n```JS\nfunction component() {\n  const element = document.createElement('div');\n\n  // Lodash, currently included via a script, is required for this line to work\n  element.innerHTML = _.join(['Hello', 'webpack'], ' ');\n\n  return element;\n}\n\ndocument.body.appendChild(component());\n```\n\nimdex.html\n```JS\n<!doctype html>\n<html>\n  <head>\n    <title>Getting Started</title>\n    <script src='https://unpkg.com/lodash@4.16.6'></script>\n  </head>\n  <body>\n    <script src='./src/index.js'></script>\n  </body>\n</html>\n```\n\n我们还想需要编辑package.json文件，使其我们的package私有化，并同时移除main入口，防止代码误公开。\n\npackage.json\n```JS\n{\n    \"name\": \"webpack-demo\",\n    \"version\": \"1.0.0\",\n    \"description\": \"\",\n+   \"private\": true,\n-   \"main\": \"index.js\",\n    \"scripts\": {\n      \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n    },\n    \"keywords\": [],\n    \"author\": \"\",\n    \"license\": \"ISC\",\n    \"devDependencies\": {\n      \"webpack\": \"^4.20.2\",\n      \"webpack-cli\": \"^3.1.2\"\n    },\n    \"dependencies\": {}\n  }\n```\n\n这个例子与&lt;script&gt;标签有默认依存关系，我们的index.js文件是依存于lodash并且在运行前是包含在网页里的.\n这是因为index.js并没有明确声明需要lodash，它只是假定默认了全局变量'_'的存在.\n所以我们需要创建打包.\n\n***\n\n### 创建打包\n在以上的步骤中我们微调整了文件树结构，将源代码从发布代码中分离开.\n源代码就是我们可以直接编辑和修改的代码，发布代码就是通过压缩和最优化之后,在打包时最终输出的代码.它最终将会被加载到浏览器上.\n\nproject\n```JS\n  webpack-demo\n  |- package.json\n+ |- /dist\n+   |- index.html\n- |- index.html\n  |- /src\n    |- index.js\n```\n\n为了打包依存于index.js的lodash，我们需要安装本地包.\n```JS\nnpm install --save lodash\n```\n\n然后引用lodash到我们的script里\nsrc/index.js\n```JS\n+ import _ from 'lodash';\n+\n  function component() {\n    const element = document.createElement('div');\n\n-   // Lodash, currently included via a script, is required for this line to work\n    element.innerHTML = _.join(['Hello', 'webpack'], ' ');\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n```\n现在，因为我们已经打包了script,我们需要更新index.html文件，删除原有的lodash&lt;script&gt;并import之后加入另一个&lt;script&gt;来加载打包.(替换/src文件)\n\n***\ndist/index.html\n```JS\n  <!doctype html>\n  <html>\n   <head>\n     <title>Getting Started</title>\n-    <script src=\"https://unpkg.com/lodash@4.16.6\"></script>\n   </head>\n   <body>\n-    <script src=\"./src/index.js\"></script>\n+    <script src=\"main.js\"></script>\n   </body>\n  </html>\n```\n在这个设置中，index.js 显式要求引入的 lodash 必须存在，然后将它绑定为 _（没有全局作用域污染）。通过声明模块所需的依赖，webpack 能够利用这些信息去构建依赖图，然后使用图生成一个会以正确顺序执行的优化 bundle。\n\n可以这样说，执行 npx webpack，会将我们的脚本 src/index.js 作为 入口起点，也会生成 dist/main.js 作为 输出。Node 8.2/npm 5.2.0 以上版本提供的 npx 命令，可以运行在开始安装的 webpack package 中的 webpack 二进制文件（即 ./node_modules/.bin/webpack）\n\n***\n```JS\nnpx webpack\n\n...\nBuilt at: 13/06/2018 11:52:07\n  Asset      Size  Chunks             Chunk Names\nmain.js  70.4 KiB       0  [emitted]  main\n...\n\nWARNING in configuration(配置警告)\nThe 'mode' option has not been set, webpack will fallback to 'production' for this value. Set 'mode' option to 'development' or 'production' to enable defaults for each environment.\nYou can also set it to 'none' to disable any default behavior. Learn more: https://webpack.js.org/concepts/mode/('mode' 选项还未设置，webpack 会将其值回退至 'production'。将 'mode' 选项设置为 'development' 或 'production'，来启用对应环境的默认优化设置。)\n```\n在浏览器中打开 index.html，如果一切正常，你应该能看到以下文本：'Hello webpack'\n","slug":"Started","published":1,"updated":"2019-11-23T23:54:38.000Z","layout":"post","photos":[],"link":"","_id":"ck3it6k2c001qteyi4cqbh8zo","content":"<p>Webpack的环境设置</p>\n<a id=\"more\"></a>\n\n<p>2018年8月25日更新，目前 webpack 已经更新值 4.17.1！不用配置很复杂的config也能运行了!!\n今天搭建webpack环境时顺便记录一下.</p>\n<h3 id=\"什么是webpack\"><a href=\"#什么是webpack\" class=\"headerlink\" title=\"什么是webpack\"></a>什么是webpack</h3><blockquote>\n<p>webpack is used to compile JavaScript modules. Once installed, you can interface with webpack either from its CLI or API. If you’re still new to webpack, please read through the core concepts and this comparison to learn why you might use it over the other tools that are out in the community.</p>\n</blockquote>\n<br>\nWebPack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其转换和打包为合适的格式供浏览器使用。\n\n<hr>\n<h3 id=\"为什么要使用webpack\"><a href=\"#为什么要使用webpack\" class=\"headerlink\" title=\"为什么要使用webpack\"></a>为什么要使用webpack</h3><p>很多人开发了各种优秀的 JavaScript 模块或组件，我们不想重复发明轮子，而是想直接利用别人的模块，就是类似 require 或 include 这样的机制，把别人的模块引入进来，这就是modules(模块化).<br>但是 JavaScript 又没有 类或包 这样的概念，那应该如何做呢？如何去引入别人的模块？引入之后保证各种依赖关系不出错？这就是 webpack 要解决的问题。<br>Webpack的处理速度更快更直接，能打包更多不同类型的文件。</p>\n<p><a href=\"https://webpack.js.org/comparison/\" target=\"_blank\" rel=\"noopener\">Webpack与其他打包工具的比较</a><br><a href=\"https://webpack.js.org/concepts/\" target=\"_blank\" rel=\"noopener\">Webpack的核心原理</a></p>\n<hr>\n<h3 id=\"Webpack的安装（版本4-40-1）\"><a href=\"#Webpack的安装（版本4-40-1）\" class=\"headerlink\" title=\"Webpack的安装（版本4.40.1）\"></a>Webpack的安装（版本4.40.1）</h3><p>1.首先创建自己的文件夹，初始化npm，安装本地化webpack并安装webpack-cli(一个能在命令行运行webpack的工具)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir webpack-demo</span><br><span class=\"line\">cd webpack-demo</span><br><span class=\"line\">npm init -y</span><br><span class=\"line\">npm install webpack --save-dev</span><br><span class=\"line\">npm install webpack-cli --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>2.创建以下的文件结构以及内容</p>\n<p>project:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  webpack-demo</span><br><span class=\"line\">  |- package.json</span><br><span class=\"line\">+ |- index.html</span><br><span class=\"line\">+ |- <span class=\"regexp\">/src</span></span><br><span class=\"line\"><span class=\"regexp\">+   |- index.js</span></span><br></pre></td></tr></table></figure>\n\n<p>src/index.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">component</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> element = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Lodash, currently included via a script, is required for this line to work</span></span><br><span class=\"line\">  element.innerHTML = _.join([<span class=\"string\">'Hello'</span>, <span class=\"string\">'webpack'</span>], <span class=\"string\">' '</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> element;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(component());</span><br></pre></td></tr></table></figure>\n\n<p>imdex.html</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!doctype html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;Getting Started&lt;<span class=\"regexp\">/title&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;script src='https:/</span><span class=\"regexp\">/unpkg.com/</span>lodash@<span class=\"number\">4.16</span><span class=\"number\">.6</span><span class=\"string\">'&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/head&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;body&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;script src='</span>./src/index.js<span class=\"string\">'&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>我们还想需要编辑package.json文件，使其我们的package私有化，并同时移除main入口，防止代码误公开。</p>\n<p>package.json</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"webpack-demo\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">+   <span class=\"string\">\"private\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">-   <span class=\"string\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"keywords\"</span>: [],</span><br><span class=\"line\">    <span class=\"string\">\"author\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"webpack\"</span>: <span class=\"string\">\"^4.20.2\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"webpack-cli\"</span>: <span class=\"string\">\"^3.1.2\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"dependencies\"</span>: &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个例子与&lt;script&gt;标签有默认依存关系，我们的index.js文件是依存于lodash并且在运行前是包含在网页里的.<br>这是因为index.js并没有明确声明需要lodash，它只是假定默认了全局变量’_’的存在.<br>所以我们需要创建打包.</p>\n<hr>\n<h3 id=\"创建打包\"><a href=\"#创建打包\" class=\"headerlink\" title=\"创建打包\"></a>创建打包</h3><p>在以上的步骤中我们微调整了文件树结构，将源代码从发布代码中分离开.<br>源代码就是我们可以直接编辑和修改的代码，发布代码就是通过压缩和最优化之后,在打包时最终输出的代码.它最终将会被加载到浏览器上.</p>\n<p>project</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  webpack-demo</span><br><span class=\"line\">  |- package.json</span><br><span class=\"line\">+ |- <span class=\"regexp\">/dist</span></span><br><span class=\"line\"><span class=\"regexp\">+   |- index.html</span></span><br><span class=\"line\"><span class=\"regexp\">- |- index.html</span></span><br><span class=\"line\"><span class=\"regexp\">  |- /</span>src</span><br><span class=\"line\">    |- index.js</span><br></pre></td></tr></table></figure>\n\n<p>为了打包依存于index.js的lodash，我们需要安装本地包.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save lodash</span><br></pre></td></tr></table></figure>\n\n<p>然后引用lodash到我们的script里<br>src/index.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ <span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'lodash'</span>;</span><br><span class=\"line\">+</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">component</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> element = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">-   <span class=\"comment\">// Lodash, currently included via a script, is required for this line to work</span></span><br><span class=\"line\">    element.innerHTML = _.join([<span class=\"string\">'Hello'</span>, <span class=\"string\">'webpack'</span>], <span class=\"string\">' '</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> element;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(component());</span><br></pre></td></tr></table></figure>\n\n<p>现在，因为我们已经打包了script,我们需要更新index.html文件，删除原有的lodash&lt;script&gt;并import之后加入另一个&lt;script&gt;来加载打包.(替换/src文件)</p>\n<hr>\n<p>dist/index.html</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;!doctype html&gt;</span><br><span class=\"line\">  &lt;html&gt;</span><br><span class=\"line\">   &lt;head&gt;</span><br><span class=\"line\">     &lt;title&gt;Getting Started&lt;<span class=\"regexp\">/title&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">-    &lt;script src=\"https:/</span><span class=\"regexp\">/unpkg.com/</span>lodash@<span class=\"number\">4.16</span><span class=\"number\">.6</span><span class=\"string\">\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">   &lt;/head&gt;</span></span><br><span class=\"line\"><span class=\"string\">   &lt;body&gt;</span></span><br><span class=\"line\"><span class=\"string\">-    &lt;script src=\"</span>./src/index.js<span class=\"string\">\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">+    &lt;script src=\"</span>main.js<span class=\"string\">\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">   &lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/html&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在这个设置中，index.js 显式要求引入的 lodash 必须存在，然后将它绑定为 _（没有全局作用域污染）。通过声明模块所需的依赖，webpack 能够利用这些信息去构建依赖图，然后使用图生成一个会以正确顺序执行的优化 bundle。</p>\n<p>可以这样说，执行 npx webpack，会将我们的脚本 src/index.js 作为 入口起点，也会生成 dist/main.js 作为 输出。Node 8.2/npm 5.2.0 以上版本提供的 npx 命令，可以运行在开始安装的 webpack package 中的 webpack 二进制文件（即 ./node_modules/.bin/webpack）</p>\n<hr>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx webpack</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\">Built at: <span class=\"number\">13</span>/<span class=\"number\">06</span>/<span class=\"number\">2018</span> <span class=\"number\">11</span>:<span class=\"number\">52</span>:<span class=\"number\">07</span></span><br><span class=\"line\">  Asset      Size  Chunks             Chunk Names</span><br><span class=\"line\">main.js  <span class=\"number\">70.4</span> KiB       <span class=\"number\">0</span>  [emitted]  main</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">WARNING <span class=\"keyword\">in</span> configuration(配置警告)</span><br><span class=\"line\">The <span class=\"string\">'mode'</span> option has not been <span class=\"keyword\">set</span>, webpack will fallback to 'production' for this value. Set 'mode' option to 'development' or 'production' to enable defaults for each environment.</span><br><span class=\"line\">You can also <span class=\"keyword\">set</span> it to 'none' to disable any default behavior. Learn more: https://webpack.js.org/concepts/mode/('mode' 选项还未设置，webpack 会将其值回退至 'production'。将 'mode' 选项设置为 'development' 或 'production'，来启用对应环境的默认优化设置。)</span><br></pre></td></tr></table></figure>\n\n<p>在浏览器中打开 index.html，如果一切正常，你应该能看到以下文本：’Hello webpack’</p>\n","site":{"data":{}},"thumbnailImageUrl":"https://kisky3.github.io/2019/09/14/Started/20190914.png","excerpt":"<p>Webpack的环境设置</p>","more":"<p>2018年8月25日更新，目前 webpack 已经更新值 4.17.1！不用配置很复杂的config也能运行了!!\n今天搭建webpack环境时顺便记录一下.</p>\n<h3 id=\"什么是webpack\"><a href=\"#什么是webpack\" class=\"headerlink\" title=\"什么是webpack\"></a>什么是webpack</h3><blockquote>\n<p>webpack is used to compile JavaScript modules. Once installed, you can interface with webpack either from its CLI or API. If you’re still new to webpack, please read through the core concepts and this comparison to learn why you might use it over the other tools that are out in the community.</p>\n</blockquote>\n<br>\nWebPack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其转换和打包为合适的格式供浏览器使用。\n\n<hr>\n<h3 id=\"为什么要使用webpack\"><a href=\"#为什么要使用webpack\" class=\"headerlink\" title=\"为什么要使用webpack\"></a>为什么要使用webpack</h3><p>很多人开发了各种优秀的 JavaScript 模块或组件，我们不想重复发明轮子，而是想直接利用别人的模块，就是类似 require 或 include 这样的机制，把别人的模块引入进来，这就是modules(模块化).<br>但是 JavaScript 又没有 类或包 这样的概念，那应该如何做呢？如何去引入别人的模块？引入之后保证各种依赖关系不出错？这就是 webpack 要解决的问题。<br>Webpack的处理速度更快更直接，能打包更多不同类型的文件。</p>\n<p><a href=\"https://webpack.js.org/comparison/\" target=\"_blank\" rel=\"noopener\">Webpack与其他打包工具的比较</a><br><a href=\"https://webpack.js.org/concepts/\" target=\"_blank\" rel=\"noopener\">Webpack的核心原理</a></p>\n<hr>\n<h3 id=\"Webpack的安装（版本4-40-1）\"><a href=\"#Webpack的安装（版本4-40-1）\" class=\"headerlink\" title=\"Webpack的安装（版本4.40.1）\"></a>Webpack的安装（版本4.40.1）</h3><p>1.首先创建自己的文件夹，初始化npm，安装本地化webpack并安装webpack-cli(一个能在命令行运行webpack的工具)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir webpack-demo</span><br><span class=\"line\">cd webpack-demo</span><br><span class=\"line\">npm init -y</span><br><span class=\"line\">npm install webpack --save-dev</span><br><span class=\"line\">npm install webpack-cli --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>2.创建以下的文件结构以及内容</p>\n<p>project:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  webpack-demo</span><br><span class=\"line\">  |- package.json</span><br><span class=\"line\">+ |- index.html</span><br><span class=\"line\">+ |- <span class=\"regexp\">/src</span></span><br><span class=\"line\"><span class=\"regexp\">+   |- index.js</span></span><br></pre></td></tr></table></figure>\n\n<p>src/index.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">component</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> element = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Lodash, currently included via a script, is required for this line to work</span></span><br><span class=\"line\">  element.innerHTML = _.join([<span class=\"string\">'Hello'</span>, <span class=\"string\">'webpack'</span>], <span class=\"string\">' '</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> element;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(component());</span><br></pre></td></tr></table></figure>\n\n<p>imdex.html</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!doctype html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;Getting Started&lt;<span class=\"regexp\">/title&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;script src='https:/</span><span class=\"regexp\">/unpkg.com/</span>lodash@<span class=\"number\">4.16</span><span class=\"number\">.6</span><span class=\"string\">'&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/head&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;body&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;script src='</span>./src/index.js<span class=\"string\">'&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>我们还想需要编辑package.json文件，使其我们的package私有化，并同时移除main入口，防止代码误公开。</p>\n<p>package.json</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"webpack-demo\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">+   <span class=\"string\">\"private\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">-   <span class=\"string\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"keywords\"</span>: [],</span><br><span class=\"line\">    <span class=\"string\">\"author\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"webpack\"</span>: <span class=\"string\">\"^4.20.2\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"webpack-cli\"</span>: <span class=\"string\">\"^3.1.2\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"dependencies\"</span>: &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个例子与&lt;script&gt;标签有默认依存关系，我们的index.js文件是依存于lodash并且在运行前是包含在网页里的.<br>这是因为index.js并没有明确声明需要lodash，它只是假定默认了全局变量’_’的存在.<br>所以我们需要创建打包.</p>\n<hr>\n<h3 id=\"创建打包\"><a href=\"#创建打包\" class=\"headerlink\" title=\"创建打包\"></a>创建打包</h3><p>在以上的步骤中我们微调整了文件树结构，将源代码从发布代码中分离开.<br>源代码就是我们可以直接编辑和修改的代码，发布代码就是通过压缩和最优化之后,在打包时最终输出的代码.它最终将会被加载到浏览器上.</p>\n<p>project</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  webpack-demo</span><br><span class=\"line\">  |- package.json</span><br><span class=\"line\">+ |- <span class=\"regexp\">/dist</span></span><br><span class=\"line\"><span class=\"regexp\">+   |- index.html</span></span><br><span class=\"line\"><span class=\"regexp\">- |- index.html</span></span><br><span class=\"line\"><span class=\"regexp\">  |- /</span>src</span><br><span class=\"line\">    |- index.js</span><br></pre></td></tr></table></figure>\n\n<p>为了打包依存于index.js的lodash，我们需要安装本地包.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save lodash</span><br></pre></td></tr></table></figure>\n\n<p>然后引用lodash到我们的script里<br>src/index.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ <span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'lodash'</span>;</span><br><span class=\"line\">+</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">component</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> element = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">-   <span class=\"comment\">// Lodash, currently included via a script, is required for this line to work</span></span><br><span class=\"line\">    element.innerHTML = _.join([<span class=\"string\">'Hello'</span>, <span class=\"string\">'webpack'</span>], <span class=\"string\">' '</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> element;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(component());</span><br></pre></td></tr></table></figure>\n\n<p>现在，因为我们已经打包了script,我们需要更新index.html文件，删除原有的lodash&lt;script&gt;并import之后加入另一个&lt;script&gt;来加载打包.(替换/src文件)</p>\n<hr>\n<p>dist/index.html</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;!doctype html&gt;</span><br><span class=\"line\">  &lt;html&gt;</span><br><span class=\"line\">   &lt;head&gt;</span><br><span class=\"line\">     &lt;title&gt;Getting Started&lt;<span class=\"regexp\">/title&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">-    &lt;script src=\"https:/</span><span class=\"regexp\">/unpkg.com/</span>lodash@<span class=\"number\">4.16</span><span class=\"number\">.6</span><span class=\"string\">\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">   &lt;/head&gt;</span></span><br><span class=\"line\"><span class=\"string\">   &lt;body&gt;</span></span><br><span class=\"line\"><span class=\"string\">-    &lt;script src=\"</span>./src/index.js<span class=\"string\">\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">+    &lt;script src=\"</span>main.js<span class=\"string\">\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">   &lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/html&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在这个设置中，index.js 显式要求引入的 lodash 必须存在，然后将它绑定为 _（没有全局作用域污染）。通过声明模块所需的依赖，webpack 能够利用这些信息去构建依赖图，然后使用图生成一个会以正确顺序执行的优化 bundle。</p>\n<p>可以这样说，执行 npx webpack，会将我们的脚本 src/index.js 作为 入口起点，也会生成 dist/main.js 作为 输出。Node 8.2/npm 5.2.0 以上版本提供的 npx 命令，可以运行在开始安装的 webpack package 中的 webpack 二进制文件（即 ./node_modules/.bin/webpack）</p>\n<hr>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx webpack</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\">Built at: <span class=\"number\">13</span>/<span class=\"number\">06</span>/<span class=\"number\">2018</span> <span class=\"number\">11</span>:<span class=\"number\">52</span>:<span class=\"number\">07</span></span><br><span class=\"line\">  Asset      Size  Chunks             Chunk Names</span><br><span class=\"line\">main.js  <span class=\"number\">70.4</span> KiB       <span class=\"number\">0</span>  [emitted]  main</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">WARNING <span class=\"keyword\">in</span> configuration(配置警告)</span><br><span class=\"line\">The <span class=\"string\">'mode'</span> option has not been <span class=\"keyword\">set</span>, webpack will fallback to 'production' for this value. Set 'mode' option to 'development' or 'production' to enable defaults for each environment.</span><br><span class=\"line\">You can also <span class=\"keyword\">set</span> it to 'none' to disable any default behavior. Learn more: https://webpack.js.org/concepts/mode/('mode' 选项还未设置，webpack 会将其值回退至 'production'。将 'mode' 选项设置为 'development' 或 'production'，来启用对应环境的默认优化设置。)</span><br></pre></td></tr></table></figure>\n\n<p>在浏览器中打开 index.html，如果一切正常，你应该能看到以下文本：’Hello webpack’</p>"},{"title":"The Cove","date":"2019-08-25T10:12:52.000Z","clearReading":true,"coverImage":"cover.jpg","thumbnailImage":"1.jpg","thumbnailImagePosition":"top","coverCaption":"Hello World, Hello Programming","coverSize":"partial","_content":"This week I watched a 2009 documentary film named 「The Cove」 which analyzes and questions dolphin hunting in Japan Taiji.\nIt was awarded the 2010 Oscar for Best Documentary Feature in 2010. \n\nSome brave people from Sea Shepherd etc tried hard to create this film cause this fact is quite sensitive and probably injurious to some fishermen's interest.\n\nThey even used sensationalized techniques - including hidden cameras to tell us this problem.\n\n<!--more-->\n<img src=\"./2.jpg\" style=\"width:400px;margin:40px 0\">\n\nDolphin hunting takes place elsewhere in Japan but Taiji is the only place where \"drive\" hunting occurs. \nThis involves forcing dolphins into the now infamous cove, where they are then penned in by long nets. \nThe dolphins are then either sold on to aquariums to become performing exhibits or butchered for meat..\n\n<img src=\"./3.jpg\" style=\"width:400px;margin:40px 0\">\n\n\nSome cruel scenes make me feel quite uncomfortable, especially when fishermen even try to kill baby dolphin. The dolphin's blood stained the water red.\n<img src=\"./4.jpg\" style=\"width:400px;margin:40px 0\">\n\nTbh I don't like killing animal in this ruthless way and do we have the moral right to kill animals in this way?  \n\nThanks to「The Cove」, it was a well-told story which tell us some truth was coverd for a long time though it was one-sided in some way.\n\nAs far as I see, Japan continue to do dolphin hunting just because of profit and tradition.\nEven though consumption of dolphin meat has been declining steadily in Japan, to the point where many young people in Tokyo have never eaten it. \n\nTradition in Japan is something that is just handed down, whether it's good or bad, whether it fits today’s world or not.\n\nMaybe this is also a thing should be considered by Japanese under the this topic.\n\n\n","source":"_posts/TheCove.md","raw":"---\ntitle: The Cove\ndate: 2019-08-25 19:12:52\ntags:\n- Documentary film\n- Dolphin hunting\n- Taiji\nclearReading: true\ncoverImage: cover.jpg\nthumbnailImage: 1.jpg\nthumbnailImagePosition: top\ncoverCaption: \"Hello World, Hello Programming\"\ncoverSize: partial\ncategories: About Me\n---\nThis week I watched a 2009 documentary film named 「The Cove」 which analyzes and questions dolphin hunting in Japan Taiji.\nIt was awarded the 2010 Oscar for Best Documentary Feature in 2010. \n\nSome brave people from Sea Shepherd etc tried hard to create this film cause this fact is quite sensitive and probably injurious to some fishermen's interest.\n\nThey even used sensationalized techniques - including hidden cameras to tell us this problem.\n\n<!--more-->\n<img src=\"./2.jpg\" style=\"width:400px;margin:40px 0\">\n\nDolphin hunting takes place elsewhere in Japan but Taiji is the only place where \"drive\" hunting occurs. \nThis involves forcing dolphins into the now infamous cove, where they are then penned in by long nets. \nThe dolphins are then either sold on to aquariums to become performing exhibits or butchered for meat..\n\n<img src=\"./3.jpg\" style=\"width:400px;margin:40px 0\">\n\n\nSome cruel scenes make me feel quite uncomfortable, especially when fishermen even try to kill baby dolphin. The dolphin's blood stained the water red.\n<img src=\"./4.jpg\" style=\"width:400px;margin:40px 0\">\n\nTbh I don't like killing animal in this ruthless way and do we have the moral right to kill animals in this way?  \n\nThanks to「The Cove」, it was a well-told story which tell us some truth was coverd for a long time though it was one-sided in some way.\n\nAs far as I see, Japan continue to do dolphin hunting just because of profit and tradition.\nEven though consumption of dolphin meat has been declining steadily in Japan, to the point where many young people in Tokyo have never eaten it. \n\nTradition in Japan is something that is just handed down, whether it's good or bad, whether it fits today’s world or not.\n\nMaybe this is also a thing should be considered by Japanese under the this topic.\n\n\n","slug":"TheCove","published":1,"updated":"2019-11-23T23:54:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3it6k2d001tteyifu20ebum","content":"<p>This week I watched a 2009 documentary film named 「The Cove」 which analyzes and questions dolphin hunting in Japan Taiji.<br>It was awarded the 2010 Oscar for Best Documentary Feature in 2010. </p>\n<p>Some brave people from Sea Shepherd etc tried hard to create this film cause this fact is quite sensitive and probably injurious to some fishermen’s interest.</p>\n<p>They even used sensationalized techniques - including hidden cameras to tell us this problem.</p>\n<a id=\"more\"></a>\n<img src=\"./2.jpg\" style=\"width:400px;margin:40px 0\">\n\n<p>Dolphin hunting takes place elsewhere in Japan but Taiji is the only place where “drive” hunting occurs.<br>This involves forcing dolphins into the now infamous cove, where they are then penned in by long nets.<br>The dolphins are then either sold on to aquariums to become performing exhibits or butchered for meat..</p>\n<img src=\"./3.jpg\" style=\"width:400px;margin:40px 0\">\n\n\n<p>Some cruel scenes make me feel quite uncomfortable, especially when fishermen even try to kill baby dolphin. The dolphin’s blood stained the water red.<br><img src=\"./4.jpg\" style=\"width:400px;margin:40px 0\"></p>\n<p>Tbh I don’t like killing animal in this ruthless way and do we have the moral right to kill animals in this way?  </p>\n<p>Thanks to「The Cove」, it was a well-told story which tell us some truth was coverd for a long time though it was one-sided in some way.</p>\n<p>As far as I see, Japan continue to do dolphin hunting just because of profit and tradition.<br>Even though consumption of dolphin meat has been declining steadily in Japan, to the point where many young people in Tokyo have never eaten it. </p>\n<p>Tradition in Japan is something that is just handed down, whether it’s good or bad, whether it fits today’s world or not.</p>\n<p>Maybe this is also a thing should be considered by Japanese under the this topic.</p>\n","site":{"data":{}},"thumbnailImageUrl":"https://kisky3.github.io/2019/08/25/TheCove/1.jpg","excerpt":"<p>This week I watched a 2009 documentary film named 「The Cove」 which analyzes and questions dolphin hunting in Japan Taiji.<br>It was awarded the 2010 Oscar for Best Documentary Feature in 2010. </p>\n<p>Some brave people from Sea Shepherd etc tried hard to create this film cause this fact is quite sensitive and probably injurious to some fishermen’s interest.</p>\n<p>They even used sensationalized techniques - including hidden cameras to tell us this problem.</p>","more":"<img src=\"./2.jpg\" style=\"width:400px;margin:40px 0\">\n\n<p>Dolphin hunting takes place elsewhere in Japan but Taiji is the only place where “drive” hunting occurs.<br>This involves forcing dolphins into the now infamous cove, where they are then penned in by long nets.<br>The dolphins are then either sold on to aquariums to become performing exhibits or butchered for meat..</p>\n<img src=\"./3.jpg\" style=\"width:400px;margin:40px 0\">\n\n\n<p>Some cruel scenes make me feel quite uncomfortable, especially when fishermen even try to kill baby dolphin. The dolphin’s blood stained the water red.<br><img src=\"./4.jpg\" style=\"width:400px;margin:40px 0\"></p>\n<p>Tbh I don’t like killing animal in this ruthless way and do we have the moral right to kill animals in this way?  </p>\n<p>Thanks to「The Cove」, it was a well-told story which tell us some truth was coverd for a long time though it was one-sided in some way.</p>\n<p>As far as I see, Japan continue to do dolphin hunting just because of profit and tradition.<br>Even though consumption of dolphin meat has been declining steadily in Japan, to the point where many young people in Tokyo have never eaten it. </p>\n<p>Tradition in Japan is something that is just handed down, whether it’s good or bad, whether it fits today’s world or not.</p>\n<p>Maybe this is also a thing should be considered by Japanese under the this topic.</p>"},{"title":"Journey to the edge of the universe","date":"2019-08-17T02:32:15.000Z","clearReading":true,"coverImage":"cover.jpg","thumbnailImage":"1.jpg","thumbnailImagePosition":"top","coverCaption":"Hello World, Hello Programming","coverSize":"partial","_content":"Recently, I am into something about our universe.\nI even tried to read 「A Brief History Of Time」.\n\nHmmmm. Definitly it is far beyond my understanding. So I decided to start from some friendly space documentary films.\n\nIt seems good for me！\n\nAnd 「JOURNEY TO THE EDGE OF THE UNIVERSE」is the one I want to recommend today. It shows us splendid images of the universe.\nTaking us to the big endless universe and explore the science and history behind the distant celestial bodies in the solar system in two hours.\n\nYup！This is THE BEST space documentary I have ever seen in my life!！\n\n<!--more-->\n<img src=\"./1.jpg\" style=\"width:400px;margin:40px 0\">\n\nThey say that it's so big we can't really measure it. \nThe part we can see has a radius of 47 billion light years.\nAnd I think about how in this universe, there are supposedly at least 100 million galaxies.\nI can't help but think to myself, “Wow. We live in just one of those galaxies.”\n\n<img src=\"./2.jpg\" style=\"width:600px;margin:40px 0\">\n\n<img src=\"./4.jpg\" style=\"width:600px;margin:40px 0\">\nThere are so many amazing(or you can call them scary) powerful monsters in the universe. Some stronger monsters haven't been known by us now.\n\nI really start thinking about name my cat 「Quasar」which seems more powerful than 「black hole」.\n「Singularity」is also a good choice since it is so mistry and meaning of a new start.\n Even tho I dont own a cat now but I am serious to pick a special name for my kitty XD.\n\nThis is the Quasar？\n↓\n<img src=\"./3.jpg\" style=\"width:600px;margin:40px 0\">\n\nAfter watching this documentary film you will feel humanbeing are so small and we are all the stuff of starts.\n\nAnother good thing is that I realized there is no need to take some little trouble things which bug our life sometimes too seriously.\n\nLife is too short, so do whatever you like and enjoy the process of it.\nSnatching the eternal out of the desperately fleeting is the great magic trick of human existence.","source":"_posts/UNIVERSE.md","raw":"---\ntitle: Journey to the edge of the universe\ndate: 2019-08-17 11:32:15\ntags:\n- movie\n- universe\nclearReading: true\ncoverImage: cover.jpg\nthumbnailImage: 1.jpg\nthumbnailImagePosition: top\ncoverCaption: \"Hello World, Hello Programming\"\ncoverSize: partial\ncategories: About Me\n---\nRecently, I am into something about our universe.\nI even tried to read 「A Brief History Of Time」.\n\nHmmmm. Definitly it is far beyond my understanding. So I decided to start from some friendly space documentary films.\n\nIt seems good for me！\n\nAnd 「JOURNEY TO THE EDGE OF THE UNIVERSE」is the one I want to recommend today. It shows us splendid images of the universe.\nTaking us to the big endless universe and explore the science and history behind the distant celestial bodies in the solar system in two hours.\n\nYup！This is THE BEST space documentary I have ever seen in my life!！\n\n<!--more-->\n<img src=\"./1.jpg\" style=\"width:400px;margin:40px 0\">\n\nThey say that it's so big we can't really measure it. \nThe part we can see has a radius of 47 billion light years.\nAnd I think about how in this universe, there are supposedly at least 100 million galaxies.\nI can't help but think to myself, “Wow. We live in just one of those galaxies.”\n\n<img src=\"./2.jpg\" style=\"width:600px;margin:40px 0\">\n\n<img src=\"./4.jpg\" style=\"width:600px;margin:40px 0\">\nThere are so many amazing(or you can call them scary) powerful monsters in the universe. Some stronger monsters haven't been known by us now.\n\nI really start thinking about name my cat 「Quasar」which seems more powerful than 「black hole」.\n「Singularity」is also a good choice since it is so mistry and meaning of a new start.\n Even tho I dont own a cat now but I am serious to pick a special name for my kitty XD.\n\nThis is the Quasar？\n↓\n<img src=\"./3.jpg\" style=\"width:600px;margin:40px 0\">\n\nAfter watching this documentary film you will feel humanbeing are so small and we are all the stuff of starts.\n\nAnother good thing is that I realized there is no need to take some little trouble things which bug our life sometimes too seriously.\n\nLife is too short, so do whatever you like and enjoy the process of it.\nSnatching the eternal out of the desperately fleeting is the great magic trick of human existence.","slug":"UNIVERSE","published":1,"updated":"2019-11-23T23:54:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3it6k2e001vteyi8i2qkrbe","content":"<p>Recently, I am into something about our universe.<br>I even tried to read 「A Brief History Of Time」.</p>\n<p>Hmmmm. Definitly it is far beyond my understanding. So I decided to start from some friendly space documentary films.</p>\n<p>It seems good for me！</p>\n<p>And 「JOURNEY TO THE EDGE OF THE UNIVERSE」is the one I want to recommend today. It shows us splendid images of the universe.<br>Taking us to the big endless universe and explore the science and history behind the distant celestial bodies in the solar system in two hours.</p>\n<p>Yup！This is THE BEST space documentary I have ever seen in my life!！</p>\n<a id=\"more\"></a>\n<img src=\"./1.jpg\" style=\"width:400px;margin:40px 0\">\n\n<p>They say that it’s so big we can’t really measure it.<br>The part we can see has a radius of 47 billion light years.<br>And I think about how in this universe, there are supposedly at least 100 million galaxies.<br>I can’t help but think to myself, “Wow. We live in just one of those galaxies.”</p>\n<img src=\"./2.jpg\" style=\"width:600px;margin:40px 0\">\n\n<img src=\"./4.jpg\" style=\"width:600px;margin:40px 0\">\nThere are so many amazing(or you can call them scary) powerful monsters in the universe. Some stronger monsters haven't been known by us now.\n\n<p>I really start thinking about name my cat 「Quasar」which seems more powerful than 「black hole」.<br>「Singularity」is also a good choice since it is so mistry and meaning of a new start.<br> Even tho I dont own a cat now but I am serious to pick a special name for my kitty XD.</p>\n<p>This is the Quasar？<br>↓\n<img src=\"./3.jpg\" style=\"width:600px;margin:40px 0\"></p>\n<p>After watching this documentary film you will feel humanbeing are so small and we are all the stuff of starts.</p>\n<p>Another good thing is that I realized there is no need to take some little trouble things which bug our life sometimes too seriously.</p>\n<p>Life is too short, so do whatever you like and enjoy the process of it.<br>Snatching the eternal out of the desperately fleeting is the great magic trick of human existence.</p>\n","site":{"data":{}},"thumbnailImageUrl":"https://kisky3.github.io/2019/08/17/UNIVERSE/1.jpg","excerpt":"<p>Recently, I am into something about our universe.<br>I even tried to read 「A Brief History Of Time」.</p>\n<p>Hmmmm. Definitly it is far beyond my understanding. So I decided to start from some friendly space documentary films.</p>\n<p>It seems good for me！</p>\n<p>And 「JOURNEY TO THE EDGE OF THE UNIVERSE」is the one I want to recommend today. It shows us splendid images of the universe.<br>Taking us to the big endless universe and explore the science and history behind the distant celestial bodies in the solar system in two hours.</p>\n<p>Yup！This is THE BEST space documentary I have ever seen in my life!！</p>","more":"<img src=\"./1.jpg\" style=\"width:400px;margin:40px 0\">\n\n<p>They say that it’s so big we can’t really measure it.<br>The part we can see has a radius of 47 billion light years.<br>And I think about how in this universe, there are supposedly at least 100 million galaxies.<br>I can’t help but think to myself, “Wow. We live in just one of those galaxies.”</p>\n<img src=\"./2.jpg\" style=\"width:600px;margin:40px 0\">\n\n<img src=\"./4.jpg\" style=\"width:600px;margin:40px 0\">\nThere are so many amazing(or you can call them scary) powerful monsters in the universe. Some stronger monsters haven't been known by us now.\n\n<p>I really start thinking about name my cat 「Quasar」which seems more powerful than 「black hole」.<br>「Singularity」is also a good choice since it is so mistry and meaning of a new start.<br> Even tho I dont own a cat now but I am serious to pick a special name for my kitty XD.</p>\n<p>This is the Quasar？<br>↓\n<img src=\"./3.jpg\" style=\"width:600px;margin:40px 0\"></p>\n<p>After watching this documentary film you will feel humanbeing are so small and we are all the stuff of starts.</p>\n<p>Another good thing is that I realized there is no need to take some little trouble things which bug our life sometimes too seriously.</p>\n<p>Life is too short, so do whatever you like and enjoy the process of it.<br>Snatching the eternal out of the desperately fleeting is the great magic trick of human existence.</p>"},{"title":"Npm And Yarn","date":"2019-11-24T08:01:22.000Z","clearReading":true,"thumbnailImage":"20191124.png","thumbnailImagePosition":"left","coverImage":"cover.jpg","coverCaption":"Hello World, Hello Programming","coverSize":"partial","comments":0,"_content":"Npm和Yarn\n<!--more-->\n### npm概念\nNpm就是Node Package Manager，也就是Node包管理工具。\n\n***\n### npm用途\n如果不使用包管理器，有什么麻烦的呢？\n\n这是源于代码包分享的理念，包和依赖越来越多，每个包都有自己的版本和发展，而包与包之间也有依赖。版本管理就成了一件令人头痛的事。\n\n比如jQuery插件A(版本1)，依赖于jQuery(版本1)，当你把jQuery版本更新为2的时候，A很可能就挂掉了。各个插件间也有依赖，插件A挂掉了，可能B也挂掉了，\n连接挂掉是噩梦一般，你要一个个去查文档，看每个包要求依赖的版本，然后自己协调。\n这时候npm就应运而生了，不仅可以帮你把各种包从网上download下来，最主要的是还可以帮你管理不同包之间的关系，\n比如你当前的版本号是多少，你依赖着谁，你依赖的版本号是多少都一目了然。\n\n***\n\n### npm实现具体步骤\nNPM 的思路大概是这样的：\n\n1. 买个服务器作为代码仓库（registry），在里面放所有需要被共享的代码\n\n2. 发邮件通知 jQuery、Bootstrap、Underscore 作者使用 npm publish 把代码提交到 registry 上，分别取名 jquery、bootstrap 和 underscore（注意大小写）\n\n3. 社区里的其他人如果想使用这些代码，就把 jquery、bootstrap 和 underscore 写到 package.json 里，然后运行 npm install ，npm 就会帮他们下载代码\n\n4. 下载完的代码出现在 node_modules 目录里，可以随意使用了。\n\n这些可以被使用的代码被叫做「包」（package），这就是 NPM 名字的由来：Node Package(包) Manager(管理器)。\n\n***\n\n### npm的发展\n那么 npm 是怎么火的呢？\n\nnpm 的发展是跟 Node.js 的发展相辅相成的。\n\nNode.js 是由一个在德国工作的美国程序员 Ryan Dahl 写的。他写了 Node.js，但是 Node.js 缺少一个包管理器，于是他和 npm 的作者一拍即合、抱团取暖，最终 Node.js 内置了 npm。\n\n后来的事情大家都知道，Node.js 火了。\n随着 Node.js 的火爆，大家开始用 npm 来共享 JS 代码了，于是 jQuery 作者也将 jQuery 发布到 npm 了。\n\n所以现在，你可以使用 npm install jquery 来下载 jQuery 代码。\n\n现在用 npm 来分享代码已经成了前端的标配。\n\n***\n### npm使用方法\n进入新建的工作目录，然后进行npm的初始化。\n```\nnpm init -t\n```\n<img src=\"./1.png\" style=\"width:500px \">\n\n在项目目录下生成了一个**package.json**文件。\n然后安装jQuery包。然后npm就会帮你看有没有jQuery这个包。如果存在的话就帮你安装到根目录下**node_modules**这个文件夹下。\n```\nnpm i jQuery\n```\n<img src=\"./2.png\" style=\"width:500px \">\n\n并且你安装的包的版本信息还会被自动记录到**package.json**的**dependencies**里面。是一对一的。即使之后你把node_modules文件夹全部删除了，\n在你重新初始化的时候，它会读取dependencies里的信息，然后再重新生成对应的node_modules文件夹。\n<img src=\"./3.png\" style=\"width:500px \">\n\n***\n### npm常用配置\n**package.json**的**script**\n在script里会执行你指定的命令。\n比如写一个yo，输出yo的指令，然后**npm run yo**,就会看到命令行输出了yo\n<img src=\"./4.png\" style=\"width:500px \">\n\n区别生产环境和开发环境用下面的命令\n```\nnpm i webpack --save-dev\n```\n安装成功之后可以看到package.json里多了一个devDependencies。也就是用于生产环境下的依赖。\n<img src=\"./5.png\" style=\"width:500px \">\n","source":"_posts/aboutnpm.md","raw":"---\ntitle: Npm And Yarn\ndate: 2019-11-24 17:01:22\ntags:\n- Npm\n- Yarn\nclearReading: true\nthumbnailImage: 20191124.png\nthumbnailImagePosition: left\ncoverImage: cover.jpg\ncoverCaption: \"Hello World, Hello Programming\"\ncoverSize: partial\ncomments: false\ncategories: System Setting\n---\nNpm和Yarn\n<!--more-->\n### npm概念\nNpm就是Node Package Manager，也就是Node包管理工具。\n\n***\n### npm用途\n如果不使用包管理器，有什么麻烦的呢？\n\n这是源于代码包分享的理念，包和依赖越来越多，每个包都有自己的版本和发展，而包与包之间也有依赖。版本管理就成了一件令人头痛的事。\n\n比如jQuery插件A(版本1)，依赖于jQuery(版本1)，当你把jQuery版本更新为2的时候，A很可能就挂掉了。各个插件间也有依赖，插件A挂掉了，可能B也挂掉了，\n连接挂掉是噩梦一般，你要一个个去查文档，看每个包要求依赖的版本，然后自己协调。\n这时候npm就应运而生了，不仅可以帮你把各种包从网上download下来，最主要的是还可以帮你管理不同包之间的关系，\n比如你当前的版本号是多少，你依赖着谁，你依赖的版本号是多少都一目了然。\n\n***\n\n### npm实现具体步骤\nNPM 的思路大概是这样的：\n\n1. 买个服务器作为代码仓库（registry），在里面放所有需要被共享的代码\n\n2. 发邮件通知 jQuery、Bootstrap、Underscore 作者使用 npm publish 把代码提交到 registry 上，分别取名 jquery、bootstrap 和 underscore（注意大小写）\n\n3. 社区里的其他人如果想使用这些代码，就把 jquery、bootstrap 和 underscore 写到 package.json 里，然后运行 npm install ，npm 就会帮他们下载代码\n\n4. 下载完的代码出现在 node_modules 目录里，可以随意使用了。\n\n这些可以被使用的代码被叫做「包」（package），这就是 NPM 名字的由来：Node Package(包) Manager(管理器)。\n\n***\n\n### npm的发展\n那么 npm 是怎么火的呢？\n\nnpm 的发展是跟 Node.js 的发展相辅相成的。\n\nNode.js 是由一个在德国工作的美国程序员 Ryan Dahl 写的。他写了 Node.js，但是 Node.js 缺少一个包管理器，于是他和 npm 的作者一拍即合、抱团取暖，最终 Node.js 内置了 npm。\n\n后来的事情大家都知道，Node.js 火了。\n随着 Node.js 的火爆，大家开始用 npm 来共享 JS 代码了，于是 jQuery 作者也将 jQuery 发布到 npm 了。\n\n所以现在，你可以使用 npm install jquery 来下载 jQuery 代码。\n\n现在用 npm 来分享代码已经成了前端的标配。\n\n***\n### npm使用方法\n进入新建的工作目录，然后进行npm的初始化。\n```\nnpm init -t\n```\n<img src=\"./1.png\" style=\"width:500px \">\n\n在项目目录下生成了一个**package.json**文件。\n然后安装jQuery包。然后npm就会帮你看有没有jQuery这个包。如果存在的话就帮你安装到根目录下**node_modules**这个文件夹下。\n```\nnpm i jQuery\n```\n<img src=\"./2.png\" style=\"width:500px \">\n\n并且你安装的包的版本信息还会被自动记录到**package.json**的**dependencies**里面。是一对一的。即使之后你把node_modules文件夹全部删除了，\n在你重新初始化的时候，它会读取dependencies里的信息，然后再重新生成对应的node_modules文件夹。\n<img src=\"./3.png\" style=\"width:500px \">\n\n***\n### npm常用配置\n**package.json**的**script**\n在script里会执行你指定的命令。\n比如写一个yo，输出yo的指令，然后**npm run yo**,就会看到命令行输出了yo\n<img src=\"./4.png\" style=\"width:500px \">\n\n区别生产环境和开发环境用下面的命令\n```\nnpm i webpack --save-dev\n```\n安装成功之后可以看到package.json里多了一个devDependencies。也就是用于生产环境下的依赖。\n<img src=\"./5.png\" style=\"width:500px \">\n","slug":"aboutnpm","published":1,"updated":"2019-11-23T23:54:38.000Z","layout":"post","photos":[],"link":"","_id":"ck3it6k2e001yteyi0p63xg0n","content":"<p>Npm和Yarn</p>\n<a id=\"more\"></a>\n<h3 id=\"npm概念\"><a href=\"#npm概念\" class=\"headerlink\" title=\"npm概念\"></a>npm概念</h3><p>Npm就是Node Package Manager，也就是Node包管理工具。</p>\n<hr>\n<h3 id=\"npm用途\"><a href=\"#npm用途\" class=\"headerlink\" title=\"npm用途\"></a>npm用途</h3><p>如果不使用包管理器，有什么麻烦的呢？</p>\n<p>这是源于代码包分享的理念，包和依赖越来越多，每个包都有自己的版本和发展，而包与包之间也有依赖。版本管理就成了一件令人头痛的事。</p>\n<p>比如jQuery插件A(版本1)，依赖于jQuery(版本1)，当你把jQuery版本更新为2的时候，A很可能就挂掉了。各个插件间也有依赖，插件A挂掉了，可能B也挂掉了，<br>连接挂掉是噩梦一般，你要一个个去查文档，看每个包要求依赖的版本，然后自己协调。<br>这时候npm就应运而生了，不仅可以帮你把各种包从网上download下来，最主要的是还可以帮你管理不同包之间的关系，<br>比如你当前的版本号是多少，你依赖着谁，你依赖的版本号是多少都一目了然。</p>\n<hr>\n<h3 id=\"npm实现具体步骤\"><a href=\"#npm实现具体步骤\" class=\"headerlink\" title=\"npm实现具体步骤\"></a>npm实现具体步骤</h3><p>NPM 的思路大概是这样的：</p>\n<ol>\n<li><p>买个服务器作为代码仓库（registry），在里面放所有需要被共享的代码</p>\n</li>\n<li><p>发邮件通知 jQuery、Bootstrap、Underscore 作者使用 npm publish 把代码提交到 registry 上，分别取名 jquery、bootstrap 和 underscore（注意大小写）</p>\n</li>\n<li><p>社区里的其他人如果想使用这些代码，就把 jquery、bootstrap 和 underscore 写到 package.json 里，然后运行 npm install ，npm 就会帮他们下载代码</p>\n</li>\n<li><p>下载完的代码出现在 node_modules 目录里，可以随意使用了。</p>\n</li>\n</ol>\n<p>这些可以被使用的代码被叫做「包」（package），这就是 NPM 名字的由来：Node Package(包) Manager(管理器)。</p>\n<hr>\n<h3 id=\"npm的发展\"><a href=\"#npm的发展\" class=\"headerlink\" title=\"npm的发展\"></a>npm的发展</h3><p>那么 npm 是怎么火的呢？</p>\n<p>npm 的发展是跟 Node.js 的发展相辅相成的。</p>\n<p>Node.js 是由一个在德国工作的美国程序员 Ryan Dahl 写的。他写了 Node.js，但是 Node.js 缺少一个包管理器，于是他和 npm 的作者一拍即合、抱团取暖，最终 Node.js 内置了 npm。</p>\n<p>后来的事情大家都知道，Node.js 火了。<br>随着 Node.js 的火爆，大家开始用 npm 来共享 JS 代码了，于是 jQuery 作者也将 jQuery 发布到 npm 了。</p>\n<p>所以现在，你可以使用 npm install jquery 来下载 jQuery 代码。</p>\n<p>现在用 npm 来分享代码已经成了前端的标配。</p>\n<hr>\n<h3 id=\"npm使用方法\"><a href=\"#npm使用方法\" class=\"headerlink\" title=\"npm使用方法\"></a>npm使用方法</h3><p>进入新建的工作目录，然后进行npm的初始化。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init -t</span><br></pre></td></tr></table></figure>\n\n<img src=\"./1.png\" style=\"width:500px \">\n\n<p>在项目目录下生成了一个<strong>package.json</strong>文件。<br>然后安装jQuery包。然后npm就会帮你看有没有jQuery这个包。如果存在的话就帮你安装到根目录下<strong>node_modules</strong>这个文件夹下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i jQuery</span><br></pre></td></tr></table></figure>\n\n<img src=\"./2.png\" style=\"width:500px \">\n\n<p>并且你安装的包的版本信息还会被自动记录到<strong>package.json</strong>的<strong>dependencies</strong>里面。是一对一的。即使之后你把node_modules文件夹全部删除了，<br>在你重新初始化的时候，它会读取dependencies里的信息，然后再重新生成对应的node_modules文件夹。<br><img src=\"./3.png\" style=\"width:500px \"></p>\n<hr>\n<h3 id=\"npm常用配置\"><a href=\"#npm常用配置\" class=\"headerlink\" title=\"npm常用配置\"></a>npm常用配置</h3><p><strong>package.json</strong>的<strong>script</strong><br>在script里会执行你指定的命令。<br>比如写一个yo，输出yo的指令，然后<strong>npm run yo</strong>,就会看到命令行输出了yo<br><img src=\"./4.png\" style=\"width:500px \"></p>\n<p>区别生产环境和开发环境用下面的命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i webpack --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>安装成功之后可以看到package.json里多了一个devDependencies。也就是用于生产环境下的依赖。<br><img src=\"./5.png\" style=\"width:500px \"></p>\n","site":{"data":{}},"thumbnailImageUrl":"https://kisky3.github.io/2019/11/24/aboutnpm/20191124.png","excerpt":"<p>Npm和Yarn</p>","more":"<h3 id=\"npm概念\"><a href=\"#npm概念\" class=\"headerlink\" title=\"npm概念\"></a>npm概念</h3><p>Npm就是Node Package Manager，也就是Node包管理工具。</p>\n<hr>\n<h3 id=\"npm用途\"><a href=\"#npm用途\" class=\"headerlink\" title=\"npm用途\"></a>npm用途</h3><p>如果不使用包管理器，有什么麻烦的呢？</p>\n<p>这是源于代码包分享的理念，包和依赖越来越多，每个包都有自己的版本和发展，而包与包之间也有依赖。版本管理就成了一件令人头痛的事。</p>\n<p>比如jQuery插件A(版本1)，依赖于jQuery(版本1)，当你把jQuery版本更新为2的时候，A很可能就挂掉了。各个插件间也有依赖，插件A挂掉了，可能B也挂掉了，<br>连接挂掉是噩梦一般，你要一个个去查文档，看每个包要求依赖的版本，然后自己协调。<br>这时候npm就应运而生了，不仅可以帮你把各种包从网上download下来，最主要的是还可以帮你管理不同包之间的关系，<br>比如你当前的版本号是多少，你依赖着谁，你依赖的版本号是多少都一目了然。</p>\n<hr>\n<h3 id=\"npm实现具体步骤\"><a href=\"#npm实现具体步骤\" class=\"headerlink\" title=\"npm实现具体步骤\"></a>npm实现具体步骤</h3><p>NPM 的思路大概是这样的：</p>\n<ol>\n<li><p>买个服务器作为代码仓库（registry），在里面放所有需要被共享的代码</p>\n</li>\n<li><p>发邮件通知 jQuery、Bootstrap、Underscore 作者使用 npm publish 把代码提交到 registry 上，分别取名 jquery、bootstrap 和 underscore（注意大小写）</p>\n</li>\n<li><p>社区里的其他人如果想使用这些代码，就把 jquery、bootstrap 和 underscore 写到 package.json 里，然后运行 npm install ，npm 就会帮他们下载代码</p>\n</li>\n<li><p>下载完的代码出现在 node_modules 目录里，可以随意使用了。</p>\n</li>\n</ol>\n<p>这些可以被使用的代码被叫做「包」（package），这就是 NPM 名字的由来：Node Package(包) Manager(管理器)。</p>\n<hr>\n<h3 id=\"npm的发展\"><a href=\"#npm的发展\" class=\"headerlink\" title=\"npm的发展\"></a>npm的发展</h3><p>那么 npm 是怎么火的呢？</p>\n<p>npm 的发展是跟 Node.js 的发展相辅相成的。</p>\n<p>Node.js 是由一个在德国工作的美国程序员 Ryan Dahl 写的。他写了 Node.js，但是 Node.js 缺少一个包管理器，于是他和 npm 的作者一拍即合、抱团取暖，最终 Node.js 内置了 npm。</p>\n<p>后来的事情大家都知道，Node.js 火了。<br>随着 Node.js 的火爆，大家开始用 npm 来共享 JS 代码了，于是 jQuery 作者也将 jQuery 发布到 npm 了。</p>\n<p>所以现在，你可以使用 npm install jquery 来下载 jQuery 代码。</p>\n<p>现在用 npm 来分享代码已经成了前端的标配。</p>\n<hr>\n<h3 id=\"npm使用方法\"><a href=\"#npm使用方法\" class=\"headerlink\" title=\"npm使用方法\"></a>npm使用方法</h3><p>进入新建的工作目录，然后进行npm的初始化。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init -t</span><br></pre></td></tr></table></figure>\n\n<img src=\"./1.png\" style=\"width:500px \">\n\n<p>在项目目录下生成了一个<strong>package.json</strong>文件。<br>然后安装jQuery包。然后npm就会帮你看有没有jQuery这个包。如果存在的话就帮你安装到根目录下<strong>node_modules</strong>这个文件夹下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i jQuery</span><br></pre></td></tr></table></figure>\n\n<img src=\"./2.png\" style=\"width:500px \">\n\n<p>并且你安装的包的版本信息还会被自动记录到<strong>package.json</strong>的<strong>dependencies</strong>里面。是一对一的。即使之后你把node_modules文件夹全部删除了，<br>在你重新初始化的时候，它会读取dependencies里的信息，然后再重新生成对应的node_modules文件夹。<br><img src=\"./3.png\" style=\"width:500px \"></p>\n<hr>\n<h3 id=\"npm常用配置\"><a href=\"#npm常用配置\" class=\"headerlink\" title=\"npm常用配置\"></a>npm常用配置</h3><p><strong>package.json</strong>的<strong>script</strong><br>在script里会执行你指定的命令。<br>比如写一个yo，输出yo的指令，然后<strong>npm run yo</strong>,就会看到命令行输出了yo<br><img src=\"./4.png\" style=\"width:500px \"></p>\n<p>区别生产环境和开发环境用下面的命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i webpack --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>安装成功之后可以看到package.json里多了一个devDependencies。也就是用于生产环境下的依赖。<br><img src=\"./5.png\" style=\"width:500px \"></p>"},{"title":"Install Modx Revolution With Docker","date":"2019-10-31T01:22:48.000Z","clearReading":true,"thumbnailImage":"20191031.png","thumbnailImagePosition":"left","coverImage":"cover.jpg","coverCaption":"Hello World, Hello Programming","coverSize":"partial","comments":0,"_content":"用docker构建modx安装环境\n<!--more-->\n\n### 什么是Modx\nMODx 是一个完全开源免费的 php 内容管理系统（CMS）. 是一个PHP 应用框架，可以帮助使用者控制自己的网上内容。\n它是开发人员和高级用户理想的控制系统，任何人都可以使用 MODx 发布、更新、维护动态网站，或 html 静态页面的网站内容。\n***\n\n### 使用docker构建环境\n环境可自行定义，本例的环境参照下面：\n- server: nginx:1.12.2\n- DB: mysql:5.6.34\n- Modx Revolition :modx-2.7.2-pl\n- php\n\n#### 1.从GitLab下载modx-docker\n[modx-docker Repo](https://gitlab.com/EUsipov/modx-docker)\n\n***\n#### 2.设置nginx服务器\n在nginx/site.conf文件里修改服务器名以及监听窗口号。记得不要漏了分号！否则之后无法启动的！\n\nnginx/site.conf\n```\nserver {\n    index index.php index.html;\n    server_name localhost;\n    listen 8899;\n    ...\n```\n***\n#### 3. 设置docker启动时的配置\ndocker-compose可以理解可以让你一条命令运行多个配置的容器。docker-compose.yml就是配置文件。\n下面将nginx的端口号设置成和ngin配置文件里一样：8899，记得这里要加上本地机默认域名，写成这样！ => \"127.0.0.1:8899:8899\"\n然后写上mysql的用户名和密码，mysql的端口号为了避免重复，这里使用'13306:3306'\n最后如下文所示：\n\ndocker-compose.yml\n```\nnginx:\n   image: nginx:1.12.2\n   container_name: nginx\n   restart: always\n   ports:\n      - \"127.0.0.1:8899:8899\"\n   volumes:\n      - ./code:/code\n      - ./nginx/site.conf:/etc/nginx/conf.d/site.conf\n   links:\n      - php\n\nphp:\n   build: ./php\n   container_name: php\n   restart: always\n   volumes:\n      - ./code:/code:rw\n   links:\n      - mysql\n\nmysql:\n   image: mysql:5.6.34\n   environment:\n      MYSQL_ROOT_PASSWORD: mysql\n      MYSQL_DATABASE: modx\n      MYSQL_USER: modx\n      MYSQL_PASSWORD: modx\n   ports:\n      - '13306:3306'\n   command: mysqld --sql-mode=NO_ENGINE_SUBSTITUTION\n   volumes:\n      - './mysql:/var/lib/mysql'\n```\n***\n#### 创建DB数据储存文件夹\n在根目录下创建mysql文件夹，用于储存数据库数据。这里的文件夹名与docker-compose.yml里mysql的volumes对应：\n```\nvolumes:\n      - './mysql:/var/lib/mysql'\n```\n***\n#### 创建code文件夹\n用于存放modx相关文件\n***\n#### 安装modx\n移动到code文件夹并在该路径内安装所需的modx\n```\ncd code\nwget http://modx.com/download/direct/modx-2.7.2-pl.zip\n```\n\n解压安装包并重命名文件夹，修改权限\n```\nunzip modx-2.7.2-pl.zip\nmv modx-2.7.2-pl modx\nchmod -R 775 modx\n```\n修改路径回到上层菜单并启动docker容器\n```\ncd ..\ndocker-compose up -d\n```\n这时打开/modx/setup就可以看到modx的安装页面了\n<img src=\"./1.png\" style=\"width:500px\">\n\n***\n### 安装Modx\n安装页面选择语言，点击下一步\n<img src=\"./2.png\" style=\"width:500px\">\n<br>\n<img src=\"./3.png\" style=\"width:500px\">\n设置mysql，将之前设定的用户名密码输入，注意在host处写入mysql，点击验证\n在本地连接登陆mysql数据库可以使用下面的命令行\n```\nmysql -u modx -h 127.0.0.1 -P 13306 --protocol=tcp -p\n```\n<br>\n也可以用SequelPro打开\n<img src=\"./12.png\" style=\"width:500px\">\n<br>\n<img src=\"./4.png\" style=\"width:500px\">\n<br>\n验证成功后选择文字编码,并验证\n<img src=\"./5.png\" style=\"width:500px\">\n<br>\n写入用户名和密码点击下一步\n<img src=\"./6.png\" style=\"width:500px\">\n<br>\n全部检查项目显示绿色，通过之后就可以安装了\n<img src=\"./7.png\" style=\"width:500px\">\n<br>\n安装成功后输入刚刚设定的用户名和密码进行登陆\n<img src=\"./8.png\" style=\"width:500px\">\n<br>\n<img src=\"./9.png\" style=\"width:500px\">\n<br>\n<img src=\"./10.png\" style=\"width:500px\">\n<br>\n\n大功告成！\n进入管理页面之后就可以进行你自己的CMS页面开发了！\n<br>\n<img src=\"./11.png\" style=\"width:500px\">\n<br>\n### 遗留课题\n如何将现存的数据导入数据库并在本地进行开发\n","source":"_posts/createDockerModx.md","raw":"---\ntitle: Install Modx Revolution With Docker\ndate: 2019-10-31 10:22:48\ntags:\n- Docker\n- Modx\n- Modx-docker\nclearReading: true\nthumbnailImage: 20191031.png\nthumbnailImagePosition: left\ncoverImage: cover.jpg\ncoverCaption: \"Hello World, Hello Programming\"\ncoverSize: partial\ncomments: false\ncategories: Back-end Knowledge\n---\n用docker构建modx安装环境\n<!--more-->\n\n### 什么是Modx\nMODx 是一个完全开源免费的 php 内容管理系统（CMS）. 是一个PHP 应用框架，可以帮助使用者控制自己的网上内容。\n它是开发人员和高级用户理想的控制系统，任何人都可以使用 MODx 发布、更新、维护动态网站，或 html 静态页面的网站内容。\n***\n\n### 使用docker构建环境\n环境可自行定义，本例的环境参照下面：\n- server: nginx:1.12.2\n- DB: mysql:5.6.34\n- Modx Revolition :modx-2.7.2-pl\n- php\n\n#### 1.从GitLab下载modx-docker\n[modx-docker Repo](https://gitlab.com/EUsipov/modx-docker)\n\n***\n#### 2.设置nginx服务器\n在nginx/site.conf文件里修改服务器名以及监听窗口号。记得不要漏了分号！否则之后无法启动的！\n\nnginx/site.conf\n```\nserver {\n    index index.php index.html;\n    server_name localhost;\n    listen 8899;\n    ...\n```\n***\n#### 3. 设置docker启动时的配置\ndocker-compose可以理解可以让你一条命令运行多个配置的容器。docker-compose.yml就是配置文件。\n下面将nginx的端口号设置成和ngin配置文件里一样：8899，记得这里要加上本地机默认域名，写成这样！ => \"127.0.0.1:8899:8899\"\n然后写上mysql的用户名和密码，mysql的端口号为了避免重复，这里使用'13306:3306'\n最后如下文所示：\n\ndocker-compose.yml\n```\nnginx:\n   image: nginx:1.12.2\n   container_name: nginx\n   restart: always\n   ports:\n      - \"127.0.0.1:8899:8899\"\n   volumes:\n      - ./code:/code\n      - ./nginx/site.conf:/etc/nginx/conf.d/site.conf\n   links:\n      - php\n\nphp:\n   build: ./php\n   container_name: php\n   restart: always\n   volumes:\n      - ./code:/code:rw\n   links:\n      - mysql\n\nmysql:\n   image: mysql:5.6.34\n   environment:\n      MYSQL_ROOT_PASSWORD: mysql\n      MYSQL_DATABASE: modx\n      MYSQL_USER: modx\n      MYSQL_PASSWORD: modx\n   ports:\n      - '13306:3306'\n   command: mysqld --sql-mode=NO_ENGINE_SUBSTITUTION\n   volumes:\n      - './mysql:/var/lib/mysql'\n```\n***\n#### 创建DB数据储存文件夹\n在根目录下创建mysql文件夹，用于储存数据库数据。这里的文件夹名与docker-compose.yml里mysql的volumes对应：\n```\nvolumes:\n      - './mysql:/var/lib/mysql'\n```\n***\n#### 创建code文件夹\n用于存放modx相关文件\n***\n#### 安装modx\n移动到code文件夹并在该路径内安装所需的modx\n```\ncd code\nwget http://modx.com/download/direct/modx-2.7.2-pl.zip\n```\n\n解压安装包并重命名文件夹，修改权限\n```\nunzip modx-2.7.2-pl.zip\nmv modx-2.7.2-pl modx\nchmod -R 775 modx\n```\n修改路径回到上层菜单并启动docker容器\n```\ncd ..\ndocker-compose up -d\n```\n这时打开/modx/setup就可以看到modx的安装页面了\n<img src=\"./1.png\" style=\"width:500px\">\n\n***\n### 安装Modx\n安装页面选择语言，点击下一步\n<img src=\"./2.png\" style=\"width:500px\">\n<br>\n<img src=\"./3.png\" style=\"width:500px\">\n设置mysql，将之前设定的用户名密码输入，注意在host处写入mysql，点击验证\n在本地连接登陆mysql数据库可以使用下面的命令行\n```\nmysql -u modx -h 127.0.0.1 -P 13306 --protocol=tcp -p\n```\n<br>\n也可以用SequelPro打开\n<img src=\"./12.png\" style=\"width:500px\">\n<br>\n<img src=\"./4.png\" style=\"width:500px\">\n<br>\n验证成功后选择文字编码,并验证\n<img src=\"./5.png\" style=\"width:500px\">\n<br>\n写入用户名和密码点击下一步\n<img src=\"./6.png\" style=\"width:500px\">\n<br>\n全部检查项目显示绿色，通过之后就可以安装了\n<img src=\"./7.png\" style=\"width:500px\">\n<br>\n安装成功后输入刚刚设定的用户名和密码进行登陆\n<img src=\"./8.png\" style=\"width:500px\">\n<br>\n<img src=\"./9.png\" style=\"width:500px\">\n<br>\n<img src=\"./10.png\" style=\"width:500px\">\n<br>\n\n大功告成！\n进入管理页面之后就可以进行你自己的CMS页面开发了！\n<br>\n<img src=\"./11.png\" style=\"width:500px\">\n<br>\n### 遗留课题\n如何将现存的数据导入数据库并在本地进行开发\n","slug":"createDockerModx","published":1,"updated":"2019-11-23T23:54:38.000Z","layout":"post","photos":[],"link":"","_id":"ck3it6k2f0021teyiwk2v6di4","content":"<p>用docker构建modx安装环境</p>\n<a id=\"more\"></a>\n\n<h3 id=\"什么是Modx\"><a href=\"#什么是Modx\" class=\"headerlink\" title=\"什么是Modx\"></a>什么是Modx</h3><p>MODx 是一个完全开源免费的 php 内容管理系统（CMS）. 是一个PHP 应用框架，可以帮助使用者控制自己的网上内容。<br>它是开发人员和高级用户理想的控制系统，任何人都可以使用 MODx 发布、更新、维护动态网站，或 html 静态页面的网站内容。</p>\n<hr>\n<h3 id=\"使用docker构建环境\"><a href=\"#使用docker构建环境\" class=\"headerlink\" title=\"使用docker构建环境\"></a>使用docker构建环境</h3><p>环境可自行定义，本例的环境参照下面：</p>\n<ul>\n<li>server: nginx:1.12.2</li>\n<li>DB: mysql:5.6.34</li>\n<li>Modx Revolition :modx-2.7.2-pl</li>\n<li>php</li>\n</ul>\n<h4 id=\"1-从GitLab下载modx-docker\"><a href=\"#1-从GitLab下载modx-docker\" class=\"headerlink\" title=\"1.从GitLab下载modx-docker\"></a>1.从GitLab下载modx-docker</h4><p><a href=\"https://gitlab.com/EUsipov/modx-docker\" target=\"_blank\" rel=\"noopener\">modx-docker Repo</a></p>\n<hr>\n<h4 id=\"2-设置nginx服务器\"><a href=\"#2-设置nginx服务器\" class=\"headerlink\" title=\"2.设置nginx服务器\"></a>2.设置nginx服务器</h4><p>在nginx/site.conf文件里修改服务器名以及监听窗口号。记得不要漏了分号！否则之后无法启动的！</p>\n<p>nginx/site.conf</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    index index.php index.html;</span><br><span class=\"line\">    server_name localhost;</span><br><span class=\"line\">    listen 8899;</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"3-设置docker启动时的配置\"><a href=\"#3-设置docker启动时的配置\" class=\"headerlink\" title=\"3. 设置docker启动时的配置\"></a>3. 设置docker启动时的配置</h4><p>docker-compose可以理解可以让你一条命令运行多个配置的容器。docker-compose.yml就是配置文件。<br>下面将nginx的端口号设置成和ngin配置文件里一样：8899，记得这里要加上本地机默认域名，写成这样！ =&gt; “127.0.0.1:8899:8899”<br>然后写上mysql的用户名和密码，mysql的端口号为了避免重复，这里使用’13306:3306’<br>最后如下文所示：</p>\n<p>docker-compose.yml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx:</span><br><span class=\"line\">   image: nginx:1.12.2</span><br><span class=\"line\">   container_name: nginx</span><br><span class=\"line\">   restart: always</span><br><span class=\"line\">   ports:</span><br><span class=\"line\">      - &quot;127.0.0.1:8899:8899&quot;</span><br><span class=\"line\">   volumes:</span><br><span class=\"line\">      - ./code:/code</span><br><span class=\"line\">      - ./nginx/site.conf:/etc/nginx/conf.d/site.conf</span><br><span class=\"line\">   links:</span><br><span class=\"line\">      - php</span><br><span class=\"line\"></span><br><span class=\"line\">php:</span><br><span class=\"line\">   build: ./php</span><br><span class=\"line\">   container_name: php</span><br><span class=\"line\">   restart: always</span><br><span class=\"line\">   volumes:</span><br><span class=\"line\">      - ./code:/code:rw</span><br><span class=\"line\">   links:</span><br><span class=\"line\">      - mysql</span><br><span class=\"line\"></span><br><span class=\"line\">mysql:</span><br><span class=\"line\">   image: mysql:5.6.34</span><br><span class=\"line\">   environment:</span><br><span class=\"line\">      MYSQL_ROOT_PASSWORD: mysql</span><br><span class=\"line\">      MYSQL_DATABASE: modx</span><br><span class=\"line\">      MYSQL_USER: modx</span><br><span class=\"line\">      MYSQL_PASSWORD: modx</span><br><span class=\"line\">   ports:</span><br><span class=\"line\">      - &apos;13306:3306&apos;</span><br><span class=\"line\">   command: mysqld --sql-mode=NO_ENGINE_SUBSTITUTION</span><br><span class=\"line\">   volumes:</span><br><span class=\"line\">      - &apos;./mysql:/var/lib/mysql&apos;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"创建DB数据储存文件夹\"><a href=\"#创建DB数据储存文件夹\" class=\"headerlink\" title=\"创建DB数据储存文件夹\"></a>创建DB数据储存文件夹</h4><p>在根目录下创建mysql文件夹，用于储存数据库数据。这里的文件夹名与docker-compose.yml里mysql的volumes对应：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">volumes:</span><br><span class=\"line\">      - &apos;./mysql:/var/lib/mysql&apos;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"创建code文件夹\"><a href=\"#创建code文件夹\" class=\"headerlink\" title=\"创建code文件夹\"></a>创建code文件夹</h4><p>用于存放modx相关文件</p>\n<hr>\n<h4 id=\"安装modx\"><a href=\"#安装modx\" class=\"headerlink\" title=\"安装modx\"></a>安装modx</h4><p>移动到code文件夹并在该路径内安装所需的modx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd code</span><br><span class=\"line\">wget http://modx.com/download/direct/modx-2.7.2-pl.zip</span><br></pre></td></tr></table></figure>\n\n<p>解压安装包并重命名文件夹，修改权限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unzip modx-2.7.2-pl.zip</span><br><span class=\"line\">mv modx-2.7.2-pl modx</span><br><span class=\"line\">chmod -R 775 modx</span><br></pre></td></tr></table></figure>\n\n<p>修改路径回到上层菜单并启动docker容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ..</span><br><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n<p>这时打开/modx/setup就可以看到modx的安装页面了<br><img src=\"./1.png\" style=\"width:500px\"></p>\n<hr>\n<h3 id=\"安装Modx\"><a href=\"#安装Modx\" class=\"headerlink\" title=\"安装Modx\"></a>安装Modx</h3><p>安装页面选择语言，点击下一步<br><img src=\"./2.png\" style=\"width:500px\"><br><br><br><img src=\"./3.png\" style=\"width:500px\"><br>设置mysql，将之前设定的用户名密码输入，注意在host处写入mysql，点击验证<br>在本地连接登陆mysql数据库可以使用下面的命令行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u modx -h 127.0.0.1 -P 13306 --protocol=tcp -p</span><br></pre></td></tr></table></figure>\n\n<br>\n也可以用SequelPro打开\n<img src=\"./12.png\" style=\"width:500px\">\n<br>\n<img src=\"./4.png\" style=\"width:500px\">\n<br>\n验证成功后选择文字编码,并验证\n<img src=\"./5.png\" style=\"width:500px\">\n<br>\n写入用户名和密码点击下一步\n<img src=\"./6.png\" style=\"width:500px\">\n<br>\n全部检查项目显示绿色，通过之后就可以安装了\n<img src=\"./7.png\" style=\"width:500px\">\n<br>\n安装成功后输入刚刚设定的用户名和密码进行登陆\n<img src=\"./8.png\" style=\"width:500px\">\n<br>\n<img src=\"./9.png\" style=\"width:500px\">\n<br>\n<img src=\"./10.png\" style=\"width:500px\">\n<br>\n\n<p>大功告成！<br>进入管理页面之后就可以进行你自己的CMS页面开发了！<br><br><br><img src=\"./11.png\" style=\"width:500px\"><br><br></p>\n<h3 id=\"遗留课题\"><a href=\"#遗留课题\" class=\"headerlink\" title=\"遗留课题\"></a>遗留课题</h3><p>如何将现存的数据导入数据库并在本地进行开发</p>\n","site":{"data":{}},"thumbnailImageUrl":"https://kisky3.github.io/2019/10/31/createDockerModx/20191031.png","excerpt":"<p>用docker构建modx安装环境</p>","more":"<h3 id=\"什么是Modx\"><a href=\"#什么是Modx\" class=\"headerlink\" title=\"什么是Modx\"></a>什么是Modx</h3><p>MODx 是一个完全开源免费的 php 内容管理系统（CMS）. 是一个PHP 应用框架，可以帮助使用者控制自己的网上内容。<br>它是开发人员和高级用户理想的控制系统，任何人都可以使用 MODx 发布、更新、维护动态网站，或 html 静态页面的网站内容。</p>\n<hr>\n<h3 id=\"使用docker构建环境\"><a href=\"#使用docker构建环境\" class=\"headerlink\" title=\"使用docker构建环境\"></a>使用docker构建环境</h3><p>环境可自行定义，本例的环境参照下面：</p>\n<ul>\n<li>server: nginx:1.12.2</li>\n<li>DB: mysql:5.6.34</li>\n<li>Modx Revolition :modx-2.7.2-pl</li>\n<li>php</li>\n</ul>\n<h4 id=\"1-从GitLab下载modx-docker\"><a href=\"#1-从GitLab下载modx-docker\" class=\"headerlink\" title=\"1.从GitLab下载modx-docker\"></a>1.从GitLab下载modx-docker</h4><p><a href=\"https://gitlab.com/EUsipov/modx-docker\" target=\"_blank\" rel=\"noopener\">modx-docker Repo</a></p>\n<hr>\n<h4 id=\"2-设置nginx服务器\"><a href=\"#2-设置nginx服务器\" class=\"headerlink\" title=\"2.设置nginx服务器\"></a>2.设置nginx服务器</h4><p>在nginx/site.conf文件里修改服务器名以及监听窗口号。记得不要漏了分号！否则之后无法启动的！</p>\n<p>nginx/site.conf</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    index index.php index.html;</span><br><span class=\"line\">    server_name localhost;</span><br><span class=\"line\">    listen 8899;</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"3-设置docker启动时的配置\"><a href=\"#3-设置docker启动时的配置\" class=\"headerlink\" title=\"3. 设置docker启动时的配置\"></a>3. 设置docker启动时的配置</h4><p>docker-compose可以理解可以让你一条命令运行多个配置的容器。docker-compose.yml就是配置文件。<br>下面将nginx的端口号设置成和ngin配置文件里一样：8899，记得这里要加上本地机默认域名，写成这样！ =&gt; “127.0.0.1:8899:8899”<br>然后写上mysql的用户名和密码，mysql的端口号为了避免重复，这里使用’13306:3306’<br>最后如下文所示：</p>\n<p>docker-compose.yml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx:</span><br><span class=\"line\">   image: nginx:1.12.2</span><br><span class=\"line\">   container_name: nginx</span><br><span class=\"line\">   restart: always</span><br><span class=\"line\">   ports:</span><br><span class=\"line\">      - &quot;127.0.0.1:8899:8899&quot;</span><br><span class=\"line\">   volumes:</span><br><span class=\"line\">      - ./code:/code</span><br><span class=\"line\">      - ./nginx/site.conf:/etc/nginx/conf.d/site.conf</span><br><span class=\"line\">   links:</span><br><span class=\"line\">      - php</span><br><span class=\"line\"></span><br><span class=\"line\">php:</span><br><span class=\"line\">   build: ./php</span><br><span class=\"line\">   container_name: php</span><br><span class=\"line\">   restart: always</span><br><span class=\"line\">   volumes:</span><br><span class=\"line\">      - ./code:/code:rw</span><br><span class=\"line\">   links:</span><br><span class=\"line\">      - mysql</span><br><span class=\"line\"></span><br><span class=\"line\">mysql:</span><br><span class=\"line\">   image: mysql:5.6.34</span><br><span class=\"line\">   environment:</span><br><span class=\"line\">      MYSQL_ROOT_PASSWORD: mysql</span><br><span class=\"line\">      MYSQL_DATABASE: modx</span><br><span class=\"line\">      MYSQL_USER: modx</span><br><span class=\"line\">      MYSQL_PASSWORD: modx</span><br><span class=\"line\">   ports:</span><br><span class=\"line\">      - &apos;13306:3306&apos;</span><br><span class=\"line\">   command: mysqld --sql-mode=NO_ENGINE_SUBSTITUTION</span><br><span class=\"line\">   volumes:</span><br><span class=\"line\">      - &apos;./mysql:/var/lib/mysql&apos;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"创建DB数据储存文件夹\"><a href=\"#创建DB数据储存文件夹\" class=\"headerlink\" title=\"创建DB数据储存文件夹\"></a>创建DB数据储存文件夹</h4><p>在根目录下创建mysql文件夹，用于储存数据库数据。这里的文件夹名与docker-compose.yml里mysql的volumes对应：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">volumes:</span><br><span class=\"line\">      - &apos;./mysql:/var/lib/mysql&apos;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"创建code文件夹\"><a href=\"#创建code文件夹\" class=\"headerlink\" title=\"创建code文件夹\"></a>创建code文件夹</h4><p>用于存放modx相关文件</p>\n<hr>\n<h4 id=\"安装modx\"><a href=\"#安装modx\" class=\"headerlink\" title=\"安装modx\"></a>安装modx</h4><p>移动到code文件夹并在该路径内安装所需的modx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd code</span><br><span class=\"line\">wget http://modx.com/download/direct/modx-2.7.2-pl.zip</span><br></pre></td></tr></table></figure>\n\n<p>解压安装包并重命名文件夹，修改权限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unzip modx-2.7.2-pl.zip</span><br><span class=\"line\">mv modx-2.7.2-pl modx</span><br><span class=\"line\">chmod -R 775 modx</span><br></pre></td></tr></table></figure>\n\n<p>修改路径回到上层菜单并启动docker容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ..</span><br><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n<p>这时打开/modx/setup就可以看到modx的安装页面了<br><img src=\"./1.png\" style=\"width:500px\"></p>\n<hr>\n<h3 id=\"安装Modx\"><a href=\"#安装Modx\" class=\"headerlink\" title=\"安装Modx\"></a>安装Modx</h3><p>安装页面选择语言，点击下一步<br><img src=\"./2.png\" style=\"width:500px\"><br><br><br><img src=\"./3.png\" style=\"width:500px\"><br>设置mysql，将之前设定的用户名密码输入，注意在host处写入mysql，点击验证<br>在本地连接登陆mysql数据库可以使用下面的命令行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u modx -h 127.0.0.1 -P 13306 --protocol=tcp -p</span><br></pre></td></tr></table></figure>\n\n<br>\n也可以用SequelPro打开\n<img src=\"./12.png\" style=\"width:500px\">\n<br>\n<img src=\"./4.png\" style=\"width:500px\">\n<br>\n验证成功后选择文字编码,并验证\n<img src=\"./5.png\" style=\"width:500px\">\n<br>\n写入用户名和密码点击下一步\n<img src=\"./6.png\" style=\"width:500px\">\n<br>\n全部检查项目显示绿色，通过之后就可以安装了\n<img src=\"./7.png\" style=\"width:500px\">\n<br>\n安装成功后输入刚刚设定的用户名和密码进行登陆\n<img src=\"./8.png\" style=\"width:500px\">\n<br>\n<img src=\"./9.png\" style=\"width:500px\">\n<br>\n<img src=\"./10.png\" style=\"width:500px\">\n<br>\n\n<p>大功告成！<br>进入管理页面之后就可以进行你自己的CMS页面开发了！<br><br><br><img src=\"./11.png\" style=\"width:500px\"><br><br></p>\n<h3 id=\"遗留课题\"><a href=\"#遗留课题\" class=\"headerlink\" title=\"遗留课题\"></a>遗留课题</h3><p>如何将现存的数据导入数据库并在本地进行开发</p>"},{"title":"Docker Basic and Commands","date":"2019-11-06T15:10:07.000Z","clearReading":true,"thumbnailImage":"20191107.png","thumbnailImagePosition":"left","coverImage":"cover.jpg","coverCaption":"Hello World, Hello Programming","coverSize":"partial","comments":0,"_content":"docker的基础知识以及常用命令行\n<!--more-->\n### 1.Docker 简介\nDocker 两个主要部件：\n\n- Docker: 开源的容器虚拟化平台\n- Docker Hub: 用于分享、管理 Docker 容器的 Docker SaaS 平台 -- [Docker Hub](https://link.jianshu.com/?t=https://registry.hub.docker.com/search?q=library)\n\n*** \n### 2.Docker内部\n要理解 Docker 内部构建，需要理解以下三种部件：\n\n- Docker 镜像 - Docker images\n- Docker 仓库 - Docker registeries\n- Docker 容器 - Docker containers\n\n***\n\n###### Docker 镜像\nDocker 镜像是 Docker 容器运行时的只读模板。每一个镜像由一系列的层 (layers) 组成。\n如果我们想要在本地运行容器，就必须保证本地存在对应的镜像。所以，第一步，我们需要下载镜像。当我们尝试下载镜像时，Docker 会尝试先从默认的镜像仓库（默认使用 Docker Hub 公共仓库）去下载，当然了，用户也可以自定义配置想要下载的镜像仓库。\n\n***\n###### Docker 仓库\nDocker 仓库用来保存镜像，可以理解为代码控制中的代码仓库。同样的，Docker 仓库也有公有和私有的概念。公有的 Docker 仓库名字是 Docker Hub。Docker Hub 提供了庞大的镜像集合供使用。这些镜像可以是自己创建，或者在别人的镜像基础上创建。Docker 仓库是 Docker 的分发部分。\n***\n###### Docker 容器\nDocker 容器和文件夹很类似，一个Docker容器包含了所有的某个应用运行所需要的环境。每一个 Docker 容器都是从 Docker 镜像创建的。Docker 容器可以运行、开始、停止、移动和删除。每一个 Docker 容器都是独立和安全的应用平台，Docker 容器是 Docker 的运行部分。\n***\n###### Docker File \n当获得docker镜像时，还不能就这样使用，大多数情况下我们要根据自身所需要的条件（比如版本号啊，端口号啊之类的）来将docker镜像设置成我们所需要的开发环境。\n实际上，docker file一般写成下面这样。\n```\nFROM centos:7               # ①\nRUN yum install -y java     # ②\nADD files/apache-tomcat-9.0.6.tar.gz /opt/  # ③\nCMD [ \"/opt/apache-tomcat-9.0.6/bin/catalina.sh\", \"run\" ]  # ④\n```\n① FROM是指定你所需要的docker镜像（作为最基层）。比如这里就是将centos:7的docker镜像为基础来执行之后的指令。\n在执行时哪怕没有事先通过docker pull获取镜像，它也能自动获取相应的镜像供你使用。\n\n② RUN是指在OS命令行执行时使用。在这里是指下载java，并加上了-y 的选项默认确认安装\n\n③ ADD是指将 tar.gz文件的容器copy到你的指定的路径内，并同时解压展开tar文件。\n写成这样：「ADD <copy源文件> <复制到Docker镜像内・并展开\n这里就是在与docker file同阶层的地方生成一个「file」的路径，并将tomcat放置其中\n\n④ CMD是指容器启动时所执行的命令行\n\n我们现在利用做好的Dockerfile来生成Docker镜像。移动到Docker所在的路径，然后使用生成Docker镜像的命令：build\n```\n# cd <Dockerfile所在路径>\n# docker build -t tomcat:1 .\n　(docker build -t <Docker镜像名> <Dockerfile所在路径>)\n# docker images\nREPOSITORY   TAG   IMAGE ID       CREATED         SIZE\ntomcat       1     10af894cf09a   1 minutes ago   456MB\n```\n\n通过这样我们就生成了自己的Docker镜像。然后我们使用Docker镜像来启动docker容器。\n```\n# docker run -it -d --name tomcat-1 -p 8081:8080 tomcat:1\n```\n然后打开「http://<IP地址>:8081/」就能看到启动成功的画面了。\n\n可以使用下面的命令来查看log\n```\n# docker logs -f tomcat-1\n```\n***\n###### Docker Compose\n就是对于有好几个容器构成的服务来说，可以使用Docker Compose来控制多个Docker镜像的生成（build）和多个容器的启动和停止\n\n上面几个概念的整体关系如图所示：\n<img src=\"./1.png\">\n\n***\n### Docker基础用法\n[Docker Hub](https://link.jianshu.com/?t=https://registry.hub.docker.com/search?q=library): Docker镜像首页，包括官方镜像和其它公开镜像\n\n镜像搜索\n```\nsudo docker search ubuntu # 搜索ubuntu官方镜像\n```\n\n获取镜像\n```\n$ sudo docker pull ubuntu # 获取ubuntu官方镜像\n$ sudo docker images # 查看当前镜像列表\n```\n\n删除镜像\n```\ndocker rmi IMAGE [IMAGE...]\n```\n\n运行容器\n・docker run - 运行一个容器\n・-t - 分配一个（伪）tty (link is external)\n・-i - 交互模式 (so we can interact with it)\n・ubuntu:14.04 - 使用 ubuntu 基础镜像 14.04\n・/bin/bash - 运行命令 bash shell\n\n```\nsudo docker run -i -t ubuntu:14.04 /bin/bash\n```\n\n查看当前所有容器\n```\n$ sudo docker ps # 查看当前运行的容器, ps -a 列出当前系统所有的容器\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n6c9129e9df10        ubuntu:14.04        /bin/bash           6 minutes ago       Up 6 minutes                            cranky_babbage\n```\n\n进入指定容器（运行中）\n```\ndocker attach CONTAINER\ndocker exec -it CONTAINER /bin/bash\n\n```\n\n删除所有容器\n```\ndocker rm $(docker ps -aq)\n```\n***\n##### Docker-compose\n启动所有的容器\n```\ndocker-compose up -d\n```\n\n进入启动中的某个容器内\n```\ndocker-compose + exec ( or run )  + サービス名 + 実行したいコマンド\n```\n\n停止全部容器或某个容器的运行\n```\ndocker-compose stop\ndocker-compose stop nginx\n```\n","source":"_posts/dockercommand.md","raw":"---\ntitle: Docker Basic and Commands\ndate: 2019-11-07 00:10:07\ntags:\n- Docker\n- Command\nclearReading: true\nthumbnailImage: 20191107.png\nthumbnailImagePosition: left\ncoverImage: cover.jpg\ncoverCaption: \"Hello World, Hello Programming\"\ncoverSize: partial\ncomments: false\ncategories: Back-end Knowledge\n---\ndocker的基础知识以及常用命令行\n<!--more-->\n### 1.Docker 简介\nDocker 两个主要部件：\n\n- Docker: 开源的容器虚拟化平台\n- Docker Hub: 用于分享、管理 Docker 容器的 Docker SaaS 平台 -- [Docker Hub](https://link.jianshu.com/?t=https://registry.hub.docker.com/search?q=library)\n\n*** \n### 2.Docker内部\n要理解 Docker 内部构建，需要理解以下三种部件：\n\n- Docker 镜像 - Docker images\n- Docker 仓库 - Docker registeries\n- Docker 容器 - Docker containers\n\n***\n\n###### Docker 镜像\nDocker 镜像是 Docker 容器运行时的只读模板。每一个镜像由一系列的层 (layers) 组成。\n如果我们想要在本地运行容器，就必须保证本地存在对应的镜像。所以，第一步，我们需要下载镜像。当我们尝试下载镜像时，Docker 会尝试先从默认的镜像仓库（默认使用 Docker Hub 公共仓库）去下载，当然了，用户也可以自定义配置想要下载的镜像仓库。\n\n***\n###### Docker 仓库\nDocker 仓库用来保存镜像，可以理解为代码控制中的代码仓库。同样的，Docker 仓库也有公有和私有的概念。公有的 Docker 仓库名字是 Docker Hub。Docker Hub 提供了庞大的镜像集合供使用。这些镜像可以是自己创建，或者在别人的镜像基础上创建。Docker 仓库是 Docker 的分发部分。\n***\n###### Docker 容器\nDocker 容器和文件夹很类似，一个Docker容器包含了所有的某个应用运行所需要的环境。每一个 Docker 容器都是从 Docker 镜像创建的。Docker 容器可以运行、开始、停止、移动和删除。每一个 Docker 容器都是独立和安全的应用平台，Docker 容器是 Docker 的运行部分。\n***\n###### Docker File \n当获得docker镜像时，还不能就这样使用，大多数情况下我们要根据自身所需要的条件（比如版本号啊，端口号啊之类的）来将docker镜像设置成我们所需要的开发环境。\n实际上，docker file一般写成下面这样。\n```\nFROM centos:7               # ①\nRUN yum install -y java     # ②\nADD files/apache-tomcat-9.0.6.tar.gz /opt/  # ③\nCMD [ \"/opt/apache-tomcat-9.0.6/bin/catalina.sh\", \"run\" ]  # ④\n```\n① FROM是指定你所需要的docker镜像（作为最基层）。比如这里就是将centos:7的docker镜像为基础来执行之后的指令。\n在执行时哪怕没有事先通过docker pull获取镜像，它也能自动获取相应的镜像供你使用。\n\n② RUN是指在OS命令行执行时使用。在这里是指下载java，并加上了-y 的选项默认确认安装\n\n③ ADD是指将 tar.gz文件的容器copy到你的指定的路径内，并同时解压展开tar文件。\n写成这样：「ADD <copy源文件> <复制到Docker镜像内・并展开\n这里就是在与docker file同阶层的地方生成一个「file」的路径，并将tomcat放置其中\n\n④ CMD是指容器启动时所执行的命令行\n\n我们现在利用做好的Dockerfile来生成Docker镜像。移动到Docker所在的路径，然后使用生成Docker镜像的命令：build\n```\n# cd <Dockerfile所在路径>\n# docker build -t tomcat:1 .\n　(docker build -t <Docker镜像名> <Dockerfile所在路径>)\n# docker images\nREPOSITORY   TAG   IMAGE ID       CREATED         SIZE\ntomcat       1     10af894cf09a   1 minutes ago   456MB\n```\n\n通过这样我们就生成了自己的Docker镜像。然后我们使用Docker镜像来启动docker容器。\n```\n# docker run -it -d --name tomcat-1 -p 8081:8080 tomcat:1\n```\n然后打开「http://<IP地址>:8081/」就能看到启动成功的画面了。\n\n可以使用下面的命令来查看log\n```\n# docker logs -f tomcat-1\n```\n***\n###### Docker Compose\n就是对于有好几个容器构成的服务来说，可以使用Docker Compose来控制多个Docker镜像的生成（build）和多个容器的启动和停止\n\n上面几个概念的整体关系如图所示：\n<img src=\"./1.png\">\n\n***\n### Docker基础用法\n[Docker Hub](https://link.jianshu.com/?t=https://registry.hub.docker.com/search?q=library): Docker镜像首页，包括官方镜像和其它公开镜像\n\n镜像搜索\n```\nsudo docker search ubuntu # 搜索ubuntu官方镜像\n```\n\n获取镜像\n```\n$ sudo docker pull ubuntu # 获取ubuntu官方镜像\n$ sudo docker images # 查看当前镜像列表\n```\n\n删除镜像\n```\ndocker rmi IMAGE [IMAGE...]\n```\n\n运行容器\n・docker run - 运行一个容器\n・-t - 分配一个（伪）tty (link is external)\n・-i - 交互模式 (so we can interact with it)\n・ubuntu:14.04 - 使用 ubuntu 基础镜像 14.04\n・/bin/bash - 运行命令 bash shell\n\n```\nsudo docker run -i -t ubuntu:14.04 /bin/bash\n```\n\n查看当前所有容器\n```\n$ sudo docker ps # 查看当前运行的容器, ps -a 列出当前系统所有的容器\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n6c9129e9df10        ubuntu:14.04        /bin/bash           6 minutes ago       Up 6 minutes                            cranky_babbage\n```\n\n进入指定容器（运行中）\n```\ndocker attach CONTAINER\ndocker exec -it CONTAINER /bin/bash\n\n```\n\n删除所有容器\n```\ndocker rm $(docker ps -aq)\n```\n***\n##### Docker-compose\n启动所有的容器\n```\ndocker-compose up -d\n```\n\n进入启动中的某个容器内\n```\ndocker-compose + exec ( or run )  + サービス名 + 実行したいコマンド\n```\n\n停止全部容器或某个容器的运行\n```\ndocker-compose stop\ndocker-compose stop nginx\n```\n","slug":"dockercommand","published":1,"updated":"2019-11-23T23:54:38.000Z","layout":"post","photos":[],"link":"","_id":"ck3it6k2g0024teyiexohw5hh","content":"<p>docker的基础知识以及常用命令行</p>\n<a id=\"more\"></a>\n<h3 id=\"1-Docker-简介\"><a href=\"#1-Docker-简介\" class=\"headerlink\" title=\"1.Docker 简介\"></a>1.Docker 简介</h3><p>Docker 两个主要部件：</p>\n<ul>\n<li>Docker: 开源的容器虚拟化平台</li>\n<li>Docker Hub: 用于分享、管理 Docker 容器的 Docker SaaS 平台 – <a href=\"https://link.jianshu.com/?t=https://registry.hub.docker.com/search?q=library\" target=\"_blank\" rel=\"noopener\">Docker Hub</a></li>\n</ul>\n<hr>\n<h3 id=\"2-Docker内部\"><a href=\"#2-Docker内部\" class=\"headerlink\" title=\"2.Docker内部\"></a>2.Docker内部</h3><p>要理解 Docker 内部构建，需要理解以下三种部件：</p>\n<ul>\n<li>Docker 镜像 - Docker images</li>\n<li>Docker 仓库 - Docker registeries</li>\n<li>Docker 容器 - Docker containers</li>\n</ul>\n<hr>\n<h6 id=\"Docker-镜像\"><a href=\"#Docker-镜像\" class=\"headerlink\" title=\"Docker 镜像\"></a>Docker 镜像</h6><p>Docker 镜像是 Docker 容器运行时的只读模板。每一个镜像由一系列的层 (layers) 组成。<br>如果我们想要在本地运行容器，就必须保证本地存在对应的镜像。所以，第一步，我们需要下载镜像。当我们尝试下载镜像时，Docker 会尝试先从默认的镜像仓库（默认使用 Docker Hub 公共仓库）去下载，当然了，用户也可以自定义配置想要下载的镜像仓库。</p>\n<hr>\n<h6 id=\"Docker-仓库\"><a href=\"#Docker-仓库\" class=\"headerlink\" title=\"Docker 仓库\"></a>Docker 仓库</h6><p>Docker 仓库用来保存镜像，可以理解为代码控制中的代码仓库。同样的，Docker 仓库也有公有和私有的概念。公有的 Docker 仓库名字是 Docker Hub。Docker Hub 提供了庞大的镜像集合供使用。这些镜像可以是自己创建，或者在别人的镜像基础上创建。Docker 仓库是 Docker 的分发部分。</p>\n<hr>\n<h6 id=\"Docker-容器\"><a href=\"#Docker-容器\" class=\"headerlink\" title=\"Docker 容器\"></a>Docker 容器</h6><p>Docker 容器和文件夹很类似，一个Docker容器包含了所有的某个应用运行所需要的环境。每一个 Docker 容器都是从 Docker 镜像创建的。Docker 容器可以运行、开始、停止、移动和删除。每一个 Docker 容器都是独立和安全的应用平台，Docker 容器是 Docker 的运行部分。</p>\n<hr>\n<h6 id=\"Docker-File\"><a href=\"#Docker-File\" class=\"headerlink\" title=\"Docker File\"></a>Docker File</h6><p>当获得docker镜像时，还不能就这样使用，大多数情况下我们要根据自身所需要的条件（比如版本号啊，端口号啊之类的）来将docker镜像设置成我们所需要的开发环境。<br>实际上，docker file一般写成下面这样。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM centos:7               # ①</span><br><span class=\"line\">RUN yum install -y java     # ②</span><br><span class=\"line\">ADD files/apache-tomcat-9.0.6.tar.gz /opt/  # ③</span><br><span class=\"line\">CMD [ &quot;/opt/apache-tomcat-9.0.6/bin/catalina.sh&quot;, &quot;run&quot; ]  # ④</span><br></pre></td></tr></table></figure>\n\n<p>① FROM是指定你所需要的docker镜像（作为最基层）。比如这里就是将centos:7的docker镜像为基础来执行之后的指令。<br>在执行时哪怕没有事先通过docker pull获取镜像，它也能自动获取相应的镜像供你使用。</p>\n<p>② RUN是指在OS命令行执行时使用。在这里是指下载java，并加上了-y 的选项默认确认安装</p>\n<p>③ ADD是指将 tar.gz文件的容器copy到你的指定的路径内，并同时解压展开tar文件。<br>写成这样：「ADD &lt;copy源文件&gt; &lt;复制到Docker镜像内・并展开<br>这里就是在与docker file同阶层的地方生成一个「file」的路径，并将tomcat放置其中</p>\n<p>④ CMD是指容器启动时所执行的命令行</p>\n<p>我们现在利用做好的Dockerfile来生成Docker镜像。移动到Docker所在的路径，然后使用生成Docker镜像的命令：build</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># cd &lt;Dockerfile所在路径&gt;</span><br><span class=\"line\"># docker build -t tomcat:1 .</span><br><span class=\"line\">　(docker build -t &lt;Docker镜像名&gt; &lt;Dockerfile所在路径&gt;)</span><br><span class=\"line\"># docker images</span><br><span class=\"line\">REPOSITORY   TAG   IMAGE ID       CREATED         SIZE</span><br><span class=\"line\">tomcat       1     10af894cf09a   1 minutes ago   456MB</span><br></pre></td></tr></table></figure>\n\n<p>通过这样我们就生成了自己的Docker镜像。然后我们使用Docker镜像来启动docker容器。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># docker run -it -d --name tomcat-1 -p 8081:8080 tomcat:1</span><br></pre></td></tr></table></figure>\n\n<p>然后打开「http://&lt;IP地址&gt;:8081/」就能看到启动成功的画面了。</p>\n<p>可以使用下面的命令来查看log</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># docker logs -f tomcat-1</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h6 id=\"Docker-Compose\"><a href=\"#Docker-Compose\" class=\"headerlink\" title=\"Docker Compose\"></a>Docker Compose</h6><p>就是对于有好几个容器构成的服务来说，可以使用Docker Compose来控制多个Docker镜像的生成（build）和多个容器的启动和停止</p>\n<p>上面几个概念的整体关系如图所示：<br><img src=\"./1.png\"></p>\n<hr>\n<h3 id=\"Docker基础用法\"><a href=\"#Docker基础用法\" class=\"headerlink\" title=\"Docker基础用法\"></a>Docker基础用法</h3><p><a href=\"https://link.jianshu.com/?t=https://registry.hub.docker.com/search?q=library\" target=\"_blank\" rel=\"noopener\">Docker Hub</a>: Docker镜像首页，包括官方镜像和其它公开镜像</p>\n<p>镜像搜索</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker search ubuntu # 搜索ubuntu官方镜像</span><br></pre></td></tr></table></figure>\n\n<p>获取镜像</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker pull ubuntu # 获取ubuntu官方镜像</span><br><span class=\"line\">$ sudo docker images # 查看当前镜像列表</span><br></pre></td></tr></table></figure>\n\n<p>删除镜像</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi IMAGE [IMAGE...]</span><br></pre></td></tr></table></figure>\n\n<p>运行容器<br>・docker run - 运行一个容器<br>・-t - 分配一个（伪）tty (link is external)<br>・-i - 交互模式 (so we can interact with it)<br>・ubuntu:14.04 - 使用 ubuntu 基础镜像 14.04<br>・/bin/bash - 运行命令 bash shell</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run -i -t ubuntu:14.04 /bin/bash</span><br></pre></td></tr></table></figure>\n\n<p>查看当前所有容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker ps # 查看当前运行的容器, ps -a 列出当前系统所有的容器</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class=\"line\">6c9129e9df10        ubuntu:14.04        /bin/bash           6 minutes ago       Up 6 minutes                            cranky_babbage</span><br></pre></td></tr></table></figure>\n\n<p>进入指定容器（运行中）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker attach CONTAINER</span><br><span class=\"line\">docker exec -it CONTAINER /bin/bash</span><br></pre></td></tr></table></figure>\n\n<p>删除所有容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm $(docker ps -aq)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h5 id=\"Docker-compose\"><a href=\"#Docker-compose\" class=\"headerlink\" title=\"Docker-compose\"></a>Docker-compose</h5><p>启动所有的容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n<p>进入启动中的某个容器内</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose + exec ( or run )  + サービス名 + 実行したいコマンド</span><br></pre></td></tr></table></figure>\n\n<p>停止全部容器或某个容器的运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose stop</span><br><span class=\"line\">docker-compose stop nginx</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"thumbnailImageUrl":"https://kisky3.github.io/2019/11/07/dockercommand/20191107.png","excerpt":"<p>docker的基础知识以及常用命令行</p>","more":"<h3 id=\"1-Docker-简介\"><a href=\"#1-Docker-简介\" class=\"headerlink\" title=\"1.Docker 简介\"></a>1.Docker 简介</h3><p>Docker 两个主要部件：</p>\n<ul>\n<li>Docker: 开源的容器虚拟化平台</li>\n<li>Docker Hub: 用于分享、管理 Docker 容器的 Docker SaaS 平台 – <a href=\"https://link.jianshu.com/?t=https://registry.hub.docker.com/search?q=library\" target=\"_blank\" rel=\"noopener\">Docker Hub</a></li>\n</ul>\n<hr>\n<h3 id=\"2-Docker内部\"><a href=\"#2-Docker内部\" class=\"headerlink\" title=\"2.Docker内部\"></a>2.Docker内部</h3><p>要理解 Docker 内部构建，需要理解以下三种部件：</p>\n<ul>\n<li>Docker 镜像 - Docker images</li>\n<li>Docker 仓库 - Docker registeries</li>\n<li>Docker 容器 - Docker containers</li>\n</ul>\n<hr>\n<h6 id=\"Docker-镜像\"><a href=\"#Docker-镜像\" class=\"headerlink\" title=\"Docker 镜像\"></a>Docker 镜像</h6><p>Docker 镜像是 Docker 容器运行时的只读模板。每一个镜像由一系列的层 (layers) 组成。<br>如果我们想要在本地运行容器，就必须保证本地存在对应的镜像。所以，第一步，我们需要下载镜像。当我们尝试下载镜像时，Docker 会尝试先从默认的镜像仓库（默认使用 Docker Hub 公共仓库）去下载，当然了，用户也可以自定义配置想要下载的镜像仓库。</p>\n<hr>\n<h6 id=\"Docker-仓库\"><a href=\"#Docker-仓库\" class=\"headerlink\" title=\"Docker 仓库\"></a>Docker 仓库</h6><p>Docker 仓库用来保存镜像，可以理解为代码控制中的代码仓库。同样的，Docker 仓库也有公有和私有的概念。公有的 Docker 仓库名字是 Docker Hub。Docker Hub 提供了庞大的镜像集合供使用。这些镜像可以是自己创建，或者在别人的镜像基础上创建。Docker 仓库是 Docker 的分发部分。</p>\n<hr>\n<h6 id=\"Docker-容器\"><a href=\"#Docker-容器\" class=\"headerlink\" title=\"Docker 容器\"></a>Docker 容器</h6><p>Docker 容器和文件夹很类似，一个Docker容器包含了所有的某个应用运行所需要的环境。每一个 Docker 容器都是从 Docker 镜像创建的。Docker 容器可以运行、开始、停止、移动和删除。每一个 Docker 容器都是独立和安全的应用平台，Docker 容器是 Docker 的运行部分。</p>\n<hr>\n<h6 id=\"Docker-File\"><a href=\"#Docker-File\" class=\"headerlink\" title=\"Docker File\"></a>Docker File</h6><p>当获得docker镜像时，还不能就这样使用，大多数情况下我们要根据自身所需要的条件（比如版本号啊，端口号啊之类的）来将docker镜像设置成我们所需要的开发环境。<br>实际上，docker file一般写成下面这样。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM centos:7               # ①</span><br><span class=\"line\">RUN yum install -y java     # ②</span><br><span class=\"line\">ADD files/apache-tomcat-9.0.6.tar.gz /opt/  # ③</span><br><span class=\"line\">CMD [ &quot;/opt/apache-tomcat-9.0.6/bin/catalina.sh&quot;, &quot;run&quot; ]  # ④</span><br></pre></td></tr></table></figure>\n\n<p>① FROM是指定你所需要的docker镜像（作为最基层）。比如这里就是将centos:7的docker镜像为基础来执行之后的指令。<br>在执行时哪怕没有事先通过docker pull获取镜像，它也能自动获取相应的镜像供你使用。</p>\n<p>② RUN是指在OS命令行执行时使用。在这里是指下载java，并加上了-y 的选项默认确认安装</p>\n<p>③ ADD是指将 tar.gz文件的容器copy到你的指定的路径内，并同时解压展开tar文件。<br>写成这样：「ADD &lt;copy源文件&gt; &lt;复制到Docker镜像内・并展开<br>这里就是在与docker file同阶层的地方生成一个「file」的路径，并将tomcat放置其中</p>\n<p>④ CMD是指容器启动时所执行的命令行</p>\n<p>我们现在利用做好的Dockerfile来生成Docker镜像。移动到Docker所在的路径，然后使用生成Docker镜像的命令：build</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># cd &lt;Dockerfile所在路径&gt;</span><br><span class=\"line\"># docker build -t tomcat:1 .</span><br><span class=\"line\">　(docker build -t &lt;Docker镜像名&gt; &lt;Dockerfile所在路径&gt;)</span><br><span class=\"line\"># docker images</span><br><span class=\"line\">REPOSITORY   TAG   IMAGE ID       CREATED         SIZE</span><br><span class=\"line\">tomcat       1     10af894cf09a   1 minutes ago   456MB</span><br></pre></td></tr></table></figure>\n\n<p>通过这样我们就生成了自己的Docker镜像。然后我们使用Docker镜像来启动docker容器。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># docker run -it -d --name tomcat-1 -p 8081:8080 tomcat:1</span><br></pre></td></tr></table></figure>\n\n<p>然后打开「http://&lt;IP地址&gt;:8081/」就能看到启动成功的画面了。</p>\n<p>可以使用下面的命令来查看log</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># docker logs -f tomcat-1</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h6 id=\"Docker-Compose\"><a href=\"#Docker-Compose\" class=\"headerlink\" title=\"Docker Compose\"></a>Docker Compose</h6><p>就是对于有好几个容器构成的服务来说，可以使用Docker Compose来控制多个Docker镜像的生成（build）和多个容器的启动和停止</p>\n<p>上面几个概念的整体关系如图所示：<br><img src=\"./1.png\"></p>\n<hr>\n<h3 id=\"Docker基础用法\"><a href=\"#Docker基础用法\" class=\"headerlink\" title=\"Docker基础用法\"></a>Docker基础用法</h3><p><a href=\"https://link.jianshu.com/?t=https://registry.hub.docker.com/search?q=library\" target=\"_blank\" rel=\"noopener\">Docker Hub</a>: Docker镜像首页，包括官方镜像和其它公开镜像</p>\n<p>镜像搜索</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker search ubuntu # 搜索ubuntu官方镜像</span><br></pre></td></tr></table></figure>\n\n<p>获取镜像</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker pull ubuntu # 获取ubuntu官方镜像</span><br><span class=\"line\">$ sudo docker images # 查看当前镜像列表</span><br></pre></td></tr></table></figure>\n\n<p>删除镜像</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi IMAGE [IMAGE...]</span><br></pre></td></tr></table></figure>\n\n<p>运行容器<br>・docker run - 运行一个容器<br>・-t - 分配一个（伪）tty (link is external)<br>・-i - 交互模式 (so we can interact with it)<br>・ubuntu:14.04 - 使用 ubuntu 基础镜像 14.04<br>・/bin/bash - 运行命令 bash shell</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run -i -t ubuntu:14.04 /bin/bash</span><br></pre></td></tr></table></figure>\n\n<p>查看当前所有容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker ps # 查看当前运行的容器, ps -a 列出当前系统所有的容器</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class=\"line\">6c9129e9df10        ubuntu:14.04        /bin/bash           6 minutes ago       Up 6 minutes                            cranky_babbage</span><br></pre></td></tr></table></figure>\n\n<p>进入指定容器（运行中）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker attach CONTAINER</span><br><span class=\"line\">docker exec -it CONTAINER /bin/bash</span><br></pre></td></tr></table></figure>\n\n<p>删除所有容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm $(docker ps -aq)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h5 id=\"Docker-compose\"><a href=\"#Docker-compose\" class=\"headerlink\" title=\"Docker-compose\"></a>Docker-compose</h5><p>启动所有的容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n<p>进入启动中的某个容器内</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose + exec ( or run )  + サービス名 + 実行したいコマンド</span><br></pre></td></tr></table></figure>\n\n<p>停止全部容器或某个容器的运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose stop</span><br><span class=\"line\">docker-compose stop nginx</span><br></pre></td></tr></table></figure>"},{"title":"Mac iTerm2 powerlevel9k Theme","date":"2019-10-06T14:56:14.000Z","clearReading":true,"thumbnailImage":"20191006.png","thumbnailImagePosition":"left","coverImage":"cover.jpg","coverCaption":"Hello World, Hello Programming","coverSize":"partial","comments":0,"_content":"Mac iTerm2的个性主题设置\n\n<!--more-->\n\n### 安装对象\niTerm2：号称 Mac 下最好的终端工具（嗯，我也这么认为，毕竟我不会别的了）\nzsh：一款强大的终端工具，能帮助你更高效地编写和执行命令\n\n***\n### 安装 iTerm2\n前提：已经安装了 Homebrew.\n如果你从来没有运行过 brew cask 命令，可以先执行：\n```\nbrew tap caskroom/cask\n```\n然后开始安装 iTerm2\n```\nbrew cask install iterm2\n```\n安装成功后在 Launchpad 中可以看到有一个新图标出现，打开 iTerm2\n\n***\n### 代码配色\n默认的界面还是略显丑陋的，我们来设置一下代码配色吧\n先检查下终端颜色配置为 xterm-256color，位置在 iTerm2 -> Preferences -> Profiles -> Terminal\n<br>\n<img src=\"./1.png\">\n<br>\n然后就可以设置配色了，默认情况下 iTerm2 只有 7 种自带的配色，当然满足不了我们高颜值的需求了.\n有人就开源了一款叫 iTerm2-Color-Schemes 的配色合集，里面有各种经典、常用的配色方案.\n这里我在Desktop创建了一个iterm2的目录,再来将配色使用 Git 下载到本地.\n\n```\nmkdir iterm2 && cd iterm2\n\ngit clone https://github.com/mbadolato/iTerm2-Color-Schemes\n```\n\n下面需要导入配色方案，选择 schemes 文件夹内的所有配色方案\n<br>\n<img src=\"./2.png\">\n<br>\n<img src=\"./3.png\">\n<br>\n导入成功后就可以选择一些流行的配色方案了，目前使用的是「Bright Lights」.并且把亮度调暗了一点.\n\n***\n### 安装字体\n\n为什么要安装字体呢？我们电脑的字体其实是可以用的，但是想要图标的这种字体就没法儿了.\n图标字体其实是非 ASCII 码字体，在 iTerm2 中可以进行配置，所以先要安装这个字体。这款字体叫 nerd-fonts\n\n使用 brew 安装\n```\nbrew tap homebrew/cask-fonts\nbrew cask install font-hack-nerd-font\n```\n\n安装成功后需要在 iTerm2 中配置一下:\n在 iTerm2 -> Preferences -> Profiles -> Text -> Font -> Change Font 栏位中，\nText 下面勾选 Use a different font for non-ASCII text，然后在 Non-ASCII font 点击 Change font 修改\n<br>\n<img src=\"./4.png\">\n<br>\n<img src=\"./5.png\">\n<br>\n<img src=\"./6.png\">\n<br>\n\n这里选择的字体是非 ASCII 码字符的字体，不要设置错了！选择好之后关闭即可\n\n***\n### 安装 zsh\n```\nbrew install zsh\n```\n<br>\n<img src=\"./7.png\">\n\n默认的 shell 是 bash，需要修改为 zsh：\n```\nsudo sh -c \"echo $(which zsh) >> /etc/shells\"\nchsh -s $(which zsh)\n```\n修改时会提示你输入密码.\n\n现在 zsh 安装完成了，安装虽简单，可配置麻烦啊，这你能忍吗？？当然不能！\n\n于是，oh-my-zsh 出现了，有了它 zsh 配置起来就方便多了，来安装一下它\n<br>\n```\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n```\n<br>\n<img src=\"./8.png\">\n<br>\n安装好之后可以看到界面发生了一点点变化，同时会产生一个名为 .zshrc 的配置文件，在用户家目录下面，我们以后主要就是修改它了\n\n***\n### 配置主题\n上面看到界面发生变化是因为 oh-my-zsh 默认帮我们配置了一个终端主题，你可以打开 ~/.zshrc 文件看看：\n```\nZSH_THEME=\"robbyrussell\"\n```\n\n这些主题文件存储在 ~/.oh-my-zsh/themes 目录下，你也可以使用其他的。\n\n为了实现前面想要的酷炫的终端主题，有人写了一个名为 powerlevel9k 的高颜值主题。\n\n先将主题下载到本地的主题目录中：\n```\ngit clone https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/custom/themes/powerlevel9k\n```\n\n然后修改 zsh 主题配置：\n```\nZSH_THEME=\"powerlevel9k/powerlevel9k\"\nPOWERLEVEL9K_MODE=\"nerdfont-complete\"\n# Customise the Powerlevel9k prompts\nPOWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(ssh dir vcs newline status)\nPOWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=()\nPOWERLEVEL9K_PROMPT_ADD_NEWLINE=true\n```\n\n- POWERLEVEL9K_MODE：设置 powerlevel9k 的字体是我们前面下载的\n- POWERLEVEL9K_LEFT_PROMPT_ELEMENTS：将前面居右的几个元素放在左边了\n- POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS：右边不放置任何元素（如果你喜欢在右边也可以加）\n- POWERLEVEL9K_PROMPT_ADD_NEWLINE：在每个提示之前添加换行符\n\n修改配置文件后一定要记得让配置生效，使用 source 命令：\n```\nsource ~/.zshrc\n```\n现在来看看终端变成什么样子了！\n<br>\n<img src=\"./9.png\">\n<br>\n大功告成！！！\n\n***\n\n### 踩的坑\n安装了oh-my-zsh插件后发现之前在.bash_profile自定义的一些内容都失效了,hexo无法启动报错\n```\nzsh: command not found: hexo\n```\n\n问题分析:\noh-my-zsh有自己的配置文件，覆盖了.bash_profile的内容\n\n解决方法:\n```\nvi ~/.zshrc\n```\n在最后一行加入\n```\nsource ~/.bash_profile\n```\n\n这样就可以”继承”.bash_profile的配置了\n执行source ~/.zshrc，让配置生效，重新使用，一切OK！\n","source":"_posts/iTerm2.md","raw":"---\ntitle: Mac iTerm2 powerlevel9k Theme\ndate: 2019-10-06 23:56:14\ntags:\n- setting\n- iTerm2\n- powerlevel9k\nclearReading: true\nthumbnailImage: 20191006.png\nthumbnailImagePosition: left\ncoverImage: cover.jpg\ncoverCaption: \"Hello World, Hello Programming\"\ncoverSize: partial\ncomments: false\ncategories: System Setting\n---\nMac iTerm2的个性主题设置\n\n<!--more-->\n\n### 安装对象\niTerm2：号称 Mac 下最好的终端工具（嗯，我也这么认为，毕竟我不会别的了）\nzsh：一款强大的终端工具，能帮助你更高效地编写和执行命令\n\n***\n### 安装 iTerm2\n前提：已经安装了 Homebrew.\n如果你从来没有运行过 brew cask 命令，可以先执行：\n```\nbrew tap caskroom/cask\n```\n然后开始安装 iTerm2\n```\nbrew cask install iterm2\n```\n安装成功后在 Launchpad 中可以看到有一个新图标出现，打开 iTerm2\n\n***\n### 代码配色\n默认的界面还是略显丑陋的，我们来设置一下代码配色吧\n先检查下终端颜色配置为 xterm-256color，位置在 iTerm2 -> Preferences -> Profiles -> Terminal\n<br>\n<img src=\"./1.png\">\n<br>\n然后就可以设置配色了，默认情况下 iTerm2 只有 7 种自带的配色，当然满足不了我们高颜值的需求了.\n有人就开源了一款叫 iTerm2-Color-Schemes 的配色合集，里面有各种经典、常用的配色方案.\n这里我在Desktop创建了一个iterm2的目录,再来将配色使用 Git 下载到本地.\n\n```\nmkdir iterm2 && cd iterm2\n\ngit clone https://github.com/mbadolato/iTerm2-Color-Schemes\n```\n\n下面需要导入配色方案，选择 schemes 文件夹内的所有配色方案\n<br>\n<img src=\"./2.png\">\n<br>\n<img src=\"./3.png\">\n<br>\n导入成功后就可以选择一些流行的配色方案了，目前使用的是「Bright Lights」.并且把亮度调暗了一点.\n\n***\n### 安装字体\n\n为什么要安装字体呢？我们电脑的字体其实是可以用的，但是想要图标的这种字体就没法儿了.\n图标字体其实是非 ASCII 码字体，在 iTerm2 中可以进行配置，所以先要安装这个字体。这款字体叫 nerd-fonts\n\n使用 brew 安装\n```\nbrew tap homebrew/cask-fonts\nbrew cask install font-hack-nerd-font\n```\n\n安装成功后需要在 iTerm2 中配置一下:\n在 iTerm2 -> Preferences -> Profiles -> Text -> Font -> Change Font 栏位中，\nText 下面勾选 Use a different font for non-ASCII text，然后在 Non-ASCII font 点击 Change font 修改\n<br>\n<img src=\"./4.png\">\n<br>\n<img src=\"./5.png\">\n<br>\n<img src=\"./6.png\">\n<br>\n\n这里选择的字体是非 ASCII 码字符的字体，不要设置错了！选择好之后关闭即可\n\n***\n### 安装 zsh\n```\nbrew install zsh\n```\n<br>\n<img src=\"./7.png\">\n\n默认的 shell 是 bash，需要修改为 zsh：\n```\nsudo sh -c \"echo $(which zsh) >> /etc/shells\"\nchsh -s $(which zsh)\n```\n修改时会提示你输入密码.\n\n现在 zsh 安装完成了，安装虽简单，可配置麻烦啊，这你能忍吗？？当然不能！\n\n于是，oh-my-zsh 出现了，有了它 zsh 配置起来就方便多了，来安装一下它\n<br>\n```\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n```\n<br>\n<img src=\"./8.png\">\n<br>\n安装好之后可以看到界面发生了一点点变化，同时会产生一个名为 .zshrc 的配置文件，在用户家目录下面，我们以后主要就是修改它了\n\n***\n### 配置主题\n上面看到界面发生变化是因为 oh-my-zsh 默认帮我们配置了一个终端主题，你可以打开 ~/.zshrc 文件看看：\n```\nZSH_THEME=\"robbyrussell\"\n```\n\n这些主题文件存储在 ~/.oh-my-zsh/themes 目录下，你也可以使用其他的。\n\n为了实现前面想要的酷炫的终端主题，有人写了一个名为 powerlevel9k 的高颜值主题。\n\n先将主题下载到本地的主题目录中：\n```\ngit clone https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/custom/themes/powerlevel9k\n```\n\n然后修改 zsh 主题配置：\n```\nZSH_THEME=\"powerlevel9k/powerlevel9k\"\nPOWERLEVEL9K_MODE=\"nerdfont-complete\"\n# Customise the Powerlevel9k prompts\nPOWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(ssh dir vcs newline status)\nPOWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=()\nPOWERLEVEL9K_PROMPT_ADD_NEWLINE=true\n```\n\n- POWERLEVEL9K_MODE：设置 powerlevel9k 的字体是我们前面下载的\n- POWERLEVEL9K_LEFT_PROMPT_ELEMENTS：将前面居右的几个元素放在左边了\n- POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS：右边不放置任何元素（如果你喜欢在右边也可以加）\n- POWERLEVEL9K_PROMPT_ADD_NEWLINE：在每个提示之前添加换行符\n\n修改配置文件后一定要记得让配置生效，使用 source 命令：\n```\nsource ~/.zshrc\n```\n现在来看看终端变成什么样子了！\n<br>\n<img src=\"./9.png\">\n<br>\n大功告成！！！\n\n***\n\n### 踩的坑\n安装了oh-my-zsh插件后发现之前在.bash_profile自定义的一些内容都失效了,hexo无法启动报错\n```\nzsh: command not found: hexo\n```\n\n问题分析:\noh-my-zsh有自己的配置文件，覆盖了.bash_profile的内容\n\n解决方法:\n```\nvi ~/.zshrc\n```\n在最后一行加入\n```\nsource ~/.bash_profile\n```\n\n这样就可以”继承”.bash_profile的配置了\n执行source ~/.zshrc，让配置生效，重新使用，一切OK！\n","slug":"iTerm2","published":1,"updated":"2019-11-23T23:54:38.000Z","layout":"post","photos":[],"link":"","_id":"ck3it6k2h0028teyiyras3goj","content":"<p>Mac iTerm2的个性主题设置</p>\n<a id=\"more\"></a>\n\n<h3 id=\"安装对象\"><a href=\"#安装对象\" class=\"headerlink\" title=\"安装对象\"></a>安装对象</h3><p>iTerm2：号称 Mac 下最好的终端工具（嗯，我也这么认为，毕竟我不会别的了）<br>zsh：一款强大的终端工具，能帮助你更高效地编写和执行命令</p>\n<hr>\n<h3 id=\"安装-iTerm2\"><a href=\"#安装-iTerm2\" class=\"headerlink\" title=\"安装 iTerm2\"></a>安装 iTerm2</h3><p>前提：已经安装了 Homebrew.<br>如果你从来没有运行过 brew cask 命令，可以先执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew tap caskroom/cask</span><br></pre></td></tr></table></figure>\n\n<p>然后开始安装 iTerm2</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew cask install iterm2</span><br></pre></td></tr></table></figure>\n\n<p>安装成功后在 Launchpad 中可以看到有一个新图标出现，打开 iTerm2</p>\n<hr>\n<h3 id=\"代码配色\"><a href=\"#代码配色\" class=\"headerlink\" title=\"代码配色\"></a>代码配色</h3><p>默认的界面还是略显丑陋的，我们来设置一下代码配色吧<br>先检查下终端颜色配置为 xterm-256color，位置在 iTerm2 -&gt; Preferences -&gt; Profiles -&gt; Terminal<br><br><br><img src=\"./1.png\"><br><br><br>然后就可以设置配色了，默认情况下 iTerm2 只有 7 种自带的配色，当然满足不了我们高颜值的需求了.<br>有人就开源了一款叫 iTerm2-Color-Schemes 的配色合集，里面有各种经典、常用的配色方案.<br>这里我在Desktop创建了一个iterm2的目录,再来将配色使用 Git 下载到本地.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir iterm2 &amp;&amp; cd iterm2</span><br><span class=\"line\"></span><br><span class=\"line\">git clone https://github.com/mbadolato/iTerm2-Color-Schemes</span><br></pre></td></tr></table></figure>\n\n<p>下面需要导入配色方案，选择 schemes 文件夹内的所有配色方案<br><br><br><img src=\"./2.png\"><br><br><br><img src=\"./3.png\"><br><br><br>导入成功后就可以选择一些流行的配色方案了，目前使用的是「Bright Lights」.并且把亮度调暗了一点.</p>\n<hr>\n<h3 id=\"安装字体\"><a href=\"#安装字体\" class=\"headerlink\" title=\"安装字体\"></a>安装字体</h3><p>为什么要安装字体呢？我们电脑的字体其实是可以用的，但是想要图标的这种字体就没法儿了.<br>图标字体其实是非 ASCII 码字体，在 iTerm2 中可以进行配置，所以先要安装这个字体。这款字体叫 nerd-fonts</p>\n<p>使用 brew 安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew tap homebrew/cask-fonts</span><br><span class=\"line\">brew cask install font-hack-nerd-font</span><br></pre></td></tr></table></figure>\n\n<p>安装成功后需要在 iTerm2 中配置一下:<br>在 iTerm2 -&gt; Preferences -&gt; Profiles -&gt; Text -&gt; Font -&gt; Change Font 栏位中，<br>Text 下面勾选 Use a different font for non-ASCII text，然后在 Non-ASCII font 点击 Change font 修改<br><br><br><img src=\"./4.png\"><br><br><br><img src=\"./5.png\"><br><br><br><img src=\"./6.png\"><br><br></p>\n<p>这里选择的字体是非 ASCII 码字符的字体，不要设置错了！选择好之后关闭即可</p>\n<hr>\n<h3 id=\"安装-zsh\"><a href=\"#安装-zsh\" class=\"headerlink\" title=\"安装 zsh\"></a>安装 zsh</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install zsh</span><br></pre></td></tr></table></figure>\n\n<br>\n<img src=\"./7.png\">\n\n<p>默认的 shell 是 bash，需要修改为 zsh：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo sh -c &quot;echo $(which zsh) &gt;&gt; /etc/shells&quot;</span><br><span class=\"line\">chsh -s $(which zsh)</span><br></pre></td></tr></table></figure>\n\n<p>修改时会提示你输入密码.</p>\n<p>现在 zsh 安装完成了，安装虽简单，可配置麻烦啊，这你能忍吗？？当然不能！</p>\n<p>于是，oh-my-zsh 出现了，有了它 zsh 配置起来就方便多了，来安装一下它<br><br></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure>\n\n<br>\n<img src=\"./8.png\">\n<br>\n安装好之后可以看到界面发生了一点点变化，同时会产生一个名为 .zshrc 的配置文件，在用户家目录下面，我们以后主要就是修改它了\n\n<hr>\n<h3 id=\"配置主题\"><a href=\"#配置主题\" class=\"headerlink\" title=\"配置主题\"></a>配置主题</h3><p>上面看到界面发生变化是因为 oh-my-zsh 默认帮我们配置了一个终端主题，你可以打开 ~/.zshrc 文件看看：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZSH_THEME=&quot;robbyrussell&quot;</span><br></pre></td></tr></table></figure>\n\n<p>这些主题文件存储在 ~/.oh-my-zsh/themes 目录下，你也可以使用其他的。</p>\n<p>为了实现前面想要的酷炫的终端主题，有人写了一个名为 powerlevel9k 的高颜值主题。</p>\n<p>先将主题下载到本地的主题目录中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/custom/themes/powerlevel9k</span><br></pre></td></tr></table></figure>\n\n<p>然后修改 zsh 主题配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZSH_THEME=&quot;powerlevel9k/powerlevel9k&quot;</span><br><span class=\"line\">POWERLEVEL9K_MODE=&quot;nerdfont-complete&quot;</span><br><span class=\"line\"># Customise the Powerlevel9k prompts</span><br><span class=\"line\">POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(ssh dir vcs newline status)</span><br><span class=\"line\">POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=()</span><br><span class=\"line\">POWERLEVEL9K_PROMPT_ADD_NEWLINE=true</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>POWERLEVEL9K_MODE：设置 powerlevel9k 的字体是我们前面下载的</li>\n<li>POWERLEVEL9K_LEFT_PROMPT_ELEMENTS：将前面居右的几个元素放在左边了</li>\n<li>POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS：右边不放置任何元素（如果你喜欢在右边也可以加）</li>\n<li>POWERLEVEL9K_PROMPT_ADD_NEWLINE：在每个提示之前添加换行符</li>\n</ul>\n<p>修改配置文件后一定要记得让配置生效，使用 source 命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.zshrc</span><br></pre></td></tr></table></figure>\n\n<p>现在来看看终端变成什么样子了！<br><br><br><img src=\"./9.png\"><br><br><br>大功告成！！！</p>\n<hr>\n<h3 id=\"踩的坑\"><a href=\"#踩的坑\" class=\"headerlink\" title=\"踩的坑\"></a>踩的坑</h3><p>安装了oh-my-zsh插件后发现之前在.bash_profile自定义的一些内容都失效了,hexo无法启动报错</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zsh: command not found: hexo</span><br></pre></td></tr></table></figure>\n\n<p>问题分析:<br>oh-my-zsh有自己的配置文件，覆盖了.bash_profile的内容</p>\n<p>解决方法:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi ~/.zshrc</span><br></pre></td></tr></table></figure>\n\n<p>在最后一行加入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.bash_profile</span><br></pre></td></tr></table></figure>\n\n<p>这样就可以”继承”.bash_profile的配置了<br>执行source ~/.zshrc，让配置生效，重新使用，一切OK！</p>\n","site":{"data":{}},"thumbnailImageUrl":"https://kisky3.github.io/2019/10/06/iTerm2/20191006.png","excerpt":"<p>Mac iTerm2的个性主题设置</p>","more":"<h3 id=\"安装对象\"><a href=\"#安装对象\" class=\"headerlink\" title=\"安装对象\"></a>安装对象</h3><p>iTerm2：号称 Mac 下最好的终端工具（嗯，我也这么认为，毕竟我不会别的了）<br>zsh：一款强大的终端工具，能帮助你更高效地编写和执行命令</p>\n<hr>\n<h3 id=\"安装-iTerm2\"><a href=\"#安装-iTerm2\" class=\"headerlink\" title=\"安装 iTerm2\"></a>安装 iTerm2</h3><p>前提：已经安装了 Homebrew.<br>如果你从来没有运行过 brew cask 命令，可以先执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew tap caskroom/cask</span><br></pre></td></tr></table></figure>\n\n<p>然后开始安装 iTerm2</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew cask install iterm2</span><br></pre></td></tr></table></figure>\n\n<p>安装成功后在 Launchpad 中可以看到有一个新图标出现，打开 iTerm2</p>\n<hr>\n<h3 id=\"代码配色\"><a href=\"#代码配色\" class=\"headerlink\" title=\"代码配色\"></a>代码配色</h3><p>默认的界面还是略显丑陋的，我们来设置一下代码配色吧<br>先检查下终端颜色配置为 xterm-256color，位置在 iTerm2 -&gt; Preferences -&gt; Profiles -&gt; Terminal<br><br><br><img src=\"./1.png\"><br><br><br>然后就可以设置配色了，默认情况下 iTerm2 只有 7 种自带的配色，当然满足不了我们高颜值的需求了.<br>有人就开源了一款叫 iTerm2-Color-Schemes 的配色合集，里面有各种经典、常用的配色方案.<br>这里我在Desktop创建了一个iterm2的目录,再来将配色使用 Git 下载到本地.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir iterm2 &amp;&amp; cd iterm2</span><br><span class=\"line\"></span><br><span class=\"line\">git clone https://github.com/mbadolato/iTerm2-Color-Schemes</span><br></pre></td></tr></table></figure>\n\n<p>下面需要导入配色方案，选择 schemes 文件夹内的所有配色方案<br><br><br><img src=\"./2.png\"><br><br><br><img src=\"./3.png\"><br><br><br>导入成功后就可以选择一些流行的配色方案了，目前使用的是「Bright Lights」.并且把亮度调暗了一点.</p>\n<hr>\n<h3 id=\"安装字体\"><a href=\"#安装字体\" class=\"headerlink\" title=\"安装字体\"></a>安装字体</h3><p>为什么要安装字体呢？我们电脑的字体其实是可以用的，但是想要图标的这种字体就没法儿了.<br>图标字体其实是非 ASCII 码字体，在 iTerm2 中可以进行配置，所以先要安装这个字体。这款字体叫 nerd-fonts</p>\n<p>使用 brew 安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew tap homebrew/cask-fonts</span><br><span class=\"line\">brew cask install font-hack-nerd-font</span><br></pre></td></tr></table></figure>\n\n<p>安装成功后需要在 iTerm2 中配置一下:<br>在 iTerm2 -&gt; Preferences -&gt; Profiles -&gt; Text -&gt; Font -&gt; Change Font 栏位中，<br>Text 下面勾选 Use a different font for non-ASCII text，然后在 Non-ASCII font 点击 Change font 修改<br><br><br><img src=\"./4.png\"><br><br><br><img src=\"./5.png\"><br><br><br><img src=\"./6.png\"><br><br></p>\n<p>这里选择的字体是非 ASCII 码字符的字体，不要设置错了！选择好之后关闭即可</p>\n<hr>\n<h3 id=\"安装-zsh\"><a href=\"#安装-zsh\" class=\"headerlink\" title=\"安装 zsh\"></a>安装 zsh</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install zsh</span><br></pre></td></tr></table></figure>\n\n<br>\n<img src=\"./7.png\">\n\n<p>默认的 shell 是 bash，需要修改为 zsh：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo sh -c &quot;echo $(which zsh) &gt;&gt; /etc/shells&quot;</span><br><span class=\"line\">chsh -s $(which zsh)</span><br></pre></td></tr></table></figure>\n\n<p>修改时会提示你输入密码.</p>\n<p>现在 zsh 安装完成了，安装虽简单，可配置麻烦啊，这你能忍吗？？当然不能！</p>\n<p>于是，oh-my-zsh 出现了，有了它 zsh 配置起来就方便多了，来安装一下它<br><br></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure>\n\n<br>\n<img src=\"./8.png\">\n<br>\n安装好之后可以看到界面发生了一点点变化，同时会产生一个名为 .zshrc 的配置文件，在用户家目录下面，我们以后主要就是修改它了\n\n<hr>\n<h3 id=\"配置主题\"><a href=\"#配置主题\" class=\"headerlink\" title=\"配置主题\"></a>配置主题</h3><p>上面看到界面发生变化是因为 oh-my-zsh 默认帮我们配置了一个终端主题，你可以打开 ~/.zshrc 文件看看：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZSH_THEME=&quot;robbyrussell&quot;</span><br></pre></td></tr></table></figure>\n\n<p>这些主题文件存储在 ~/.oh-my-zsh/themes 目录下，你也可以使用其他的。</p>\n<p>为了实现前面想要的酷炫的终端主题，有人写了一个名为 powerlevel9k 的高颜值主题。</p>\n<p>先将主题下载到本地的主题目录中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/custom/themes/powerlevel9k</span><br></pre></td></tr></table></figure>\n\n<p>然后修改 zsh 主题配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZSH_THEME=&quot;powerlevel9k/powerlevel9k&quot;</span><br><span class=\"line\">POWERLEVEL9K_MODE=&quot;nerdfont-complete&quot;</span><br><span class=\"line\"># Customise the Powerlevel9k prompts</span><br><span class=\"line\">POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(ssh dir vcs newline status)</span><br><span class=\"line\">POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=()</span><br><span class=\"line\">POWERLEVEL9K_PROMPT_ADD_NEWLINE=true</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>POWERLEVEL9K_MODE：设置 powerlevel9k 的字体是我们前面下载的</li>\n<li>POWERLEVEL9K_LEFT_PROMPT_ELEMENTS：将前面居右的几个元素放在左边了</li>\n<li>POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS：右边不放置任何元素（如果你喜欢在右边也可以加）</li>\n<li>POWERLEVEL9K_PROMPT_ADD_NEWLINE：在每个提示之前添加换行符</li>\n</ul>\n<p>修改配置文件后一定要记得让配置生效，使用 source 命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.zshrc</span><br></pre></td></tr></table></figure>\n\n<p>现在来看看终端变成什么样子了！<br><br><br><img src=\"./9.png\"><br><br><br>大功告成！！！</p>\n<hr>\n<h3 id=\"踩的坑\"><a href=\"#踩的坑\" class=\"headerlink\" title=\"踩的坑\"></a>踩的坑</h3><p>安装了oh-my-zsh插件后发现之前在.bash_profile自定义的一些内容都失效了,hexo无法启动报错</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zsh: command not found: hexo</span><br></pre></td></tr></table></figure>\n\n<p>问题分析:<br>oh-my-zsh有自己的配置文件，覆盖了.bash_profile的内容</p>\n<p>解决方法:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi ~/.zshrc</span><br></pre></td></tr></table></figure>\n\n<p>在最后一行加入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.bash_profile</span><br></pre></td></tr></table></figure>\n\n<p>这样就可以”继承”.bash_profile的配置了<br>执行source ~/.zshrc，让配置生效，重新使用，一切OK！</p>"},{"title":"About jQuery","date":"2019-07-12T12:05:02.000Z","clearReading":true,"thumbnailImage":"20190712.png","thumbnailImagePosition":"left","coverImage":"cover.jpg","coverCaption":"Hello World, Hello Programming","coverSize":"partial","comments":0,"_content":"\n关于jQuery\n<!--more-->\n### jQuery 1.x 版本和 2.x 版本有什么区别\n\n1.x：\n兼容ie678,使用最为广泛的，官方只做BUG维护，功能不再新增。因此一般项目来说，使用1.x版本就可以了，最终版本：1.12.4 (2016年5月20日)\n\n2.x：\n不兼容ie678，很少有人使用，官方只做BUG维护，功能不再新增。如果不考虑兼容低版本的浏览器可以使用2.x，最终版本：2.2.4 (2016年5月20日)\n\n***\n### jQuery 常见的选择器\n例子\n```HTML\n<body>\n  <ul class=\"ul\">\n    <li>1</li>\n    <li>2</li>\n    <li class=\"li3\">\n      <span>3</span>\n    </li>\n    <p>p1</p>\n    <li>4</li>\n    <p>p2</p>\n  </ul>\n  <p>我被选中了</p>\n</body>\n```\n\n#### .eq(index)\n对于一个特定结果集，我们想获取到指定index的jQuery对象，可以使用eq方法\n<img src=\"./1.png\" style=\"width:200px;margin:40px 0\">\n\n#### .next()\nnext取得匹配的元素集合中每一个元素紧邻的后面同辈元素的元素集合。如果提供一个选择器，那么只有紧跟着的兄弟元素满足选择器时，才会返回此元素。\n<img src=\"./2.png\" style=\"width:200px;margin:40px 0\">\n\n#### .prev()\nprev正好相反，获取元素之前的同辈元素,如果同辈之前没有元素则返回空\n<img src=\"./3.png\" style=\"width:200px;margin:40px 0\">\n\n#### .nextAll()\nnextAll获得每个匹配元素集合中每个元素所有后面的同辈元素，选择性筛选的选择器\n<img src=\"./4.png\" style=\"width:200px;margin:40px 0\">\n\n#### .prevAll()\nprevAll与nextAll相反，获取元素前面的同辈元素\n<img src=\"./5.png\" style=\"width:200px;margin:40px 0\">\n\n#### .siblings()\n获得匹配元素集合中每个元素的兄弟元素,可以提供一个可选的选择器\n<img src=\"./6.png\" style=\"width:200px;margin:40px 0\">\n\n#### .parent()\n取得匹配元素集合中，每个元素的父元素，可以提供一个可选的选择器\n<img src=\"./7.png\" style=\"width:200px;margin:40px 0\">\n\n#### .parents()\n获得集合中每个匹配元素的祖先元素，可以提供一个可选的选择器作为参数\n<img src=\"./8.png\" style=\"width:200px;margin:40px 0\">\n\n#### .children()\n获得匹配元素集合中每个元素的子元素，选择器选择性筛选\n<img src=\"./9.png\" style=\"width:200px;margin:40px 0\">\n\n#### .find()\n查找符合选择器的后代元素\n<img src=\"./10.png\" style=\"width:200px;margin:40px 0\">\n\n#### .filter()\n筛选当前结果集中符合条件的对象，参数可以是一个选择器或者一个函数\n<img src=\"./11.png\" style=\"width:300px;margin:40px 0\">\n\n#### .has()\n筛选匹配元素集合中的那些有相匹配的选择器或DOM元素的后代元素\n<img src=\"./12.png\" style=\"width:300px;margin:40px 0\">\n\n#### .is()\n判断当前匹配的元素集合中的元素，是否为一个选择器，DOM元素，或者jQuery对象，如果这些元素至少一个匹配给定的参数，那么返回true\n<img src=\"./13.png\" style=\"width:300px;margin:40px 0\">\n\n***\n### DOM和jQuery的相互转换\njQuery对象与dom的区别\njQuery对象是一个类数组的对象，对象原型中封装了许多jQuery自定义的方法。在jQuery对象中无法使用DOM对象的任何方法。\n\n- DOM对象===>jQuery对象\n```\nvar dom =document.getElementById(\"id\");  // DOM对象\nvar $dom = $(dom);  // jQuery对象\n```\n\n- Query对象====>DOM对象\n1.jQuery对象是一个数据对象，通过 [index] 的方法\n```\nvar $dom = $(\"#id\") ;  // jQuery对象\nvar dom = $dom [0];   // DOM对象\n```\n\n2.jQuery提供方法，通过 .get(index) 方法\n```\nvar $dom = $(\"#id\");  // jQuery对象\nvar dom = $dom.get(0); // DOM对象\n```\n\n### window.onload和$(document).ready有什么区别？document.onDOMContentLoaded呢?\n\nwindow.onload是在dom文档树加载完和所有文件加载完之后执行一个函数document.ready原生中没有这个方法。\njquery中有$().ready(function),在dom文档树加载完之后执行一个函数（注意，这里面的文档树加载完全不代表全部文件加载完）。\n$(document).ready要比winndow.onload先执行window.onload只能出来一次，$(document).ready可以出现多次。\n\n\n当document.onDOMContentLoaded事件触发时，仅当DOM加载完成，不包括样式表，图片，flash。\n两者触发时机不同，window.触发的更晚。\njQuery的$(document).ready就是利用了DOMContentLoaded来实现的，但是DOMContentLoaded在IE9以下不支持，需要对IE9以下版本进行兼容处理。\n","source":"_posts/jQuery.md","raw":"---\ntitle: About jQuery\ndate: 2019-07-12 21:05:02\ntags:\n- jQuery\nclearReading: true\nthumbnailImage: 20190712.png\nthumbnailImagePosition: left\ncoverImage: cover.jpg\ncoverCaption: \"Hello World, Hello Programming\"\ncoverSize: partial\ncomments: false\ncategories: Front-end Knowledge\n---\n\n关于jQuery\n<!--more-->\n### jQuery 1.x 版本和 2.x 版本有什么区别\n\n1.x：\n兼容ie678,使用最为广泛的，官方只做BUG维护，功能不再新增。因此一般项目来说，使用1.x版本就可以了，最终版本：1.12.4 (2016年5月20日)\n\n2.x：\n不兼容ie678，很少有人使用，官方只做BUG维护，功能不再新增。如果不考虑兼容低版本的浏览器可以使用2.x，最终版本：2.2.4 (2016年5月20日)\n\n***\n### jQuery 常见的选择器\n例子\n```HTML\n<body>\n  <ul class=\"ul\">\n    <li>1</li>\n    <li>2</li>\n    <li class=\"li3\">\n      <span>3</span>\n    </li>\n    <p>p1</p>\n    <li>4</li>\n    <p>p2</p>\n  </ul>\n  <p>我被选中了</p>\n</body>\n```\n\n#### .eq(index)\n对于一个特定结果集，我们想获取到指定index的jQuery对象，可以使用eq方法\n<img src=\"./1.png\" style=\"width:200px;margin:40px 0\">\n\n#### .next()\nnext取得匹配的元素集合中每一个元素紧邻的后面同辈元素的元素集合。如果提供一个选择器，那么只有紧跟着的兄弟元素满足选择器时，才会返回此元素。\n<img src=\"./2.png\" style=\"width:200px;margin:40px 0\">\n\n#### .prev()\nprev正好相反，获取元素之前的同辈元素,如果同辈之前没有元素则返回空\n<img src=\"./3.png\" style=\"width:200px;margin:40px 0\">\n\n#### .nextAll()\nnextAll获得每个匹配元素集合中每个元素所有后面的同辈元素，选择性筛选的选择器\n<img src=\"./4.png\" style=\"width:200px;margin:40px 0\">\n\n#### .prevAll()\nprevAll与nextAll相反，获取元素前面的同辈元素\n<img src=\"./5.png\" style=\"width:200px;margin:40px 0\">\n\n#### .siblings()\n获得匹配元素集合中每个元素的兄弟元素,可以提供一个可选的选择器\n<img src=\"./6.png\" style=\"width:200px;margin:40px 0\">\n\n#### .parent()\n取得匹配元素集合中，每个元素的父元素，可以提供一个可选的选择器\n<img src=\"./7.png\" style=\"width:200px;margin:40px 0\">\n\n#### .parents()\n获得集合中每个匹配元素的祖先元素，可以提供一个可选的选择器作为参数\n<img src=\"./8.png\" style=\"width:200px;margin:40px 0\">\n\n#### .children()\n获得匹配元素集合中每个元素的子元素，选择器选择性筛选\n<img src=\"./9.png\" style=\"width:200px;margin:40px 0\">\n\n#### .find()\n查找符合选择器的后代元素\n<img src=\"./10.png\" style=\"width:200px;margin:40px 0\">\n\n#### .filter()\n筛选当前结果集中符合条件的对象，参数可以是一个选择器或者一个函数\n<img src=\"./11.png\" style=\"width:300px;margin:40px 0\">\n\n#### .has()\n筛选匹配元素集合中的那些有相匹配的选择器或DOM元素的后代元素\n<img src=\"./12.png\" style=\"width:300px;margin:40px 0\">\n\n#### .is()\n判断当前匹配的元素集合中的元素，是否为一个选择器，DOM元素，或者jQuery对象，如果这些元素至少一个匹配给定的参数，那么返回true\n<img src=\"./13.png\" style=\"width:300px;margin:40px 0\">\n\n***\n### DOM和jQuery的相互转换\njQuery对象与dom的区别\njQuery对象是一个类数组的对象，对象原型中封装了许多jQuery自定义的方法。在jQuery对象中无法使用DOM对象的任何方法。\n\n- DOM对象===>jQuery对象\n```\nvar dom =document.getElementById(\"id\");  // DOM对象\nvar $dom = $(dom);  // jQuery对象\n```\n\n- Query对象====>DOM对象\n1.jQuery对象是一个数据对象，通过 [index] 的方法\n```\nvar $dom = $(\"#id\") ;  // jQuery对象\nvar dom = $dom [0];   // DOM对象\n```\n\n2.jQuery提供方法，通过 .get(index) 方法\n```\nvar $dom = $(\"#id\");  // jQuery对象\nvar dom = $dom.get(0); // DOM对象\n```\n\n### window.onload和$(document).ready有什么区别？document.onDOMContentLoaded呢?\n\nwindow.onload是在dom文档树加载完和所有文件加载完之后执行一个函数document.ready原生中没有这个方法。\njquery中有$().ready(function),在dom文档树加载完之后执行一个函数（注意，这里面的文档树加载完全不代表全部文件加载完）。\n$(document).ready要比winndow.onload先执行window.onload只能出来一次，$(document).ready可以出现多次。\n\n\n当document.onDOMContentLoaded事件触发时，仅当DOM加载完成，不包括样式表，图片，flash。\n两者触发时机不同，window.触发的更晚。\njQuery的$(document).ready就是利用了DOMContentLoaded来实现的，但是DOMContentLoaded在IE9以下不支持，需要对IE9以下版本进行兼容处理。\n","slug":"jQuery","published":1,"updated":"2019-11-23T23:54:38.000Z","layout":"post","photos":[],"link":"","_id":"ck3it6k2i002bteyi3gtykuvm","content":"<p>关于jQuery</p>\n<a id=\"more\"></a>\n<h3 id=\"jQuery-1-x-版本和-2-x-版本有什么区别\"><a href=\"#jQuery-1-x-版本和-2-x-版本有什么区别\" class=\"headerlink\" title=\"jQuery 1.x 版本和 2.x 版本有什么区别\"></a>jQuery 1.x 版本和 2.x 版本有什么区别</h3><p>1.x：<br>兼容ie678,使用最为广泛的，官方只做BUG维护，功能不再新增。因此一般项目来说，使用1.x版本就可以了，最终版本：1.12.4 (2016年5月20日)</p>\n<p>2.x：<br>不兼容ie678，很少有人使用，官方只做BUG维护，功能不再新增。如果不考虑兼容低版本的浏览器可以使用2.x，最终版本：2.2.4 (2016年5月20日)</p>\n<hr>\n<h3 id=\"jQuery-常见的选择器\"><a href=\"#jQuery-常见的选择器\" class=\"headerlink\" title=\"jQuery 常见的选择器\"></a>jQuery 常见的选择器</h3><p>例子</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ul\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"li3\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>p1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>p2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我被选中了<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"eq-index\"><a href=\"#eq-index\" class=\"headerlink\" title=\".eq(index)\"></a>.eq(index)</h4><p>对于一个特定结果集，我们想获取到指定index的jQuery对象，可以使用eq方法<br><img src=\"./1.png\" style=\"width:200px;margin:40px 0\"></p>\n<h4 id=\"next\"><a href=\"#next\" class=\"headerlink\" title=\".next()\"></a>.next()</h4><p>next取得匹配的元素集合中每一个元素紧邻的后面同辈元素的元素集合。如果提供一个选择器，那么只有紧跟着的兄弟元素满足选择器时，才会返回此元素。<br><img src=\"./2.png\" style=\"width:200px;margin:40px 0\"></p>\n<h4 id=\"prev\"><a href=\"#prev\" class=\"headerlink\" title=\".prev()\"></a>.prev()</h4><p>prev正好相反，获取元素之前的同辈元素,如果同辈之前没有元素则返回空<br><img src=\"./3.png\" style=\"width:200px;margin:40px 0\"></p>\n<h4 id=\"nextAll\"><a href=\"#nextAll\" class=\"headerlink\" title=\".nextAll()\"></a>.nextAll()</h4><p>nextAll获得每个匹配元素集合中每个元素所有后面的同辈元素，选择性筛选的选择器<br><img src=\"./4.png\" style=\"width:200px;margin:40px 0\"></p>\n<h4 id=\"prevAll\"><a href=\"#prevAll\" class=\"headerlink\" title=\".prevAll()\"></a>.prevAll()</h4><p>prevAll与nextAll相反，获取元素前面的同辈元素<br><img src=\"./5.png\" style=\"width:200px;margin:40px 0\"></p>\n<h4 id=\"siblings\"><a href=\"#siblings\" class=\"headerlink\" title=\".siblings()\"></a>.siblings()</h4><p>获得匹配元素集合中每个元素的兄弟元素,可以提供一个可选的选择器<br><img src=\"./6.png\" style=\"width:200px;margin:40px 0\"></p>\n<h4 id=\"parent\"><a href=\"#parent\" class=\"headerlink\" title=\".parent()\"></a>.parent()</h4><p>取得匹配元素集合中，每个元素的父元素，可以提供一个可选的选择器<br><img src=\"./7.png\" style=\"width:200px;margin:40px 0\"></p>\n<h4 id=\"parents\"><a href=\"#parents\" class=\"headerlink\" title=\".parents()\"></a>.parents()</h4><p>获得集合中每个匹配元素的祖先元素，可以提供一个可选的选择器作为参数<br><img src=\"./8.png\" style=\"width:200px;margin:40px 0\"></p>\n<h4 id=\"children\"><a href=\"#children\" class=\"headerlink\" title=\".children()\"></a>.children()</h4><p>获得匹配元素集合中每个元素的子元素，选择器选择性筛选<br><img src=\"./9.png\" style=\"width:200px;margin:40px 0\"></p>\n<h4 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\".find()\"></a>.find()</h4><p>查找符合选择器的后代元素<br><img src=\"./10.png\" style=\"width:200px;margin:40px 0\"></p>\n<h4 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\".filter()\"></a>.filter()</h4><p>筛选当前结果集中符合条件的对象，参数可以是一个选择器或者一个函数<br><img src=\"./11.png\" style=\"width:300px;margin:40px 0\"></p>\n<h4 id=\"has\"><a href=\"#has\" class=\"headerlink\" title=\".has()\"></a>.has()</h4><p>筛选匹配元素集合中的那些有相匹配的选择器或DOM元素的后代元素<br><img src=\"./12.png\" style=\"width:300px;margin:40px 0\"></p>\n<h4 id=\"is\"><a href=\"#is\" class=\"headerlink\" title=\".is()\"></a>.is()</h4><p>判断当前匹配的元素集合中的元素，是否为一个选择器，DOM元素，或者jQuery对象，如果这些元素至少一个匹配给定的参数，那么返回true<br><img src=\"./13.png\" style=\"width:300px;margin:40px 0\"></p>\n<hr>\n<h3 id=\"DOM和jQuery的相互转换\"><a href=\"#DOM和jQuery的相互转换\" class=\"headerlink\" title=\"DOM和jQuery的相互转换\"></a>DOM和jQuery的相互转换</h3><p>jQuery对象与dom的区别<br>jQuery对象是一个类数组的对象，对象原型中封装了许多jQuery自定义的方法。在jQuery对象中无法使用DOM对象的任何方法。</p>\n<ul>\n<li><p>DOM对象===&gt;jQuery对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var dom =document.getElementById(&quot;id&quot;);  // DOM对象</span><br><span class=\"line\">var $dom = $(dom);  // jQuery对象</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Query对象====&gt;DOM对象</p>\n</li>\n</ul>\n<p>1.jQuery对象是一个数据对象，通过 [index] 的方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var $dom = $(&quot;#id&quot;) ;  // jQuery对象</span><br><span class=\"line\">var dom = $dom [0];   // DOM对象</span><br></pre></td></tr></table></figure>\n\n<p>2.jQuery提供方法，通过 .get(index) 方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var $dom = $(&quot;#id&quot;);  // jQuery对象</span><br><span class=\"line\">var dom = $dom.get(0); // DOM对象</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"window-onload和-document-ready有什么区别？document-onDOMContentLoaded呢\"><a href=\"#window-onload和-document-ready有什么区别？document-onDOMContentLoaded呢\" class=\"headerlink\" title=\"window.onload和$(document).ready有什么区别？document.onDOMContentLoaded呢?\"></a>window.onload和$(document).ready有什么区别？document.onDOMContentLoaded呢?</h3><p>window.onload是在dom文档树加载完和所有文件加载完之后执行一个函数document.ready原生中没有这个方法。<br>jquery中有$().ready(function),在dom文档树加载完之后执行一个函数（注意，这里面的文档树加载完全不代表全部文件加载完）。<br>$(document).ready要比winndow.onload先执行window.onload只能出来一次，$(document).ready可以出现多次。</p>\n<p>当document.onDOMContentLoaded事件触发时，仅当DOM加载完成，不包括样式表，图片，flash。<br>两者触发时机不同，window.触发的更晚。<br>jQuery的$(document).ready就是利用了DOMContentLoaded来实现的，但是DOMContentLoaded在IE9以下不支持，需要对IE9以下版本进行兼容处理。</p>\n","site":{"data":{}},"thumbnailImageUrl":"https://kisky3.github.io/2019/07/12/jQuery/20190712.png","excerpt":"<p>关于jQuery</p>","more":"<h3 id=\"jQuery-1-x-版本和-2-x-版本有什么区别\"><a href=\"#jQuery-1-x-版本和-2-x-版本有什么区别\" class=\"headerlink\" title=\"jQuery 1.x 版本和 2.x 版本有什么区别\"></a>jQuery 1.x 版本和 2.x 版本有什么区别</h3><p>1.x：<br>兼容ie678,使用最为广泛的，官方只做BUG维护，功能不再新增。因此一般项目来说，使用1.x版本就可以了，最终版本：1.12.4 (2016年5月20日)</p>\n<p>2.x：<br>不兼容ie678，很少有人使用，官方只做BUG维护，功能不再新增。如果不考虑兼容低版本的浏览器可以使用2.x，最终版本：2.2.4 (2016年5月20日)</p>\n<hr>\n<h3 id=\"jQuery-常见的选择器\"><a href=\"#jQuery-常见的选择器\" class=\"headerlink\" title=\"jQuery 常见的选择器\"></a>jQuery 常见的选择器</h3><p>例子</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ul\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"li3\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>p1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>p2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我被选中了<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"eq-index\"><a href=\"#eq-index\" class=\"headerlink\" title=\".eq(index)\"></a>.eq(index)</h4><p>对于一个特定结果集，我们想获取到指定index的jQuery对象，可以使用eq方法<br><img src=\"./1.png\" style=\"width:200px;margin:40px 0\"></p>\n<h4 id=\"next\"><a href=\"#next\" class=\"headerlink\" title=\".next()\"></a>.next()</h4><p>next取得匹配的元素集合中每一个元素紧邻的后面同辈元素的元素集合。如果提供一个选择器，那么只有紧跟着的兄弟元素满足选择器时，才会返回此元素。<br><img src=\"./2.png\" style=\"width:200px;margin:40px 0\"></p>\n<h4 id=\"prev\"><a href=\"#prev\" class=\"headerlink\" title=\".prev()\"></a>.prev()</h4><p>prev正好相反，获取元素之前的同辈元素,如果同辈之前没有元素则返回空<br><img src=\"./3.png\" style=\"width:200px;margin:40px 0\"></p>\n<h4 id=\"nextAll\"><a href=\"#nextAll\" class=\"headerlink\" title=\".nextAll()\"></a>.nextAll()</h4><p>nextAll获得每个匹配元素集合中每个元素所有后面的同辈元素，选择性筛选的选择器<br><img src=\"./4.png\" style=\"width:200px;margin:40px 0\"></p>\n<h4 id=\"prevAll\"><a href=\"#prevAll\" class=\"headerlink\" title=\".prevAll()\"></a>.prevAll()</h4><p>prevAll与nextAll相反，获取元素前面的同辈元素<br><img src=\"./5.png\" style=\"width:200px;margin:40px 0\"></p>\n<h4 id=\"siblings\"><a href=\"#siblings\" class=\"headerlink\" title=\".siblings()\"></a>.siblings()</h4><p>获得匹配元素集合中每个元素的兄弟元素,可以提供一个可选的选择器<br><img src=\"./6.png\" style=\"width:200px;margin:40px 0\"></p>\n<h4 id=\"parent\"><a href=\"#parent\" class=\"headerlink\" title=\".parent()\"></a>.parent()</h4><p>取得匹配元素集合中，每个元素的父元素，可以提供一个可选的选择器<br><img src=\"./7.png\" style=\"width:200px;margin:40px 0\"></p>\n<h4 id=\"parents\"><a href=\"#parents\" class=\"headerlink\" title=\".parents()\"></a>.parents()</h4><p>获得集合中每个匹配元素的祖先元素，可以提供一个可选的选择器作为参数<br><img src=\"./8.png\" style=\"width:200px;margin:40px 0\"></p>\n<h4 id=\"children\"><a href=\"#children\" class=\"headerlink\" title=\".children()\"></a>.children()</h4><p>获得匹配元素集合中每个元素的子元素，选择器选择性筛选<br><img src=\"./9.png\" style=\"width:200px;margin:40px 0\"></p>\n<h4 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\".find()\"></a>.find()</h4><p>查找符合选择器的后代元素<br><img src=\"./10.png\" style=\"width:200px;margin:40px 0\"></p>\n<h4 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\".filter()\"></a>.filter()</h4><p>筛选当前结果集中符合条件的对象，参数可以是一个选择器或者一个函数<br><img src=\"./11.png\" style=\"width:300px;margin:40px 0\"></p>\n<h4 id=\"has\"><a href=\"#has\" class=\"headerlink\" title=\".has()\"></a>.has()</h4><p>筛选匹配元素集合中的那些有相匹配的选择器或DOM元素的后代元素<br><img src=\"./12.png\" style=\"width:300px;margin:40px 0\"></p>\n<h4 id=\"is\"><a href=\"#is\" class=\"headerlink\" title=\".is()\"></a>.is()</h4><p>判断当前匹配的元素集合中的元素，是否为一个选择器，DOM元素，或者jQuery对象，如果这些元素至少一个匹配给定的参数，那么返回true<br><img src=\"./13.png\" style=\"width:300px;margin:40px 0\"></p>\n<hr>\n<h3 id=\"DOM和jQuery的相互转换\"><a href=\"#DOM和jQuery的相互转换\" class=\"headerlink\" title=\"DOM和jQuery的相互转换\"></a>DOM和jQuery的相互转换</h3><p>jQuery对象与dom的区别<br>jQuery对象是一个类数组的对象，对象原型中封装了许多jQuery自定义的方法。在jQuery对象中无法使用DOM对象的任何方法。</p>\n<ul>\n<li><p>DOM对象===&gt;jQuery对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var dom =document.getElementById(&quot;id&quot;);  // DOM对象</span><br><span class=\"line\">var $dom = $(dom);  // jQuery对象</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Query对象====&gt;DOM对象</p>\n</li>\n</ul>\n<p>1.jQuery对象是一个数据对象，通过 [index] 的方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var $dom = $(&quot;#id&quot;) ;  // jQuery对象</span><br><span class=\"line\">var dom = $dom [0];   // DOM对象</span><br></pre></td></tr></table></figure>\n\n<p>2.jQuery提供方法，通过 .get(index) 方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var $dom = $(&quot;#id&quot;);  // jQuery对象</span><br><span class=\"line\">var dom = $dom.get(0); // DOM对象</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"window-onload和-document-ready有什么区别？document-onDOMContentLoaded呢\"><a href=\"#window-onload和-document-ready有什么区别？document-onDOMContentLoaded呢\" class=\"headerlink\" title=\"window.onload和$(document).ready有什么区别？document.onDOMContentLoaded呢?\"></a>window.onload和$(document).ready有什么区别？document.onDOMContentLoaded呢?</h3><p>window.onload是在dom文档树加载完和所有文件加载完之后执行一个函数document.ready原生中没有这个方法。<br>jquery中有$().ready(function),在dom文档树加载完之后执行一个函数（注意，这里面的文档树加载完全不代表全部文件加载完）。<br>$(document).ready要比winndow.onload先执行window.onload只能出来一次，$(document).ready可以出现多次。</p>\n<p>当document.onDOMContentLoaded事件触发时，仅当DOM加载完成，不包括样式表，图片，flash。<br>两者触发时机不同，window.触发的更晚。<br>jQuery的$(document).ready就是利用了DOMContentLoaded来实现的，但是DOMContentLoaded在IE9以下不支持，需要对IE9以下版本进行兼容处理。</p>"},{"title":"jQuery event handlers","date":"2019-08-27T13:39:01.000Z","clearReading":true,"thumbnailImage":"20190827.jpg","thumbnailImagePosition":"left","coverImage":"cover.jpg","coverCaption":"Hello World, Hello Programming","coverSize":"partial","comments":0,"_content":"关于jQuery事件绑定\n<!--more-->\n\n***\n\n### 事件处理\n\n事件处理中最头疼的就是浏览器兼容问题，jQuery封装了很好的API，可以方便的进行事件处理\n\n在1.7之前的版本中jQuery处理事件有多个方法，后来统一的使用on/off方法.\n\n***\n\n#### on( events [,selector ] [,data ], handler(eventObject) )\n1. events：一个或多个空格分隔的事件类型和可选的命名空间，或仅仅是命名空间，比如\"click\", \"keydown.myPlugin\", 或者 \".myPlugin\"\n\n2. selector：一个选择器字符串，用于过滤出被选中的元素中能触发事件的后代元素。如果选择器是 null 或者忽略了该选择器，那么被选中的元素总是能触发事件\n\n3. data：当一个事件被触发时，要传递给事件处理函数的event.data\n\n4. handler(eventObject)：事件被触发时，执行的函数。若该函数只是要执行return false的话，那么该参数位置可以直接简写成 false\n\n例子：\n```JS\n<div class=\"box\">\n  <ul>\n    <li>1</li>\n    <li>2</li>\n    <li>3</li>\n    <li>4</li>\n  </ul>\n</div>\n<input id=\"ipt\" type=\"text\"> <button id=\"btn\">添加</button>\n\n<div id=\"wrap\"></div>\n\n<script>\n$('.box li').on('click', function(){\n    console.log(1)\n  var str = $(this).text()\n  $('#wrap').text(str)\n})\n\n/* 等同于 */\n$('.box>ul>li').click(function(){\n    console.log(2)\n  var str = $(this).text()\n  $('#wrap').text(str)\n})\n\n/* 也可以这样写 */\n$('.box li').on('click.hello', function(){\n    console.log(3)\n  var str = $(this).text()\n  $('#wrap').text(str)\n})\n\n/* 命名空间没什么特别的作用，只不过在解绑事件时便于区分绑定的事件 */\n$('.box li').off('click.hello')\n\n/* 可是用如下方法新增的元素是没绑定事件的 */\n$('#btn').on('click', function(){\n  var value = $('#ipt').val()\n  $('.box>ul').append('<li>'+value+'</li>')\n})\n\n/* 我们可以用事件代理 */\n$('.box ul').on('click', 'li', function(){\n  var str = $(this).text()\n  $('#wrap').text(str)\n})\n\n/* 上面代码相当于原生 js 的 */\ndocument.querySelector('.box ul').addEventListener('click', function(e){\n    if(e.target.tagName.toLowerCase() === 'li'){\n        //do something\n    }\n})\n\n/* 绑定事件的时候我们也可以给事件附带些数据，只不过这种用法很少见 */\n$('.box').on('click', {name: 'hunger'}, function(e){\n    console.log(e.data)\n})\n\n```\n\n***\n\n#### .one( events [, selector ] [, data ], handler(eventObject) )\n同 on，绑定事件，但只执行一次.\n\n***\n\n#### .off( events [, selector ] [, handler ] )\n移除一个事件处理函数\n\n```JS\n$('.box li').off('click')\n```\n\n***\n\n#### .trigger( eventType [, extraParameters ] )\n根据绑定到匹配元素的给定的事件类型执行所有的处理程序和行为.\n\n```JS\n$('#foo').on('click', function() {\n  console.log($(this).text())\n});\n$('#foo').trigger('click')\n```","source":"_posts/jQuery绑定事件.md","raw":"---\ntitle: jQuery event handlers\ndate: 2019-08-27 22:39:01\ntags:\n- jQuery\nclearReading: true\nthumbnailImage: 20190827.jpg\nthumbnailImagePosition: left\ncoverImage: cover.jpg\ncoverCaption: \"Hello World, Hello Programming\"\ncoverSize: partial\ncomments: false\ncategories: Front-end Knowledge\n---\n关于jQuery事件绑定\n<!--more-->\n\n***\n\n### 事件处理\n\n事件处理中最头疼的就是浏览器兼容问题，jQuery封装了很好的API，可以方便的进行事件处理\n\n在1.7之前的版本中jQuery处理事件有多个方法，后来统一的使用on/off方法.\n\n***\n\n#### on( events [,selector ] [,data ], handler(eventObject) )\n1. events：一个或多个空格分隔的事件类型和可选的命名空间，或仅仅是命名空间，比如\"click\", \"keydown.myPlugin\", 或者 \".myPlugin\"\n\n2. selector：一个选择器字符串，用于过滤出被选中的元素中能触发事件的后代元素。如果选择器是 null 或者忽略了该选择器，那么被选中的元素总是能触发事件\n\n3. data：当一个事件被触发时，要传递给事件处理函数的event.data\n\n4. handler(eventObject)：事件被触发时，执行的函数。若该函数只是要执行return false的话，那么该参数位置可以直接简写成 false\n\n例子：\n```JS\n<div class=\"box\">\n  <ul>\n    <li>1</li>\n    <li>2</li>\n    <li>3</li>\n    <li>4</li>\n  </ul>\n</div>\n<input id=\"ipt\" type=\"text\"> <button id=\"btn\">添加</button>\n\n<div id=\"wrap\"></div>\n\n<script>\n$('.box li').on('click', function(){\n    console.log(1)\n  var str = $(this).text()\n  $('#wrap').text(str)\n})\n\n/* 等同于 */\n$('.box>ul>li').click(function(){\n    console.log(2)\n  var str = $(this).text()\n  $('#wrap').text(str)\n})\n\n/* 也可以这样写 */\n$('.box li').on('click.hello', function(){\n    console.log(3)\n  var str = $(this).text()\n  $('#wrap').text(str)\n})\n\n/* 命名空间没什么特别的作用，只不过在解绑事件时便于区分绑定的事件 */\n$('.box li').off('click.hello')\n\n/* 可是用如下方法新增的元素是没绑定事件的 */\n$('#btn').on('click', function(){\n  var value = $('#ipt').val()\n  $('.box>ul').append('<li>'+value+'</li>')\n})\n\n/* 我们可以用事件代理 */\n$('.box ul').on('click', 'li', function(){\n  var str = $(this).text()\n  $('#wrap').text(str)\n})\n\n/* 上面代码相当于原生 js 的 */\ndocument.querySelector('.box ul').addEventListener('click', function(e){\n    if(e.target.tagName.toLowerCase() === 'li'){\n        //do something\n    }\n})\n\n/* 绑定事件的时候我们也可以给事件附带些数据，只不过这种用法很少见 */\n$('.box').on('click', {name: 'hunger'}, function(e){\n    console.log(e.data)\n})\n\n```\n\n***\n\n#### .one( events [, selector ] [, data ], handler(eventObject) )\n同 on，绑定事件，但只执行一次.\n\n***\n\n#### .off( events [, selector ] [, handler ] )\n移除一个事件处理函数\n\n```JS\n$('.box li').off('click')\n```\n\n***\n\n#### .trigger( eventType [, extraParameters ] )\n根据绑定到匹配元素的给定的事件类型执行所有的处理程序和行为.\n\n```JS\n$('#foo').on('click', function() {\n  console.log($(this).text())\n});\n$('#foo').trigger('click')\n```","slug":"jQuery绑定事件","published":1,"updated":"2019-11-23T23:54:38.000Z","layout":"post","photos":[],"link":"","_id":"ck3it6k2j002eteyi190ukd7t","content":"<p>关于jQuery事件绑定</p>\n<a id=\"more\"></a>\n\n<hr>\n<h3 id=\"事件处理\"><a href=\"#事件处理\" class=\"headerlink\" title=\"事件处理\"></a>事件处理</h3><p>事件处理中最头疼的就是浏览器兼容问题，jQuery封装了很好的API，可以方便的进行事件处理</p>\n<p>在1.7之前的版本中jQuery处理事件有多个方法，后来统一的使用on/off方法.</p>\n<hr>\n<h4 id=\"on-events-selector-data-handler-eventObject\"><a href=\"#on-events-selector-data-handler-eventObject\" class=\"headerlink\" title=\"on( events [,selector ] [,data ], handler(eventObject) )\"></a>on( events [,selector ] [,data ], handler(eventObject) )</h4><ol>\n<li><p>events：一个或多个空格分隔的事件类型和可选的命名空间，或仅仅是命名空间，比如”click”, “keydown.myPlugin”, 或者 “.myPlugin”</p>\n</li>\n<li><p>selector：一个选择器字符串，用于过滤出被选中的元素中能触发事件的后代元素。如果选择器是 null 或者忽略了该选择器，那么被选中的元素总是能触发事件</p>\n</li>\n<li><p>data：当一个事件被触发时，要传递给事件处理函数的event.data</p>\n</li>\n<li><p>handler(eventObject)：事件被触发时，执行的函数。若该函数只是要执行return false的话，那么该参数位置可以直接简写成 false</p>\n</li>\n</ol>\n<p>例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"box\"</span>&gt;</span><br><span class=\"line\">  &lt;ul&gt;</span><br><span class=\"line\">    &lt;li&gt;<span class=\"number\">1</span>&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;li&gt;2&lt;/</span>li&gt;</span><br><span class=\"line\">    &lt;li&gt;<span class=\"number\">3</span>&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;li&gt;4&lt;/</span>li&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</span><br><span class=\"line\">&lt;input id=<span class=\"string\">\"ipt\"</span> type=<span class=\"string\">\"text\"</span>&gt; <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"btn\"</span>&gt;</span>添加<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"wrap\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">$(<span class=\"string\">'.box li'</span>).on(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"keyword\">var</span> str = $(<span class=\"keyword\">this</span>).text()</span><br><span class=\"line\">  $(<span class=\"string\">'#wrap'</span>).text(str)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 等同于 */</span></span><br><span class=\"line\">$(<span class=\"string\">'.box&gt;ul&gt;li'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">  <span class=\"keyword\">var</span> str = $(<span class=\"keyword\">this</span>).text()</span><br><span class=\"line\">  $(<span class=\"string\">'#wrap'</span>).text(str)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 也可以这样写 */</span></span><br><span class=\"line\">$(<span class=\"string\">'.box li'</span>).on(<span class=\"string\">'click.hello'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\">  <span class=\"keyword\">var</span> str = $(<span class=\"keyword\">this</span>).text()</span><br><span class=\"line\">  $(<span class=\"string\">'#wrap'</span>).text(str)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 命名空间没什么特别的作用，只不过在解绑事件时便于区分绑定的事件 */</span></span><br><span class=\"line\">$(<span class=\"string\">'.box li'</span>).off(<span class=\"string\">'click.hello'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 可是用如下方法新增的元素是没绑定事件的 */</span></span><br><span class=\"line\">$(<span class=\"string\">'#btn'</span>).on(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> value = $(<span class=\"string\">'#ipt'</span>).val()</span><br><span class=\"line\">  $(<span class=\"string\">'.box&gt;ul'</span>).append(<span class=\"string\">'&lt;li&gt;'</span>+value+<span class=\"string\">'&lt;/li&gt;'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 我们可以用事件代理 */</span></span><br><span class=\"line\">$(<span class=\"string\">'.box ul'</span>).on(<span class=\"string\">'click'</span>, <span class=\"string\">'li'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> str = $(<span class=\"keyword\">this</span>).text()</span><br><span class=\"line\">  $(<span class=\"string\">'#wrap'</span>).text(str)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 上面代码相当于原生 js 的 */</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.box ul'</span>).addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(e.target.tagName.toLowerCase() === <span class=\"string\">'li'</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//do something</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 绑定事件的时候我们也可以给事件附带些数据，只不过这种用法很少见 */</span></span><br><span class=\"line\">$(<span class=\"string\">'.box'</span>).on(<span class=\"string\">'click'</span>, &#123;<span class=\"attr\">name</span>: <span class=\"string\">'hunger'</span>&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e.data)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"one-events-selector-data-handler-eventObject\"><a href=\"#one-events-selector-data-handler-eventObject\" class=\"headerlink\" title=\".one( events [, selector ] [, data ], handler(eventObject) )\"></a>.one( events [, selector ] [, data ], handler(eventObject) )</h4><p>同 on，绑定事件，但只执行一次.</p>\n<hr>\n<h4 id=\"off-events-selector-handler\"><a href=\"#off-events-selector-handler\" class=\"headerlink\" title=\".off( events [, selector ] [, handler ] )\"></a>.off( events [, selector ] [, handler ] )</h4><p>移除一个事件处理函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">'.box li'</span>).off(<span class=\"string\">'click'</span>)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"trigger-eventType-extraParameters\"><a href=\"#trigger-eventType-extraParameters\" class=\"headerlink\" title=\".trigger( eventType [, extraParameters ] )\"></a>.trigger( eventType [, extraParameters ] )</h4><p>根据绑定到匹配元素的给定的事件类型执行所有的处理程序和行为.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">'#foo'</span>).on(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log($(<span class=\"keyword\">this</span>).text())</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">$(<span class=\"string\">'#foo'</span>).trigger(<span class=\"string\">'click'</span>)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"thumbnailImageUrl":"https://kisky3.github.io/2019/08/27/jQuery绑定事件/20190827.jpg","excerpt":"<p>关于jQuery事件绑定</p>","more":"<hr>\n<h3 id=\"事件处理\"><a href=\"#事件处理\" class=\"headerlink\" title=\"事件处理\"></a>事件处理</h3><p>事件处理中最头疼的就是浏览器兼容问题，jQuery封装了很好的API，可以方便的进行事件处理</p>\n<p>在1.7之前的版本中jQuery处理事件有多个方法，后来统一的使用on/off方法.</p>\n<hr>\n<h4 id=\"on-events-selector-data-handler-eventObject\"><a href=\"#on-events-selector-data-handler-eventObject\" class=\"headerlink\" title=\"on( events [,selector ] [,data ], handler(eventObject) )\"></a>on( events [,selector ] [,data ], handler(eventObject) )</h4><ol>\n<li><p>events：一个或多个空格分隔的事件类型和可选的命名空间，或仅仅是命名空间，比如”click”, “keydown.myPlugin”, 或者 “.myPlugin”</p>\n</li>\n<li><p>selector：一个选择器字符串，用于过滤出被选中的元素中能触发事件的后代元素。如果选择器是 null 或者忽略了该选择器，那么被选中的元素总是能触发事件</p>\n</li>\n<li><p>data：当一个事件被触发时，要传递给事件处理函数的event.data</p>\n</li>\n<li><p>handler(eventObject)：事件被触发时，执行的函数。若该函数只是要执行return false的话，那么该参数位置可以直接简写成 false</p>\n</li>\n</ol>\n<p>例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"box\"</span>&gt;</span><br><span class=\"line\">  &lt;ul&gt;</span><br><span class=\"line\">    &lt;li&gt;<span class=\"number\">1</span>&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;li&gt;2&lt;/</span>li&gt;</span><br><span class=\"line\">    &lt;li&gt;<span class=\"number\">3</span>&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;li&gt;4&lt;/</span>li&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</span><br><span class=\"line\">&lt;input id=<span class=\"string\">\"ipt\"</span> type=<span class=\"string\">\"text\"</span>&gt; <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"btn\"</span>&gt;</span>添加<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"wrap\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">$(<span class=\"string\">'.box li'</span>).on(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"keyword\">var</span> str = $(<span class=\"keyword\">this</span>).text()</span><br><span class=\"line\">  $(<span class=\"string\">'#wrap'</span>).text(str)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 等同于 */</span></span><br><span class=\"line\">$(<span class=\"string\">'.box&gt;ul&gt;li'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">  <span class=\"keyword\">var</span> str = $(<span class=\"keyword\">this</span>).text()</span><br><span class=\"line\">  $(<span class=\"string\">'#wrap'</span>).text(str)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 也可以这样写 */</span></span><br><span class=\"line\">$(<span class=\"string\">'.box li'</span>).on(<span class=\"string\">'click.hello'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\">  <span class=\"keyword\">var</span> str = $(<span class=\"keyword\">this</span>).text()</span><br><span class=\"line\">  $(<span class=\"string\">'#wrap'</span>).text(str)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 命名空间没什么特别的作用，只不过在解绑事件时便于区分绑定的事件 */</span></span><br><span class=\"line\">$(<span class=\"string\">'.box li'</span>).off(<span class=\"string\">'click.hello'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 可是用如下方法新增的元素是没绑定事件的 */</span></span><br><span class=\"line\">$(<span class=\"string\">'#btn'</span>).on(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> value = $(<span class=\"string\">'#ipt'</span>).val()</span><br><span class=\"line\">  $(<span class=\"string\">'.box&gt;ul'</span>).append(<span class=\"string\">'&lt;li&gt;'</span>+value+<span class=\"string\">'&lt;/li&gt;'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 我们可以用事件代理 */</span></span><br><span class=\"line\">$(<span class=\"string\">'.box ul'</span>).on(<span class=\"string\">'click'</span>, <span class=\"string\">'li'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> str = $(<span class=\"keyword\">this</span>).text()</span><br><span class=\"line\">  $(<span class=\"string\">'#wrap'</span>).text(str)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 上面代码相当于原生 js 的 */</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.box ul'</span>).addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(e.target.tagName.toLowerCase() === <span class=\"string\">'li'</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//do something</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 绑定事件的时候我们也可以给事件附带些数据，只不过这种用法很少见 */</span></span><br><span class=\"line\">$(<span class=\"string\">'.box'</span>).on(<span class=\"string\">'click'</span>, &#123;<span class=\"attr\">name</span>: <span class=\"string\">'hunger'</span>&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e.data)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"one-events-selector-data-handler-eventObject\"><a href=\"#one-events-selector-data-handler-eventObject\" class=\"headerlink\" title=\".one( events [, selector ] [, data ], handler(eventObject) )\"></a>.one( events [, selector ] [, data ], handler(eventObject) )</h4><p>同 on，绑定事件，但只执行一次.</p>\n<hr>\n<h4 id=\"off-events-selector-handler\"><a href=\"#off-events-selector-handler\" class=\"headerlink\" title=\".off( events [, selector ] [, handler ] )\"></a>.off( events [, selector ] [, handler ] )</h4><p>移除一个事件处理函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">'.box li'</span>).off(<span class=\"string\">'click'</span>)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"trigger-eventType-extraParameters\"><a href=\"#trigger-eventType-extraParameters\" class=\"headerlink\" title=\".trigger( eventType [, extraParameters ] )\"></a>.trigger( eventType [, extraParameters ] )</h4><p>根据绑定到匹配元素的给定的事件类型执行所有的处理程序和行为.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">'#foo'</span>).on(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log($(<span class=\"keyword\">this</span>).text())</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">$(<span class=\"string\">'#foo'</span>).trigger(<span class=\"string\">'click'</span>)</span><br></pre></td></tr></table></figure>"},{"title":"About SSH Login And How To Connect To Cyberduck","date":"2019-11-11T08:48:10.000Z","clearReading":true,"thumbnailImage":"20191111.png","thumbnailImagePosition":"left","coverImage":"cover.jpg","coverCaption":"Hello World, Hello Programming","coverSize":"partial","comments":0,"_content":"关于SSH登陆以及如何连接Cyberduck\n<!--more-->\n\n### 什么是SSH\nSSH（Secure Shell）是一种网络协议，用于计算机之间的加密登录。如果一个用户从本地计算机，使用SSH协议登录另一台远程计算机，我们就可以认为，这种登录是安全的，即使被中途截获，密码也不会泄露。\n\n### 什么是FTP\nFTP（File Transfer Protocol）就是就是专门用来传输文件的协议。\nFTP服务器（File Transfer Protocol Server）是在互联网上提供文件存储和访问服务的计算机，它们依照FTP协议提供服务。\n\n### 什么是SFTP\nSFTP（SSH File Transfer Protocol），安全文件传送协议。\n可以为传输文件提供一种安全的加密方法。sftp 与 ftp 有着几乎一样的语法和功能。SFTP 为 SSH的一部分，是一种传输档案至 Blogger 伺服器的安全方式。其实在SSH软件包中，已经包含了一个叫作SFTP(Secure File Transfer Protocol)的安全文件传输子系统。\n\n### FTP与SFTP的区别\nFTP是一种文件传输协议，一般是为了方便数据共享的。包括一个FTP服务器和多个FTP客户端。FTP客户端通过FTP协议在服务器上下载资源。而SFTP协议是在FTP的基础上对数据进行加密，使得传输的数据相对来说更安全。但是这种安全是以牺牲效率为代价的，也就是说SFTP的传输效率比FTP要低(不过现实使用当中，没有发现多大差别)。\n\n总结：\n1.FTP要安装，SFTP不要安装。\n当我们需要传输文件到Linux服务器当中，我们习惯用ftp来传输，其实Linux默认是不提供ftp的，需要你额外安装FTP服务器。而SFTP不需要单独配置，开启SSH默认就开启了SFTP。\n\n2.SFTP使用加密传输认证信息和传输数据更安全，但更安全带来副作用就是的效率比FTP要低。\n\n### SFTP/SSH登录及命令行用法\nSFTP：\n```\nget xxx.txt 下载xxx文件\nput xxx.txt 上传xxx文件\nquit / bye / exit 退出sftp\nsftp  xxx.xxx.xxx.xxx   登录root用户\nsftp zygf@xxx.xxx.xxx.xxx  进行登录zygf用户。\n```\n例：：\n1.首先如果要登陆你需要「远程服务器的秘密键」，「用户名」和「邮件地址」。\n2.在本地存在公开键的情况下，你需要将远程服务器的秘密键保存在本地。\n  生成一个秘密键文件\n```\n　cd ~/.ssh\n　cp kou_id_rsa wordpress_rsa\n  vim wordpress_rsa\n```\n\n<img src=\"./1.png\" style=\"width:500px\">\n\n3.登陆服务器并且传送你生成的秘密键,不用写端口号!(默认为22)。\n```\nssh ユーザー名@IPアドレス -i ~/.ssh/wordpress_rsa(生成した秘密鍵ファイル名)\n```\n4.有问题则回答yes，然后就可以看到登陆成功了。\n<img src=\"./2.png\" style=\"width:500px\">\n\n### 使用FTP软件进行登陆及文件操作\nmac可以使用免费的FTP软件[Cyberduck](https://cyberduck.io/download/)\n就是这个小黄鸭！！\n<img src=\"./7.png\" style=\"width:500px\">\n\n1.点击新建连接\n<img src=\"./3.png\" style=\"width:500px\">\n\n2.在界面上选择SFTP连接\n<img src=\"./4.png\" style=\"width:500px\">\n\n3.输入用户名。密码以及选择本地秘密键文件，点击连接。\n<img src=\"./5.png\" style=\"width:500px\">\n\n成功！！\n<img src=\"./6.png\" style=\"width:500px\">\n\n### 可能发生的错误\n##### 1.没有给ssh文件夹权限\n解决方法：\n给下面的ssh文件夹以及你生成的秘密键权限。\n```\nchmod 600 ~/.ssh/wordpress_rsa\nchmod 700 ~/.ssh\n```\n\n##### 2.复制秘密键的时候转换软件导致字符改变\n解决方法：\n下载之后用记事本打开再进行复制粘贴。\n","source":"_posts/ssh.md","raw":"---\ntitle: About SSH Login And How To Connect To Cyberduck\ndate: 2019-11-11 17:48:10\ntags:\n- SSH\n- Cyberduck\n- FTP\n- SFTP\nclearReading: true\nthumbnailImage: 20191111.png\nthumbnailImagePosition: left\ncoverImage: cover.jpg\ncoverCaption: \"Hello World, Hello Programming\"\ncoverSize: partial\ncomments: false\ncategories: Back-end Knowledge\n---\n关于SSH登陆以及如何连接Cyberduck\n<!--more-->\n\n### 什么是SSH\nSSH（Secure Shell）是一种网络协议，用于计算机之间的加密登录。如果一个用户从本地计算机，使用SSH协议登录另一台远程计算机，我们就可以认为，这种登录是安全的，即使被中途截获，密码也不会泄露。\n\n### 什么是FTP\nFTP（File Transfer Protocol）就是就是专门用来传输文件的协议。\nFTP服务器（File Transfer Protocol Server）是在互联网上提供文件存储和访问服务的计算机，它们依照FTP协议提供服务。\n\n### 什么是SFTP\nSFTP（SSH File Transfer Protocol），安全文件传送协议。\n可以为传输文件提供一种安全的加密方法。sftp 与 ftp 有着几乎一样的语法和功能。SFTP 为 SSH的一部分，是一种传输档案至 Blogger 伺服器的安全方式。其实在SSH软件包中，已经包含了一个叫作SFTP(Secure File Transfer Protocol)的安全文件传输子系统。\n\n### FTP与SFTP的区别\nFTP是一种文件传输协议，一般是为了方便数据共享的。包括一个FTP服务器和多个FTP客户端。FTP客户端通过FTP协议在服务器上下载资源。而SFTP协议是在FTP的基础上对数据进行加密，使得传输的数据相对来说更安全。但是这种安全是以牺牲效率为代价的，也就是说SFTP的传输效率比FTP要低(不过现实使用当中，没有发现多大差别)。\n\n总结：\n1.FTP要安装，SFTP不要安装。\n当我们需要传输文件到Linux服务器当中，我们习惯用ftp来传输，其实Linux默认是不提供ftp的，需要你额外安装FTP服务器。而SFTP不需要单独配置，开启SSH默认就开启了SFTP。\n\n2.SFTP使用加密传输认证信息和传输数据更安全，但更安全带来副作用就是的效率比FTP要低。\n\n### SFTP/SSH登录及命令行用法\nSFTP：\n```\nget xxx.txt 下载xxx文件\nput xxx.txt 上传xxx文件\nquit / bye / exit 退出sftp\nsftp  xxx.xxx.xxx.xxx   登录root用户\nsftp zygf@xxx.xxx.xxx.xxx  进行登录zygf用户。\n```\n例：：\n1.首先如果要登陆你需要「远程服务器的秘密键」，「用户名」和「邮件地址」。\n2.在本地存在公开键的情况下，你需要将远程服务器的秘密键保存在本地。\n  生成一个秘密键文件\n```\n　cd ~/.ssh\n　cp kou_id_rsa wordpress_rsa\n  vim wordpress_rsa\n```\n\n<img src=\"./1.png\" style=\"width:500px\">\n\n3.登陆服务器并且传送你生成的秘密键,不用写端口号!(默认为22)。\n```\nssh ユーザー名@IPアドレス -i ~/.ssh/wordpress_rsa(生成した秘密鍵ファイル名)\n```\n4.有问题则回答yes，然后就可以看到登陆成功了。\n<img src=\"./2.png\" style=\"width:500px\">\n\n### 使用FTP软件进行登陆及文件操作\nmac可以使用免费的FTP软件[Cyberduck](https://cyberduck.io/download/)\n就是这个小黄鸭！！\n<img src=\"./7.png\" style=\"width:500px\">\n\n1.点击新建连接\n<img src=\"./3.png\" style=\"width:500px\">\n\n2.在界面上选择SFTP连接\n<img src=\"./4.png\" style=\"width:500px\">\n\n3.输入用户名。密码以及选择本地秘密键文件，点击连接。\n<img src=\"./5.png\" style=\"width:500px\">\n\n成功！！\n<img src=\"./6.png\" style=\"width:500px\">\n\n### 可能发生的错误\n##### 1.没有给ssh文件夹权限\n解决方法：\n给下面的ssh文件夹以及你生成的秘密键权限。\n```\nchmod 600 ~/.ssh/wordpress_rsa\nchmod 700 ~/.ssh\n```\n\n##### 2.复制秘密键的时候转换软件导致字符改变\n解决方法：\n下载之后用记事本打开再进行复制粘贴。\n","slug":"ssh","published":1,"updated":"2019-11-23T23:54:38.000Z","layout":"post","photos":[],"link":"","_id":"ck3it6k2k002hteyinzy5jc9n","content":"<p>关于SSH登陆以及如何连接Cyberduck</p>\n<a id=\"more\"></a>\n\n<h3 id=\"什么是SSH\"><a href=\"#什么是SSH\" class=\"headerlink\" title=\"什么是SSH\"></a>什么是SSH</h3><p>SSH（Secure Shell）是一种网络协议，用于计算机之间的加密登录。如果一个用户从本地计算机，使用SSH协议登录另一台远程计算机，我们就可以认为，这种登录是安全的，即使被中途截获，密码也不会泄露。</p>\n<h3 id=\"什么是FTP\"><a href=\"#什么是FTP\" class=\"headerlink\" title=\"什么是FTP\"></a>什么是FTP</h3><p>FTP（File Transfer Protocol）就是就是专门用来传输文件的协议。<br>FTP服务器（File Transfer Protocol Server）是在互联网上提供文件存储和访问服务的计算机，它们依照FTP协议提供服务。</p>\n<h3 id=\"什么是SFTP\"><a href=\"#什么是SFTP\" class=\"headerlink\" title=\"什么是SFTP\"></a>什么是SFTP</h3><p>SFTP（SSH File Transfer Protocol），安全文件传送协议。<br>可以为传输文件提供一种安全的加密方法。sftp 与 ftp 有着几乎一样的语法和功能。SFTP 为 SSH的一部分，是一种传输档案至 Blogger 伺服器的安全方式。其实在SSH软件包中，已经包含了一个叫作SFTP(Secure File Transfer Protocol)的安全文件传输子系统。</p>\n<h3 id=\"FTP与SFTP的区别\"><a href=\"#FTP与SFTP的区别\" class=\"headerlink\" title=\"FTP与SFTP的区别\"></a>FTP与SFTP的区别</h3><p>FTP是一种文件传输协议，一般是为了方便数据共享的。包括一个FTP服务器和多个FTP客户端。FTP客户端通过FTP协议在服务器上下载资源。而SFTP协议是在FTP的基础上对数据进行加密，使得传输的数据相对来说更安全。但是这种安全是以牺牲效率为代价的，也就是说SFTP的传输效率比FTP要低(不过现实使用当中，没有发现多大差别)。</p>\n<p>总结：<br>1.FTP要安装，SFTP不要安装。<br>当我们需要传输文件到Linux服务器当中，我们习惯用ftp来传输，其实Linux默认是不提供ftp的，需要你额外安装FTP服务器。而SFTP不需要单独配置，开启SSH默认就开启了SFTP。</p>\n<p>2.SFTP使用加密传输认证信息和传输数据更安全，但更安全带来副作用就是的效率比FTP要低。</p>\n<h3 id=\"SFTP-SSH登录及命令行用法\"><a href=\"#SFTP-SSH登录及命令行用法\" class=\"headerlink\" title=\"SFTP/SSH登录及命令行用法\"></a>SFTP/SSH登录及命令行用法</h3><p>SFTP：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get xxx.txt 下载xxx文件</span><br><span class=\"line\">put xxx.txt 上传xxx文件</span><br><span class=\"line\">quit / bye / exit 退出sftp</span><br><span class=\"line\">sftp  xxx.xxx.xxx.xxx   登录root用户</span><br><span class=\"line\">sftp zygf@xxx.xxx.xxx.xxx  进行登录zygf用户。</span><br></pre></td></tr></table></figure>\n\n<p>例：：<br>1.首先如果要登陆你需要「远程服务器的秘密键」，「用户名」和「邮件地址」。<br>2.在本地存在公开键的情况下，你需要将远程服务器的秘密键保存在本地。<br>  生成一个秘密键文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　cd ~/.ssh</span><br><span class=\"line\">　cp kou_id_rsa wordpress_rsa</span><br><span class=\"line\">vim wordpress_rsa</span><br></pre></td></tr></table></figure>\n\n<img src=\"./1.png\" style=\"width:500px\">\n\n<p>3.登陆服务器并且传送你生成的秘密键,不用写端口号!(默认为22)。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh ユーザー名@IPアドレス -i ~/.ssh/wordpress_rsa(生成した秘密鍵ファイル名)</span><br></pre></td></tr></table></figure>\n\n<p>4.有问题则回答yes，然后就可以看到登陆成功了。<br><img src=\"./2.png\" style=\"width:500px\"></p>\n<h3 id=\"使用FTP软件进行登陆及文件操作\"><a href=\"#使用FTP软件进行登陆及文件操作\" class=\"headerlink\" title=\"使用FTP软件进行登陆及文件操作\"></a>使用FTP软件进行登陆及文件操作</h3><p>mac可以使用免费的FTP软件<a href=\"https://cyberduck.io/download/\" target=\"_blank\" rel=\"noopener\">Cyberduck</a><br>就是这个小黄鸭！！<br><img src=\"./7.png\" style=\"width:500px\"></p>\n<p>1.点击新建连接<br><img src=\"./3.png\" style=\"width:500px\"></p>\n<p>2.在界面上选择SFTP连接<br><img src=\"./4.png\" style=\"width:500px\"></p>\n<p>3.输入用户名。密码以及选择本地秘密键文件，点击连接。<br><img src=\"./5.png\" style=\"width:500px\"></p>\n<p>成功！！<br><img src=\"./6.png\" style=\"width:500px\"></p>\n<h3 id=\"可能发生的错误\"><a href=\"#可能发生的错误\" class=\"headerlink\" title=\"可能发生的错误\"></a>可能发生的错误</h3><h5 id=\"1-没有给ssh文件夹权限\"><a href=\"#1-没有给ssh文件夹权限\" class=\"headerlink\" title=\"1.没有给ssh文件夹权限\"></a>1.没有给ssh文件夹权限</h5><p>解决方法：<br>给下面的ssh文件夹以及你生成的秘密键权限。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 600 ~/.ssh/wordpress_rsa</span><br><span class=\"line\">chmod 700 ~/.ssh</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-复制秘密键的时候转换软件导致字符改变\"><a href=\"#2-复制秘密键的时候转换软件导致字符改变\" class=\"headerlink\" title=\"2.复制秘密键的时候转换软件导致字符改变\"></a>2.复制秘密键的时候转换软件导致字符改变</h5><p>解决方法：<br>下载之后用记事本打开再进行复制粘贴。</p>\n","site":{"data":{}},"thumbnailImageUrl":"https://kisky3.github.io/2019/11/11/ssh/20191111.png","excerpt":"<p>关于SSH登陆以及如何连接Cyberduck</p>","more":"<h3 id=\"什么是SSH\"><a href=\"#什么是SSH\" class=\"headerlink\" title=\"什么是SSH\"></a>什么是SSH</h3><p>SSH（Secure Shell）是一种网络协议，用于计算机之间的加密登录。如果一个用户从本地计算机，使用SSH协议登录另一台远程计算机，我们就可以认为，这种登录是安全的，即使被中途截获，密码也不会泄露。</p>\n<h3 id=\"什么是FTP\"><a href=\"#什么是FTP\" class=\"headerlink\" title=\"什么是FTP\"></a>什么是FTP</h3><p>FTP（File Transfer Protocol）就是就是专门用来传输文件的协议。<br>FTP服务器（File Transfer Protocol Server）是在互联网上提供文件存储和访问服务的计算机，它们依照FTP协议提供服务。</p>\n<h3 id=\"什么是SFTP\"><a href=\"#什么是SFTP\" class=\"headerlink\" title=\"什么是SFTP\"></a>什么是SFTP</h3><p>SFTP（SSH File Transfer Protocol），安全文件传送协议。<br>可以为传输文件提供一种安全的加密方法。sftp 与 ftp 有着几乎一样的语法和功能。SFTP 为 SSH的一部分，是一种传输档案至 Blogger 伺服器的安全方式。其实在SSH软件包中，已经包含了一个叫作SFTP(Secure File Transfer Protocol)的安全文件传输子系统。</p>\n<h3 id=\"FTP与SFTP的区别\"><a href=\"#FTP与SFTP的区别\" class=\"headerlink\" title=\"FTP与SFTP的区别\"></a>FTP与SFTP的区别</h3><p>FTP是一种文件传输协议，一般是为了方便数据共享的。包括一个FTP服务器和多个FTP客户端。FTP客户端通过FTP协议在服务器上下载资源。而SFTP协议是在FTP的基础上对数据进行加密，使得传输的数据相对来说更安全。但是这种安全是以牺牲效率为代价的，也就是说SFTP的传输效率比FTP要低(不过现实使用当中，没有发现多大差别)。</p>\n<p>总结：<br>1.FTP要安装，SFTP不要安装。<br>当我们需要传输文件到Linux服务器当中，我们习惯用ftp来传输，其实Linux默认是不提供ftp的，需要你额外安装FTP服务器。而SFTP不需要单独配置，开启SSH默认就开启了SFTP。</p>\n<p>2.SFTP使用加密传输认证信息和传输数据更安全，但更安全带来副作用就是的效率比FTP要低。</p>\n<h3 id=\"SFTP-SSH登录及命令行用法\"><a href=\"#SFTP-SSH登录及命令行用法\" class=\"headerlink\" title=\"SFTP/SSH登录及命令行用法\"></a>SFTP/SSH登录及命令行用法</h3><p>SFTP：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get xxx.txt 下载xxx文件</span><br><span class=\"line\">put xxx.txt 上传xxx文件</span><br><span class=\"line\">quit / bye / exit 退出sftp</span><br><span class=\"line\">sftp  xxx.xxx.xxx.xxx   登录root用户</span><br><span class=\"line\">sftp zygf@xxx.xxx.xxx.xxx  进行登录zygf用户。</span><br></pre></td></tr></table></figure>\n\n<p>例：：<br>1.首先如果要登陆你需要「远程服务器的秘密键」，「用户名」和「邮件地址」。<br>2.在本地存在公开键的情况下，你需要将远程服务器的秘密键保存在本地。<br>  生成一个秘密键文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　cd ~/.ssh</span><br><span class=\"line\">　cp kou_id_rsa wordpress_rsa</span><br><span class=\"line\">vim wordpress_rsa</span><br></pre></td></tr></table></figure>\n\n<img src=\"./1.png\" style=\"width:500px\">\n\n<p>3.登陆服务器并且传送你生成的秘密键,不用写端口号!(默认为22)。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh ユーザー名@IPアドレス -i ~/.ssh/wordpress_rsa(生成した秘密鍵ファイル名)</span><br></pre></td></tr></table></figure>\n\n<p>4.有问题则回答yes，然后就可以看到登陆成功了。<br><img src=\"./2.png\" style=\"width:500px\"></p>\n<h3 id=\"使用FTP软件进行登陆及文件操作\"><a href=\"#使用FTP软件进行登陆及文件操作\" class=\"headerlink\" title=\"使用FTP软件进行登陆及文件操作\"></a>使用FTP软件进行登陆及文件操作</h3><p>mac可以使用免费的FTP软件<a href=\"https://cyberduck.io/download/\" target=\"_blank\" rel=\"noopener\">Cyberduck</a><br>就是这个小黄鸭！！<br><img src=\"./7.png\" style=\"width:500px\"></p>\n<p>1.点击新建连接<br><img src=\"./3.png\" style=\"width:500px\"></p>\n<p>2.在界面上选择SFTP连接<br><img src=\"./4.png\" style=\"width:500px\"></p>\n<p>3.输入用户名。密码以及选择本地秘密键文件，点击连接。<br><img src=\"./5.png\" style=\"width:500px\"></p>\n<p>成功！！<br><img src=\"./6.png\" style=\"width:500px\"></p>\n<h3 id=\"可能发生的错误\"><a href=\"#可能发生的错误\" class=\"headerlink\" title=\"可能发生的错误\"></a>可能发生的错误</h3><h5 id=\"1-没有给ssh文件夹权限\"><a href=\"#1-没有给ssh文件夹权限\" class=\"headerlink\" title=\"1.没有给ssh文件夹权限\"></a>1.没有给ssh文件夹权限</h5><p>解决方法：<br>给下面的ssh文件夹以及你生成的秘密键权限。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 600 ~/.ssh/wordpress_rsa</span><br><span class=\"line\">chmod 700 ~/.ssh</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-复制秘密键的时候转换软件导致字符改变\"><a href=\"#2-复制秘密键的时候转换软件导致字符改变\" class=\"headerlink\" title=\"2.复制秘密键的时候转换软件导致字符改变\"></a>2.复制秘密键的时候转换软件导致字符改变</h5><p>解决方法：<br>下载之后用记事本打开再进行复制粘贴。</p>"},{"title":"What is Ajax","date":"2019-06-05T08:04:23.000Z","clearReading":true,"thumbnailImage":"20190605.png","thumbnailImagePosition":"left","coverImage":"cover.jpg","coverCaption":"Hello World, Hello Programming","coverSize":"partial","comments":0,"_content":"\n什么是Ajax\n<!--more-->\n\n### 什么是ajax\najax是一种技术方案，但并不是一种新技术。\n\n它依赖的是现有的CSS/HTML/Javascript，而其中最核心的依赖是浏览器提供的XMLHttpRequest对象，是这个对象使得浏览器可以发出HTTP请求与接收HTTP响应。 \n实现在页面不刷新的情况下和服务端进行数据交互。\n\najax可以理解就是，以前向服务器请求资源，必须对这个页面资源进行请求以获得这个信息资源（以这个页面资源为载体来携带信息资源），这必然会对页面进行刷新（因为是请求服务器后会同步返回一个页面进行刷新）。\n现在页面可以通过浏览器脚本编程语言调用一个隐藏请求装置（也就是XMLHttpRequest），由这个请求向服务器请求资源，然后返回一个资源载体（可能是一个页面，也可能是一个xml或json文段），然后由编程语言去处理这个信息。与此同时，页面是不会发生刷新行为的（也就是没有向服务器请求这个页面资源）。这就是异步原理了。“AJA”就是异步JavaScript的缩写，其基础就是浏览器脚本编程语言JavaScript和XMLHttpRequest对象，X就是作为信息载体的XML，不过现在多数用JSON代替。\n\n作用就是可以在不重新加载整个网页的情况下，对网页的某部分进行更新。\n\n### ajax范例\n\nGET\n```js\nvar xhr = new XMLHttpRequest()\nxhr.open('GET', 'http://api.jirengu.com/weather.php', true)\nxhr.onreadystatechange = function(){\n    if(xhr.readyState === 4) {\n        if((xhr.status >= 200 && xhr.status < 300) || xhr.status == 304){\n            //成功了\n            console.log(xhr.responseText)\n        } else {\n            console.log('服务器异常')\n        }\n    }\n}\nxhr.onerror = function(){\n    console.log('服务器异常')\n}\nxhr.send()\n```\n\nPOST\n```JS\nvar xhr = new XMLHttpRequest()\n  xhr.timeout = 3000        //可选，设置xhr请求的超时时间\n  xhr.open('POST', '/register', true)\n\n  xhr.onload = function(e) { \n    if((xhr.status >= 200 && xhr.status < 300) || xhr.status == 304){\n      console.log(this.responseText)\n    }\n  }\n    //可选\n  xhr.ontimeout = function(e) { \n        console.log('请求超时')\n  }\n\n  //可选\n  xhr.onerror = function(e) {\n      console.log('连接失败')\n  }\n  //可选\n  xhr.upload.onprogress = function(e) {\n      //如果是上传文件，可以获取上传进度\n  }\n\n  xhr.send('username=jirengu&password=123456')\n```\n\n封装一个ajax\n```JS\nfunction ajax(opts){\n    var url = opts.url\n    var type = opts.type || 'GET'\n    var dataType = opts.dataType || 'json'\n    var onsuccess = opts.onsuccess || function(){}\n    var onerror = opts.onerror || function(){}\n    var data = opts.data || {}\n\n    var dataStr = []\n    for(var key in data){\n        dataStr.push(key + '=' + data[key])\n    }\n    dataStr = dataStr.join('&')\n\n    if(type === 'GET'){\n        url += '?' + dataStr\n    }\n\n    var xhr = new XMLHttpRequest()\n    xhr.open(type, url, true)\n    xhr.onload = function(){\n        if((xhr.status >= 200 && xhr.status < 300) || xhr.status == 304){\n            //成功了\n            if(dataType === 'json'){\n                onsuccess( JSON.parse(xhr.responseText))\n            }else{\n                onsuccess( xhr.responseText)\n            }\n        } else {\n            onerror()\n        }\n    }\n    xhr.onerror = onerror\n    if(type === 'POST'){\n        xhr.send(dataStr)\n    }else{\n        xhr.send()\n    }\n}\n\najax({\n    url: 'http://api.jirengu.com/weather.php',\n    data: {\n        city: '北京'\n    },\n    onsuccess: function(ret){\n        console.log(ret)\n    },\n    onerror: function(){\n        console.log('服务器异常')\n    }\n})\n```","source":"_posts/什么是ajax.md","raw":"---\ntitle: What is Ajax\ndate: 2019-06-05 17:04:23\ntags:\n- JS\n- ajax\nclearReading: true\nthumbnailImage: 20190605.png\nthumbnailImagePosition: left\ncoverImage: cover.jpg\ncoverCaption: \"Hello World, Hello Programming\"\ncoverSize: partial\ncomments: false\ncategories: Front-end Knowledge\n---\n\n什么是Ajax\n<!--more-->\n\n### 什么是ajax\najax是一种技术方案，但并不是一种新技术。\n\n它依赖的是现有的CSS/HTML/Javascript，而其中最核心的依赖是浏览器提供的XMLHttpRequest对象，是这个对象使得浏览器可以发出HTTP请求与接收HTTP响应。 \n实现在页面不刷新的情况下和服务端进行数据交互。\n\najax可以理解就是，以前向服务器请求资源，必须对这个页面资源进行请求以获得这个信息资源（以这个页面资源为载体来携带信息资源），这必然会对页面进行刷新（因为是请求服务器后会同步返回一个页面进行刷新）。\n现在页面可以通过浏览器脚本编程语言调用一个隐藏请求装置（也就是XMLHttpRequest），由这个请求向服务器请求资源，然后返回一个资源载体（可能是一个页面，也可能是一个xml或json文段），然后由编程语言去处理这个信息。与此同时，页面是不会发生刷新行为的（也就是没有向服务器请求这个页面资源）。这就是异步原理了。“AJA”就是异步JavaScript的缩写，其基础就是浏览器脚本编程语言JavaScript和XMLHttpRequest对象，X就是作为信息载体的XML，不过现在多数用JSON代替。\n\n作用就是可以在不重新加载整个网页的情况下，对网页的某部分进行更新。\n\n### ajax范例\n\nGET\n```js\nvar xhr = new XMLHttpRequest()\nxhr.open('GET', 'http://api.jirengu.com/weather.php', true)\nxhr.onreadystatechange = function(){\n    if(xhr.readyState === 4) {\n        if((xhr.status >= 200 && xhr.status < 300) || xhr.status == 304){\n            //成功了\n            console.log(xhr.responseText)\n        } else {\n            console.log('服务器异常')\n        }\n    }\n}\nxhr.onerror = function(){\n    console.log('服务器异常')\n}\nxhr.send()\n```\n\nPOST\n```JS\nvar xhr = new XMLHttpRequest()\n  xhr.timeout = 3000        //可选，设置xhr请求的超时时间\n  xhr.open('POST', '/register', true)\n\n  xhr.onload = function(e) { \n    if((xhr.status >= 200 && xhr.status < 300) || xhr.status == 304){\n      console.log(this.responseText)\n    }\n  }\n    //可选\n  xhr.ontimeout = function(e) { \n        console.log('请求超时')\n  }\n\n  //可选\n  xhr.onerror = function(e) {\n      console.log('连接失败')\n  }\n  //可选\n  xhr.upload.onprogress = function(e) {\n      //如果是上传文件，可以获取上传进度\n  }\n\n  xhr.send('username=jirengu&password=123456')\n```\n\n封装一个ajax\n```JS\nfunction ajax(opts){\n    var url = opts.url\n    var type = opts.type || 'GET'\n    var dataType = opts.dataType || 'json'\n    var onsuccess = opts.onsuccess || function(){}\n    var onerror = opts.onerror || function(){}\n    var data = opts.data || {}\n\n    var dataStr = []\n    for(var key in data){\n        dataStr.push(key + '=' + data[key])\n    }\n    dataStr = dataStr.join('&')\n\n    if(type === 'GET'){\n        url += '?' + dataStr\n    }\n\n    var xhr = new XMLHttpRequest()\n    xhr.open(type, url, true)\n    xhr.onload = function(){\n        if((xhr.status >= 200 && xhr.status < 300) || xhr.status == 304){\n            //成功了\n            if(dataType === 'json'){\n                onsuccess( JSON.parse(xhr.responseText))\n            }else{\n                onsuccess( xhr.responseText)\n            }\n        } else {\n            onerror()\n        }\n    }\n    xhr.onerror = onerror\n    if(type === 'POST'){\n        xhr.send(dataStr)\n    }else{\n        xhr.send()\n    }\n}\n\najax({\n    url: 'http://api.jirengu.com/weather.php',\n    data: {\n        city: '北京'\n    },\n    onsuccess: function(ret){\n        console.log(ret)\n    },\n    onerror: function(){\n        console.log('服务器异常')\n    }\n})\n```","slug":"什么是ajax","published":1,"updated":"2019-11-23T23:54:38.000Z","layout":"post","photos":[],"link":"","_id":"ck3it6k2l002lteyis64wphar","content":"<p>什么是Ajax</p>\n<a id=\"more\"></a>\n\n<h3 id=\"什么是ajax\"><a href=\"#什么是ajax\" class=\"headerlink\" title=\"什么是ajax\"></a>什么是ajax</h3><p>ajax是一种技术方案，但并不是一种新技术。</p>\n<p>它依赖的是现有的CSS/HTML/Javascript，而其中最核心的依赖是浏览器提供的XMLHttpRequest对象，是这个对象使得浏览器可以发出HTTP请求与接收HTTP响应。<br>实现在页面不刷新的情况下和服务端进行数据交互。</p>\n<p>ajax可以理解就是，以前向服务器请求资源，必须对这个页面资源进行请求以获得这个信息资源（以这个页面资源为载体来携带信息资源），这必然会对页面进行刷新（因为是请求服务器后会同步返回一个页面进行刷新）。<br>现在页面可以通过浏览器脚本编程语言调用一个隐藏请求装置（也就是XMLHttpRequest），由这个请求向服务器请求资源，然后返回一个资源载体（可能是一个页面，也可能是一个xml或json文段），然后由编程语言去处理这个信息。与此同时，页面是不会发生刷新行为的（也就是没有向服务器请求这个页面资源）。这就是异步原理了。“AJA”就是异步JavaScript的缩写，其基础就是浏览器脚本编程语言JavaScript和XMLHttpRequest对象，X就是作为信息载体的XML，不过现在多数用JSON代替。</p>\n<p>作用就是可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</p>\n<h3 id=\"ajax范例\"><a href=\"#ajax范例\" class=\"headerlink\" title=\"ajax范例\"></a>ajax范例</h3><p>GET</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest()</span><br><span class=\"line\">xhr.open(<span class=\"string\">'GET'</span>, <span class=\"string\">'http://api.jirengu.com/weather.php'</span>, <span class=\"literal\">true</span>)</span><br><span class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(xhr.readyState === <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((xhr.status &gt;= <span class=\"number\">200</span> &amp;&amp; xhr.status &lt; <span class=\"number\">300</span>) || xhr.status == <span class=\"number\">304</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//成功了</span></span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(xhr.responseText)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'服务器异常'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">xhr.onerror = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'服务器异常'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">xhr.send()</span><br></pre></td></tr></table></figure>\n\n<p>POST</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest()</span><br><span class=\"line\">  xhr.timeout = <span class=\"number\">3000</span>        <span class=\"comment\">//可选，设置xhr请求的超时时间</span></span><br><span class=\"line\">  xhr.open(<span class=\"string\">'POST'</span>, <span class=\"string\">'/register'</span>, <span class=\"literal\">true</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  xhr.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">if</span>((xhr.status &gt;= <span class=\"number\">200</span> &amp;&amp; xhr.status &lt; <span class=\"number\">300</span>) || xhr.status == <span class=\"number\">304</span>)&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.responseText)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">    <span class=\"comment\">//可选</span></span><br><span class=\"line\">  xhr.ontimeout = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123; </span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'请求超时'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//可选</span></span><br><span class=\"line\">  xhr.onerror = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'连接失败'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//可选</span></span><br><span class=\"line\">  xhr.upload.onprogress = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//如果是上传文件，可以获取上传进度</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  xhr.send(<span class=\"string\">'username=jirengu&amp;password=123456'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>封装一个ajax</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajax</span>(<span class=\"params\">opts</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> url = opts.url</span><br><span class=\"line\">    <span class=\"keyword\">var</span> type = opts.type || <span class=\"string\">'GET'</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> dataType = opts.dataType || <span class=\"string\">'json'</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> onsuccess = opts.onsuccess || <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> onerror = opts.onerror || <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> data = opts.data || &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> dataStr = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> data)&#123;</span><br><span class=\"line\">        dataStr.push(key + <span class=\"string\">'='</span> + data[key])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dataStr = dataStr.join(<span class=\"string\">'&amp;'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(type === <span class=\"string\">'GET'</span>)&#123;</span><br><span class=\"line\">        url += <span class=\"string\">'?'</span> + dataStr</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest()</span><br><span class=\"line\">    xhr.open(type, url, <span class=\"literal\">true</span>)</span><br><span class=\"line\">    xhr.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((xhr.status &gt;= <span class=\"number\">200</span> &amp;&amp; xhr.status &lt; <span class=\"number\">300</span>) || xhr.status == <span class=\"number\">304</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//成功了</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dataType === <span class=\"string\">'json'</span>)&#123;</span><br><span class=\"line\">                onsuccess( <span class=\"built_in\">JSON</span>.parse(xhr.responseText))</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                onsuccess( xhr.responseText)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            onerror()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    xhr.onerror = onerror</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(type === <span class=\"string\">'POST'</span>)&#123;</span><br><span class=\"line\">        xhr.send(dataStr)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        xhr.send()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ajax(&#123;</span><br><span class=\"line\">    url: <span class=\"string\">'http://api.jirengu.com/weather.php'</span>,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        city: <span class=\"string\">'北京'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    onsuccess: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ret</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(ret)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    onerror: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'服务器异常'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"thumbnailImageUrl":"https://kisky3.github.io/2019/06/05/什么是ajax/20190605.png","excerpt":"<p>什么是Ajax</p>","more":"<h3 id=\"什么是ajax\"><a href=\"#什么是ajax\" class=\"headerlink\" title=\"什么是ajax\"></a>什么是ajax</h3><p>ajax是一种技术方案，但并不是一种新技术。</p>\n<p>它依赖的是现有的CSS/HTML/Javascript，而其中最核心的依赖是浏览器提供的XMLHttpRequest对象，是这个对象使得浏览器可以发出HTTP请求与接收HTTP响应。<br>实现在页面不刷新的情况下和服务端进行数据交互。</p>\n<p>ajax可以理解就是，以前向服务器请求资源，必须对这个页面资源进行请求以获得这个信息资源（以这个页面资源为载体来携带信息资源），这必然会对页面进行刷新（因为是请求服务器后会同步返回一个页面进行刷新）。<br>现在页面可以通过浏览器脚本编程语言调用一个隐藏请求装置（也就是XMLHttpRequest），由这个请求向服务器请求资源，然后返回一个资源载体（可能是一个页面，也可能是一个xml或json文段），然后由编程语言去处理这个信息。与此同时，页面是不会发生刷新行为的（也就是没有向服务器请求这个页面资源）。这就是异步原理了。“AJA”就是异步JavaScript的缩写，其基础就是浏览器脚本编程语言JavaScript和XMLHttpRequest对象，X就是作为信息载体的XML，不过现在多数用JSON代替。</p>\n<p>作用就是可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</p>\n<h3 id=\"ajax范例\"><a href=\"#ajax范例\" class=\"headerlink\" title=\"ajax范例\"></a>ajax范例</h3><p>GET</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest()</span><br><span class=\"line\">xhr.open(<span class=\"string\">'GET'</span>, <span class=\"string\">'http://api.jirengu.com/weather.php'</span>, <span class=\"literal\">true</span>)</span><br><span class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(xhr.readyState === <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((xhr.status &gt;= <span class=\"number\">200</span> &amp;&amp; xhr.status &lt; <span class=\"number\">300</span>) || xhr.status == <span class=\"number\">304</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//成功了</span></span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(xhr.responseText)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'服务器异常'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">xhr.onerror = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'服务器异常'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">xhr.send()</span><br></pre></td></tr></table></figure>\n\n<p>POST</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest()</span><br><span class=\"line\">  xhr.timeout = <span class=\"number\">3000</span>        <span class=\"comment\">//可选，设置xhr请求的超时时间</span></span><br><span class=\"line\">  xhr.open(<span class=\"string\">'POST'</span>, <span class=\"string\">'/register'</span>, <span class=\"literal\">true</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  xhr.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">if</span>((xhr.status &gt;= <span class=\"number\">200</span> &amp;&amp; xhr.status &lt; <span class=\"number\">300</span>) || xhr.status == <span class=\"number\">304</span>)&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.responseText)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">    <span class=\"comment\">//可选</span></span><br><span class=\"line\">  xhr.ontimeout = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123; </span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'请求超时'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//可选</span></span><br><span class=\"line\">  xhr.onerror = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'连接失败'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//可选</span></span><br><span class=\"line\">  xhr.upload.onprogress = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//如果是上传文件，可以获取上传进度</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  xhr.send(<span class=\"string\">'username=jirengu&amp;password=123456'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>封装一个ajax</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajax</span>(<span class=\"params\">opts</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> url = opts.url</span><br><span class=\"line\">    <span class=\"keyword\">var</span> type = opts.type || <span class=\"string\">'GET'</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> dataType = opts.dataType || <span class=\"string\">'json'</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> onsuccess = opts.onsuccess || <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> onerror = opts.onerror || <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> data = opts.data || &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> dataStr = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> data)&#123;</span><br><span class=\"line\">        dataStr.push(key + <span class=\"string\">'='</span> + data[key])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dataStr = dataStr.join(<span class=\"string\">'&amp;'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(type === <span class=\"string\">'GET'</span>)&#123;</span><br><span class=\"line\">        url += <span class=\"string\">'?'</span> + dataStr</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest()</span><br><span class=\"line\">    xhr.open(type, url, <span class=\"literal\">true</span>)</span><br><span class=\"line\">    xhr.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((xhr.status &gt;= <span class=\"number\">200</span> &amp;&amp; xhr.status &lt; <span class=\"number\">300</span>) || xhr.status == <span class=\"number\">304</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//成功了</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dataType === <span class=\"string\">'json'</span>)&#123;</span><br><span class=\"line\">                onsuccess( <span class=\"built_in\">JSON</span>.parse(xhr.responseText))</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                onsuccess( xhr.responseText)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            onerror()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    xhr.onerror = onerror</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(type === <span class=\"string\">'POST'</span>)&#123;</span><br><span class=\"line\">        xhr.send(dataStr)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        xhr.send()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ajax(&#123;</span><br><span class=\"line\">    url: <span class=\"string\">'http://api.jirengu.com/weather.php'</span>,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        city: <span class=\"string\">'北京'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    onsuccess: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ret</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(ret)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    onerror: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'服务器异常'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>"},{"title":"What Happens When You Type in a URL","date":"2018-11-10T07:54:13.000Z","clearReading":true,"thumbnailImage":"20181110.png","thumbnailImagePosition":"left","coverImage":"cover.jpg","coverCaption":"Hello World, Hello Programming","coverSize":"partial","comments":0,"_content":"\n从URL到页面展现\n<!--more-->\n专有名词解释：URL：统一资源定位符 http : 网络协议 用于找到互联网上的资源\n### 1.在浏览器输入URL\n\n通过输入「http://www.baidu.com」 的URL来最终定位找到百度首页。\n***\n\n### 2.域名解析\n对于　「http://baidu.com」　的URL来说，浏览器实际上不知道baidu.com到底是什么，需要对应查找到该域名对应的服务器IP地址才能找到目标。\n域名解析的流程\n\n1.浏览器缓存\n如果你之前打开过百度首页，那么百度的ip地址会被缓存到浏览器里，当你打开时百度首页时就能从浏览器缓存里获取之前缓存的百度ip地址并访问它。\n\n2.系统缓存\n如果你是第一次打开百度，那么无法从浏览器获取缓存，便会从你电脑的Hosts文件查找是否有该域名和其对应ip。\n下图为Mac电脑的hosts文件内容。开发时可以修改hosts文件内的ip，达到打开本地文件的效果。\n\n<img src=\"./1.png\" style=\"width:500px\">\n\n3.路由器缓存\n如果浏览器缓存和系统缓存都没有，就会看你的路由器缓存。路由器曾经登陆过也会缓存域名信息，如果你或别人在该路由器上登陆过网站，则可以获取到baidu的ip地址。\n\n4.ISPDNS缓存\n如果路由器也没有缓存就会找你的服务商，比如到电信的DNS上查找。\n\n5.如果都没有找到就会到你的根域名服务器查找域名对应ip，根域名服务器把请求转发到下一级，直到找到ip。(找不到就返回404 找不到服务器)\n\n***\n### 3.服务器处理\n服务器是一台安装电脑的机器，常见的系统如Linux，Windows Server 系统里安装的处理请求的应用叫做Web Server。\n常见的Web服务器有Apache，Nginx，IIS，Lighttpd等。Web服务器接收用户的Request交给网站代码，或者接受请求反向代理到其他Web服务器。也就是一个管理者的作用。\n下图的白色区域为Web服务器。\n\n<img src=\"./2.png\" style=\"width:500px\">\n\n***\n### 4.网站处理流程\n经服务器处理后，网站接受请求后进行处理，最后将页面呈现给用户。\n比如下图的MVC模型\n\n<img src=\"./3.png\" style=\"width:500px\">\n\n***\n### 5.浏览器读取并再次请求\nHTML字符串被浏览器接受后被一句句读取解析，解析到link标签后重新发送请求获取CSS。解析到script标签后发送请求获取js，并执行代码。解析到img标签后发送请求获取图片。\n\n***\n### 6.浏览器渲染\n浏览器根据获取到的HTML和CSS计算并渲染，绘制到屏幕上的js会被执行。\n到此你就能看到你所打开的网页了。\n\n","source":"_posts/从URL到页面展现.md","raw":"---\ntitle: What Happens When You Type in a URL\ndate: 2018-11-10 16:54:13\ntags:\n- URL\nclearReading: true\nthumbnailImage: 20181110.png\nthumbnailImagePosition: left\ncoverImage: cover.jpg\ncoverCaption: \"Hello World, Hello Programming\"\ncoverSize: partial\ncomments: false\ncategories: Front-end Knowledge\n---\n\n从URL到页面展现\n<!--more-->\n专有名词解释：URL：统一资源定位符 http : 网络协议 用于找到互联网上的资源\n### 1.在浏览器输入URL\n\n通过输入「http://www.baidu.com」 的URL来最终定位找到百度首页。\n***\n\n### 2.域名解析\n对于　「http://baidu.com」　的URL来说，浏览器实际上不知道baidu.com到底是什么，需要对应查找到该域名对应的服务器IP地址才能找到目标。\n域名解析的流程\n\n1.浏览器缓存\n如果你之前打开过百度首页，那么百度的ip地址会被缓存到浏览器里，当你打开时百度首页时就能从浏览器缓存里获取之前缓存的百度ip地址并访问它。\n\n2.系统缓存\n如果你是第一次打开百度，那么无法从浏览器获取缓存，便会从你电脑的Hosts文件查找是否有该域名和其对应ip。\n下图为Mac电脑的hosts文件内容。开发时可以修改hosts文件内的ip，达到打开本地文件的效果。\n\n<img src=\"./1.png\" style=\"width:500px\">\n\n3.路由器缓存\n如果浏览器缓存和系统缓存都没有，就会看你的路由器缓存。路由器曾经登陆过也会缓存域名信息，如果你或别人在该路由器上登陆过网站，则可以获取到baidu的ip地址。\n\n4.ISPDNS缓存\n如果路由器也没有缓存就会找你的服务商，比如到电信的DNS上查找。\n\n5.如果都没有找到就会到你的根域名服务器查找域名对应ip，根域名服务器把请求转发到下一级，直到找到ip。(找不到就返回404 找不到服务器)\n\n***\n### 3.服务器处理\n服务器是一台安装电脑的机器，常见的系统如Linux，Windows Server 系统里安装的处理请求的应用叫做Web Server。\n常见的Web服务器有Apache，Nginx，IIS，Lighttpd等。Web服务器接收用户的Request交给网站代码，或者接受请求反向代理到其他Web服务器。也就是一个管理者的作用。\n下图的白色区域为Web服务器。\n\n<img src=\"./2.png\" style=\"width:500px\">\n\n***\n### 4.网站处理流程\n经服务器处理后，网站接受请求后进行处理，最后将页面呈现给用户。\n比如下图的MVC模型\n\n<img src=\"./3.png\" style=\"width:500px\">\n\n***\n### 5.浏览器读取并再次请求\nHTML字符串被浏览器接受后被一句句读取解析，解析到link标签后重新发送请求获取CSS。解析到script标签后发送请求获取js，并执行代码。解析到img标签后发送请求获取图片。\n\n***\n### 6.浏览器渲染\n浏览器根据获取到的HTML和CSS计算并渲染，绘制到屏幕上的js会被执行。\n到此你就能看到你所打开的网页了。\n\n","slug":"从URL到页面展现","published":1,"updated":"2019-11-23T23:54:38.000Z","layout":"post","photos":[],"link":"","_id":"ck3it6k2l002oteyii4kwuemb","content":"<p>从URL到页面展现</p>\n<a id=\"more\"></a>\n<p>专有名词解释：URL：统一资源定位符 http : 网络协议 用于找到互联网上的资源</p>\n<h3 id=\"1-在浏览器输入URL\"><a href=\"#1-在浏览器输入URL\" class=\"headerlink\" title=\"1.在浏览器输入URL\"></a>1.在浏览器输入URL</h3><p>通过输入「<a href=\"http://www.baidu.com」\" target=\"_blank\" rel=\"noopener\">http://www.baidu.com」</a> 的URL来最终定位找到百度首页。</p>\n<hr>\n<h3 id=\"2-域名解析\"><a href=\"#2-域名解析\" class=\"headerlink\" title=\"2.域名解析\"></a>2.域名解析</h3><p>对于　「<a href=\"http://baidu.com」\" target=\"_blank\" rel=\"noopener\">http://baidu.com」</a>　的URL来说，浏览器实际上不知道baidu.com到底是什么，需要对应查找到该域名对应的服务器IP地址才能找到目标。<br>域名解析的流程</p>\n<p>1.浏览器缓存<br>如果你之前打开过百度首页，那么百度的ip地址会被缓存到浏览器里，当你打开时百度首页时就能从浏览器缓存里获取之前缓存的百度ip地址并访问它。</p>\n<p>2.系统缓存<br>如果你是第一次打开百度，那么无法从浏览器获取缓存，便会从你电脑的Hosts文件查找是否有该域名和其对应ip。<br>下图为Mac电脑的hosts文件内容。开发时可以修改hosts文件内的ip，达到打开本地文件的效果。</p>\n<img src=\"./1.png\" style=\"width:500px\">\n\n<p>3.路由器缓存<br>如果浏览器缓存和系统缓存都没有，就会看你的路由器缓存。路由器曾经登陆过也会缓存域名信息，如果你或别人在该路由器上登陆过网站，则可以获取到baidu的ip地址。</p>\n<p>4.ISPDNS缓存<br>如果路由器也没有缓存就会找你的服务商，比如到电信的DNS上查找。</p>\n<p>5.如果都没有找到就会到你的根域名服务器查找域名对应ip，根域名服务器把请求转发到下一级，直到找到ip。(找不到就返回404 找不到服务器)</p>\n<hr>\n<h3 id=\"3-服务器处理\"><a href=\"#3-服务器处理\" class=\"headerlink\" title=\"3.服务器处理\"></a>3.服务器处理</h3><p>服务器是一台安装电脑的机器，常见的系统如Linux，Windows Server 系统里安装的处理请求的应用叫做Web Server。<br>常见的Web服务器有Apache，Nginx，IIS，Lighttpd等。Web服务器接收用户的Request交给网站代码，或者接受请求反向代理到其他Web服务器。也就是一个管理者的作用。<br>下图的白色区域为Web服务器。</p>\n<img src=\"./2.png\" style=\"width:500px\">\n\n<hr>\n<h3 id=\"4-网站处理流程\"><a href=\"#4-网站处理流程\" class=\"headerlink\" title=\"4.网站处理流程\"></a>4.网站处理流程</h3><p>经服务器处理后，网站接受请求后进行处理，最后将页面呈现给用户。<br>比如下图的MVC模型</p>\n<img src=\"./3.png\" style=\"width:500px\">\n\n<hr>\n<h3 id=\"5-浏览器读取并再次请求\"><a href=\"#5-浏览器读取并再次请求\" class=\"headerlink\" title=\"5.浏览器读取并再次请求\"></a>5.浏览器读取并再次请求</h3><p>HTML字符串被浏览器接受后被一句句读取解析，解析到link标签后重新发送请求获取CSS。解析到script标签后发送请求获取js，并执行代码。解析到img标签后发送请求获取图片。</p>\n<hr>\n<h3 id=\"6-浏览器渲染\"><a href=\"#6-浏览器渲染\" class=\"headerlink\" title=\"6.浏览器渲染\"></a>6.浏览器渲染</h3><p>浏览器根据获取到的HTML和CSS计算并渲染，绘制到屏幕上的js会被执行。<br>到此你就能看到你所打开的网页了。</p>\n","site":{"data":{}},"thumbnailImageUrl":"https://kisky3.github.io/2018/11/10/从URL到页面展现/20181110.png","excerpt":"<p>从URL到页面展现</p>","more":"<p>专有名词解释：URL：统一资源定位符 http : 网络协议 用于找到互联网上的资源</p>\n<h3 id=\"1-在浏览器输入URL\"><a href=\"#1-在浏览器输入URL\" class=\"headerlink\" title=\"1.在浏览器输入URL\"></a>1.在浏览器输入URL</h3><p>通过输入「<a href=\"http://www.baidu.com」\" target=\"_blank\" rel=\"noopener\">http://www.baidu.com」</a> 的URL来最终定位找到百度首页。</p>\n<hr>\n<h3 id=\"2-域名解析\"><a href=\"#2-域名解析\" class=\"headerlink\" title=\"2.域名解析\"></a>2.域名解析</h3><p>对于　「<a href=\"http://baidu.com」\" target=\"_blank\" rel=\"noopener\">http://baidu.com」</a>　的URL来说，浏览器实际上不知道baidu.com到底是什么，需要对应查找到该域名对应的服务器IP地址才能找到目标。<br>域名解析的流程</p>\n<p>1.浏览器缓存<br>如果你之前打开过百度首页，那么百度的ip地址会被缓存到浏览器里，当你打开时百度首页时就能从浏览器缓存里获取之前缓存的百度ip地址并访问它。</p>\n<p>2.系统缓存<br>如果你是第一次打开百度，那么无法从浏览器获取缓存，便会从你电脑的Hosts文件查找是否有该域名和其对应ip。<br>下图为Mac电脑的hosts文件内容。开发时可以修改hosts文件内的ip，达到打开本地文件的效果。</p>\n<img src=\"./1.png\" style=\"width:500px\">\n\n<p>3.路由器缓存<br>如果浏览器缓存和系统缓存都没有，就会看你的路由器缓存。路由器曾经登陆过也会缓存域名信息，如果你或别人在该路由器上登陆过网站，则可以获取到baidu的ip地址。</p>\n<p>4.ISPDNS缓存<br>如果路由器也没有缓存就会找你的服务商，比如到电信的DNS上查找。</p>\n<p>5.如果都没有找到就会到你的根域名服务器查找域名对应ip，根域名服务器把请求转发到下一级，直到找到ip。(找不到就返回404 找不到服务器)</p>\n<hr>\n<h3 id=\"3-服务器处理\"><a href=\"#3-服务器处理\" class=\"headerlink\" title=\"3.服务器处理\"></a>3.服务器处理</h3><p>服务器是一台安装电脑的机器，常见的系统如Linux，Windows Server 系统里安装的处理请求的应用叫做Web Server。<br>常见的Web服务器有Apache，Nginx，IIS，Lighttpd等。Web服务器接收用户的Request交给网站代码，或者接受请求反向代理到其他Web服务器。也就是一个管理者的作用。<br>下图的白色区域为Web服务器。</p>\n<img src=\"./2.png\" style=\"width:500px\">\n\n<hr>\n<h3 id=\"4-网站处理流程\"><a href=\"#4-网站处理流程\" class=\"headerlink\" title=\"4.网站处理流程\"></a>4.网站处理流程</h3><p>经服务器处理后，网站接受请求后进行处理，最后将页面呈现给用户。<br>比如下图的MVC模型</p>\n<img src=\"./3.png\" style=\"width:500px\">\n\n<hr>\n<h3 id=\"5-浏览器读取并再次请求\"><a href=\"#5-浏览器读取并再次请求\" class=\"headerlink\" title=\"5.浏览器读取并再次请求\"></a>5.浏览器读取并再次请求</h3><p>HTML字符串被浏览器接受后被一句句读取解析，解析到link标签后重新发送请求获取CSS。解析到script标签后发送请求获取js，并执行代码。解析到img标签后发送请求获取图片。</p>\n<hr>\n<h3 id=\"6-浏览器渲染\"><a href=\"#6-浏览器渲染\" class=\"headerlink\" title=\"6.浏览器渲染\"></a>6.浏览器渲染</h3><p>浏览器根据获取到的HTML和CSS计算并渲染，绘制到屏幕上的js会被执行。<br>到此你就能看到你所打开的网页了。</p>"},{"title":"Create Development Environment(Docker & Cakephp3)","date":"2019-04-03T10:45:29.000Z","clearReading":true,"thumbnailImage":"20190403.png","thumbnailImagePosition":"left","coverImage":"cover.jpg","coverCaption":"Hello World, Hello Programming","coverSize":"partial","comments":0,"_content":"\n使用Docker进行Cakephp3开发环境搭建\n<!--more-->\n\n### 使用Docker构建\n本次使用Github公开的Dockerfile，利用docker-compose建立container.\n\n使用的image是php:7-fpm-alpine\n\n[参照连接](https://github.com/matayoshi/docker_cakephp3_tutorial)\n\n1.首先将上面的克隆到本地home\n\n<img src=\"./1.png\" style=\"width:500px\">\n\n2.然后使用docker-compose命令进行构建\n\n<img src=\"./2.png\" style=\"width:500px\">\nbuild的时候如果nginx存在的话会被跳过，需要确认的是这三个mysql、phpfpm、nginx有没有build成功。\n\n3.然后创建Container\n\n<img src=\"./3.png\" style=\"width:500px\">\n\n4.确认是否创建成功\n\n<img src=\"./4.png\" style=\"width:500px\">\n\n5.启动Container，同时启动nginx服务器\n\n<img src=\"./5.png\" style=\"width:500px\">\n\n注意：如果之前有创建过Container，并存在nginx container的时候，端口号重复所以会出现错误。此时应该停止Container然后再重复以上步骤。\n\n6.然后Cakephp的composer装入phpfpm Container并安装。同时完成项目的创建。\n\n<img src=\"./6.png\" style=\"width:500px\">\n\n7.安装和项目构建完成后，退出Container\n\n8.启动服务器，就能看到确认画面了！\n\n<img src=\"./7.png\" style=\"width:500px\">\n\n如果服务器版本不对则可能出现错误。此时需要brew在本地进行安装。\n\n<img src=\"./9.png\" style=\"width:500px\">\n\n因为版本不同安装的东西也不同所以要进入Container里对php的版本进行确认。\n\n<img src=\"./10.png\" style=\"width:500px\">\n\n版本为7.18，所以要安装php71-intl。\n\n<img src=\"./11.png\" style=\"width:500px\">\n\n再启动服务器就能看到启动画面了。\n\n通过此链接确认画面 http://localhost:8765/\n\n<img src=\"./8.png\" style=\"width:500px\">\n\n***\n\n### 数据库连接\n\n有时数据库无法连接上，则采用下面的方法进行确认：\n\n#### 本地数据库连接方法：\n\n1.确认启动中的Container\n\n ```\n $ docker ps\n ```\n\n 2.找到启动中的mysql Container\n确认到host为127.0.0.1,port为3306\n\n```\n259d8b05f8ec  mysql:5.6  ... 127.0.0.1:3306->3306/tcp\n```\n\n3.修改参数\n\ncakephp的app.php的database改成「localhost」-> 「127.0.0.1」\ndocker-compose.yml里的database的port改成相应的3306\n\n```JS\nservices:\n  mysql:\n    restart: always\n    build: ./data/mysql/\n    volumes:\n      - \"./data/mysql/db:/var/lib/mysql\"\n    environment:\n      MYSQL_ROOT_PASSWORD: password\n      MYSQL_USER: my_app\n      MYSQL_PASSWORD: secret\n      MYSQL_DATABASE: my_app\n      TZ: \"Asia/Tokyo\"\n    ports:\n      - \"3306:3306\" \n  nginx:\n    restart: always\n\n    ~~~~~~~~~~~~~~~\n```\n\n4.重新启动\n\n```\n$ docker-compose down\n$ docker-compose up -d\n```\n\n***\n\n#### 已存在数据库连接方法：\n\n1.修改以下文件\n\napp.php\n\n```\n'host' => 'xxxxx'(你的数据库host),\n```\n\ndocker-compose.yml\n\n```\nenvironment:\n      MYSQL_ROOT_PASSWORD: xxxx(你的数据库的密码)\n      MYSQL_USER: xxxx（你的登陆用户名）\n      MYSQL_PASSWORD: xxxx(你的数据库的密码)\n      MYSQL_DATABASE: xxxx（你的数据库名字）\n      TZ: \"Asia/Tokyo\"\n    ports:\n      - \"3306:3306\"\n```\n\n2.进入mysql Container，确认是否已经连接上\n\n```\ndocker exec -it mysqlコンテナ名 sh\n```\n\n3.重新启动\n\n```\n$ docker-compose down\n$ docker-compose up -d\n```\n\n***\n\n#### 途中可能会出现下面的问题\n##### 问题1:\n```\n➜  ~ brew install homebrew/php/php71-intl\nUpdating Homebrew...\nError: homebrew/php was deprecated. This tap is now empty as all its formulae were migrated.\n```\n\n解决方法:\n```\n# Save all old configurations, so the new packaes can recreate their versions -- eases the migration\nmv /usr/local/etc/php $HOME/old-brew-php\n# Uninstall ALL php related Packages (most of them homebrew/php related)\nbrew list | grep php | xargs brew uninstall --force\n# Remove deprecated tap\nbrew untap homebrew/php\n# Clean cache\nbrew cleanup\n# Ensure latest brew repo HEAD\nbrew update\n# Install latest php (php 7.2)\nbrew install php\npecl install xdebug\n# Now copy & paste specific conf.d from your old-brew-php version if needed\n# after that you may dispose of the old-brew-php folder\n```\n\n使用下面进行确认\n```\nbrew list | grep php:\n\nphp php71\n\nbrew tap:\n\nhomebrew/bundle homebrew/core homebrew/dupes homebrew/php homebrew/services homebrew/versions\n```\n\n然后再安装\n```\nbrew install php@7.1\n```\n\n最后composer install再启动服务器就好了\n\n\n##### 问题2:\n```\nE: Failed to fetch http://deb.debian.org/debian/dists/stretch/main/binary-amd64/Packages  Error writing to output file - write (28: No space left on device) Error writing to file - write (28: No space left on device)\n```\n\n解决方法：\n空间不足无法启动的情况，可以将所有的Container和Image都删除，再启动\n\n删除所有的Container\n\n```\ndocker rm -f $(docker ps -aq)\n```\n删除所有的Images\n\n```\ndocker rmi -f $(docker images -q)\n```\n\n删除所有的docker volume\n\n```\ndocker volume rm -f $(docker volume ls -q)\n```\n\n重新启动\n```\n$ docker-compose down\n$ docker-compose up -d\n```\n\n","source":"_posts/使用Docker进行Cakephp3开发环境搭建.md","raw":"---\ntitle: Create Development Environment(Docker & Cakephp3)\ndate: 2019-04-03 19:45:29\ntags:\n- Docker\nclearReading: true\nthumbnailImage: 20190403.png\nthumbnailImagePosition: left\ncoverImage: cover.jpg\ncoverCaption: \"Hello World, Hello Programming\"\ncoverSize: partial\ncomments: false\ncategories: Back-end Knowledge\n---\n\n使用Docker进行Cakephp3开发环境搭建\n<!--more-->\n\n### 使用Docker构建\n本次使用Github公开的Dockerfile，利用docker-compose建立container.\n\n使用的image是php:7-fpm-alpine\n\n[参照连接](https://github.com/matayoshi/docker_cakephp3_tutorial)\n\n1.首先将上面的克隆到本地home\n\n<img src=\"./1.png\" style=\"width:500px\">\n\n2.然后使用docker-compose命令进行构建\n\n<img src=\"./2.png\" style=\"width:500px\">\nbuild的时候如果nginx存在的话会被跳过，需要确认的是这三个mysql、phpfpm、nginx有没有build成功。\n\n3.然后创建Container\n\n<img src=\"./3.png\" style=\"width:500px\">\n\n4.确认是否创建成功\n\n<img src=\"./4.png\" style=\"width:500px\">\n\n5.启动Container，同时启动nginx服务器\n\n<img src=\"./5.png\" style=\"width:500px\">\n\n注意：如果之前有创建过Container，并存在nginx container的时候，端口号重复所以会出现错误。此时应该停止Container然后再重复以上步骤。\n\n6.然后Cakephp的composer装入phpfpm Container并安装。同时完成项目的创建。\n\n<img src=\"./6.png\" style=\"width:500px\">\n\n7.安装和项目构建完成后，退出Container\n\n8.启动服务器，就能看到确认画面了！\n\n<img src=\"./7.png\" style=\"width:500px\">\n\n如果服务器版本不对则可能出现错误。此时需要brew在本地进行安装。\n\n<img src=\"./9.png\" style=\"width:500px\">\n\n因为版本不同安装的东西也不同所以要进入Container里对php的版本进行确认。\n\n<img src=\"./10.png\" style=\"width:500px\">\n\n版本为7.18，所以要安装php71-intl。\n\n<img src=\"./11.png\" style=\"width:500px\">\n\n再启动服务器就能看到启动画面了。\n\n通过此链接确认画面 http://localhost:8765/\n\n<img src=\"./8.png\" style=\"width:500px\">\n\n***\n\n### 数据库连接\n\n有时数据库无法连接上，则采用下面的方法进行确认：\n\n#### 本地数据库连接方法：\n\n1.确认启动中的Container\n\n ```\n $ docker ps\n ```\n\n 2.找到启动中的mysql Container\n确认到host为127.0.0.1,port为3306\n\n```\n259d8b05f8ec  mysql:5.6  ... 127.0.0.1:3306->3306/tcp\n```\n\n3.修改参数\n\ncakephp的app.php的database改成「localhost」-> 「127.0.0.1」\ndocker-compose.yml里的database的port改成相应的3306\n\n```JS\nservices:\n  mysql:\n    restart: always\n    build: ./data/mysql/\n    volumes:\n      - \"./data/mysql/db:/var/lib/mysql\"\n    environment:\n      MYSQL_ROOT_PASSWORD: password\n      MYSQL_USER: my_app\n      MYSQL_PASSWORD: secret\n      MYSQL_DATABASE: my_app\n      TZ: \"Asia/Tokyo\"\n    ports:\n      - \"3306:3306\" \n  nginx:\n    restart: always\n\n    ~~~~~~~~~~~~~~~\n```\n\n4.重新启动\n\n```\n$ docker-compose down\n$ docker-compose up -d\n```\n\n***\n\n#### 已存在数据库连接方法：\n\n1.修改以下文件\n\napp.php\n\n```\n'host' => 'xxxxx'(你的数据库host),\n```\n\ndocker-compose.yml\n\n```\nenvironment:\n      MYSQL_ROOT_PASSWORD: xxxx(你的数据库的密码)\n      MYSQL_USER: xxxx（你的登陆用户名）\n      MYSQL_PASSWORD: xxxx(你的数据库的密码)\n      MYSQL_DATABASE: xxxx（你的数据库名字）\n      TZ: \"Asia/Tokyo\"\n    ports:\n      - \"3306:3306\"\n```\n\n2.进入mysql Container，确认是否已经连接上\n\n```\ndocker exec -it mysqlコンテナ名 sh\n```\n\n3.重新启动\n\n```\n$ docker-compose down\n$ docker-compose up -d\n```\n\n***\n\n#### 途中可能会出现下面的问题\n##### 问题1:\n```\n➜  ~ brew install homebrew/php/php71-intl\nUpdating Homebrew...\nError: homebrew/php was deprecated. This tap is now empty as all its formulae were migrated.\n```\n\n解决方法:\n```\n# Save all old configurations, so the new packaes can recreate their versions -- eases the migration\nmv /usr/local/etc/php $HOME/old-brew-php\n# Uninstall ALL php related Packages (most of them homebrew/php related)\nbrew list | grep php | xargs brew uninstall --force\n# Remove deprecated tap\nbrew untap homebrew/php\n# Clean cache\nbrew cleanup\n# Ensure latest brew repo HEAD\nbrew update\n# Install latest php (php 7.2)\nbrew install php\npecl install xdebug\n# Now copy & paste specific conf.d from your old-brew-php version if needed\n# after that you may dispose of the old-brew-php folder\n```\n\n使用下面进行确认\n```\nbrew list | grep php:\n\nphp php71\n\nbrew tap:\n\nhomebrew/bundle homebrew/core homebrew/dupes homebrew/php homebrew/services homebrew/versions\n```\n\n然后再安装\n```\nbrew install php@7.1\n```\n\n最后composer install再启动服务器就好了\n\n\n##### 问题2:\n```\nE: Failed to fetch http://deb.debian.org/debian/dists/stretch/main/binary-amd64/Packages  Error writing to output file - write (28: No space left on device) Error writing to file - write (28: No space left on device)\n```\n\n解决方法：\n空间不足无法启动的情况，可以将所有的Container和Image都删除，再启动\n\n删除所有的Container\n\n```\ndocker rm -f $(docker ps -aq)\n```\n删除所有的Images\n\n```\ndocker rmi -f $(docker images -q)\n```\n\n删除所有的docker volume\n\n```\ndocker volume rm -f $(docker volume ls -q)\n```\n\n重新启动\n```\n$ docker-compose down\n$ docker-compose up -d\n```\n\n","slug":"使用Docker进行Cakephp3开发环境搭建","published":1,"updated":"2019-11-23T23:54:38.000Z","layout":"post","photos":[],"link":"","_id":"ck3it6k2m002steyilltbrfow","content":"<p>使用Docker进行Cakephp3开发环境搭建</p>\n<a id=\"more\"></a>\n\n<h3 id=\"使用Docker构建\"><a href=\"#使用Docker构建\" class=\"headerlink\" title=\"使用Docker构建\"></a>使用Docker构建</h3><p>本次使用Github公开的Dockerfile，利用docker-compose建立container.</p>\n<p>使用的image是php:7-fpm-alpine</p>\n<p><a href=\"https://github.com/matayoshi/docker_cakephp3_tutorial\" target=\"_blank\" rel=\"noopener\">参照连接</a></p>\n<p>1.首先将上面的克隆到本地home</p>\n<img src=\"./1.png\" style=\"width:500px\">\n\n<p>2.然后使用docker-compose命令进行构建</p>\n<img src=\"./2.png\" style=\"width:500px\">\nbuild的时候如果nginx存在的话会被跳过，需要确认的是这三个mysql、phpfpm、nginx有没有build成功。\n\n<p>3.然后创建Container</p>\n<img src=\"./3.png\" style=\"width:500px\">\n\n<p>4.确认是否创建成功</p>\n<img src=\"./4.png\" style=\"width:500px\">\n\n<p>5.启动Container，同时启动nginx服务器</p>\n<img src=\"./5.png\" style=\"width:500px\">\n\n<p>注意：如果之前有创建过Container，并存在nginx container的时候，端口号重复所以会出现错误。此时应该停止Container然后再重复以上步骤。</p>\n<p>6.然后Cakephp的composer装入phpfpm Container并安装。同时完成项目的创建。</p>\n<img src=\"./6.png\" style=\"width:500px\">\n\n<p>7.安装和项目构建完成后，退出Container</p>\n<p>8.启动服务器，就能看到确认画面了！</p>\n<img src=\"./7.png\" style=\"width:500px\">\n\n<p>如果服务器版本不对则可能出现错误。此时需要brew在本地进行安装。</p>\n<img src=\"./9.png\" style=\"width:500px\">\n\n<p>因为版本不同安装的东西也不同所以要进入Container里对php的版本进行确认。</p>\n<img src=\"./10.png\" style=\"width:500px\">\n\n<p>版本为7.18，所以要安装php71-intl。</p>\n<img src=\"./11.png\" style=\"width:500px\">\n\n<p>再启动服务器就能看到启动画面了。</p>\n<p>通过此链接确认画面 <a href=\"http://localhost:8765/\" target=\"_blank\" rel=\"noopener\">http://localhost:8765/</a></p>\n<img src=\"./8.png\" style=\"width:500px\">\n\n<hr>\n<h3 id=\"数据库连接\"><a href=\"#数据库连接\" class=\"headerlink\" title=\"数据库连接\"></a>数据库连接</h3><p>有时数据库无法连接上，则采用下面的方法进行确认：</p>\n<h4 id=\"本地数据库连接方法：\"><a href=\"#本地数据库连接方法：\" class=\"headerlink\" title=\"本地数据库连接方法：\"></a>本地数据库连接方法：</h4><p>1.确认启动中的Container</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker ps</span><br></pre></td></tr></table></figure>\n\n<p> 2.找到启动中的mysql Container<br>确认到host为127.0.0.1,port为3306</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">259d8b05f8ec  mysql:5.6  ... 127.0.0.1:3306-&gt;3306/tcp</span><br></pre></td></tr></table></figure>\n\n<p>3.修改参数</p>\n<p>cakephp的app.php的database改成「localhost」-&gt; 「127.0.0.1」<br>docker-compose.yml里的database的port改成相应的3306</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">services:</span><br><span class=\"line\">  mysql:</span><br><span class=\"line\">    restart: always</span><br><span class=\"line\">    build: ./data/mysql/</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - <span class=\"string\">\"./data/mysql/db:/var/lib/mysql\"</span></span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      MYSQL_ROOT_PASSWORD: password</span><br><span class=\"line\">      MYSQL_USER: my_app</span><br><span class=\"line\">      MYSQL_PASSWORD: secret</span><br><span class=\"line\">      MYSQL_DATABASE: my_app</span><br><span class=\"line\">      TZ: <span class=\"string\">\"Asia/Tokyo\"</span></span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - <span class=\"string\">\"3306:3306\"</span> </span><br><span class=\"line\">  nginx:</span><br><span class=\"line\">    restart: always</span><br><span class=\"line\"></span><br><span class=\"line\">    ~~~~~~~~~~~~~~~</span><br></pre></td></tr></table></figure>\n\n<p>4.重新启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-compose down</span><br><span class=\"line\">$ docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"已存在数据库连接方法：\"><a href=\"#已存在数据库连接方法：\" class=\"headerlink\" title=\"已存在数据库连接方法：\"></a>已存在数据库连接方法：</h4><p>1.修改以下文件</p>\n<p>app.php</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;host&apos; =&gt; &apos;xxxxx&apos;(你的数据库host),</span><br></pre></td></tr></table></figure>\n\n<p>docker-compose.yml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">environment:</span><br><span class=\"line\">      MYSQL_ROOT_PASSWORD: xxxx(你的数据库的密码)</span><br><span class=\"line\">      MYSQL_USER: xxxx（你的登陆用户名）</span><br><span class=\"line\">      MYSQL_PASSWORD: xxxx(你的数据库的密码)</span><br><span class=\"line\">      MYSQL_DATABASE: xxxx（你的数据库名字）</span><br><span class=\"line\">      TZ: &quot;Asia/Tokyo&quot;</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;3306:3306&quot;</span><br></pre></td></tr></table></figure>\n\n<p>2.进入mysql Container，确认是否已经连接上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it mysqlコンテナ名 sh</span><br></pre></td></tr></table></figure>\n\n<p>3.重新启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-compose down</span><br><span class=\"line\">$ docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"途中可能会出现下面的问题\"><a href=\"#途中可能会出现下面的问题\" class=\"headerlink\" title=\"途中可能会出现下面的问题\"></a>途中可能会出现下面的问题</h4><h5 id=\"问题1\"><a href=\"#问题1\" class=\"headerlink\" title=\"问题1:\"></a>问题1:</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  ~ brew install homebrew/php/php71-intl</span><br><span class=\"line\">Updating Homebrew...</span><br><span class=\"line\">Error: homebrew/php was deprecated. This tap is now empty as all its formulae were migrated.</span><br></pre></td></tr></table></figure>\n\n<p>解决方法:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Save all old configurations, so the new packaes can recreate their versions -- eases the migration</span><br><span class=\"line\">mv /usr/local/etc/php $HOME/old-brew-php</span><br><span class=\"line\"># Uninstall ALL php related Packages (most of them homebrew/php related)</span><br><span class=\"line\">brew list | grep php | xargs brew uninstall --force</span><br><span class=\"line\"># Remove deprecated tap</span><br><span class=\"line\">brew untap homebrew/php</span><br><span class=\"line\"># Clean cache</span><br><span class=\"line\">brew cleanup</span><br><span class=\"line\"># Ensure latest brew repo HEAD</span><br><span class=\"line\">brew update</span><br><span class=\"line\"># Install latest php (php 7.2)</span><br><span class=\"line\">brew install php</span><br><span class=\"line\">pecl install xdebug</span><br><span class=\"line\"># Now copy &amp; paste specific conf.d from your old-brew-php version if needed</span><br><span class=\"line\"># after that you may dispose of the old-brew-php folder</span><br></pre></td></tr></table></figure>\n\n<p>使用下面进行确认</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew list | grep php:</span><br><span class=\"line\"></span><br><span class=\"line\">php php71</span><br><span class=\"line\"></span><br><span class=\"line\">brew tap:</span><br><span class=\"line\"></span><br><span class=\"line\">homebrew/bundle homebrew/core homebrew/dupes homebrew/php homebrew/services homebrew/versions</span><br></pre></td></tr></table></figure>\n\n<p>然后再安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install php@7.1</span><br></pre></td></tr></table></figure>\n\n<p>最后composer install再启动服务器就好了</p>\n<h5 id=\"问题2\"><a href=\"#问题2\" class=\"headerlink\" title=\"问题2:\"></a>问题2:</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">E: Failed to fetch http://deb.debian.org/debian/dists/stretch/main/binary-amd64/Packages  Error writing to output file - write (28: No space left on device) Error writing to file - write (28: No space left on device)</span><br></pre></td></tr></table></figure>\n\n<p>解决方法：<br>空间不足无法启动的情况，可以将所有的Container和Image都删除，再启动</p>\n<p>删除所有的Container</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm -f $(docker ps -aq)</span><br></pre></td></tr></table></figure>\n\n<p>删除所有的Images</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi -f $(docker images -q)</span><br></pre></td></tr></table></figure>\n\n<p>删除所有的docker volume</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume rm -f $(docker volume ls -q)</span><br></pre></td></tr></table></figure>\n\n<p>重新启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-compose down</span><br><span class=\"line\">$ docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"thumbnailImageUrl":"https://kisky3.github.io/2019/04/03/使用Docker进行Cakephp3开发环境搭建/20190403.png","excerpt":"<p>使用Docker进行Cakephp3开发环境搭建</p>","more":"<h3 id=\"使用Docker构建\"><a href=\"#使用Docker构建\" class=\"headerlink\" title=\"使用Docker构建\"></a>使用Docker构建</h3><p>本次使用Github公开的Dockerfile，利用docker-compose建立container.</p>\n<p>使用的image是php:7-fpm-alpine</p>\n<p><a href=\"https://github.com/matayoshi/docker_cakephp3_tutorial\" target=\"_blank\" rel=\"noopener\">参照连接</a></p>\n<p>1.首先将上面的克隆到本地home</p>\n<img src=\"./1.png\" style=\"width:500px\">\n\n<p>2.然后使用docker-compose命令进行构建</p>\n<img src=\"./2.png\" style=\"width:500px\">\nbuild的时候如果nginx存在的话会被跳过，需要确认的是这三个mysql、phpfpm、nginx有没有build成功。\n\n<p>3.然后创建Container</p>\n<img src=\"./3.png\" style=\"width:500px\">\n\n<p>4.确认是否创建成功</p>\n<img src=\"./4.png\" style=\"width:500px\">\n\n<p>5.启动Container，同时启动nginx服务器</p>\n<img src=\"./5.png\" style=\"width:500px\">\n\n<p>注意：如果之前有创建过Container，并存在nginx container的时候，端口号重复所以会出现错误。此时应该停止Container然后再重复以上步骤。</p>\n<p>6.然后Cakephp的composer装入phpfpm Container并安装。同时完成项目的创建。</p>\n<img src=\"./6.png\" style=\"width:500px\">\n\n<p>7.安装和项目构建完成后，退出Container</p>\n<p>8.启动服务器，就能看到确认画面了！</p>\n<img src=\"./7.png\" style=\"width:500px\">\n\n<p>如果服务器版本不对则可能出现错误。此时需要brew在本地进行安装。</p>\n<img src=\"./9.png\" style=\"width:500px\">\n\n<p>因为版本不同安装的东西也不同所以要进入Container里对php的版本进行确认。</p>\n<img src=\"./10.png\" style=\"width:500px\">\n\n<p>版本为7.18，所以要安装php71-intl。</p>\n<img src=\"./11.png\" style=\"width:500px\">\n\n<p>再启动服务器就能看到启动画面了。</p>\n<p>通过此链接确认画面 <a href=\"http://localhost:8765/\" target=\"_blank\" rel=\"noopener\">http://localhost:8765/</a></p>\n<img src=\"./8.png\" style=\"width:500px\">\n\n<hr>\n<h3 id=\"数据库连接\"><a href=\"#数据库连接\" class=\"headerlink\" title=\"数据库连接\"></a>数据库连接</h3><p>有时数据库无法连接上，则采用下面的方法进行确认：</p>\n<h4 id=\"本地数据库连接方法：\"><a href=\"#本地数据库连接方法：\" class=\"headerlink\" title=\"本地数据库连接方法：\"></a>本地数据库连接方法：</h4><p>1.确认启动中的Container</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker ps</span><br></pre></td></tr></table></figure>\n\n<p> 2.找到启动中的mysql Container<br>确认到host为127.0.0.1,port为3306</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">259d8b05f8ec  mysql:5.6  ... 127.0.0.1:3306-&gt;3306/tcp</span><br></pre></td></tr></table></figure>\n\n<p>3.修改参数</p>\n<p>cakephp的app.php的database改成「localhost」-&gt; 「127.0.0.1」<br>docker-compose.yml里的database的port改成相应的3306</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">services:</span><br><span class=\"line\">  mysql:</span><br><span class=\"line\">    restart: always</span><br><span class=\"line\">    build: ./data/mysql/</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - <span class=\"string\">\"./data/mysql/db:/var/lib/mysql\"</span></span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      MYSQL_ROOT_PASSWORD: password</span><br><span class=\"line\">      MYSQL_USER: my_app</span><br><span class=\"line\">      MYSQL_PASSWORD: secret</span><br><span class=\"line\">      MYSQL_DATABASE: my_app</span><br><span class=\"line\">      TZ: <span class=\"string\">\"Asia/Tokyo\"</span></span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - <span class=\"string\">\"3306:3306\"</span> </span><br><span class=\"line\">  nginx:</span><br><span class=\"line\">    restart: always</span><br><span class=\"line\"></span><br><span class=\"line\">    ~~~~~~~~~~~~~~~</span><br></pre></td></tr></table></figure>\n\n<p>4.重新启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-compose down</span><br><span class=\"line\">$ docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"已存在数据库连接方法：\"><a href=\"#已存在数据库连接方法：\" class=\"headerlink\" title=\"已存在数据库连接方法：\"></a>已存在数据库连接方法：</h4><p>1.修改以下文件</p>\n<p>app.php</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;host&apos; =&gt; &apos;xxxxx&apos;(你的数据库host),</span><br></pre></td></tr></table></figure>\n\n<p>docker-compose.yml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">environment:</span><br><span class=\"line\">      MYSQL_ROOT_PASSWORD: xxxx(你的数据库的密码)</span><br><span class=\"line\">      MYSQL_USER: xxxx（你的登陆用户名）</span><br><span class=\"line\">      MYSQL_PASSWORD: xxxx(你的数据库的密码)</span><br><span class=\"line\">      MYSQL_DATABASE: xxxx（你的数据库名字）</span><br><span class=\"line\">      TZ: &quot;Asia/Tokyo&quot;</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;3306:3306&quot;</span><br></pre></td></tr></table></figure>\n\n<p>2.进入mysql Container，确认是否已经连接上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it mysqlコンテナ名 sh</span><br></pre></td></tr></table></figure>\n\n<p>3.重新启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-compose down</span><br><span class=\"line\">$ docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"途中可能会出现下面的问题\"><a href=\"#途中可能会出现下面的问题\" class=\"headerlink\" title=\"途中可能会出现下面的问题\"></a>途中可能会出现下面的问题</h4><h5 id=\"问题1\"><a href=\"#问题1\" class=\"headerlink\" title=\"问题1:\"></a>问题1:</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  ~ brew install homebrew/php/php71-intl</span><br><span class=\"line\">Updating Homebrew...</span><br><span class=\"line\">Error: homebrew/php was deprecated. This tap is now empty as all its formulae were migrated.</span><br></pre></td></tr></table></figure>\n\n<p>解决方法:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Save all old configurations, so the new packaes can recreate their versions -- eases the migration</span><br><span class=\"line\">mv /usr/local/etc/php $HOME/old-brew-php</span><br><span class=\"line\"># Uninstall ALL php related Packages (most of them homebrew/php related)</span><br><span class=\"line\">brew list | grep php | xargs brew uninstall --force</span><br><span class=\"line\"># Remove deprecated tap</span><br><span class=\"line\">brew untap homebrew/php</span><br><span class=\"line\"># Clean cache</span><br><span class=\"line\">brew cleanup</span><br><span class=\"line\"># Ensure latest brew repo HEAD</span><br><span class=\"line\">brew update</span><br><span class=\"line\"># Install latest php (php 7.2)</span><br><span class=\"line\">brew install php</span><br><span class=\"line\">pecl install xdebug</span><br><span class=\"line\"># Now copy &amp; paste specific conf.d from your old-brew-php version if needed</span><br><span class=\"line\"># after that you may dispose of the old-brew-php folder</span><br></pre></td></tr></table></figure>\n\n<p>使用下面进行确认</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew list | grep php:</span><br><span class=\"line\"></span><br><span class=\"line\">php php71</span><br><span class=\"line\"></span><br><span class=\"line\">brew tap:</span><br><span class=\"line\"></span><br><span class=\"line\">homebrew/bundle homebrew/core homebrew/dupes homebrew/php homebrew/services homebrew/versions</span><br></pre></td></tr></table></figure>\n\n<p>然后再安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install php@7.1</span><br></pre></td></tr></table></figure>\n\n<p>最后composer install再启动服务器就好了</p>\n<h5 id=\"问题2\"><a href=\"#问题2\" class=\"headerlink\" title=\"问题2:\"></a>问题2:</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">E: Failed to fetch http://deb.debian.org/debian/dists/stretch/main/binary-amd64/Packages  Error writing to output file - write (28: No space left on device) Error writing to file - write (28: No space left on device)</span><br></pre></td></tr></table></figure>\n\n<p>解决方法：<br>空间不足无法启动的情况，可以将所有的Container和Image都删除，再启动</p>\n<p>删除所有的Container</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm -f $(docker ps -aq)</span><br></pre></td></tr></table></figure>\n\n<p>删除所有的Images</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi -f $(docker images -q)</span><br></pre></td></tr></table></figure>\n\n<p>删除所有的docker volume</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume rm -f $(docker volume ls -q)</span><br></pre></td></tr></table></figure>\n\n<p>重新启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-compose down</span><br><span class=\"line\">$ docker-compose up -d</span><br></pre></td></tr></table></figure>"},{"title":"About Block Formatting Context","date":"2019-01-16T14:40:57.000Z","clearReading":true,"thumbnailImage":"20190116.png","thumbnailImagePosition":"left","coverImage":"cover.jpg","coverCaption":"Hello World, Hello Programming","coverSize":"partial","comments":0,"_content":"\n关于BFC及外边距合并\n<!--more-->\n\n### BFC 是什么\nBFC全称Block Formatting Context。中文为”块级格式化上下文”。\n\n每个渲染区域用formatting context表示，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。在正常流中的盒子要么属于块级格式化上下文，要么属于内联格式化上下文。\n也就是页面渲染时候所遵循的一种规则。\n\n***\n### BFC的特性有\n- 内部的Box会在垂直方向按顺序放置\n- Box垂直方向的距离由margin决定，属于同一个BFC的两个相邻Box的margin会发生重叠 ，每个元素的margin box的左边与包含块border box的左边相接触。\n- BFC 区域不会与float box重叠\n- BFC就是页面上的一个隔离的独立容器，容器里的子元素不会影响到外面的元素。\n- BFC的高度也包括浮动元素的高度。\n\n***\n### BFC的产生\n\n1. 根元素\n- 撑满父容器，父容器能被子元素撑开\n- 可能会产生外边局合并的情况\n- 页面渲染时位置从上到下\n\n2.float属性不为none\n拥有float属性的元素，相当于脱离文档流，拥有自己专属空间，对外界元素没有影响的元素。\n\n3.position为absolute或fixed\nposition属性值为absolute或fixed的，脱离了文档流的元素。\n\n4.display为inline-block，flex，或者inline-flex\n\n5.overflow不为visible\n\n***\n### BFC 有什么作用？举例说明。\nBFC的作用有：\n1. 自适应两栏布局\n```CSS\n<style>\n    body {\n        position: relative;\n    }\n\n    .aside {\n        width: 90px;\n        height: 150px;\n        float: left;\n        background: #f66;\n    }\n\n    .main {\n        height: 200px;\n        background: #fcc;\n      \n    }\n</style>\n<body>\n    <div class=\"aside\"></div>\n    <div class=\"main\"></div>\n</body>\n```\n\n页面效果：\n\n<img src=\"./1.png\" style=\"width:500px\">\n\n根据BFC布局规则第三条：\n\n每个元素的margin box的左边，与包含border box的左边相接触（对于从左往右的格式化，否则相反）。即使存在浮动也是如此。\n\n因此，虽然存在浮动元素aslide，但main的左边依然会与包含块的左边接触。\n根据BFC布局规则第四条：\n\nBFC的区域不会与float box重叠。\n我们可以通过除法main生成BFC，来实现自适应两栏布局。\n\n```CSS\n.main {\n    overflow: hidden;\n}\n```\n当除法main生成BFC后，这个新的BFC不会与浮动的aside重叠。因此会根据包含块的宽度和aside的宽度自动变窄。\n\n页面效果：\n\n<img src=\"./2.png\" style=\"width:500px\">\n\n2.清除内部浮动\n\n```CSS\n<style>\n    <style>\n    .parent {\n        border: 5px solid #fcc;\n        width: 300px;\n    }\n\n    .child {\n        border: 5px solid #f66;\n        width:100px;\n        height: 100px;\n        float: left;\n    }\n</style>\n<body>\n    <div class=\"parent\">\n        <div class=\"child\"></div>\n        <div class=\"child\"></div>\n    </div>\n</body>\n```\n页面效果：\n\n<img src=\"./3.png\" style=\"width:500px\">\n\n根据BFC布局规则：\n\n计算BFC的高度时，浮动元素也参与计算\n为达到清除内部浮动，我们可以除法parent生成BFC，那么parent在计算高度时，parent内的浮动元素child也会参与计算。\n\n```CSS\n.parent {\n    overflow: hidden;\n}\n```\n\n3.防止垂直margin重叠\n\n```CSS\n<style>\n    p {\n        color: #f55;\n        background: #fcc;\n        width: 200px;\n        line-height: 100px;\n        text-align:center;\n        margin: 100px;\n    }\n</style>\n<body>\n    <p>Haha</p>\n    <p>Hehe</p>\n</body>\n```\n\n页面效果：\n\n<img src=\"./4.png\" style=\"width:500px\">\n\n两个p之间的距离为100px，发送了margin重叠。 根据BFC布局规则第二条：\n\nBox垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠\n\n我们可以在p外面包裹一层容器，并触发该容器生成一个BFC。那么两个P便不属于同一个BFC，就不会发生margin重叠了。\n\n```CSS\n<style>\n    .wrap {\n        overflow: hidden;\n    }\n    p {\n        color: #f55;\n        background: #fcc;\n        width: 200px;\n        line-height: 100px;\n        text-align:center;\n        margin: 100px;\n    }\n</style>\n<body>\n    <p>Haha</p>\n    <div class=\"wrap\">\n        <p>Hehe</p>\n    </div>\n</body>\n```\n\n页面效果：\n<img src=\"./5.png\" style=\"width:500px\">\n\n***\n\n### 总结\nBFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。\n\n因为BFC内部的元素和外部的元素绝对不会互相影响，因此， 当BFC外部存在浮动时，它不应该影响BFC内部Box的布局，BFC会通过变窄，而不与浮动有重叠。同样的，当BFC内部有浮动时，为了不影响外部元素的布局，BFC计算高度时会包括浮动的高度。避免margin重叠也是这样的一个道理。\n\n### 外边距合并\n块的顶部外边距和底部外边距有时候会被折叠为单个外边距，其大小为两值中的最大值，这种行为就被称为外边距合并。\n一般发生外边距合并主要有以下三种情况：\n\n- 相邻兄弟姐妹元素\n- 父元素和子元素\n- 空元素\n\n#### 相邻兄弟姐妹元素\n两个兄弟元素之间的外边距，会取两个元素外边距的最大值。\n\n```CSS\n<p style=\"margin-bottom: 30px;\">这个段落的下外边距被合并...</p>\n<p style=\"margin-top: 20px;\">...这个段落的上外边距被合并。</p>\n```\n\n按照上面的例子可以得出，两个p元素之间距离为30px。\n\n\n#### 父元素和子元素\n这种情况又可以分为以下两种：\n\n- 父元素的上外边距和第一个子元素的上外边距\n- 父元素的下外边距和最后一个子元素的下外边距\n这两种情况，最终显示出来的结果都是取二者中的最大值。\n\n#### 空元素\n自己的上外边距会和自己的下外边距合并\n```CSS\n<p style=\"margin-bottom: 0px;\">这个段落的和下面段落的距离将为20px</p>\n\n<div style=\"margin-top: 20px; margin-bottom: 20px;\"></div>\n\n<p style=\"margin-top: 0px;\">这个段落的和上面段落的距离将为20px</p>\n```\n这样第一个p元素和第三个p元素之间距离为20px\n\n#### 阻止合并方法\n\n##### 通用方法\n1. 处于静态流元素会发生合并，所以float和position:absolute都不会发生合并\n2. 设置为inline-block ，也不会发生合并\n\n##### 针对于父元素和子元素情况不合并方法\n以下都不会发生合并\n\n1. 设置了清除浮动属性\n2. 因为margin需要直接接触才能合并，所以父元素或子元素中有border或padding，或者二者之间有元素\n\n##### 注意\n- 如果两个外边距值中有一个为0，也会发生合并。\n- 如果有负外边距，合并后外边距为最大正边距加上最小负边距（绝对值最大的一个），如上面元素下边距为20px，下面元素上边距为-20px，则最后为0px\n\n***\n### 参考：\n\n[外边距合并MDN](https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing)\n[「CSS」Margin Collapsing - 外边距合并](https://segmentfault.com/a/1190000003712262)\n\n","source":"_posts/关于BFC及外边距合并.md","raw":"---\ntitle: About Block Formatting Context\ndate: 2019-01-16 23:40:57\ntags:\n- CSS\n- BFC\nclearReading: true\nthumbnailImage: 20190116.png\nthumbnailImagePosition: left\ncoverImage: cover.jpg\ncoverCaption: \"Hello World, Hello Programming\"\ncoverSize: partial\ncomments: false\ncategories: Front-end Knowledge\n---\n\n关于BFC及外边距合并\n<!--more-->\n\n### BFC 是什么\nBFC全称Block Formatting Context。中文为”块级格式化上下文”。\n\n每个渲染区域用formatting context表示，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。在正常流中的盒子要么属于块级格式化上下文，要么属于内联格式化上下文。\n也就是页面渲染时候所遵循的一种规则。\n\n***\n### BFC的特性有\n- 内部的Box会在垂直方向按顺序放置\n- Box垂直方向的距离由margin决定，属于同一个BFC的两个相邻Box的margin会发生重叠 ，每个元素的margin box的左边与包含块border box的左边相接触。\n- BFC 区域不会与float box重叠\n- BFC就是页面上的一个隔离的独立容器，容器里的子元素不会影响到外面的元素。\n- BFC的高度也包括浮动元素的高度。\n\n***\n### BFC的产生\n\n1. 根元素\n- 撑满父容器，父容器能被子元素撑开\n- 可能会产生外边局合并的情况\n- 页面渲染时位置从上到下\n\n2.float属性不为none\n拥有float属性的元素，相当于脱离文档流，拥有自己专属空间，对外界元素没有影响的元素。\n\n3.position为absolute或fixed\nposition属性值为absolute或fixed的，脱离了文档流的元素。\n\n4.display为inline-block，flex，或者inline-flex\n\n5.overflow不为visible\n\n***\n### BFC 有什么作用？举例说明。\nBFC的作用有：\n1. 自适应两栏布局\n```CSS\n<style>\n    body {\n        position: relative;\n    }\n\n    .aside {\n        width: 90px;\n        height: 150px;\n        float: left;\n        background: #f66;\n    }\n\n    .main {\n        height: 200px;\n        background: #fcc;\n      \n    }\n</style>\n<body>\n    <div class=\"aside\"></div>\n    <div class=\"main\"></div>\n</body>\n```\n\n页面效果：\n\n<img src=\"./1.png\" style=\"width:500px\">\n\n根据BFC布局规则第三条：\n\n每个元素的margin box的左边，与包含border box的左边相接触（对于从左往右的格式化，否则相反）。即使存在浮动也是如此。\n\n因此，虽然存在浮动元素aslide，但main的左边依然会与包含块的左边接触。\n根据BFC布局规则第四条：\n\nBFC的区域不会与float box重叠。\n我们可以通过除法main生成BFC，来实现自适应两栏布局。\n\n```CSS\n.main {\n    overflow: hidden;\n}\n```\n当除法main生成BFC后，这个新的BFC不会与浮动的aside重叠。因此会根据包含块的宽度和aside的宽度自动变窄。\n\n页面效果：\n\n<img src=\"./2.png\" style=\"width:500px\">\n\n2.清除内部浮动\n\n```CSS\n<style>\n    <style>\n    .parent {\n        border: 5px solid #fcc;\n        width: 300px;\n    }\n\n    .child {\n        border: 5px solid #f66;\n        width:100px;\n        height: 100px;\n        float: left;\n    }\n</style>\n<body>\n    <div class=\"parent\">\n        <div class=\"child\"></div>\n        <div class=\"child\"></div>\n    </div>\n</body>\n```\n页面效果：\n\n<img src=\"./3.png\" style=\"width:500px\">\n\n根据BFC布局规则：\n\n计算BFC的高度时，浮动元素也参与计算\n为达到清除内部浮动，我们可以除法parent生成BFC，那么parent在计算高度时，parent内的浮动元素child也会参与计算。\n\n```CSS\n.parent {\n    overflow: hidden;\n}\n```\n\n3.防止垂直margin重叠\n\n```CSS\n<style>\n    p {\n        color: #f55;\n        background: #fcc;\n        width: 200px;\n        line-height: 100px;\n        text-align:center;\n        margin: 100px;\n    }\n</style>\n<body>\n    <p>Haha</p>\n    <p>Hehe</p>\n</body>\n```\n\n页面效果：\n\n<img src=\"./4.png\" style=\"width:500px\">\n\n两个p之间的距离为100px，发送了margin重叠。 根据BFC布局规则第二条：\n\nBox垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠\n\n我们可以在p外面包裹一层容器，并触发该容器生成一个BFC。那么两个P便不属于同一个BFC，就不会发生margin重叠了。\n\n```CSS\n<style>\n    .wrap {\n        overflow: hidden;\n    }\n    p {\n        color: #f55;\n        background: #fcc;\n        width: 200px;\n        line-height: 100px;\n        text-align:center;\n        margin: 100px;\n    }\n</style>\n<body>\n    <p>Haha</p>\n    <div class=\"wrap\">\n        <p>Hehe</p>\n    </div>\n</body>\n```\n\n页面效果：\n<img src=\"./5.png\" style=\"width:500px\">\n\n***\n\n### 总结\nBFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。\n\n因为BFC内部的元素和外部的元素绝对不会互相影响，因此， 当BFC外部存在浮动时，它不应该影响BFC内部Box的布局，BFC会通过变窄，而不与浮动有重叠。同样的，当BFC内部有浮动时，为了不影响外部元素的布局，BFC计算高度时会包括浮动的高度。避免margin重叠也是这样的一个道理。\n\n### 外边距合并\n块的顶部外边距和底部外边距有时候会被折叠为单个外边距，其大小为两值中的最大值，这种行为就被称为外边距合并。\n一般发生外边距合并主要有以下三种情况：\n\n- 相邻兄弟姐妹元素\n- 父元素和子元素\n- 空元素\n\n#### 相邻兄弟姐妹元素\n两个兄弟元素之间的外边距，会取两个元素外边距的最大值。\n\n```CSS\n<p style=\"margin-bottom: 30px;\">这个段落的下外边距被合并...</p>\n<p style=\"margin-top: 20px;\">...这个段落的上外边距被合并。</p>\n```\n\n按照上面的例子可以得出，两个p元素之间距离为30px。\n\n\n#### 父元素和子元素\n这种情况又可以分为以下两种：\n\n- 父元素的上外边距和第一个子元素的上外边距\n- 父元素的下外边距和最后一个子元素的下外边距\n这两种情况，最终显示出来的结果都是取二者中的最大值。\n\n#### 空元素\n自己的上外边距会和自己的下外边距合并\n```CSS\n<p style=\"margin-bottom: 0px;\">这个段落的和下面段落的距离将为20px</p>\n\n<div style=\"margin-top: 20px; margin-bottom: 20px;\"></div>\n\n<p style=\"margin-top: 0px;\">这个段落的和上面段落的距离将为20px</p>\n```\n这样第一个p元素和第三个p元素之间距离为20px\n\n#### 阻止合并方法\n\n##### 通用方法\n1. 处于静态流元素会发生合并，所以float和position:absolute都不会发生合并\n2. 设置为inline-block ，也不会发生合并\n\n##### 针对于父元素和子元素情况不合并方法\n以下都不会发生合并\n\n1. 设置了清除浮动属性\n2. 因为margin需要直接接触才能合并，所以父元素或子元素中有border或padding，或者二者之间有元素\n\n##### 注意\n- 如果两个外边距值中有一个为0，也会发生合并。\n- 如果有负外边距，合并后外边距为最大正边距加上最小负边距（绝对值最大的一个），如上面元素下边距为20px，下面元素上边距为-20px，则最后为0px\n\n***\n### 参考：\n\n[外边距合并MDN](https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing)\n[「CSS」Margin Collapsing - 外边距合并](https://segmentfault.com/a/1190000003712262)\n\n","slug":"关于BFC及外边距合并","published":1,"updated":"2019-11-23T23:54:38.000Z","layout":"post","photos":[],"link":"","_id":"ck3it6k2n002uteyiz58awn3g","content":"<p>关于BFC及外边距合并</p>\n<a id=\"more\"></a>\n\n<h3 id=\"BFC-是什么\"><a href=\"#BFC-是什么\" class=\"headerlink\" title=\"BFC 是什么\"></a>BFC 是什么</h3><p>BFC全称Block Formatting Context。中文为”块级格式化上下文”。</p>\n<p>每个渲染区域用formatting context表示，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。在正常流中的盒子要么属于块级格式化上下文，要么属于内联格式化上下文。<br>也就是页面渲染时候所遵循的一种规则。</p>\n<hr>\n<h3 id=\"BFC的特性有\"><a href=\"#BFC的特性有\" class=\"headerlink\" title=\"BFC的特性有\"></a>BFC的特性有</h3><ul>\n<li>内部的Box会在垂直方向按顺序放置</li>\n<li>Box垂直方向的距离由margin决定，属于同一个BFC的两个相邻Box的margin会发生重叠 ，每个元素的margin box的左边与包含块border box的左边相接触。</li>\n<li>BFC 区域不会与float box重叠</li>\n<li>BFC就是页面上的一个隔离的独立容器，容器里的子元素不会影响到外面的元素。</li>\n<li>BFC的高度也包括浮动元素的高度。</li>\n</ul>\n<hr>\n<h3 id=\"BFC的产生\"><a href=\"#BFC的产生\" class=\"headerlink\" title=\"BFC的产生\"></a>BFC的产生</h3><ol>\n<li>根元素</li>\n</ol>\n<ul>\n<li>撑满父容器，父容器能被子元素撑开</li>\n<li>可能会产生外边局合并的情况</li>\n<li>页面渲染时位置从上到下</li>\n</ul>\n<p>2.float属性不为none<br>拥有float属性的元素，相当于脱离文档流，拥有自己专属空间，对外界元素没有影响的元素。</p>\n<p>3.position为absolute或fixed<br>position属性值为absolute或fixed的，脱离了文档流的元素。</p>\n<p>4.display为inline-block，flex，或者inline-flex</p>\n<p>5.overflow不为visible</p>\n<hr>\n<h3 id=\"BFC-有什么作用？举例说明。\"><a href=\"#BFC-有什么作用？举例说明。\" class=\"headerlink\" title=\"BFC 有什么作用？举例说明。\"></a>BFC 有什么作用？举例说明。</h3><p>BFC的作用有：</p>\n<ol>\n<li>自适应两栏布局<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"selector-tag\">style</span>&gt;</span><br><span class=\"line\">    <span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"selector-class\">.aside</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">90px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">        <span class=\"attribute\">background</span>: <span class=\"number\">#f66</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"selector-class\">.main</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">background</span>: <span class=\"number\">#fcc</span>;</span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;<span class=\"selector-tag\">body</span>&gt;</span><br><span class=\"line\">    &lt;div class=\"aside\"&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=\"main\"&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>页面效果：</p>\n<img src=\"./1.png\" style=\"width:500px\">\n\n<p>根据BFC布局规则第三条：</p>\n<p>每个元素的margin box的左边，与包含border box的左边相接触（对于从左往右的格式化，否则相反）。即使存在浮动也是如此。</p>\n<p>因此，虽然存在浮动元素aslide，但main的左边依然会与包含块的左边接触。<br>根据BFC布局规则第四条：</p>\n<p>BFC的区域不会与float box重叠。<br>我们可以通过除法main生成BFC，来实现自适应两栏布局。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.main</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当除法main生成BFC后，这个新的BFC不会与浮动的aside重叠。因此会根据包含块的宽度和aside的宽度自动变窄。</p>\n<p>页面效果：</p>\n<img src=\"./2.png\" style=\"width:500px\">\n\n<p>2.清除内部浮动</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"selector-tag\">style</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"selector-tag\">style</span>&gt;</span><br><span class=\"line\">    <span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">border</span>: <span class=\"number\">5px</span> solid <span class=\"number\">#fcc</span>;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"selector-class\">.child</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">border</span>: <span class=\"number\">5px</span> solid <span class=\"number\">#f66</span>;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;<span class=\"selector-tag\">body</span>&gt;</span><br><span class=\"line\">    &lt;div class=\"parent\"&gt;</span><br><span class=\"line\">        &lt;div class=\"child\"&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=\"child\"&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>页面效果：</p>\n<img src=\"./3.png\" style=\"width:500px\">\n\n<p>根据BFC布局规则：</p>\n<p>计算BFC的高度时，浮动元素也参与计算<br>为达到清除内部浮动，我们可以除法parent生成BFC，那么parent在计算高度时，parent内的浮动元素child也会参与计算。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.防止垂直margin重叠</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"selector-tag\">style</span>&gt;</span><br><span class=\"line\">    <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">color</span>: <span class=\"number\">#f55</span>;</span><br><span class=\"line\">        <span class=\"attribute\">background</span>: <span class=\"number\">#fcc</span>;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">line-height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">text-align</span>:center;</span><br><span class=\"line\">        <span class=\"attribute\">margin</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;<span class=\"selector-tag\">body</span>&gt;</span><br><span class=\"line\">    &lt;p&gt;Haha&lt;/p&gt;</span><br><span class=\"line\">    &lt;p&gt;Hehe&lt;/p&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>页面效果：</p>\n<img src=\"./4.png\" style=\"width:500px\">\n\n<p>两个p之间的距离为100px，发送了margin重叠。 根据BFC布局规则第二条：</p>\n<p>Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠</p>\n<p>我们可以在p外面包裹一层容器，并触发该容器生成一个BFC。那么两个P便不属于同一个BFC，就不会发生margin重叠了。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"selector-tag\">style</span>&gt;</span><br><span class=\"line\">    <span class=\"selector-class\">.wrap</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">color</span>: <span class=\"number\">#f55</span>;</span><br><span class=\"line\">        <span class=\"attribute\">background</span>: <span class=\"number\">#fcc</span>;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">line-height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">text-align</span>:center;</span><br><span class=\"line\">        <span class=\"attribute\">margin</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;<span class=\"selector-tag\">body</span>&gt;</span><br><span class=\"line\">    &lt;p&gt;Haha&lt;/p&gt;</span><br><span class=\"line\">    &lt;div class=\"wrap\"&gt;</span><br><span class=\"line\">        &lt;p&gt;Hehe&lt;/p&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>页面效果：<br><img src=\"./5.png\" style=\"width:500px\"></p>\n<hr>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</p>\n<p>因为BFC内部的元素和外部的元素绝对不会互相影响，因此， 当BFC外部存在浮动时，它不应该影响BFC内部Box的布局，BFC会通过变窄，而不与浮动有重叠。同样的，当BFC内部有浮动时，为了不影响外部元素的布局，BFC计算高度时会包括浮动的高度。避免margin重叠也是这样的一个道理。</p>\n<h3 id=\"外边距合并\"><a href=\"#外边距合并\" class=\"headerlink\" title=\"外边距合并\"></a>外边距合并</h3><p>块的顶部外边距和底部外边距有时候会被折叠为单个外边距，其大小为两值中的最大值，这种行为就被称为外边距合并。<br>一般发生外边距合并主要有以下三种情况：</p>\n<ul>\n<li>相邻兄弟姐妹元素</li>\n<li>父元素和子元素</li>\n<li>空元素</li>\n</ul>\n<h4 id=\"相邻兄弟姐妹元素\"><a href=\"#相邻兄弟姐妹元素\" class=\"headerlink\" title=\"相邻兄弟姐妹元素\"></a>相邻兄弟姐妹元素</h4><p>两个兄弟元素之间的外边距，会取两个元素外边距的最大值。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p style=\"margin-bottom: 30px;\"&gt;这个段落的下外边距被合并...&lt;/p&gt;</span><br><span class=\"line\">&lt;p style=\"margin-top: 20px;\"&gt;...这个段落的上外边距被合并。&lt;/p&gt;</span><br></pre></td></tr></table></figure>\n\n<p>按照上面的例子可以得出，两个p元素之间距离为30px。</p>\n<h4 id=\"父元素和子元素\"><a href=\"#父元素和子元素\" class=\"headerlink\" title=\"父元素和子元素\"></a>父元素和子元素</h4><p>这种情况又可以分为以下两种：</p>\n<ul>\n<li>父元素的上外边距和第一个子元素的上外边距</li>\n<li>父元素的下外边距和最后一个子元素的下外边距<br>这两种情况，最终显示出来的结果都是取二者中的最大值。</li>\n</ul>\n<h4 id=\"空元素\"><a href=\"#空元素\" class=\"headerlink\" title=\"空元素\"></a>空元素</h4><p>自己的上外边距会和自己的下外边距合并</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p style=\"margin-bottom: 0px;\"&gt;这个段落的和下面段落的距离将为20px&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div style=\"margin-top: 20px; margin-bottom: 20px;\"&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p style=\"margin-top: 0px;\"&gt;这个段落的和上面段落的距离将为20px&lt;/p&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这样第一个p元素和第三个p元素之间距离为20px</p>\n<h4 id=\"阻止合并方法\"><a href=\"#阻止合并方法\" class=\"headerlink\" title=\"阻止合并方法\"></a>阻止合并方法</h4><h5 id=\"通用方法\"><a href=\"#通用方法\" class=\"headerlink\" title=\"通用方法\"></a>通用方法</h5><ol>\n<li>处于静态流元素会发生合并，所以float和position:absolute都不会发生合并</li>\n<li>设置为inline-block ，也不会发生合并</li>\n</ol>\n<h5 id=\"针对于父元素和子元素情况不合并方法\"><a href=\"#针对于父元素和子元素情况不合并方法\" class=\"headerlink\" title=\"针对于父元素和子元素情况不合并方法\"></a>针对于父元素和子元素情况不合并方法</h5><p>以下都不会发生合并</p>\n<ol>\n<li>设置了清除浮动属性</li>\n<li>因为margin需要直接接触才能合并，所以父元素或子元素中有border或padding，或者二者之间有元素</li>\n</ol>\n<h5 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h5><ul>\n<li>如果两个外边距值中有一个为0，也会发生合并。</li>\n<li>如果有负外边距，合并后外边距为最大正边距加上最小负边距（绝对值最大的一个），如上面元素下边距为20px，下面元素上边距为-20px，则最后为0px</li>\n</ul>\n<hr>\n<h3 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h3><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing\" target=\"_blank\" rel=\"noopener\">外边距合并MDN</a><br><a href=\"https://segmentfault.com/a/1190000003712262\" target=\"_blank\" rel=\"noopener\">「CSS」Margin Collapsing - 外边距合并</a></p>\n","site":{"data":{}},"thumbnailImageUrl":"https://kisky3.github.io/2019/01/16/关于BFC及外边距合并/20190116.png","excerpt":"<p>关于BFC及外边距合并</p>","more":"<h3 id=\"BFC-是什么\"><a href=\"#BFC-是什么\" class=\"headerlink\" title=\"BFC 是什么\"></a>BFC 是什么</h3><p>BFC全称Block Formatting Context。中文为”块级格式化上下文”。</p>\n<p>每个渲染区域用formatting context表示，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。在正常流中的盒子要么属于块级格式化上下文，要么属于内联格式化上下文。<br>也就是页面渲染时候所遵循的一种规则。</p>\n<hr>\n<h3 id=\"BFC的特性有\"><a href=\"#BFC的特性有\" class=\"headerlink\" title=\"BFC的特性有\"></a>BFC的特性有</h3><ul>\n<li>内部的Box会在垂直方向按顺序放置</li>\n<li>Box垂直方向的距离由margin决定，属于同一个BFC的两个相邻Box的margin会发生重叠 ，每个元素的margin box的左边与包含块border box的左边相接触。</li>\n<li>BFC 区域不会与float box重叠</li>\n<li>BFC就是页面上的一个隔离的独立容器，容器里的子元素不会影响到外面的元素。</li>\n<li>BFC的高度也包括浮动元素的高度。</li>\n</ul>\n<hr>\n<h3 id=\"BFC的产生\"><a href=\"#BFC的产生\" class=\"headerlink\" title=\"BFC的产生\"></a>BFC的产生</h3><ol>\n<li>根元素</li>\n</ol>\n<ul>\n<li>撑满父容器，父容器能被子元素撑开</li>\n<li>可能会产生外边局合并的情况</li>\n<li>页面渲染时位置从上到下</li>\n</ul>\n<p>2.float属性不为none<br>拥有float属性的元素，相当于脱离文档流，拥有自己专属空间，对外界元素没有影响的元素。</p>\n<p>3.position为absolute或fixed<br>position属性值为absolute或fixed的，脱离了文档流的元素。</p>\n<p>4.display为inline-block，flex，或者inline-flex</p>\n<p>5.overflow不为visible</p>\n<hr>\n<h3 id=\"BFC-有什么作用？举例说明。\"><a href=\"#BFC-有什么作用？举例说明。\" class=\"headerlink\" title=\"BFC 有什么作用？举例说明。\"></a>BFC 有什么作用？举例说明。</h3><p>BFC的作用有：</p>\n<ol>\n<li>自适应两栏布局<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"selector-tag\">style</span>&gt;</span><br><span class=\"line\">    <span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"selector-class\">.aside</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">90px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">        <span class=\"attribute\">background</span>: <span class=\"number\">#f66</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"selector-class\">.main</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">background</span>: <span class=\"number\">#fcc</span>;</span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;<span class=\"selector-tag\">body</span>&gt;</span><br><span class=\"line\">    &lt;div class=\"aside\"&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=\"main\"&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>页面效果：</p>\n<img src=\"./1.png\" style=\"width:500px\">\n\n<p>根据BFC布局规则第三条：</p>\n<p>每个元素的margin box的左边，与包含border box的左边相接触（对于从左往右的格式化，否则相反）。即使存在浮动也是如此。</p>\n<p>因此，虽然存在浮动元素aslide，但main的左边依然会与包含块的左边接触。<br>根据BFC布局规则第四条：</p>\n<p>BFC的区域不会与float box重叠。<br>我们可以通过除法main生成BFC，来实现自适应两栏布局。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.main</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当除法main生成BFC后，这个新的BFC不会与浮动的aside重叠。因此会根据包含块的宽度和aside的宽度自动变窄。</p>\n<p>页面效果：</p>\n<img src=\"./2.png\" style=\"width:500px\">\n\n<p>2.清除内部浮动</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"selector-tag\">style</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"selector-tag\">style</span>&gt;</span><br><span class=\"line\">    <span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">border</span>: <span class=\"number\">5px</span> solid <span class=\"number\">#fcc</span>;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"selector-class\">.child</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">border</span>: <span class=\"number\">5px</span> solid <span class=\"number\">#f66</span>;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;<span class=\"selector-tag\">body</span>&gt;</span><br><span class=\"line\">    &lt;div class=\"parent\"&gt;</span><br><span class=\"line\">        &lt;div class=\"child\"&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=\"child\"&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>页面效果：</p>\n<img src=\"./3.png\" style=\"width:500px\">\n\n<p>根据BFC布局规则：</p>\n<p>计算BFC的高度时，浮动元素也参与计算<br>为达到清除内部浮动，我们可以除法parent生成BFC，那么parent在计算高度时，parent内的浮动元素child也会参与计算。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.防止垂直margin重叠</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"selector-tag\">style</span>&gt;</span><br><span class=\"line\">    <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">color</span>: <span class=\"number\">#f55</span>;</span><br><span class=\"line\">        <span class=\"attribute\">background</span>: <span class=\"number\">#fcc</span>;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">line-height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">text-align</span>:center;</span><br><span class=\"line\">        <span class=\"attribute\">margin</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;<span class=\"selector-tag\">body</span>&gt;</span><br><span class=\"line\">    &lt;p&gt;Haha&lt;/p&gt;</span><br><span class=\"line\">    &lt;p&gt;Hehe&lt;/p&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>页面效果：</p>\n<img src=\"./4.png\" style=\"width:500px\">\n\n<p>两个p之间的距离为100px，发送了margin重叠。 根据BFC布局规则第二条：</p>\n<p>Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠</p>\n<p>我们可以在p外面包裹一层容器，并触发该容器生成一个BFC。那么两个P便不属于同一个BFC，就不会发生margin重叠了。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"selector-tag\">style</span>&gt;</span><br><span class=\"line\">    <span class=\"selector-class\">.wrap</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">color</span>: <span class=\"number\">#f55</span>;</span><br><span class=\"line\">        <span class=\"attribute\">background</span>: <span class=\"number\">#fcc</span>;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">line-height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">text-align</span>:center;</span><br><span class=\"line\">        <span class=\"attribute\">margin</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;<span class=\"selector-tag\">body</span>&gt;</span><br><span class=\"line\">    &lt;p&gt;Haha&lt;/p&gt;</span><br><span class=\"line\">    &lt;div class=\"wrap\"&gt;</span><br><span class=\"line\">        &lt;p&gt;Hehe&lt;/p&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>页面效果：<br><img src=\"./5.png\" style=\"width:500px\"></p>\n<hr>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</p>\n<p>因为BFC内部的元素和外部的元素绝对不会互相影响，因此， 当BFC外部存在浮动时，它不应该影响BFC内部Box的布局，BFC会通过变窄，而不与浮动有重叠。同样的，当BFC内部有浮动时，为了不影响外部元素的布局，BFC计算高度时会包括浮动的高度。避免margin重叠也是这样的一个道理。</p>\n<h3 id=\"外边距合并\"><a href=\"#外边距合并\" class=\"headerlink\" title=\"外边距合并\"></a>外边距合并</h3><p>块的顶部外边距和底部外边距有时候会被折叠为单个外边距，其大小为两值中的最大值，这种行为就被称为外边距合并。<br>一般发生外边距合并主要有以下三种情况：</p>\n<ul>\n<li>相邻兄弟姐妹元素</li>\n<li>父元素和子元素</li>\n<li>空元素</li>\n</ul>\n<h4 id=\"相邻兄弟姐妹元素\"><a href=\"#相邻兄弟姐妹元素\" class=\"headerlink\" title=\"相邻兄弟姐妹元素\"></a>相邻兄弟姐妹元素</h4><p>两个兄弟元素之间的外边距，会取两个元素外边距的最大值。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p style=\"margin-bottom: 30px;\"&gt;这个段落的下外边距被合并...&lt;/p&gt;</span><br><span class=\"line\">&lt;p style=\"margin-top: 20px;\"&gt;...这个段落的上外边距被合并。&lt;/p&gt;</span><br></pre></td></tr></table></figure>\n\n<p>按照上面的例子可以得出，两个p元素之间距离为30px。</p>\n<h4 id=\"父元素和子元素\"><a href=\"#父元素和子元素\" class=\"headerlink\" title=\"父元素和子元素\"></a>父元素和子元素</h4><p>这种情况又可以分为以下两种：</p>\n<ul>\n<li>父元素的上外边距和第一个子元素的上外边距</li>\n<li>父元素的下外边距和最后一个子元素的下外边距<br>这两种情况，最终显示出来的结果都是取二者中的最大值。</li>\n</ul>\n<h4 id=\"空元素\"><a href=\"#空元素\" class=\"headerlink\" title=\"空元素\"></a>空元素</h4><p>自己的上外边距会和自己的下外边距合并</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p style=\"margin-bottom: 0px;\"&gt;这个段落的和下面段落的距离将为20px&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div style=\"margin-top: 20px; margin-bottom: 20px;\"&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p style=\"margin-top: 0px;\"&gt;这个段落的和上面段落的距离将为20px&lt;/p&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这样第一个p元素和第三个p元素之间距离为20px</p>\n<h4 id=\"阻止合并方法\"><a href=\"#阻止合并方法\" class=\"headerlink\" title=\"阻止合并方法\"></a>阻止合并方法</h4><h5 id=\"通用方法\"><a href=\"#通用方法\" class=\"headerlink\" title=\"通用方法\"></a>通用方法</h5><ol>\n<li>处于静态流元素会发生合并，所以float和position:absolute都不会发生合并</li>\n<li>设置为inline-block ，也不会发生合并</li>\n</ol>\n<h5 id=\"针对于父元素和子元素情况不合并方法\"><a href=\"#针对于父元素和子元素情况不合并方法\" class=\"headerlink\" title=\"针对于父元素和子元素情况不合并方法\"></a>针对于父元素和子元素情况不合并方法</h5><p>以下都不会发生合并</p>\n<ol>\n<li>设置了清除浮动属性</li>\n<li>因为margin需要直接接触才能合并，所以父元素或子元素中有border或padding，或者二者之间有元素</li>\n</ol>\n<h5 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h5><ul>\n<li>如果两个外边距值中有一个为0，也会发生合并。</li>\n<li>如果有负外边距，合并后外边距为最大正边距加上最小负边距（绝对值最大的一个），如上面元素下边距为20px，下面元素上边距为-20px，则最后为0px</li>\n</ul>\n<hr>\n<h3 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h3><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing\" target=\"_blank\" rel=\"noopener\">外边距合并MDN</a><br><a href=\"https://segmentfault.com/a/1190000003712262\" target=\"_blank\" rel=\"noopener\">「CSS」Margin Collapsing - 外边距合并</a></p>"},{"title":"About Brower Object Model","date":"2019-04-25T12:22:10.000Z","clearReading":true,"thumbnailImage":"20190425.png","thumbnailImagePosition":"left","coverImage":"cover.jpg","coverCaption":"Hello World, Hello Programming","coverSize":"partial","comments":0,"_content":"\n关于BOM对象 \n<!--more-->\n### BOM\nBOM(Brower Object Model)是指浏览器对象模型，是用于描述这种对象与对象之间层次关系的模型,\n\n浏览器对象模型提供了独立于内容的，可以与浏览器窗口进行互动的对象结构。BOM由多个对象组成，\n其中代表浏览器窗口的window对象是BOM的顶层对象，其他对象都是该对象的子对象。   \n\n***\n\n### window\nBOM的核心是window对象，它表示浏览器的一个实例。在浏览器中，即是javascript访问浏览器窗口的一个接口，\n又是ECMAscript规定的Global对象，这就意味着在网页中定义的任意变量，函数，对象都是以window作为Global对象。\n\n所有在全局作用域中声明的变量，函数，对象都会作为window的属性和方法。\n\n```JS\nvar age = 24;\n\nfunction printNamr() {\n    console.log(age);\n}\n\nconsole.log(window.age);\nwindow.printName();\n```\n\n***\n\n### window对象属性\n\n#### window.innerHeight属性，window.innerWidth属性\n\n这两个属性返回网页的CSS布局占据的浏览器窗口的高度和宽度，单位为像素。\n很显然，当用户放大网页的时候（比如将网页从100%的大小放大为200%），这两个属性会变小。\n\n注意，这两个属性值包括滚动条的高度和宽度。\n\n***\n\n#### scrollX，scrollY\n\n1. scrollX: 滚动条横向偏移\n2. scrollY: 滚动条纵向偏移\n\n***\n\n#### scrollTo，scrollBy,scroll\n\n我们也可以通过方法scrollTo或者scroll方法改变滚动条位置到指定坐标\n\n```JS\nwindow.scrollTo(0,300);// 滚动条移动到300px处\n```\n\n两个参数分别是水平，垂直方向偏移\n\nscrollBy可以相对当前位置移动滚动条，而不是移动到绝对位置\n\n```JS\nscrollBy(0,100); //滚动条下移100px\n```\n\n***\n\n#### navigator\n\nWindow对象的navigator属性，指向一个包含浏览器相关信息的对象。\nnavigator.userAgent属性返回浏览器的User-Agent字符串，用来标示浏览器的种类。\n下面是Chrome浏览器的User-Agent。\n\n```JS\nnavigator.userAgent\n```\n\n通过userAgent属性识别浏览器，不是一个好办法。因为必须考虑所有的情况（不同的浏览器不同的版本）\n非常麻烦，而且步伐保证未来的适用性，更何况各种上网设备层出不穷。\n所以，现在一般不再识别浏览器了，而是使用“功能识别”方法，即逐一测试当前浏览器是否支持要用到的JavaScript功能。\n\n***\n\n#### screen\n\nscreen对象包含了显示设备的信息。\n\n```JS\n// 显示设备的高度，单位为像素\nscreen.height\n// 1920\n\n// 显示设备的宽度，单位为像素\nscreen.width\n// 1080\n```\n\n***\n\n#### URL的编码/解码方法\n\nJavascript提供四个URL的编码/解码方法\n\n1. decodeURI（）\n2. decodeURIComponent（）\n3. encodeURI（）\n4. encodeURIComponent（）\n\n区别\n\nencodeURI方法不会对下列字符编码\n\n```\n1. ASCII字母\n2. 数字\n3. 字符号\n```\n\nencodeURIComponent方法不会对下列字符编码\n\n```\n1. ASCII字母\n2. 数字\n3. ~!*()'\n```\n\nencodeURIComponent会把所以http://编码成http:%3A%2F%2F\n而encodeURI不会。\nencodeURIComponent比encodeURI编码的范围更大。","source":"_posts/关于BOM对象.md","raw":"---\ntitle: About Brower Object Model\ndate: 2019-04-25 21:22:10\ntags:\n- BOM\nclearReading: true\nthumbnailImage: 20190425.png\nthumbnailImagePosition: left\ncoverImage: cover.jpg\ncoverCaption: \"Hello World, Hello Programming\"\ncoverSize: partial\ncomments: false\ncategories: Front-end Knowledge\n---\n\n关于BOM对象 \n<!--more-->\n### BOM\nBOM(Brower Object Model)是指浏览器对象模型，是用于描述这种对象与对象之间层次关系的模型,\n\n浏览器对象模型提供了独立于内容的，可以与浏览器窗口进行互动的对象结构。BOM由多个对象组成，\n其中代表浏览器窗口的window对象是BOM的顶层对象，其他对象都是该对象的子对象。   \n\n***\n\n### window\nBOM的核心是window对象，它表示浏览器的一个实例。在浏览器中，即是javascript访问浏览器窗口的一个接口，\n又是ECMAscript规定的Global对象，这就意味着在网页中定义的任意变量，函数，对象都是以window作为Global对象。\n\n所有在全局作用域中声明的变量，函数，对象都会作为window的属性和方法。\n\n```JS\nvar age = 24;\n\nfunction printNamr() {\n    console.log(age);\n}\n\nconsole.log(window.age);\nwindow.printName();\n```\n\n***\n\n### window对象属性\n\n#### window.innerHeight属性，window.innerWidth属性\n\n这两个属性返回网页的CSS布局占据的浏览器窗口的高度和宽度，单位为像素。\n很显然，当用户放大网页的时候（比如将网页从100%的大小放大为200%），这两个属性会变小。\n\n注意，这两个属性值包括滚动条的高度和宽度。\n\n***\n\n#### scrollX，scrollY\n\n1. scrollX: 滚动条横向偏移\n2. scrollY: 滚动条纵向偏移\n\n***\n\n#### scrollTo，scrollBy,scroll\n\n我们也可以通过方法scrollTo或者scroll方法改变滚动条位置到指定坐标\n\n```JS\nwindow.scrollTo(0,300);// 滚动条移动到300px处\n```\n\n两个参数分别是水平，垂直方向偏移\n\nscrollBy可以相对当前位置移动滚动条，而不是移动到绝对位置\n\n```JS\nscrollBy(0,100); //滚动条下移100px\n```\n\n***\n\n#### navigator\n\nWindow对象的navigator属性，指向一个包含浏览器相关信息的对象。\nnavigator.userAgent属性返回浏览器的User-Agent字符串，用来标示浏览器的种类。\n下面是Chrome浏览器的User-Agent。\n\n```JS\nnavigator.userAgent\n```\n\n通过userAgent属性识别浏览器，不是一个好办法。因为必须考虑所有的情况（不同的浏览器不同的版本）\n非常麻烦，而且步伐保证未来的适用性，更何况各种上网设备层出不穷。\n所以，现在一般不再识别浏览器了，而是使用“功能识别”方法，即逐一测试当前浏览器是否支持要用到的JavaScript功能。\n\n***\n\n#### screen\n\nscreen对象包含了显示设备的信息。\n\n```JS\n// 显示设备的高度，单位为像素\nscreen.height\n// 1920\n\n// 显示设备的宽度，单位为像素\nscreen.width\n// 1080\n```\n\n***\n\n#### URL的编码/解码方法\n\nJavascript提供四个URL的编码/解码方法\n\n1. decodeURI（）\n2. decodeURIComponent（）\n3. encodeURI（）\n4. encodeURIComponent（）\n\n区别\n\nencodeURI方法不会对下列字符编码\n\n```\n1. ASCII字母\n2. 数字\n3. 字符号\n```\n\nencodeURIComponent方法不会对下列字符编码\n\n```\n1. ASCII字母\n2. 数字\n3. ~!*()'\n```\n\nencodeURIComponent会把所以http://编码成http:%3A%2F%2F\n而encodeURI不会。\nencodeURIComponent比encodeURI编码的范围更大。","slug":"关于BOM对象","published":1,"updated":"2019-11-23T23:54:38.000Z","layout":"post","photos":[],"link":"","_id":"ck3it6k2n002wteyi0pxvpry6","content":"<p>关于BOM对象 </p>\n<a id=\"more\"></a>\n<h3 id=\"BOM\"><a href=\"#BOM\" class=\"headerlink\" title=\"BOM\"></a>BOM</h3><p>BOM(Brower Object Model)是指浏览器对象模型，是用于描述这种对象与对象之间层次关系的模型,</p>\n<p>浏览器对象模型提供了独立于内容的，可以与浏览器窗口进行互动的对象结构。BOM由多个对象组成，<br>其中代表浏览器窗口的window对象是BOM的顶层对象，其他对象都是该对象的子对象。   </p>\n<hr>\n<h3 id=\"window\"><a href=\"#window\" class=\"headerlink\" title=\"window\"></a>window</h3><p>BOM的核心是window对象，它表示浏览器的一个实例。在浏览器中，即是javascript访问浏览器窗口的一个接口，<br>又是ECMAscript规定的Global对象，这就意味着在网页中定义的任意变量，函数，对象都是以window作为Global对象。</p>\n<p>所有在全局作用域中声明的变量，函数，对象都会作为window的属性和方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"number\">24</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printNamr</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(age);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.age);</span><br><span class=\"line\"><span class=\"built_in\">window</span>.printName();</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"window对象属性\"><a href=\"#window对象属性\" class=\"headerlink\" title=\"window对象属性\"></a>window对象属性</h3><h4 id=\"window-innerHeight属性，window-innerWidth属性\"><a href=\"#window-innerHeight属性，window-innerWidth属性\" class=\"headerlink\" title=\"window.innerHeight属性，window.innerWidth属性\"></a>window.innerHeight属性，window.innerWidth属性</h4><p>这两个属性返回网页的CSS布局占据的浏览器窗口的高度和宽度，单位为像素。<br>很显然，当用户放大网页的时候（比如将网页从100%的大小放大为200%），这两个属性会变小。</p>\n<p>注意，这两个属性值包括滚动条的高度和宽度。</p>\n<hr>\n<h4 id=\"scrollX，scrollY\"><a href=\"#scrollX，scrollY\" class=\"headerlink\" title=\"scrollX，scrollY\"></a>scrollX，scrollY</h4><ol>\n<li>scrollX: 滚动条横向偏移</li>\n<li>scrollY: 滚动条纵向偏移</li>\n</ol>\n<hr>\n<h4 id=\"scrollTo，scrollBy-scroll\"><a href=\"#scrollTo，scrollBy-scroll\" class=\"headerlink\" title=\"scrollTo，scrollBy,scroll\"></a>scrollTo，scrollBy,scroll</h4><p>我们也可以通过方法scrollTo或者scroll方法改变滚动条位置到指定坐标</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.scrollTo(<span class=\"number\">0</span>,<span class=\"number\">300</span>);<span class=\"comment\">// 滚动条移动到300px处</span></span><br></pre></td></tr></table></figure>\n\n<p>两个参数分别是水平，垂直方向偏移</p>\n<p>scrollBy可以相对当前位置移动滚动条，而不是移动到绝对位置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scrollBy(<span class=\"number\">0</span>,<span class=\"number\">100</span>); <span class=\"comment\">//滚动条下移100px</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"navigator\"><a href=\"#navigator\" class=\"headerlink\" title=\"navigator\"></a>navigator</h4><p>Window对象的navigator属性，指向一个包含浏览器相关信息的对象。<br>navigator.userAgent属性返回浏览器的User-Agent字符串，用来标示浏览器的种类。<br>下面是Chrome浏览器的User-Agent。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">navigator.userAgent</span><br></pre></td></tr></table></figure>\n\n<p>通过userAgent属性识别浏览器，不是一个好办法。因为必须考虑所有的情况（不同的浏览器不同的版本）<br>非常麻烦，而且步伐保证未来的适用性，更何况各种上网设备层出不穷。<br>所以，现在一般不再识别浏览器了，而是使用“功能识别”方法，即逐一测试当前浏览器是否支持要用到的JavaScript功能。</p>\n<hr>\n<h4 id=\"screen\"><a href=\"#screen\" class=\"headerlink\" title=\"screen\"></a>screen</h4><p>screen对象包含了显示设备的信息。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 显示设备的高度，单位为像素</span></span><br><span class=\"line\">screen.height</span><br><span class=\"line\"><span class=\"comment\">// 1920</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 显示设备的宽度，单位为像素</span></span><br><span class=\"line\">screen.width</span><br><span class=\"line\"><span class=\"comment\">// 1080</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"URL的编码-解码方法\"><a href=\"#URL的编码-解码方法\" class=\"headerlink\" title=\"URL的编码/解码方法\"></a>URL的编码/解码方法</h4><p>Javascript提供四个URL的编码/解码方法</p>\n<ol>\n<li>decodeURI（）</li>\n<li>decodeURIComponent（）</li>\n<li>encodeURI（）</li>\n<li>encodeURIComponent（）</li>\n</ol>\n<p>区别</p>\n<p>encodeURI方法不会对下列字符编码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. ASCII字母</span><br><span class=\"line\">2. 数字</span><br><span class=\"line\">3. 字符号</span><br></pre></td></tr></table></figure>\n\n<p>encodeURIComponent方法不会对下列字符编码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. ASCII字母</span><br><span class=\"line\">2. 数字</span><br><span class=\"line\">3. ~!*()&apos;</span><br></pre></td></tr></table></figure>\n\n<p>encodeURIComponent会把所以http://编码成http:%3A%2F%2F<br>而encodeURI不会。<br>encodeURIComponent比encodeURI编码的范围更大。</p>\n","site":{"data":{}},"thumbnailImageUrl":"https://kisky3.github.io/2019/04/25/关于BOM对象/20190425.png","excerpt":"<p>关于BOM对象 </p>","more":"<h3 id=\"BOM\"><a href=\"#BOM\" class=\"headerlink\" title=\"BOM\"></a>BOM</h3><p>BOM(Brower Object Model)是指浏览器对象模型，是用于描述这种对象与对象之间层次关系的模型,</p>\n<p>浏览器对象模型提供了独立于内容的，可以与浏览器窗口进行互动的对象结构。BOM由多个对象组成，<br>其中代表浏览器窗口的window对象是BOM的顶层对象，其他对象都是该对象的子对象。   </p>\n<hr>\n<h3 id=\"window\"><a href=\"#window\" class=\"headerlink\" title=\"window\"></a>window</h3><p>BOM的核心是window对象，它表示浏览器的一个实例。在浏览器中，即是javascript访问浏览器窗口的一个接口，<br>又是ECMAscript规定的Global对象，这就意味着在网页中定义的任意变量，函数，对象都是以window作为Global对象。</p>\n<p>所有在全局作用域中声明的变量，函数，对象都会作为window的属性和方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"number\">24</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printNamr</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(age);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.age);</span><br><span class=\"line\"><span class=\"built_in\">window</span>.printName();</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"window对象属性\"><a href=\"#window对象属性\" class=\"headerlink\" title=\"window对象属性\"></a>window对象属性</h3><h4 id=\"window-innerHeight属性，window-innerWidth属性\"><a href=\"#window-innerHeight属性，window-innerWidth属性\" class=\"headerlink\" title=\"window.innerHeight属性，window.innerWidth属性\"></a>window.innerHeight属性，window.innerWidth属性</h4><p>这两个属性返回网页的CSS布局占据的浏览器窗口的高度和宽度，单位为像素。<br>很显然，当用户放大网页的时候（比如将网页从100%的大小放大为200%），这两个属性会变小。</p>\n<p>注意，这两个属性值包括滚动条的高度和宽度。</p>\n<hr>\n<h4 id=\"scrollX，scrollY\"><a href=\"#scrollX，scrollY\" class=\"headerlink\" title=\"scrollX，scrollY\"></a>scrollX，scrollY</h4><ol>\n<li>scrollX: 滚动条横向偏移</li>\n<li>scrollY: 滚动条纵向偏移</li>\n</ol>\n<hr>\n<h4 id=\"scrollTo，scrollBy-scroll\"><a href=\"#scrollTo，scrollBy-scroll\" class=\"headerlink\" title=\"scrollTo，scrollBy,scroll\"></a>scrollTo，scrollBy,scroll</h4><p>我们也可以通过方法scrollTo或者scroll方法改变滚动条位置到指定坐标</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.scrollTo(<span class=\"number\">0</span>,<span class=\"number\">300</span>);<span class=\"comment\">// 滚动条移动到300px处</span></span><br></pre></td></tr></table></figure>\n\n<p>两个参数分别是水平，垂直方向偏移</p>\n<p>scrollBy可以相对当前位置移动滚动条，而不是移动到绝对位置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scrollBy(<span class=\"number\">0</span>,<span class=\"number\">100</span>); <span class=\"comment\">//滚动条下移100px</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"navigator\"><a href=\"#navigator\" class=\"headerlink\" title=\"navigator\"></a>navigator</h4><p>Window对象的navigator属性，指向一个包含浏览器相关信息的对象。<br>navigator.userAgent属性返回浏览器的User-Agent字符串，用来标示浏览器的种类。<br>下面是Chrome浏览器的User-Agent。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">navigator.userAgent</span><br></pre></td></tr></table></figure>\n\n<p>通过userAgent属性识别浏览器，不是一个好办法。因为必须考虑所有的情况（不同的浏览器不同的版本）<br>非常麻烦，而且步伐保证未来的适用性，更何况各种上网设备层出不穷。<br>所以，现在一般不再识别浏览器了，而是使用“功能识别”方法，即逐一测试当前浏览器是否支持要用到的JavaScript功能。</p>\n<hr>\n<h4 id=\"screen\"><a href=\"#screen\" class=\"headerlink\" title=\"screen\"></a>screen</h4><p>screen对象包含了显示设备的信息。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 显示设备的高度，单位为像素</span></span><br><span class=\"line\">screen.height</span><br><span class=\"line\"><span class=\"comment\">// 1920</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 显示设备的宽度，单位为像素</span></span><br><span class=\"line\">screen.width</span><br><span class=\"line\"><span class=\"comment\">// 1080</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"URL的编码-解码方法\"><a href=\"#URL的编码-解码方法\" class=\"headerlink\" title=\"URL的编码/解码方法\"></a>URL的编码/解码方法</h4><p>Javascript提供四个URL的编码/解码方法</p>\n<ol>\n<li>decodeURI（）</li>\n<li>decodeURIComponent（）</li>\n<li>encodeURI（）</li>\n<li>encodeURIComponent（）</li>\n</ol>\n<p>区别</p>\n<p>encodeURI方法不会对下列字符编码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. ASCII字母</span><br><span class=\"line\">2. 数字</span><br><span class=\"line\">3. 字符号</span><br></pre></td></tr></table></figure>\n\n<p>encodeURIComponent方法不会对下列字符编码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. ASCII字母</span><br><span class=\"line\">2. 数字</span><br><span class=\"line\">3. ~!*()&apos;</span><br></pre></td></tr></table></figure>\n\n<p>encodeURIComponent会把所以http://编码成http:%3A%2F%2F<br>而encodeURI不会。<br>encodeURIComponent比encodeURI编码的范围更大。</p>"},{"title":"About CSS Float","date":"2018-12-30T14:00:12.000Z","clearReading":true,"thumbnailImage":"20181230.png","thumbnailImagePosition":"left","coverImage":"cover.jpg","coverCaption":"Hello World, Hello Programming","coverSize":"partial","comments":0,"_content":"\n关于CSS浮动\n<!--more-->\n\n### 浮动元素的特征\n一个浮动元素会向左或向右移动，直到其外边（outer edge）挨到包含块边沿或者另\n一个浮动盒的外边。\n如果存在行盒，浮动盒的外top会与当前行盒的top对齐。\n如果没有足够的水平空间来浮动，它会向下移动，直到空间合适或者不会再出现其他浮动了。\n块级元素设置浮动后会呈现出inline-block的感觉，宽度会收缩。\n行内元素设置浮动后会呈现块级的特性。比如可以设置宽高margin等。\n\n***\n\n### 浮动元素的效果及对其他元素的影响\n下面为浮动最简单的一个左浮动效果。\n有3个box，分别向左浮动。\n可以看到box原来为块级元素，本应该单独占据一行。但是设置左浮动之后，脱离文档流，依次向左移动。由于没有足够空间来让box3移动，便到了下一行。\n<img src=\"./1.png\" style=\"width:500px\">\n\n<br>\n如果改为右浮动的话，效果将变成box2，box1，box3。\n<img src=\"./2.png\" style=\"width:500px\">\n\n这个效果是因为浏览器渲染时，从上到下渲染代码。第一个是box1，便向右浮动，直至碰到外边缘便停止下来。第二个是box2接着向右浮动，直至碰到了box1的外边缘便停止浮动。最后是box3，向右浮动时没有足够空间便移到了下一行。\n\n有时浮动还会出现如下图卡住的现象。\n这是因为box3在向左浮动时，第一个碰到的是box1的外边缘，便停下来卡住了。\n\n<img src=\"./3.png\" style=\"width:500px\">\n\n当浮动元素与普通元素和文本有交集的时候会是什么情况呢。\n我们在box1下面加一个文本p作为文字，p背景色设置为黄色作为普通元素。其余box元素不变向左浮动。最终呈现效果如下图:\n\n<img src=\"./4.png\" style=\"width:500px\">\n<br>\n可以得出结论，box1把普通元素p遮挡住了，普通元素看不见浮动元素。但是普通元素内的文字是可以看到浮动元素的，所以就会围绕浮动元素显示。\n\n***\n\n### 关于如何清除浮动\n\n##### clear: left/clear right定义：\n要求该盒的top border边位于源文档中在此之前的元素形成的所有左/右浮动盒的bottom外边下方。\n\n也就是说当我们给一个元素设置了clear:left之后，它的文档流上方如果有左浮动元素，它就要位于该左浮动元素的下方。如果前面没有左浮动元素则不起效果。\nclear:right也同理。\n还有clear：both 就是该元素之前有左浮动元素或者右浮动元素都生效。\n\n##### 方法一\n\n在浮动元素的最后加上一个普通元素，设置clear:left,达到撑开容器的效果。\n\n<img src=\"./5.png\" style=\"width:500px\">\n\n##### 方法二\n\n给包含浮动元素的容器设置一个class伪元素来清除浮动。相当于在最下方添加了一个内容为空的块级元素。\n\n```CSS\n.clearfix::after {\n content:'';\ndisplay: block;\nclear: both;\n}\n```\n","source":"_posts/关于CSS浮动.md","raw":"---\ntitle: About CSS Float\ndate: 2018-12-30 23:00:12\ntags:\n- CSS\nclearReading: true\nthumbnailImage: 20181230.png\nthumbnailImagePosition: left\ncoverImage: cover.jpg\ncoverCaption: \"Hello World, Hello Programming\"\ncoverSize: partial\ncomments: false\ncategories: Front-end Knowledge\n---\n\n关于CSS浮动\n<!--more-->\n\n### 浮动元素的特征\n一个浮动元素会向左或向右移动，直到其外边（outer edge）挨到包含块边沿或者另\n一个浮动盒的外边。\n如果存在行盒，浮动盒的外top会与当前行盒的top对齐。\n如果没有足够的水平空间来浮动，它会向下移动，直到空间合适或者不会再出现其他浮动了。\n块级元素设置浮动后会呈现出inline-block的感觉，宽度会收缩。\n行内元素设置浮动后会呈现块级的特性。比如可以设置宽高margin等。\n\n***\n\n### 浮动元素的效果及对其他元素的影响\n下面为浮动最简单的一个左浮动效果。\n有3个box，分别向左浮动。\n可以看到box原来为块级元素，本应该单独占据一行。但是设置左浮动之后，脱离文档流，依次向左移动。由于没有足够空间来让box3移动，便到了下一行。\n<img src=\"./1.png\" style=\"width:500px\">\n\n<br>\n如果改为右浮动的话，效果将变成box2，box1，box3。\n<img src=\"./2.png\" style=\"width:500px\">\n\n这个效果是因为浏览器渲染时，从上到下渲染代码。第一个是box1，便向右浮动，直至碰到外边缘便停止下来。第二个是box2接着向右浮动，直至碰到了box1的外边缘便停止浮动。最后是box3，向右浮动时没有足够空间便移到了下一行。\n\n有时浮动还会出现如下图卡住的现象。\n这是因为box3在向左浮动时，第一个碰到的是box1的外边缘，便停下来卡住了。\n\n<img src=\"./3.png\" style=\"width:500px\">\n\n当浮动元素与普通元素和文本有交集的时候会是什么情况呢。\n我们在box1下面加一个文本p作为文字，p背景色设置为黄色作为普通元素。其余box元素不变向左浮动。最终呈现效果如下图:\n\n<img src=\"./4.png\" style=\"width:500px\">\n<br>\n可以得出结论，box1把普通元素p遮挡住了，普通元素看不见浮动元素。但是普通元素内的文字是可以看到浮动元素的，所以就会围绕浮动元素显示。\n\n***\n\n### 关于如何清除浮动\n\n##### clear: left/clear right定义：\n要求该盒的top border边位于源文档中在此之前的元素形成的所有左/右浮动盒的bottom外边下方。\n\n也就是说当我们给一个元素设置了clear:left之后，它的文档流上方如果有左浮动元素，它就要位于该左浮动元素的下方。如果前面没有左浮动元素则不起效果。\nclear:right也同理。\n还有clear：both 就是该元素之前有左浮动元素或者右浮动元素都生效。\n\n##### 方法一\n\n在浮动元素的最后加上一个普通元素，设置clear:left,达到撑开容器的效果。\n\n<img src=\"./5.png\" style=\"width:500px\">\n\n##### 方法二\n\n给包含浮动元素的容器设置一个class伪元素来清除浮动。相当于在最下方添加了一个内容为空的块级元素。\n\n```CSS\n.clearfix::after {\n content:'';\ndisplay: block;\nclear: both;\n}\n```\n","slug":"关于CSS浮动","published":1,"updated":"2019-11-23T23:54:38.000Z","layout":"post","photos":[],"link":"","_id":"ck3it6k2o0030teyiuzc6ilym","content":"<p>关于CSS浮动</p>\n<a id=\"more\"></a>\n\n<h3 id=\"浮动元素的特征\"><a href=\"#浮动元素的特征\" class=\"headerlink\" title=\"浮动元素的特征\"></a>浮动元素的特征</h3><p>一个浮动元素会向左或向右移动，直到其外边（outer edge）挨到包含块边沿或者另<br>一个浮动盒的外边。<br>如果存在行盒，浮动盒的外top会与当前行盒的top对齐。<br>如果没有足够的水平空间来浮动，它会向下移动，直到空间合适或者不会再出现其他浮动了。<br>块级元素设置浮动后会呈现出inline-block的感觉，宽度会收缩。<br>行内元素设置浮动后会呈现块级的特性。比如可以设置宽高margin等。</p>\n<hr>\n<h3 id=\"浮动元素的效果及对其他元素的影响\"><a href=\"#浮动元素的效果及对其他元素的影响\" class=\"headerlink\" title=\"浮动元素的效果及对其他元素的影响\"></a>浮动元素的效果及对其他元素的影响</h3><p>下面为浮动最简单的一个左浮动效果。<br>有3个box，分别向左浮动。<br>可以看到box原来为块级元素，本应该单独占据一行。但是设置左浮动之后，脱离文档流，依次向左移动。由于没有足够空间来让box3移动，便到了下一行。<br><img src=\"./1.png\" style=\"width:500px\"></p>\n<br>\n如果改为右浮动的话，效果将变成box2，box1，box3。\n<img src=\"./2.png\" style=\"width:500px\">\n\n<p>这个效果是因为浏览器渲染时，从上到下渲染代码。第一个是box1，便向右浮动，直至碰到外边缘便停止下来。第二个是box2接着向右浮动，直至碰到了box1的外边缘便停止浮动。最后是box3，向右浮动时没有足够空间便移到了下一行。</p>\n<p>有时浮动还会出现如下图卡住的现象。<br>这是因为box3在向左浮动时，第一个碰到的是box1的外边缘，便停下来卡住了。</p>\n<img src=\"./3.png\" style=\"width:500px\">\n\n<p>当浮动元素与普通元素和文本有交集的时候会是什么情况呢。<br>我们在box1下面加一个文本p作为文字，p背景色设置为黄色作为普通元素。其余box元素不变向左浮动。最终呈现效果如下图:</p>\n<img src=\"./4.png\" style=\"width:500px\">\n<br>\n可以得出结论，box1把普通元素p遮挡住了，普通元素看不见浮动元素。但是普通元素内的文字是可以看到浮动元素的，所以就会围绕浮动元素显示。\n\n<hr>\n<h3 id=\"关于如何清除浮动\"><a href=\"#关于如何清除浮动\" class=\"headerlink\" title=\"关于如何清除浮动\"></a>关于如何清除浮动</h3><h5 id=\"clear-left-clear-right定义：\"><a href=\"#clear-left-clear-right定义：\" class=\"headerlink\" title=\"clear: left/clear right定义：\"></a>clear: left/clear right定义：</h5><p>要求该盒的top border边位于源文档中在此之前的元素形成的所有左/右浮动盒的bottom外边下方。</p>\n<p>也就是说当我们给一个元素设置了clear:left之后，它的文档流上方如果有左浮动元素，它就要位于该左浮动元素的下方。如果前面没有左浮动元素则不起效果。<br>clear:right也同理。<br>还有clear：both 就是该元素之前有左浮动元素或者右浮动元素都生效。</p>\n<h5 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h5><p>在浮动元素的最后加上一个普通元素，设置clear:left,达到撑开容器的效果。</p>\n<img src=\"./5.png\" style=\"width:500px\">\n\n<h5 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h5><p>给包含浮动元素的容器设置一个class伪元素来清除浮动。相当于在最下方添加了一个内容为空的块级元素。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">::after</span> &#123;</span><br><span class=\"line\"> <span class=\"attribute\">content</span>:<span class=\"string\">''</span>;</span><br><span class=\"line\"><span class=\"attribute\">display</span>: block;</span><br><span class=\"line\"><span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"thumbnailImageUrl":"https://kisky3.github.io/2018/12/30/关于CSS浮动/20181230.png","excerpt":"<p>关于CSS浮动</p>","more":"<h3 id=\"浮动元素的特征\"><a href=\"#浮动元素的特征\" class=\"headerlink\" title=\"浮动元素的特征\"></a>浮动元素的特征</h3><p>一个浮动元素会向左或向右移动，直到其外边（outer edge）挨到包含块边沿或者另<br>一个浮动盒的外边。<br>如果存在行盒，浮动盒的外top会与当前行盒的top对齐。<br>如果没有足够的水平空间来浮动，它会向下移动，直到空间合适或者不会再出现其他浮动了。<br>块级元素设置浮动后会呈现出inline-block的感觉，宽度会收缩。<br>行内元素设置浮动后会呈现块级的特性。比如可以设置宽高margin等。</p>\n<hr>\n<h3 id=\"浮动元素的效果及对其他元素的影响\"><a href=\"#浮动元素的效果及对其他元素的影响\" class=\"headerlink\" title=\"浮动元素的效果及对其他元素的影响\"></a>浮动元素的效果及对其他元素的影响</h3><p>下面为浮动最简单的一个左浮动效果。<br>有3个box，分别向左浮动。<br>可以看到box原来为块级元素，本应该单独占据一行。但是设置左浮动之后，脱离文档流，依次向左移动。由于没有足够空间来让box3移动，便到了下一行。<br><img src=\"./1.png\" style=\"width:500px\"></p>\n<br>\n如果改为右浮动的话，效果将变成box2，box1，box3。\n<img src=\"./2.png\" style=\"width:500px\">\n\n<p>这个效果是因为浏览器渲染时，从上到下渲染代码。第一个是box1，便向右浮动，直至碰到外边缘便停止下来。第二个是box2接着向右浮动，直至碰到了box1的外边缘便停止浮动。最后是box3，向右浮动时没有足够空间便移到了下一行。</p>\n<p>有时浮动还会出现如下图卡住的现象。<br>这是因为box3在向左浮动时，第一个碰到的是box1的外边缘，便停下来卡住了。</p>\n<img src=\"./3.png\" style=\"width:500px\">\n\n<p>当浮动元素与普通元素和文本有交集的时候会是什么情况呢。<br>我们在box1下面加一个文本p作为文字，p背景色设置为黄色作为普通元素。其余box元素不变向左浮动。最终呈现效果如下图:</p>\n<img src=\"./4.png\" style=\"width:500px\">\n<br>\n可以得出结论，box1把普通元素p遮挡住了，普通元素看不见浮动元素。但是普通元素内的文字是可以看到浮动元素的，所以就会围绕浮动元素显示。\n\n<hr>\n<h3 id=\"关于如何清除浮动\"><a href=\"#关于如何清除浮动\" class=\"headerlink\" title=\"关于如何清除浮动\"></a>关于如何清除浮动</h3><h5 id=\"clear-left-clear-right定义：\"><a href=\"#clear-left-clear-right定义：\" class=\"headerlink\" title=\"clear: left/clear right定义：\"></a>clear: left/clear right定义：</h5><p>要求该盒的top border边位于源文档中在此之前的元素形成的所有左/右浮动盒的bottom外边下方。</p>\n<p>也就是说当我们给一个元素设置了clear:left之后，它的文档流上方如果有左浮动元素，它就要位于该左浮动元素的下方。如果前面没有左浮动元素则不起效果。<br>clear:right也同理。<br>还有clear：both 就是该元素之前有左浮动元素或者右浮动元素都生效。</p>\n<h5 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h5><p>在浮动元素的最后加上一个普通元素，设置clear:left,达到撑开容器的效果。</p>\n<img src=\"./5.png\" style=\"width:500px\">\n\n<h5 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h5><p>给包含浮动元素的容器设置一个class伪元素来清除浮动。相当于在最下方添加了一个内容为空的块级元素。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">::after</span> &#123;</span><br><span class=\"line\"> <span class=\"attribute\">content</span>:<span class=\"string\">''</span>;</span><br><span class=\"line\"><span class=\"attribute\">display</span>: block;</span><br><span class=\"line\"><span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"About Css Inherit","date":"2018-11-25T09:12:40.000Z","clearReading":true,"thumbnailImage":"20181125.png","thumbnailImagePosition":"left","coverImage":"cover.jpg","coverCaption":"Hello World, Hello Programming","coverSize":"partial","comments":0,"_content":"\n关于CSS继承 \n<!--more-->\n### 什么是 CSS 继承?\nCSS继承是指子元素能够拥有和父元素一样的属性。不用特地在子元素上定义但是也能在页面上展示出来。\n\n***\n\n#### 哪些属性能继承\n1.字体系列属性\n- font：组合字体\n- font-family：规定元素的字体系列\n- font-weight：设置字体的粗细\n- font-size：设置字体的尺寸\n- font-style：定义字体的风格\n- font-variant：设置小型大写字母的字体显示文本，这意味着所有的小写字母均会被转换为大写，但是所有使用小型大写字体的字母与其余文本相比，其字体尺寸更小。\n- font-stretch：对当前的 font-family 进行伸缩变形。所有主流浏览器都不支持。\n- font-size-adjust：为某个元素规定一个 aspect 值，这样就可以保持首选字体的 x-height。\n\n2、文本系列属性\n- text-indent：文本缩进\n- text-align：文本水平对齐\n- line-height：行高\n- word-spacing：增加或减少单词间的空白（即字间隔）\n- letter-spacing：增加或减少字符间的空白（字符间距）\n- text-transform：控制文本大小写\n- direction：规定文本的书写方向\n- color：文本颜色\n\n3、元素可见性：\n- visibility\n\n4、表格布局属性：\n- caption-side\n- border-collapse\n- border-spacing\n- empty-cells\n- table-layout\n\n5、列表布局属性：\n- list-style-type\n- list-style-image\n- list-style-position\n- list-style\n\n6、生成内容属性：\n- quotes\n\n7、光标属性：\n- cursor\n\n8、页面样式属性：\n- page\n- page-break-inside\n- windows\n- orphans\n\n9、声音样式属性：\n- speak\n- speak-punctuation\n- speak-numeral\n- speak-header\n- speech-rate\n- volume\n- voice-family\n- pitch\n- pitch-range\n- stress\n- richness\n- azimuth\n- elevation\n\n***\n\n### 二、有继承性的属性\n1、字体系列属性\n- font：组合字体\n- font-family：规定元素的字体系列\n- font-weight：设置字体的粗细\n- font-size：设置字体的尺寸\n- font-style：定义字体的风格\n- font-variant：设置小型大写字母的字体显示文本，这意味着所有的小写字母均会被转换为大写，但是所有使用小型大写字体的字母与其余文本相比，其字体尺寸更小。\n- font-stretch：对当前的 font-family 进行伸缩变形。所有主流浏览器都不支持。\n- font-size-adjust：为某个元素规定一个 aspect 值，这样就可以保持首选字体的 x-height。\n\n2、文本系列属性\n- text-indent：文本缩进\n- text-align：文本水平对齐\n- line-height：行高\n- word-spacing：增加或减少单词间的空白（即字间隔）\n- letter-spacing：增加或减少字符间的空白（字符间距）\n- text-transform：控制文本大小写\n- direction：规定文本的书写方向\n- color：文本颜色\n\n3、元素可见性：\n- visibility\n\n4、表格布局属性：\n- caption-side\n- border-collapse\n- border-spacing\n- empty-cells\n- table-layout\n\n5、列表布局属性：\n- list-style-type\n- list-style-image\n- list-style-position\n- list-style\n\n6、生成内容属性：\n- quotes\n\n7、光标属性：\n- cursor\n\n8、页面样式属性：\n- page\n- page-break-inside\n- windows\n- orphans\n\n9、声音样式属性：\n- speak\n- speak-punctuation\n- speak-numeral\n- speak-header\n- speech-rate\n- volume\n- voice-family\n- pitch\n- pitch-range\n- stress\n- richness\n- azimuth\n- elevation\n\n***\n### 三、所有元素可以继承的属性\n1、元素可见性：\n- visibility\n\n2、光标属性：\n- cursor\n\n***\n\n### 四、内联元素可以继承的属性\n1、字体系列属性\n2、除text-indent、text-align之外的文本系列属性\n\n***\n\n### 五、块级元素可以继承的属性\n1、text-indent、text-align","source":"_posts/关于CSS继承.md","raw":"---\ntitle: About Css Inherit\ndate: 2018-11-25 18:12:40\ntags:\n- CSS\nclearReading: true\nthumbnailImage: 20181125.png\nthumbnailImagePosition: left\ncoverImage: cover.jpg\ncoverCaption: \"Hello World, Hello Programming\"\ncoverSize: partial\ncomments: false\ncategories: Front-end Knowledge\n---\n\n关于CSS继承 \n<!--more-->\n### 什么是 CSS 继承?\nCSS继承是指子元素能够拥有和父元素一样的属性。不用特地在子元素上定义但是也能在页面上展示出来。\n\n***\n\n#### 哪些属性能继承\n1.字体系列属性\n- font：组合字体\n- font-family：规定元素的字体系列\n- font-weight：设置字体的粗细\n- font-size：设置字体的尺寸\n- font-style：定义字体的风格\n- font-variant：设置小型大写字母的字体显示文本，这意味着所有的小写字母均会被转换为大写，但是所有使用小型大写字体的字母与其余文本相比，其字体尺寸更小。\n- font-stretch：对当前的 font-family 进行伸缩变形。所有主流浏览器都不支持。\n- font-size-adjust：为某个元素规定一个 aspect 值，这样就可以保持首选字体的 x-height。\n\n2、文本系列属性\n- text-indent：文本缩进\n- text-align：文本水平对齐\n- line-height：行高\n- word-spacing：增加或减少单词间的空白（即字间隔）\n- letter-spacing：增加或减少字符间的空白（字符间距）\n- text-transform：控制文本大小写\n- direction：规定文本的书写方向\n- color：文本颜色\n\n3、元素可见性：\n- visibility\n\n4、表格布局属性：\n- caption-side\n- border-collapse\n- border-spacing\n- empty-cells\n- table-layout\n\n5、列表布局属性：\n- list-style-type\n- list-style-image\n- list-style-position\n- list-style\n\n6、生成内容属性：\n- quotes\n\n7、光标属性：\n- cursor\n\n8、页面样式属性：\n- page\n- page-break-inside\n- windows\n- orphans\n\n9、声音样式属性：\n- speak\n- speak-punctuation\n- speak-numeral\n- speak-header\n- speech-rate\n- volume\n- voice-family\n- pitch\n- pitch-range\n- stress\n- richness\n- azimuth\n- elevation\n\n***\n\n### 二、有继承性的属性\n1、字体系列属性\n- font：组合字体\n- font-family：规定元素的字体系列\n- font-weight：设置字体的粗细\n- font-size：设置字体的尺寸\n- font-style：定义字体的风格\n- font-variant：设置小型大写字母的字体显示文本，这意味着所有的小写字母均会被转换为大写，但是所有使用小型大写字体的字母与其余文本相比，其字体尺寸更小。\n- font-stretch：对当前的 font-family 进行伸缩变形。所有主流浏览器都不支持。\n- font-size-adjust：为某个元素规定一个 aspect 值，这样就可以保持首选字体的 x-height。\n\n2、文本系列属性\n- text-indent：文本缩进\n- text-align：文本水平对齐\n- line-height：行高\n- word-spacing：增加或减少单词间的空白（即字间隔）\n- letter-spacing：增加或减少字符间的空白（字符间距）\n- text-transform：控制文本大小写\n- direction：规定文本的书写方向\n- color：文本颜色\n\n3、元素可见性：\n- visibility\n\n4、表格布局属性：\n- caption-side\n- border-collapse\n- border-spacing\n- empty-cells\n- table-layout\n\n5、列表布局属性：\n- list-style-type\n- list-style-image\n- list-style-position\n- list-style\n\n6、生成内容属性：\n- quotes\n\n7、光标属性：\n- cursor\n\n8、页面样式属性：\n- page\n- page-break-inside\n- windows\n- orphans\n\n9、声音样式属性：\n- speak\n- speak-punctuation\n- speak-numeral\n- speak-header\n- speech-rate\n- volume\n- voice-family\n- pitch\n- pitch-range\n- stress\n- richness\n- azimuth\n- elevation\n\n***\n### 三、所有元素可以继承的属性\n1、元素可见性：\n- visibility\n\n2、光标属性：\n- cursor\n\n***\n\n### 四、内联元素可以继承的属性\n1、字体系列属性\n2、除text-indent、text-align之外的文本系列属性\n\n***\n\n### 五、块级元素可以继承的属性\n1、text-indent、text-align","slug":"关于CSS继承","published":1,"updated":"2019-11-23T23:54:38.000Z","layout":"post","photos":[],"link":"","_id":"ck3it6k2p0033teyiem55cn48","content":"<p>关于CSS继承 </p>\n<a id=\"more\"></a>\n<h3 id=\"什么是-CSS-继承\"><a href=\"#什么是-CSS-继承\" class=\"headerlink\" title=\"什么是 CSS 继承?\"></a>什么是 CSS 继承?</h3><p>CSS继承是指子元素能够拥有和父元素一样的属性。不用特地在子元素上定义但是也能在页面上展示出来。</p>\n<hr>\n<h4 id=\"哪些属性能继承\"><a href=\"#哪些属性能继承\" class=\"headerlink\" title=\"哪些属性能继承\"></a>哪些属性能继承</h4><p>1.字体系列属性</p>\n<ul>\n<li>font：组合字体</li>\n<li>font-family：规定元素的字体系列</li>\n<li>font-weight：设置字体的粗细</li>\n<li>font-size：设置字体的尺寸</li>\n<li>font-style：定义字体的风格</li>\n<li>font-variant：设置小型大写字母的字体显示文本，这意味着所有的小写字母均会被转换为大写，但是所有使用小型大写字体的字母与其余文本相比，其字体尺寸更小。</li>\n<li>font-stretch：对当前的 font-family 进行伸缩变形。所有主流浏览器都不支持。</li>\n<li>font-size-adjust：为某个元素规定一个 aspect 值，这样就可以保持首选字体的 x-height。</li>\n</ul>\n<p>2、文本系列属性</p>\n<ul>\n<li>text-indent：文本缩进</li>\n<li>text-align：文本水平对齐</li>\n<li>line-height：行高</li>\n<li>word-spacing：增加或减少单词间的空白（即字间隔）</li>\n<li>letter-spacing：增加或减少字符间的空白（字符间距）</li>\n<li>text-transform：控制文本大小写</li>\n<li>direction：规定文本的书写方向</li>\n<li>color：文本颜色</li>\n</ul>\n<p>3、元素可见性：</p>\n<ul>\n<li>visibility</li>\n</ul>\n<p>4、表格布局属性：</p>\n<ul>\n<li>caption-side</li>\n<li>border-collapse</li>\n<li>border-spacing</li>\n<li>empty-cells</li>\n<li>table-layout</li>\n</ul>\n<p>5、列表布局属性：</p>\n<ul>\n<li>list-style-type</li>\n<li>list-style-image</li>\n<li>list-style-position</li>\n<li>list-style</li>\n</ul>\n<p>6、生成内容属性：</p>\n<ul>\n<li>quotes</li>\n</ul>\n<p>7、光标属性：</p>\n<ul>\n<li>cursor</li>\n</ul>\n<p>8、页面样式属性：</p>\n<ul>\n<li>page</li>\n<li>page-break-inside</li>\n<li>windows</li>\n<li>orphans</li>\n</ul>\n<p>9、声音样式属性：</p>\n<ul>\n<li>speak</li>\n<li>speak-punctuation</li>\n<li>speak-numeral</li>\n<li>speak-header</li>\n<li>speech-rate</li>\n<li>volume</li>\n<li>voice-family</li>\n<li>pitch</li>\n<li>pitch-range</li>\n<li>stress</li>\n<li>richness</li>\n<li>azimuth</li>\n<li>elevation</li>\n</ul>\n<hr>\n<h3 id=\"二、有继承性的属性\"><a href=\"#二、有继承性的属性\" class=\"headerlink\" title=\"二、有继承性的属性\"></a>二、有继承性的属性</h3><p>1、字体系列属性</p>\n<ul>\n<li>font：组合字体</li>\n<li>font-family：规定元素的字体系列</li>\n<li>font-weight：设置字体的粗细</li>\n<li>font-size：设置字体的尺寸</li>\n<li>font-style：定义字体的风格</li>\n<li>font-variant：设置小型大写字母的字体显示文本，这意味着所有的小写字母均会被转换为大写，但是所有使用小型大写字体的字母与其余文本相比，其字体尺寸更小。</li>\n<li>font-stretch：对当前的 font-family 进行伸缩变形。所有主流浏览器都不支持。</li>\n<li>font-size-adjust：为某个元素规定一个 aspect 值，这样就可以保持首选字体的 x-height。</li>\n</ul>\n<p>2、文本系列属性</p>\n<ul>\n<li>text-indent：文本缩进</li>\n<li>text-align：文本水平对齐</li>\n<li>line-height：行高</li>\n<li>word-spacing：增加或减少单词间的空白（即字间隔）</li>\n<li>letter-spacing：增加或减少字符间的空白（字符间距）</li>\n<li>text-transform：控制文本大小写</li>\n<li>direction：规定文本的书写方向</li>\n<li>color：文本颜色</li>\n</ul>\n<p>3、元素可见性：</p>\n<ul>\n<li>visibility</li>\n</ul>\n<p>4、表格布局属性：</p>\n<ul>\n<li>caption-side</li>\n<li>border-collapse</li>\n<li>border-spacing</li>\n<li>empty-cells</li>\n<li>table-layout</li>\n</ul>\n<p>5、列表布局属性：</p>\n<ul>\n<li>list-style-type</li>\n<li>list-style-image</li>\n<li>list-style-position</li>\n<li>list-style</li>\n</ul>\n<p>6、生成内容属性：</p>\n<ul>\n<li>quotes</li>\n</ul>\n<p>7、光标属性：</p>\n<ul>\n<li>cursor</li>\n</ul>\n<p>8、页面样式属性：</p>\n<ul>\n<li>page</li>\n<li>page-break-inside</li>\n<li>windows</li>\n<li>orphans</li>\n</ul>\n<p>9、声音样式属性：</p>\n<ul>\n<li>speak</li>\n<li>speak-punctuation</li>\n<li>speak-numeral</li>\n<li>speak-header</li>\n<li>speech-rate</li>\n<li>volume</li>\n<li>voice-family</li>\n<li>pitch</li>\n<li>pitch-range</li>\n<li>stress</li>\n<li>richness</li>\n<li>azimuth</li>\n<li>elevation</li>\n</ul>\n<hr>\n<h3 id=\"三、所有元素可以继承的属性\"><a href=\"#三、所有元素可以继承的属性\" class=\"headerlink\" title=\"三、所有元素可以继承的属性\"></a>三、所有元素可以继承的属性</h3><p>1、元素可见性：</p>\n<ul>\n<li>visibility</li>\n</ul>\n<p>2、光标属性：</p>\n<ul>\n<li>cursor</li>\n</ul>\n<hr>\n<h3 id=\"四、内联元素可以继承的属性\"><a href=\"#四、内联元素可以继承的属性\" class=\"headerlink\" title=\"四、内联元素可以继承的属性\"></a>四、内联元素可以继承的属性</h3><p>1、字体系列属性<br>2、除text-indent、text-align之外的文本系列属性</p>\n<hr>\n<h3 id=\"五、块级元素可以继承的属性\"><a href=\"#五、块级元素可以继承的属性\" class=\"headerlink\" title=\"五、块级元素可以继承的属性\"></a>五、块级元素可以继承的属性</h3><p>1、text-indent、text-align</p>\n","site":{"data":{}},"thumbnailImageUrl":"https://kisky3.github.io/2018/11/25/关于CSS继承/20181125.png","excerpt":"<p>关于CSS继承 </p>","more":"<h3 id=\"什么是-CSS-继承\"><a href=\"#什么是-CSS-继承\" class=\"headerlink\" title=\"什么是 CSS 继承?\"></a>什么是 CSS 继承?</h3><p>CSS继承是指子元素能够拥有和父元素一样的属性。不用特地在子元素上定义但是也能在页面上展示出来。</p>\n<hr>\n<h4 id=\"哪些属性能继承\"><a href=\"#哪些属性能继承\" class=\"headerlink\" title=\"哪些属性能继承\"></a>哪些属性能继承</h4><p>1.字体系列属性</p>\n<ul>\n<li>font：组合字体</li>\n<li>font-family：规定元素的字体系列</li>\n<li>font-weight：设置字体的粗细</li>\n<li>font-size：设置字体的尺寸</li>\n<li>font-style：定义字体的风格</li>\n<li>font-variant：设置小型大写字母的字体显示文本，这意味着所有的小写字母均会被转换为大写，但是所有使用小型大写字体的字母与其余文本相比，其字体尺寸更小。</li>\n<li>font-stretch：对当前的 font-family 进行伸缩变形。所有主流浏览器都不支持。</li>\n<li>font-size-adjust：为某个元素规定一个 aspect 值，这样就可以保持首选字体的 x-height。</li>\n</ul>\n<p>2、文本系列属性</p>\n<ul>\n<li>text-indent：文本缩进</li>\n<li>text-align：文本水平对齐</li>\n<li>line-height：行高</li>\n<li>word-spacing：增加或减少单词间的空白（即字间隔）</li>\n<li>letter-spacing：增加或减少字符间的空白（字符间距）</li>\n<li>text-transform：控制文本大小写</li>\n<li>direction：规定文本的书写方向</li>\n<li>color：文本颜色</li>\n</ul>\n<p>3、元素可见性：</p>\n<ul>\n<li>visibility</li>\n</ul>\n<p>4、表格布局属性：</p>\n<ul>\n<li>caption-side</li>\n<li>border-collapse</li>\n<li>border-spacing</li>\n<li>empty-cells</li>\n<li>table-layout</li>\n</ul>\n<p>5、列表布局属性：</p>\n<ul>\n<li>list-style-type</li>\n<li>list-style-image</li>\n<li>list-style-position</li>\n<li>list-style</li>\n</ul>\n<p>6、生成内容属性：</p>\n<ul>\n<li>quotes</li>\n</ul>\n<p>7、光标属性：</p>\n<ul>\n<li>cursor</li>\n</ul>\n<p>8、页面样式属性：</p>\n<ul>\n<li>page</li>\n<li>page-break-inside</li>\n<li>windows</li>\n<li>orphans</li>\n</ul>\n<p>9、声音样式属性：</p>\n<ul>\n<li>speak</li>\n<li>speak-punctuation</li>\n<li>speak-numeral</li>\n<li>speak-header</li>\n<li>speech-rate</li>\n<li>volume</li>\n<li>voice-family</li>\n<li>pitch</li>\n<li>pitch-range</li>\n<li>stress</li>\n<li>richness</li>\n<li>azimuth</li>\n<li>elevation</li>\n</ul>\n<hr>\n<h3 id=\"二、有继承性的属性\"><a href=\"#二、有继承性的属性\" class=\"headerlink\" title=\"二、有继承性的属性\"></a>二、有继承性的属性</h3><p>1、字体系列属性</p>\n<ul>\n<li>font：组合字体</li>\n<li>font-family：规定元素的字体系列</li>\n<li>font-weight：设置字体的粗细</li>\n<li>font-size：设置字体的尺寸</li>\n<li>font-style：定义字体的风格</li>\n<li>font-variant：设置小型大写字母的字体显示文本，这意味着所有的小写字母均会被转换为大写，但是所有使用小型大写字体的字母与其余文本相比，其字体尺寸更小。</li>\n<li>font-stretch：对当前的 font-family 进行伸缩变形。所有主流浏览器都不支持。</li>\n<li>font-size-adjust：为某个元素规定一个 aspect 值，这样就可以保持首选字体的 x-height。</li>\n</ul>\n<p>2、文本系列属性</p>\n<ul>\n<li>text-indent：文本缩进</li>\n<li>text-align：文本水平对齐</li>\n<li>line-height：行高</li>\n<li>word-spacing：增加或减少单词间的空白（即字间隔）</li>\n<li>letter-spacing：增加或减少字符间的空白（字符间距）</li>\n<li>text-transform：控制文本大小写</li>\n<li>direction：规定文本的书写方向</li>\n<li>color：文本颜色</li>\n</ul>\n<p>3、元素可见性：</p>\n<ul>\n<li>visibility</li>\n</ul>\n<p>4、表格布局属性：</p>\n<ul>\n<li>caption-side</li>\n<li>border-collapse</li>\n<li>border-spacing</li>\n<li>empty-cells</li>\n<li>table-layout</li>\n</ul>\n<p>5、列表布局属性：</p>\n<ul>\n<li>list-style-type</li>\n<li>list-style-image</li>\n<li>list-style-position</li>\n<li>list-style</li>\n</ul>\n<p>6、生成内容属性：</p>\n<ul>\n<li>quotes</li>\n</ul>\n<p>7、光标属性：</p>\n<ul>\n<li>cursor</li>\n</ul>\n<p>8、页面样式属性：</p>\n<ul>\n<li>page</li>\n<li>page-break-inside</li>\n<li>windows</li>\n<li>orphans</li>\n</ul>\n<p>9、声音样式属性：</p>\n<ul>\n<li>speak</li>\n<li>speak-punctuation</li>\n<li>speak-numeral</li>\n<li>speak-header</li>\n<li>speech-rate</li>\n<li>volume</li>\n<li>voice-family</li>\n<li>pitch</li>\n<li>pitch-range</li>\n<li>stress</li>\n<li>richness</li>\n<li>azimuth</li>\n<li>elevation</li>\n</ul>\n<hr>\n<h3 id=\"三、所有元素可以继承的属性\"><a href=\"#三、所有元素可以继承的属性\" class=\"headerlink\" title=\"三、所有元素可以继承的属性\"></a>三、所有元素可以继承的属性</h3><p>1、元素可见性：</p>\n<ul>\n<li>visibility</li>\n</ul>\n<p>2、光标属性：</p>\n<ul>\n<li>cursor</li>\n</ul>\n<hr>\n<h3 id=\"四、内联元素可以继承的属性\"><a href=\"#四、内联元素可以继承的属性\" class=\"headerlink\" title=\"四、内联元素可以继承的属性\"></a>四、内联元素可以继承的属性</h3><p>1、字体系列属性<br>2、除text-indent、text-align之外的文本系列属性</p>\n<hr>\n<h3 id=\"五、块级元素可以继承的属性\"><a href=\"#五、块级元素可以继承的属性\" class=\"headerlink\" title=\"五、块级元素可以继承的属性\"></a>五、块级元素可以继承的属性</h3><p>1、text-indent、text-align</p>"},{"title":"About LocalStorage,Cookie And Session","date":"2019-05-10T12:30:55.000Z","clearReading":true,"thumbnailImage":"20190510.png","thumbnailImagePosition":"left","coverImage":"cover.jpg","coverCaption":"Hello World, Hello Programming","coverSize":"partial","comments":0,"_content":"\n关于LocalStorage,Cookie和Session \n<!--more-->\n\n### Cookie\n网页的application下的Storage里的Cookie里可以看到Cookie的信息。网站只要设计登陆功能就一定会用到Cookie。\n\nCookie可以把一些需要存储的信息存储在当前的页面下。\n\n<img src=\"./1.png\" style=\"width:500px\">\n\n包括Name和Value等。Domain表示在哪个域下是生效的。Path表示是否有下级的Path。Expries表示生效时间。设置Cookie时会设置生效时间，过了该时间之后则会失效。\n\n当输入URL时，服务器会发送响应头，里面包含Set-Cookie，便可以设定Cookie。\n\n<img src=\"./3.png\" style=\"width:500px\">\n\n当Cookie被保存在浏览器之后，再次刷新网页时，因为Cookie已经存在，所以响应头上就不会再带有同样的Set-Cookie了。\n\n当浏览器被种下Cookie时，之后浏览器向该域名发送请求，比如请求图片等时，请求头都会带上Cookie。\n\n<img src=\"./4.png\" style=\"width:500px\">\n\n关于Cookie，综上：\n\n<img src=\"./5.png\" style=\"width:500px\">\n\n***\n\n### Session\n\n当一个用户打开淘宝登陆后，刷新浏览器仍然显示登陆状态。服务器如何分辨这次发起请求的用户是刚才登陆过的用户呢。\n用户没有登陆时，在地址栏输入URL向服务器发送请求时，服务器看到该URL发送的请求头并没有带上Cookie，便可以知道用户没有登陆，于是便在自己服务器里创建了一个对象（一串数据），这个对象里有一个随机id，这个对象就是session。在服务器向浏览器发送响应头的时候，加上了Set-Cookie，把id给set上，当用户再次打开该网站的时候，就有了这个Cookie。\n当用户再次刷新页面的时候，请求头带上了这个Coolie，服务器通过接收到的id和当时存在的对象进行对比，得出是该用户再次访问了该页面。\n可以认为session是结合Cookie实行的一种机制，用于识别用户的身份。\nsession对象可以存在服务器内存中，也可以保存在数据库中。\n\n<img src=\"./6.png\" style=\"width:500px\">\n\n***\n\n### LocalStorage\n\nlocalStorage就是一个存数据的地方，将数据存到浏览器里。\n特点是存储数据量大，并且不会失效。\n\n<img src=\"./2.png\" style=\"width:500px\">\n\nLocalStorage对应一个key和value，可以存储很多的内容，并且没有过期的时效。\n\n<img src=\"./7.png\" style=\"width:500px\">\n","source":"_posts/关于LocalStorage-cookie和session.md","raw":"---\ntitle: About LocalStorage,Cookie And Session\ndate: 2019-05-10 21:30:55\ntags:\n- Session\n- LocalStorage\n- Cookie\nclearReading: true\nthumbnailImage: 20190510.png\nthumbnailImagePosition: left\ncoverImage: cover.jpg\ncoverCaption: \"Hello World, Hello Programming\"\ncoverSize: partial\ncomments: false\ncategories: Front-end Knowledge\n---\n\n关于LocalStorage,Cookie和Session \n<!--more-->\n\n### Cookie\n网页的application下的Storage里的Cookie里可以看到Cookie的信息。网站只要设计登陆功能就一定会用到Cookie。\n\nCookie可以把一些需要存储的信息存储在当前的页面下。\n\n<img src=\"./1.png\" style=\"width:500px\">\n\n包括Name和Value等。Domain表示在哪个域下是生效的。Path表示是否有下级的Path。Expries表示生效时间。设置Cookie时会设置生效时间，过了该时间之后则会失效。\n\n当输入URL时，服务器会发送响应头，里面包含Set-Cookie，便可以设定Cookie。\n\n<img src=\"./3.png\" style=\"width:500px\">\n\n当Cookie被保存在浏览器之后，再次刷新网页时，因为Cookie已经存在，所以响应头上就不会再带有同样的Set-Cookie了。\n\n当浏览器被种下Cookie时，之后浏览器向该域名发送请求，比如请求图片等时，请求头都会带上Cookie。\n\n<img src=\"./4.png\" style=\"width:500px\">\n\n关于Cookie，综上：\n\n<img src=\"./5.png\" style=\"width:500px\">\n\n***\n\n### Session\n\n当一个用户打开淘宝登陆后，刷新浏览器仍然显示登陆状态。服务器如何分辨这次发起请求的用户是刚才登陆过的用户呢。\n用户没有登陆时，在地址栏输入URL向服务器发送请求时，服务器看到该URL发送的请求头并没有带上Cookie，便可以知道用户没有登陆，于是便在自己服务器里创建了一个对象（一串数据），这个对象里有一个随机id，这个对象就是session。在服务器向浏览器发送响应头的时候，加上了Set-Cookie，把id给set上，当用户再次打开该网站的时候，就有了这个Cookie。\n当用户再次刷新页面的时候，请求头带上了这个Coolie，服务器通过接收到的id和当时存在的对象进行对比，得出是该用户再次访问了该页面。\n可以认为session是结合Cookie实行的一种机制，用于识别用户的身份。\nsession对象可以存在服务器内存中，也可以保存在数据库中。\n\n<img src=\"./6.png\" style=\"width:500px\">\n\n***\n\n### LocalStorage\n\nlocalStorage就是一个存数据的地方，将数据存到浏览器里。\n特点是存储数据量大，并且不会失效。\n\n<img src=\"./2.png\" style=\"width:500px\">\n\nLocalStorage对应一个key和value，可以存储很多的内容，并且没有过期的时效。\n\n<img src=\"./7.png\" style=\"width:500px\">\n","slug":"关于LocalStorage-cookie和session","published":1,"updated":"2019-11-23T23:54:38.000Z","layout":"post","photos":[],"link":"","_id":"ck3it6k2r0037teyilhtkmmt6","content":"<p>关于LocalStorage,Cookie和Session </p>\n<a id=\"more\"></a>\n\n<h3 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h3><p>网页的application下的Storage里的Cookie里可以看到Cookie的信息。网站只要设计登陆功能就一定会用到Cookie。</p>\n<p>Cookie可以把一些需要存储的信息存储在当前的页面下。</p>\n<img src=\"./1.png\" style=\"width:500px\">\n\n<p>包括Name和Value等。Domain表示在哪个域下是生效的。Path表示是否有下级的Path。Expries表示生效时间。设置Cookie时会设置生效时间，过了该时间之后则会失效。</p>\n<p>当输入URL时，服务器会发送响应头，里面包含Set-Cookie，便可以设定Cookie。</p>\n<img src=\"./3.png\" style=\"width:500px\">\n\n<p>当Cookie被保存在浏览器之后，再次刷新网页时，因为Cookie已经存在，所以响应头上就不会再带有同样的Set-Cookie了。</p>\n<p>当浏览器被种下Cookie时，之后浏览器向该域名发送请求，比如请求图片等时，请求头都会带上Cookie。</p>\n<img src=\"./4.png\" style=\"width:500px\">\n\n<p>关于Cookie，综上：</p>\n<img src=\"./5.png\" style=\"width:500px\">\n\n<hr>\n<h3 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h3><p>当一个用户打开淘宝登陆后，刷新浏览器仍然显示登陆状态。服务器如何分辨这次发起请求的用户是刚才登陆过的用户呢。<br>用户没有登陆时，在地址栏输入URL向服务器发送请求时，服务器看到该URL发送的请求头并没有带上Cookie，便可以知道用户没有登陆，于是便在自己服务器里创建了一个对象（一串数据），这个对象里有一个随机id，这个对象就是session。在服务器向浏览器发送响应头的时候，加上了Set-Cookie，把id给set上，当用户再次打开该网站的时候，就有了这个Cookie。<br>当用户再次刷新页面的时候，请求头带上了这个Coolie，服务器通过接收到的id和当时存在的对象进行对比，得出是该用户再次访问了该页面。<br>可以认为session是结合Cookie实行的一种机制，用于识别用户的身份。<br>session对象可以存在服务器内存中，也可以保存在数据库中。</p>\n<img src=\"./6.png\" style=\"width:500px\">\n\n<hr>\n<h3 id=\"LocalStorage\"><a href=\"#LocalStorage\" class=\"headerlink\" title=\"LocalStorage\"></a>LocalStorage</h3><p>localStorage就是一个存数据的地方，将数据存到浏览器里。<br>特点是存储数据量大，并且不会失效。</p>\n<img src=\"./2.png\" style=\"width:500px\">\n\n<p>LocalStorage对应一个key和value，可以存储很多的内容，并且没有过期的时效。</p>\n<img src=\"./7.png\" style=\"width:500px\">\n","site":{"data":{}},"thumbnailImageUrl":"https://kisky3.github.io/2019/05/10/关于LocalStorage-cookie和session/20190510.png","excerpt":"<p>关于LocalStorage,Cookie和Session </p>","more":"<h3 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h3><p>网页的application下的Storage里的Cookie里可以看到Cookie的信息。网站只要设计登陆功能就一定会用到Cookie。</p>\n<p>Cookie可以把一些需要存储的信息存储在当前的页面下。</p>\n<img src=\"./1.png\" style=\"width:500px\">\n\n<p>包括Name和Value等。Domain表示在哪个域下是生效的。Path表示是否有下级的Path。Expries表示生效时间。设置Cookie时会设置生效时间，过了该时间之后则会失效。</p>\n<p>当输入URL时，服务器会发送响应头，里面包含Set-Cookie，便可以设定Cookie。</p>\n<img src=\"./3.png\" style=\"width:500px\">\n\n<p>当Cookie被保存在浏览器之后，再次刷新网页时，因为Cookie已经存在，所以响应头上就不会再带有同样的Set-Cookie了。</p>\n<p>当浏览器被种下Cookie时，之后浏览器向该域名发送请求，比如请求图片等时，请求头都会带上Cookie。</p>\n<img src=\"./4.png\" style=\"width:500px\">\n\n<p>关于Cookie，综上：</p>\n<img src=\"./5.png\" style=\"width:500px\">\n\n<hr>\n<h3 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h3><p>当一个用户打开淘宝登陆后，刷新浏览器仍然显示登陆状态。服务器如何分辨这次发起请求的用户是刚才登陆过的用户呢。<br>用户没有登陆时，在地址栏输入URL向服务器发送请求时，服务器看到该URL发送的请求头并没有带上Cookie，便可以知道用户没有登陆，于是便在自己服务器里创建了一个对象（一串数据），这个对象里有一个随机id，这个对象就是session。在服务器向浏览器发送响应头的时候，加上了Set-Cookie，把id给set上，当用户再次打开该网站的时候，就有了这个Cookie。<br>当用户再次刷新页面的时候，请求头带上了这个Coolie，服务器通过接收到的id和当时存在的对象进行对比，得出是该用户再次访问了该页面。<br>可以认为session是结合Cookie实行的一种机制，用于识别用户的身份。<br>session对象可以存在服务器内存中，也可以保存在数据库中。</p>\n<img src=\"./6.png\" style=\"width:500px\">\n\n<hr>\n<h3 id=\"LocalStorage\"><a href=\"#LocalStorage\" class=\"headerlink\" title=\"LocalStorage\"></a>LocalStorage</h3><p>localStorage就是一个存数据的地方，将数据存到浏览器里。<br>特点是存储数据量大，并且不会失效。</p>\n<img src=\"./2.png\" style=\"width:500px\">\n\n<p>LocalStorage对应一个key和value，可以存储很多的内容，并且没有过期的时效。</p>\n<img src=\"./7.png\" style=\"width:500px\">"},{"title":"About DOM Event Flow","date":"2019-05-20T12:41:07.000Z","clearReading":true,"thumbnailImage":"20190520.jpg","thumbnailImagePosition":"left","coverImage":"cover.jpg","coverCaption":"Hello World, Hello Programming","coverSize":"partial","comments":0,"_content":"\n关于事件传播机制\n<!--more-->\n\n### 事件：\nJavaScript 和 HTML的交互是通过事件实现的。\n\n#### 事件是某个行为或触发，比如点击，鼠标移动：\n\n- 当用户点击鼠标时\n- 当网页已加载时\n- 当图像已经加载时\n- 当鼠标移动到元素上时\n- 当用户触发按键时\n\n***\n\n#### 事件流\n\n##### 事件冒泡\n\n点击div区域时，从下往上往父元素传播\n\n<img src=\"./1.png\" style=\"width:500px\">\n\n\n##### 事件捕获\n\n点击div时先从树根Document开始捕获，再一层层传给子元素\n\n\n<img src=\"./2.png\" style=\"width:500px\">\n\n##### DOM事件流\n\nDOM2级事件规定事件流包括3个阶段，事件捕获阶段，处于目标阶段，时间冒泡阶段，首先发生的是事件捕获，为截取事件提供机会，然后是世纪目标接受事件，最后是冒泡阶段。\n相当于先进行一次捕获阶段，再到冒泡阶段\n\n<img src=\"./3.png\" style=\"width:500px\">\n\n##### 阻止传播\n\n阻止传播一般使用stopPropagation取消事件的进一步冒泡或者捕获 也就是取消进一步的事件捕获或冒泡，防止再触发定义在别的节点上的监听函数，但不包括再当前节点上新定义的事件监听函数。 例： 我们可以在button的事件处理程序中调用stopPropagation()从而避免注册在body上的事件发生。 若是注释掉e.stopPropagation()；在点击button的时候，由于事件冒泡，body的click事件也会触发，但是调用后这句后，事件会停止传播。 undefined ##### 取消默认行为 preventDefault方法取消浏览器对当前事件的默认行为，\n比如点击链接后，浏览器跳转到指定页面，或者按一下空格键，页面向下滚动一段距离。\n该方法生效的前提是，事件的cancleable属性为true， 如果为false，则该方法没有效果。\n该方法不会阻止事件的进一步传播，只是该事件的默认方法不会执行。\n\n例：\n可以为文本框设置校验条件。如果用户的输入不符合条件，就无法将字符输入文本框。\nkeypress监听函数，只能输入小写字母，否则输入事件的默认事件（写入文本框）将本取消。\n\n```JS\nfunction checkName(e){\n    if(e.charCode < 97 || e.charCode > 122){\n        e.preventDafault();\n    }\n}\n```\n\n##### 事件代理\n\n事件代理就是利用事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件。(delegation)。\n我们知道当一个元素上的事件被触发时，比如说点击了一个按钮，同样的事件将会在那个元素的所有祖先元素中被触发。（事件冒泡）\n因此我们可以给父元素田间事件监听器，子元素添加事件，事件触发冒泡上来，可以把多个子元素的事件进行统一处理。\n这叫做事件的代理。\n\n例：\n上面代码的click事件的监听函数定义在ul节点，但是实际上，它处理的是子节点li的click事件。这样的好处是，只要定义一个监听函数，就能处理多个子节点的事件，且以后再添加子节点，监听函数依然有效。\n\n```JS\nvar ul = document.querySelector('ul');\nul.addEventListener('click', function(event){\n    if(event.target.tagName.toLowerCase() === 'li'){\n        //...\n    }\n})\n```\n\n##### 事件传播过程的DEMO，演示阻止传播的效果\n\n<img src=\"./4.png\" style=\"width:500px\">\n\n[演示地址](http://js.jirengu.com/foban/2/edit)\n\nHTML\n```HTML\n<!DOCTYPE html>\n<html>\n <head>\n   <meta charset = \"utf-8\">\n   <title>Homework</title>\n </head>\n  <body>\n    <button id=\"btn\">click</button>\n    <div class=\"container\">\n      container\n      <div class=\"box\">\n        box\n        <div class=\"target\">\n          target\n        </div>\n      </div>\n    </div>\n  </body>\n</html>\n```\n\nCSS\n```CSS\n.container,\n.box,\n.target\n{\n border: 2px solid pink;\n  padding: 10px;\n}\n```\n\nJS\n```JS\nvar btn = document.querySelector('#btn');\n\nbtn.onclick = function (e){\n  console.log(e);\n};\n\nbtn.addEventListener('click',\nfunction(e){\n  console.log(this);\n});\n\n// EVENT CAPTURING\ndocument.querySelector('.container').addEventListener('click', function(e){\n  console.log('container click.. in 捕获阶段');\n}, true);\n\ndocument.querySelector('.box').addEventListener('click', function(e){\n  console.log('box click.. in 捕获阶段');\n}, true);\n\ndocument.querySelector('.target').addEventListener('click', function(e){\n  console.log('target click.. in 捕获阶段');\n}, true);\n\n\n// DUBBED BUBBLING\ndocument.querySelector('.container').addEventListener('click', function(e){\n  console.log('container click.. in 冒泡阶段');\n});\n\ndocument.querySelector('.box').addEventListener('click', function(e){\n  // STOP EVENT HERE\n  e.stopPropagation();\n  console.log('box click.. in 冒泡阶段');\n});\n\ndocument.querySelector('.target').addEventListener('click', function(e){\n  console.log('target click.. in 冒泡阶段');\n});\n```\n","source":"_posts/关于事件传播机制.md","raw":"---\ntitle: About DOM Event Flow\ndate: 2019-05-20 21:41:07\ntags:\n- JS\n- Event Flow\n- Event  Capturing\n- Dubbed Bubbling\nclearReading: true\nthumbnailImage: 20190520.jpg\nthumbnailImagePosition: left\ncoverImage: cover.jpg\ncoverCaption: \"Hello World, Hello Programming\"\ncoverSize: partial\ncomments: false\ncategories: Front-end Knowledge\n---\n\n关于事件传播机制\n<!--more-->\n\n### 事件：\nJavaScript 和 HTML的交互是通过事件实现的。\n\n#### 事件是某个行为或触发，比如点击，鼠标移动：\n\n- 当用户点击鼠标时\n- 当网页已加载时\n- 当图像已经加载时\n- 当鼠标移动到元素上时\n- 当用户触发按键时\n\n***\n\n#### 事件流\n\n##### 事件冒泡\n\n点击div区域时，从下往上往父元素传播\n\n<img src=\"./1.png\" style=\"width:500px\">\n\n\n##### 事件捕获\n\n点击div时先从树根Document开始捕获，再一层层传给子元素\n\n\n<img src=\"./2.png\" style=\"width:500px\">\n\n##### DOM事件流\n\nDOM2级事件规定事件流包括3个阶段，事件捕获阶段，处于目标阶段，时间冒泡阶段，首先发生的是事件捕获，为截取事件提供机会，然后是世纪目标接受事件，最后是冒泡阶段。\n相当于先进行一次捕获阶段，再到冒泡阶段\n\n<img src=\"./3.png\" style=\"width:500px\">\n\n##### 阻止传播\n\n阻止传播一般使用stopPropagation取消事件的进一步冒泡或者捕获 也就是取消进一步的事件捕获或冒泡，防止再触发定义在别的节点上的监听函数，但不包括再当前节点上新定义的事件监听函数。 例： 我们可以在button的事件处理程序中调用stopPropagation()从而避免注册在body上的事件发生。 若是注释掉e.stopPropagation()；在点击button的时候，由于事件冒泡，body的click事件也会触发，但是调用后这句后，事件会停止传播。 undefined ##### 取消默认行为 preventDefault方法取消浏览器对当前事件的默认行为，\n比如点击链接后，浏览器跳转到指定页面，或者按一下空格键，页面向下滚动一段距离。\n该方法生效的前提是，事件的cancleable属性为true， 如果为false，则该方法没有效果。\n该方法不会阻止事件的进一步传播，只是该事件的默认方法不会执行。\n\n例：\n可以为文本框设置校验条件。如果用户的输入不符合条件，就无法将字符输入文本框。\nkeypress监听函数，只能输入小写字母，否则输入事件的默认事件（写入文本框）将本取消。\n\n```JS\nfunction checkName(e){\n    if(e.charCode < 97 || e.charCode > 122){\n        e.preventDafault();\n    }\n}\n```\n\n##### 事件代理\n\n事件代理就是利用事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件。(delegation)。\n我们知道当一个元素上的事件被触发时，比如说点击了一个按钮，同样的事件将会在那个元素的所有祖先元素中被触发。（事件冒泡）\n因此我们可以给父元素田间事件监听器，子元素添加事件，事件触发冒泡上来，可以把多个子元素的事件进行统一处理。\n这叫做事件的代理。\n\n例：\n上面代码的click事件的监听函数定义在ul节点，但是实际上，它处理的是子节点li的click事件。这样的好处是，只要定义一个监听函数，就能处理多个子节点的事件，且以后再添加子节点，监听函数依然有效。\n\n```JS\nvar ul = document.querySelector('ul');\nul.addEventListener('click', function(event){\n    if(event.target.tagName.toLowerCase() === 'li'){\n        //...\n    }\n})\n```\n\n##### 事件传播过程的DEMO，演示阻止传播的效果\n\n<img src=\"./4.png\" style=\"width:500px\">\n\n[演示地址](http://js.jirengu.com/foban/2/edit)\n\nHTML\n```HTML\n<!DOCTYPE html>\n<html>\n <head>\n   <meta charset = \"utf-8\">\n   <title>Homework</title>\n </head>\n  <body>\n    <button id=\"btn\">click</button>\n    <div class=\"container\">\n      container\n      <div class=\"box\">\n        box\n        <div class=\"target\">\n          target\n        </div>\n      </div>\n    </div>\n  </body>\n</html>\n```\n\nCSS\n```CSS\n.container,\n.box,\n.target\n{\n border: 2px solid pink;\n  padding: 10px;\n}\n```\n\nJS\n```JS\nvar btn = document.querySelector('#btn');\n\nbtn.onclick = function (e){\n  console.log(e);\n};\n\nbtn.addEventListener('click',\nfunction(e){\n  console.log(this);\n});\n\n// EVENT CAPTURING\ndocument.querySelector('.container').addEventListener('click', function(e){\n  console.log('container click.. in 捕获阶段');\n}, true);\n\ndocument.querySelector('.box').addEventListener('click', function(e){\n  console.log('box click.. in 捕获阶段');\n}, true);\n\ndocument.querySelector('.target').addEventListener('click', function(e){\n  console.log('target click.. in 捕获阶段');\n}, true);\n\n\n// DUBBED BUBBLING\ndocument.querySelector('.container').addEventListener('click', function(e){\n  console.log('container click.. in 冒泡阶段');\n});\n\ndocument.querySelector('.box').addEventListener('click', function(e){\n  // STOP EVENT HERE\n  e.stopPropagation();\n  console.log('box click.. in 冒泡阶段');\n});\n\ndocument.querySelector('.target').addEventListener('click', function(e){\n  console.log('target click.. in 冒泡阶段');\n});\n```\n","slug":"关于事件传播机制","published":1,"updated":"2019-11-23T23:54:38.000Z","layout":"post","photos":[],"link":"","_id":"ck3it6k2r003ateyih85k0loh","content":"<p>关于事件传播机制</p>\n<a id=\"more\"></a>\n\n<h3 id=\"事件：\"><a href=\"#事件：\" class=\"headerlink\" title=\"事件：\"></a>事件：</h3><p>JavaScript 和 HTML的交互是通过事件实现的。</p>\n<h4 id=\"事件是某个行为或触发，比如点击，鼠标移动：\"><a href=\"#事件是某个行为或触发，比如点击，鼠标移动：\" class=\"headerlink\" title=\"事件是某个行为或触发，比如点击，鼠标移动：\"></a>事件是某个行为或触发，比如点击，鼠标移动：</h4><ul>\n<li>当用户点击鼠标时</li>\n<li>当网页已加载时</li>\n<li>当图像已经加载时</li>\n<li>当鼠标移动到元素上时</li>\n<li>当用户触发按键时</li>\n</ul>\n<hr>\n<h4 id=\"事件流\"><a href=\"#事件流\" class=\"headerlink\" title=\"事件流\"></a>事件流</h4><h5 id=\"事件冒泡\"><a href=\"#事件冒泡\" class=\"headerlink\" title=\"事件冒泡\"></a>事件冒泡</h5><p>点击div区域时，从下往上往父元素传播</p>\n<img src=\"./1.png\" style=\"width:500px\">\n\n\n<h5 id=\"事件捕获\"><a href=\"#事件捕获\" class=\"headerlink\" title=\"事件捕获\"></a>事件捕获</h5><p>点击div时先从树根Document开始捕获，再一层层传给子元素</p>\n<img src=\"./2.png\" style=\"width:500px\">\n\n<h5 id=\"DOM事件流\"><a href=\"#DOM事件流\" class=\"headerlink\" title=\"DOM事件流\"></a>DOM事件流</h5><p>DOM2级事件规定事件流包括3个阶段，事件捕获阶段，处于目标阶段，时间冒泡阶段，首先发生的是事件捕获，为截取事件提供机会，然后是世纪目标接受事件，最后是冒泡阶段。<br>相当于先进行一次捕获阶段，再到冒泡阶段</p>\n<img src=\"./3.png\" style=\"width:500px\">\n\n<h5 id=\"阻止传播\"><a href=\"#阻止传播\" class=\"headerlink\" title=\"阻止传播\"></a>阻止传播</h5><p>阻止传播一般使用stopPropagation取消事件的进一步冒泡或者捕获 也就是取消进一步的事件捕获或冒泡，防止再触发定义在别的节点上的监听函数，但不包括再当前节点上新定义的事件监听函数。 例： 我们可以在button的事件处理程序中调用stopPropagation()从而避免注册在body上的事件发生。 若是注释掉e.stopPropagation()；在点击button的时候，由于事件冒泡，body的click事件也会触发，但是调用后这句后，事件会停止传播。 undefined ##### 取消默认行为 preventDefault方法取消浏览器对当前事件的默认行为，<br>比如点击链接后，浏览器跳转到指定页面，或者按一下空格键，页面向下滚动一段距离。<br>该方法生效的前提是，事件的cancleable属性为true， 如果为false，则该方法没有效果。<br>该方法不会阻止事件的进一步传播，只是该事件的默认方法不会执行。</p>\n<p>例：<br>可以为文本框设置校验条件。如果用户的输入不符合条件，就无法将字符输入文本框。<br>keypress监听函数，只能输入小写字母，否则输入事件的默认事件（写入文本框）将本取消。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkName</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(e.charCode &lt; <span class=\"number\">97</span> || e.charCode &gt; <span class=\"number\">122</span>)&#123;</span><br><span class=\"line\">        e.preventDafault();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"事件代理\"><a href=\"#事件代理\" class=\"headerlink\" title=\"事件代理\"></a>事件代理</h5><p>事件代理就是利用事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件。(delegation)。<br>我们知道当一个元素上的事件被触发时，比如说点击了一个按钮，同样的事件将会在那个元素的所有祖先元素中被触发。（事件冒泡）<br>因此我们可以给父元素田间事件监听器，子元素添加事件，事件触发冒泡上来，可以把多个子元素的事件进行统一处理。<br>这叫做事件的代理。</p>\n<p>例：<br>上面代码的click事件的监听函数定义在ul节点，但是实际上，它处理的是子节点li的click事件。这样的好处是，只要定义一个监听函数，就能处理多个子节点的事件，且以后再添加子节点，监听函数依然有效。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ul = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'ul'</span>);</span><br><span class=\"line\">ul.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(event.target.tagName.toLowerCase() === <span class=\"string\">'li'</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"事件传播过程的DEMO，演示阻止传播的效果\"><a href=\"#事件传播过程的DEMO，演示阻止传播的效果\" class=\"headerlink\" title=\"事件传播过程的DEMO，演示阻止传播的效果\"></a>事件传播过程的DEMO，演示阻止传播的效果</h5><img src=\"./4.png\" style=\"width:500px\">\n\n<p><a href=\"http://js.jirengu.com/foban/2/edit\" target=\"_blank\" rel=\"noopener\">演示地址</a></p>\n<p>HTML</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span> = <span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Homework<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"btn\"</span>&gt;</span>click<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">      container</span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span></span><br><span class=\"line\">        box</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"target\"</span>&gt;</span></span><br><span class=\"line\">          target</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>CSS</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.box</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.target</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid pink;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#btn'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">btn.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">btn.addEventListener(<span class=\"string\">'click'</span>,</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// EVENT CAPTURING</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.container'</span>).addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'container click.. in 捕获阶段'</span>);</span><br><span class=\"line\">&#125;, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.box'</span>).addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'box click.. in 捕获阶段'</span>);</span><br><span class=\"line\">&#125;, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.target'</span>).addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'target click.. in 捕获阶段'</span>);</span><br><span class=\"line\">&#125;, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// DUBBED BUBBLING</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.container'</span>).addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'container click.. in 冒泡阶段'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.box'</span>).addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// STOP EVENT HERE</span></span><br><span class=\"line\">  e.stopPropagation();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'box click.. in 冒泡阶段'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.target'</span>).addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'target click.. in 冒泡阶段'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"thumbnailImageUrl":"https://kisky3.github.io/2019/05/20/关于事件传播机制/20190520.jpg","excerpt":"<p>关于事件传播机制</p>","more":"<h3 id=\"事件：\"><a href=\"#事件：\" class=\"headerlink\" title=\"事件：\"></a>事件：</h3><p>JavaScript 和 HTML的交互是通过事件实现的。</p>\n<h4 id=\"事件是某个行为或触发，比如点击，鼠标移动：\"><a href=\"#事件是某个行为或触发，比如点击，鼠标移动：\" class=\"headerlink\" title=\"事件是某个行为或触发，比如点击，鼠标移动：\"></a>事件是某个行为或触发，比如点击，鼠标移动：</h4><ul>\n<li>当用户点击鼠标时</li>\n<li>当网页已加载时</li>\n<li>当图像已经加载时</li>\n<li>当鼠标移动到元素上时</li>\n<li>当用户触发按键时</li>\n</ul>\n<hr>\n<h4 id=\"事件流\"><a href=\"#事件流\" class=\"headerlink\" title=\"事件流\"></a>事件流</h4><h5 id=\"事件冒泡\"><a href=\"#事件冒泡\" class=\"headerlink\" title=\"事件冒泡\"></a>事件冒泡</h5><p>点击div区域时，从下往上往父元素传播</p>\n<img src=\"./1.png\" style=\"width:500px\">\n\n\n<h5 id=\"事件捕获\"><a href=\"#事件捕获\" class=\"headerlink\" title=\"事件捕获\"></a>事件捕获</h5><p>点击div时先从树根Document开始捕获，再一层层传给子元素</p>\n<img src=\"./2.png\" style=\"width:500px\">\n\n<h5 id=\"DOM事件流\"><a href=\"#DOM事件流\" class=\"headerlink\" title=\"DOM事件流\"></a>DOM事件流</h5><p>DOM2级事件规定事件流包括3个阶段，事件捕获阶段，处于目标阶段，时间冒泡阶段，首先发生的是事件捕获，为截取事件提供机会，然后是世纪目标接受事件，最后是冒泡阶段。<br>相当于先进行一次捕获阶段，再到冒泡阶段</p>\n<img src=\"./3.png\" style=\"width:500px\">\n\n<h5 id=\"阻止传播\"><a href=\"#阻止传播\" class=\"headerlink\" title=\"阻止传播\"></a>阻止传播</h5><p>阻止传播一般使用stopPropagation取消事件的进一步冒泡或者捕获 也就是取消进一步的事件捕获或冒泡，防止再触发定义在别的节点上的监听函数，但不包括再当前节点上新定义的事件监听函数。 例： 我们可以在button的事件处理程序中调用stopPropagation()从而避免注册在body上的事件发生。 若是注释掉e.stopPropagation()；在点击button的时候，由于事件冒泡，body的click事件也会触发，但是调用后这句后，事件会停止传播。 undefined ##### 取消默认行为 preventDefault方法取消浏览器对当前事件的默认行为，<br>比如点击链接后，浏览器跳转到指定页面，或者按一下空格键，页面向下滚动一段距离。<br>该方法生效的前提是，事件的cancleable属性为true， 如果为false，则该方法没有效果。<br>该方法不会阻止事件的进一步传播，只是该事件的默认方法不会执行。</p>\n<p>例：<br>可以为文本框设置校验条件。如果用户的输入不符合条件，就无法将字符输入文本框。<br>keypress监听函数，只能输入小写字母，否则输入事件的默认事件（写入文本框）将本取消。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkName</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(e.charCode &lt; <span class=\"number\">97</span> || e.charCode &gt; <span class=\"number\">122</span>)&#123;</span><br><span class=\"line\">        e.preventDafault();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"事件代理\"><a href=\"#事件代理\" class=\"headerlink\" title=\"事件代理\"></a>事件代理</h5><p>事件代理就是利用事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件。(delegation)。<br>我们知道当一个元素上的事件被触发时，比如说点击了一个按钮，同样的事件将会在那个元素的所有祖先元素中被触发。（事件冒泡）<br>因此我们可以给父元素田间事件监听器，子元素添加事件，事件触发冒泡上来，可以把多个子元素的事件进行统一处理。<br>这叫做事件的代理。</p>\n<p>例：<br>上面代码的click事件的监听函数定义在ul节点，但是实际上，它处理的是子节点li的click事件。这样的好处是，只要定义一个监听函数，就能处理多个子节点的事件，且以后再添加子节点，监听函数依然有效。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ul = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'ul'</span>);</span><br><span class=\"line\">ul.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(event.target.tagName.toLowerCase() === <span class=\"string\">'li'</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"事件传播过程的DEMO，演示阻止传播的效果\"><a href=\"#事件传播过程的DEMO，演示阻止传播的效果\" class=\"headerlink\" title=\"事件传播过程的DEMO，演示阻止传播的效果\"></a>事件传播过程的DEMO，演示阻止传播的效果</h5><img src=\"./4.png\" style=\"width:500px\">\n\n<p><a href=\"http://js.jirengu.com/foban/2/edit\" target=\"_blank\" rel=\"noopener\">演示地址</a></p>\n<p>HTML</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span> = <span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Homework<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"btn\"</span>&gt;</span>click<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">      container</span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span></span><br><span class=\"line\">        box</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"target\"</span>&gt;</span></span><br><span class=\"line\">          target</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>CSS</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.box</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.target</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid pink;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#btn'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">btn.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">btn.addEventListener(<span class=\"string\">'click'</span>,</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// EVENT CAPTURING</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.container'</span>).addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'container click.. in 捕获阶段'</span>);</span><br><span class=\"line\">&#125;, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.box'</span>).addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'box click.. in 捕获阶段'</span>);</span><br><span class=\"line\">&#125;, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.target'</span>).addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'target click.. in 捕获阶段'</span>);</span><br><span class=\"line\">&#125;, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// DUBBED BUBBLING</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.container'</span>).addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'container click.. in 冒泡阶段'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.box'</span>).addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// STOP EVENT HERE</span></span><br><span class=\"line\">  e.stopPropagation();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'box click.. in 冒泡阶段'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.target'</span>).addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'target click.. in 冒泡阶段'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>"},{"title":"Data Mocking – Ways To Fake A Backend","date":"2019-05-21T10:52:09.000Z","clearReading":true,"thumbnailImage":"20190521.png","thumbnailImagePosition":"left","coverImage":"cover.jpg","coverCaption":"Hello World, Hello Programming","coverSize":"partial","comments":0,"_content":"\n关于mock数据 - 怎样模拟后端数据\n<!--more--> \n\n### 1. 搭建一个静态服务器\n#### http-server\n\n\n比如在本地写一个http-server，可以在本地将需要的数据，做成一个文件，然后将该数据返回。\n\n也可以在github上建立一个项目，创建首页，之后再创建一个json文件，将我们需要的数据写入此文件。\n\n例：\n\n<img src=\"./1.png\" style=\"width:500px\">\n\n<br>\n<img src=\"./2.png\" style=\"width:500px\">\n\n之后打开页面就可以看到我们所取得的json数据了\n\n<img src=\"./3.png\" style=\"width:500px\">\n\n\n### 2. 线上mock数据\n在下面的网站里添加接口和数据，再将生成的数据URL写入ajax即可取得在线模拟的数据\n\n1.使用http://easy-mock.com\n\n2.使用http://rapapi.org/org/index.do\n\n3.使用server-mock","source":"_posts/关于前端mock数据.md","raw":"---\ntitle: Data Mocking – Ways To Fake A Backend\ndate: 2019-05-21 19:52:09\ntags:\n- Mock \nclearReading: true\nthumbnailImage: 20190521.png\nthumbnailImagePosition: left\ncoverImage: cover.jpg\ncoverCaption: \"Hello World, Hello Programming\"\ncoverSize: partial\ncomments: false\ncategories: Front-end Knowledge\n---\n\n关于mock数据 - 怎样模拟后端数据\n<!--more--> \n\n### 1. 搭建一个静态服务器\n#### http-server\n\n\n比如在本地写一个http-server，可以在本地将需要的数据，做成一个文件，然后将该数据返回。\n\n也可以在github上建立一个项目，创建首页，之后再创建一个json文件，将我们需要的数据写入此文件。\n\n例：\n\n<img src=\"./1.png\" style=\"width:500px\">\n\n<br>\n<img src=\"./2.png\" style=\"width:500px\">\n\n之后打开页面就可以看到我们所取得的json数据了\n\n<img src=\"./3.png\" style=\"width:500px\">\n\n\n### 2. 线上mock数据\n在下面的网站里添加接口和数据，再将生成的数据URL写入ajax即可取得在线模拟的数据\n\n1.使用http://easy-mock.com\n\n2.使用http://rapapi.org/org/index.do\n\n3.使用server-mock","slug":"关于前端mock数据","published":1,"updated":"2019-11-23T23:54:38.000Z","layout":"post","photos":[],"link":"","_id":"ck3it6k2s003eteyi9f47bneb","content":"<p>关于mock数据 - 怎样模拟后端数据</p>\n<a id=\"more\"></a> \n\n<h3 id=\"1-搭建一个静态服务器\"><a href=\"#1-搭建一个静态服务器\" class=\"headerlink\" title=\"1. 搭建一个静态服务器\"></a>1. 搭建一个静态服务器</h3><h4 id=\"http-server\"><a href=\"#http-server\" class=\"headerlink\" title=\"http-server\"></a>http-server</h4><p>比如在本地写一个http-server，可以在本地将需要的数据，做成一个文件，然后将该数据返回。</p>\n<p>也可以在github上建立一个项目，创建首页，之后再创建一个json文件，将我们需要的数据写入此文件。</p>\n<p>例：</p>\n<img src=\"./1.png\" style=\"width:500px\">\n\n<br>\n<img src=\"./2.png\" style=\"width:500px\">\n\n<p>之后打开页面就可以看到我们所取得的json数据了</p>\n<img src=\"./3.png\" style=\"width:500px\">\n\n\n<h3 id=\"2-线上mock数据\"><a href=\"#2-线上mock数据\" class=\"headerlink\" title=\"2. 线上mock数据\"></a>2. 线上mock数据</h3><p>在下面的网站里添加接口和数据，再将生成的数据URL写入ajax即可取得在线模拟的数据</p>\n<p>1.使用<a href=\"http://easy-mock.com\" target=\"_blank\" rel=\"noopener\">http://easy-mock.com</a></p>\n<p>2.使用<a href=\"http://rapapi.org/org/index.do\" target=\"_blank\" rel=\"noopener\">http://rapapi.org/org/index.do</a></p>\n<p>3.使用server-mock</p>\n","site":{"data":{}},"thumbnailImageUrl":"https://kisky3.github.io/2019/05/21/关于前端mock数据/20190521.png","excerpt":"<p>关于mock数据 - 怎样模拟后端数据</p>","more":"<h3 id=\"1-搭建一个静态服务器\"><a href=\"#1-搭建一个静态服务器\" class=\"headerlink\" title=\"1. 搭建一个静态服务器\"></a>1. 搭建一个静态服务器</h3><h4 id=\"http-server\"><a href=\"#http-server\" class=\"headerlink\" title=\"http-server\"></a>http-server</h4><p>比如在本地写一个http-server，可以在本地将需要的数据，做成一个文件，然后将该数据返回。</p>\n<p>也可以在github上建立一个项目，创建首页，之后再创建一个json文件，将我们需要的数据写入此文件。</p>\n<p>例：</p>\n<img src=\"./1.png\" style=\"width:500px\">\n\n<br>\n<img src=\"./2.png\" style=\"width:500px\">\n\n<p>之后打开页面就可以看到我们所取得的json数据了</p>\n<img src=\"./3.png\" style=\"width:500px\">\n\n\n<h3 id=\"2-线上mock数据\"><a href=\"#2-线上mock数据\" class=\"headerlink\" title=\"2. 线上mock数据\"></a>2. 线上mock数据</h3><p>在下面的网站里添加接口和数据，再将生成的数据URL写入ajax即可取得在线模拟的数据</p>\n<p>1.使用<a href=\"http://easy-mock.com\" target=\"_blank\" rel=\"noopener\">http://easy-mock.com</a></p>\n<p>2.使用<a href=\"http://rapapi.org/org/index.do\" target=\"_blank\" rel=\"noopener\">http://rapapi.org/org/index.do</a></p>\n<p>3.使用server-mock</p>"},{"title":"About Same Origin Policy And How To Deal With It","date":"2019-06-10T08:23:16.000Z","clearReading":true,"thumbnailImage":"20190610.png","thumbnailImagePosition":"left","coverImage":"cover.jpg","coverCaption":"Hello World, Hello Programming","coverSize":"partial","comments":0,"_content":"\n关于跨域\n<!--more-->\n\n### 同源策略（Same origin Policy）和跨域\n浏览器处于安全方面的考虑，只允许与本域下的接口进行交互。\n不同源的客户端脚本在没有明确授权的情况下。不能读写对方的资源。\n\n简而言之就是你当前网页的协议名，域名和端口名与你请求的接口地址的各项是否相同，如果不相同则浏览器将会对返回的数据进行拦截。\n这是隔离潜在恶意文件的关键安全机制。\n\n本域指的是：\n- 同协议： 比如都是http或者https\n- 同域名： 比如都是http://kisky3.com/a 和 http://kisky3.com/b\n- 同端口： 比如都是80端口\n\n注意：对于当前页面来说页面存放的JS文件的域不重要，而是指当前页面的URL，也就是加载JS页面所在的域。\n\n而跨域就是绕过浏览器的同源策略，让前端能够获取到数据。\n\n### 跨域的几种方法\n#### JSONP（JSON with padding）\nJSONP就是通过script标签加载数据的方式去获取数据当作JS代码来执行。\n提前在页面上声明一个函数。函数名通过接口传参的方式传给候梯，后台解析道函数名后在原始数据上包裹这个函数名，发送给前端。\n换句话说，JSONP需要对应接口的后端的配合才能实现。\n\n例如\n\n后端服务器server.js\n```JS\napp.get('/getNews', function(req, res){\n\n\tvar news = [\n\t\t\"this is a test message 1\",\n\t\t\"this is a test message 2\",\n\t\t\"this is a test message 3\",\n\t\t\"this is a test message 4\",\n\t\t\"this is a test message 5\",\n\t\t\"this is a test message 6\"\n\t]\n\n\tvar data = [];\n\tfor(var i=0; i<3; i++){\n\t\tvar index = parseInt(Math.random()*news.length);\n\t\tdata.push(news[index]);\n\t\tnews.splice(index, 1);\n\t}\n\n    // This is the point!! Backend has to check whether front request ask for a callback date or not\n    // If so retuen a callback object contains JSON data => cb + '('+ JSON.stringify(data) + ')'\n\tvar cb = req.query.callback;\n\tif(cb){\n\t\tres.send(cb + '('+ JSON.stringify(data) + ')');\n\t}else{\n\t\tres.send(data);\n\t}\n})\n```\n\n前端页面 index.html\n```JS\n// Front created a script with callback object and require date to backend server.js \n $('.change').addEventListener('click', function(){\n    var script = document.createElement('script');\n    script.src = 'http://127.0.0.1/getNews?callback=appendHtml';\n    document.head.appendChild(script);\n    document.head.removeChild(script);\n  })\n\n```\nJSONP的特性：\n- 它不像XMLHttpRequest对象实现的Ajax请求那样受到同源策略的限制；它的兼容性更好，在更加古老的浏览器中都可以运行。\n- 它只支持 GET 请求，而不支持 POST 请求等其他类型的 HTTP 请求。\n\n#### CORS(Cross-Origin Resource Sharing)\nCORS全称是跨域资源共享,是一种ajax跨域请求资源的方式，支持现代浏览器，IE支持10以上。\n实现方法很简单，当你从XMLHttpRequest发送请求时，浏览器发现该请求不符合同源策略，会给改请求加一个请求头：Origin，\n后台进行一系列处理，如果确定接受请求则在返回结果中加入一个响应头：Access-Control-Origin;\n浏览器判断相应头中事都包含Origin的值，如果有则浏览器会处理响应，我们就可以拿到响应数据，如果不包含则浏览器直接驳回，这时我们无法拿到响应数据。所以CORS的表象是让你觉得它与同源的ajax请求没啥区别，代码完全一样。\n\n前端和平常一样，利用ajax发送数据。\n后端服务器 server.js\n```JS\napp.get('/getNews', function(req, res){\n\n\tvar news = [\n\t\t\"this is a test message 1\",\n\t\t\"this is a test message 2\",\n\t\t\"this is a test message 3\",\n\t\t\"this is a test message 4\",\n\t\t\"this is a test message 5\",\n\t\t\"this is a test message 6\"\n\t]\n\n\tvar data = [];\n\tfor(var i=0; i<3; i++){\n\t\tvar index = parseInt(Math.random()*news.length);\n\t\tdata.push(news[index]);\n\t\tnews.splice(index, 1);\n\t}\n\n    // This is the point!! Backend has to add this to response header. So that front can get data\n    res.setHeader('Access-Control-Allow-Origin','http://localhost:8080');\n\n    // This is the point!! Allow anybody to get date\n    res.setHeader('Access-Control-Allow-Origin','*');\n})\n\n```\nCORS的特性：\n\n- JSONP 只能实现 GET 请求，而 CORS 支持所有类型的 HTTP 请求\n- 使用 CORS ，开发者可以是使用普通的 XMLHttpRequest 发起请求和获取数据，比起 JSONP 有更好的错误处理\n- 虽然绝大多数现代的浏览器都已经支持 CORS，但是 CORS 的兼容性比不上 JSONP，IE10以下的浏览器不支持CORS\n\n### 服务端中转跨域\nJSONP、CORS 这两种跨域请求方式都需要对方服务器支持。假设对方服务器不提供支持怎么办？还有一个必杀技，自己搭建 server 中请求中转。\n\n假设 我们的页面为 https://jirengu.github.io/weather/weather.html， 需要向 https://weather.com/now 这个接口发送请求获取数据，但此接口不支持JSONP 和 CORS跨域。\n\n我们可以这样做\n\n- 搭建服务器，创建接口，如 https://api.jirengu.com/weather\n- 设置这个接口允许 CORS 跨域\n- 我们的页面向自己的这个接口发请求\n- 接口收到请求后，在服务器端向https://weather.com/now 这个接口要数据（在服务端不存在同源策略限制），拿到数据后，返回给前端页面。\n\n","source":"_posts/关于js跨域及解决方法.md","raw":"---\ntitle: About Same Origin Policy And How To Deal With It\ndate: 2019-06-10 17:23:16\ntags:\n- JS\n- CORS\nclearReading: true\nthumbnailImage: 20190610.png\nthumbnailImagePosition: left\ncoverImage: cover.jpg\ncoverCaption: \"Hello World, Hello Programming\"\ncoverSize: partial\ncomments: false\ncategories: Front-end Knowledge\n---\n\n关于跨域\n<!--more-->\n\n### 同源策略（Same origin Policy）和跨域\n浏览器处于安全方面的考虑，只允许与本域下的接口进行交互。\n不同源的客户端脚本在没有明确授权的情况下。不能读写对方的资源。\n\n简而言之就是你当前网页的协议名，域名和端口名与你请求的接口地址的各项是否相同，如果不相同则浏览器将会对返回的数据进行拦截。\n这是隔离潜在恶意文件的关键安全机制。\n\n本域指的是：\n- 同协议： 比如都是http或者https\n- 同域名： 比如都是http://kisky3.com/a 和 http://kisky3.com/b\n- 同端口： 比如都是80端口\n\n注意：对于当前页面来说页面存放的JS文件的域不重要，而是指当前页面的URL，也就是加载JS页面所在的域。\n\n而跨域就是绕过浏览器的同源策略，让前端能够获取到数据。\n\n### 跨域的几种方法\n#### JSONP（JSON with padding）\nJSONP就是通过script标签加载数据的方式去获取数据当作JS代码来执行。\n提前在页面上声明一个函数。函数名通过接口传参的方式传给候梯，后台解析道函数名后在原始数据上包裹这个函数名，发送给前端。\n换句话说，JSONP需要对应接口的后端的配合才能实现。\n\n例如\n\n后端服务器server.js\n```JS\napp.get('/getNews', function(req, res){\n\n\tvar news = [\n\t\t\"this is a test message 1\",\n\t\t\"this is a test message 2\",\n\t\t\"this is a test message 3\",\n\t\t\"this is a test message 4\",\n\t\t\"this is a test message 5\",\n\t\t\"this is a test message 6\"\n\t]\n\n\tvar data = [];\n\tfor(var i=0; i<3; i++){\n\t\tvar index = parseInt(Math.random()*news.length);\n\t\tdata.push(news[index]);\n\t\tnews.splice(index, 1);\n\t}\n\n    // This is the point!! Backend has to check whether front request ask for a callback date or not\n    // If so retuen a callback object contains JSON data => cb + '('+ JSON.stringify(data) + ')'\n\tvar cb = req.query.callback;\n\tif(cb){\n\t\tres.send(cb + '('+ JSON.stringify(data) + ')');\n\t}else{\n\t\tres.send(data);\n\t}\n})\n```\n\n前端页面 index.html\n```JS\n// Front created a script with callback object and require date to backend server.js \n $('.change').addEventListener('click', function(){\n    var script = document.createElement('script');\n    script.src = 'http://127.0.0.1/getNews?callback=appendHtml';\n    document.head.appendChild(script);\n    document.head.removeChild(script);\n  })\n\n```\nJSONP的特性：\n- 它不像XMLHttpRequest对象实现的Ajax请求那样受到同源策略的限制；它的兼容性更好，在更加古老的浏览器中都可以运行。\n- 它只支持 GET 请求，而不支持 POST 请求等其他类型的 HTTP 请求。\n\n#### CORS(Cross-Origin Resource Sharing)\nCORS全称是跨域资源共享,是一种ajax跨域请求资源的方式，支持现代浏览器，IE支持10以上。\n实现方法很简单，当你从XMLHttpRequest发送请求时，浏览器发现该请求不符合同源策略，会给改请求加一个请求头：Origin，\n后台进行一系列处理，如果确定接受请求则在返回结果中加入一个响应头：Access-Control-Origin;\n浏览器判断相应头中事都包含Origin的值，如果有则浏览器会处理响应，我们就可以拿到响应数据，如果不包含则浏览器直接驳回，这时我们无法拿到响应数据。所以CORS的表象是让你觉得它与同源的ajax请求没啥区别，代码完全一样。\n\n前端和平常一样，利用ajax发送数据。\n后端服务器 server.js\n```JS\napp.get('/getNews', function(req, res){\n\n\tvar news = [\n\t\t\"this is a test message 1\",\n\t\t\"this is a test message 2\",\n\t\t\"this is a test message 3\",\n\t\t\"this is a test message 4\",\n\t\t\"this is a test message 5\",\n\t\t\"this is a test message 6\"\n\t]\n\n\tvar data = [];\n\tfor(var i=0; i<3; i++){\n\t\tvar index = parseInt(Math.random()*news.length);\n\t\tdata.push(news[index]);\n\t\tnews.splice(index, 1);\n\t}\n\n    // This is the point!! Backend has to add this to response header. So that front can get data\n    res.setHeader('Access-Control-Allow-Origin','http://localhost:8080');\n\n    // This is the point!! Allow anybody to get date\n    res.setHeader('Access-Control-Allow-Origin','*');\n})\n\n```\nCORS的特性：\n\n- JSONP 只能实现 GET 请求，而 CORS 支持所有类型的 HTTP 请求\n- 使用 CORS ，开发者可以是使用普通的 XMLHttpRequest 发起请求和获取数据，比起 JSONP 有更好的错误处理\n- 虽然绝大多数现代的浏览器都已经支持 CORS，但是 CORS 的兼容性比不上 JSONP，IE10以下的浏览器不支持CORS\n\n### 服务端中转跨域\nJSONP、CORS 这两种跨域请求方式都需要对方服务器支持。假设对方服务器不提供支持怎么办？还有一个必杀技，自己搭建 server 中请求中转。\n\n假设 我们的页面为 https://jirengu.github.io/weather/weather.html， 需要向 https://weather.com/now 这个接口发送请求获取数据，但此接口不支持JSONP 和 CORS跨域。\n\n我们可以这样做\n\n- 搭建服务器，创建接口，如 https://api.jirengu.com/weather\n- 设置这个接口允许 CORS 跨域\n- 我们的页面向自己的这个接口发请求\n- 接口收到请求后，在服务器端向https://weather.com/now 这个接口要数据（在服务端不存在同源策略限制），拿到数据后，返回给前端页面。\n\n","slug":"关于js跨域及解决方法","published":1,"updated":"2019-11-23T23:54:38.000Z","layout":"post","photos":[],"link":"","_id":"ck3it6k2t003hteyivra9f7it","content":"<p>关于跨域</p>\n<a id=\"more\"></a>\n\n<h3 id=\"同源策略（Same-origin-Policy）和跨域\"><a href=\"#同源策略（Same-origin-Policy）和跨域\" class=\"headerlink\" title=\"同源策略（Same origin Policy）和跨域\"></a>同源策略（Same origin Policy）和跨域</h3><p>浏览器处于安全方面的考虑，只允许与本域下的接口进行交互。<br>不同源的客户端脚本在没有明确授权的情况下。不能读写对方的资源。</p>\n<p>简而言之就是你当前网页的协议名，域名和端口名与你请求的接口地址的各项是否相同，如果不相同则浏览器将会对返回的数据进行拦截。<br>这是隔离潜在恶意文件的关键安全机制。</p>\n<p>本域指的是：</p>\n<ul>\n<li>同协议： 比如都是http或者https</li>\n<li>同域名： 比如都是<a href=\"http://kisky3.com/a\" target=\"_blank\" rel=\"noopener\">http://kisky3.com/a</a> 和 <a href=\"http://kisky3.com/b\" target=\"_blank\" rel=\"noopener\">http://kisky3.com/b</a></li>\n<li>同端口： 比如都是80端口</li>\n</ul>\n<p>注意：对于当前页面来说页面存放的JS文件的域不重要，而是指当前页面的URL，也就是加载JS页面所在的域。</p>\n<p>而跨域就是绕过浏览器的同源策略，让前端能够获取到数据。</p>\n<h3 id=\"跨域的几种方法\"><a href=\"#跨域的几种方法\" class=\"headerlink\" title=\"跨域的几种方法\"></a>跨域的几种方法</h3><h4 id=\"JSONP（JSON-with-padding）\"><a href=\"#JSONP（JSON-with-padding）\" class=\"headerlink\" title=\"JSONP（JSON with padding）\"></a>JSONP（JSON with padding）</h4><p>JSONP就是通过script标签加载数据的方式去获取数据当作JS代码来执行。<br>提前在页面上声明一个函数。函数名通过接口传参的方式传给候梯，后台解析道函数名后在原始数据上包裹这个函数名，发送给前端。<br>换句话说，JSONP需要对应接口的后端的配合才能实现。</p>\n<p>例如</p>\n<p>后端服务器server.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">'/getNews'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> news = [</span><br><span class=\"line\">\t\t<span class=\"string\">\"this is a test message 1\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"this is a test message 2\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"this is a test message 3\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"this is a test message 4\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"this is a test message 5\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"this is a test message 6\"</span></span><br><span class=\"line\">\t]</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> data = [];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">3</span>; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> index = <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">Math</span>.random()*news.length);</span><br><span class=\"line\">\t\tdata.push(news[index]);</span><br><span class=\"line\">\t\tnews.splice(index, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// This is the point!! Backend has to check whether front request ask for a callback date or not</span></span><br><span class=\"line\">    <span class=\"comment\">// If so retuen a callback object contains JSON data =&gt; cb + '('+ JSON.stringify(data) + ')'</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> cb = req.query.callback;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(cb)&#123;</span><br><span class=\"line\">\t\tres.send(cb + <span class=\"string\">'('</span>+ <span class=\"built_in\">JSON</span>.stringify(data) + <span class=\"string\">')'</span>);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\tres.send(data);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>前端页面 index.html</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Front created a script with callback object and require date to backend server.js </span></span><br><span class=\"line\"> $(<span class=\"string\">'.change'</span>).addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</span><br><span class=\"line\">    script.src = <span class=\"string\">'http://127.0.0.1/getNews?callback=appendHtml'</span>;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.head.appendChild(script);</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.head.removeChild(script);</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>JSONP的特性：</p>\n<ul>\n<li>它不像XMLHttpRequest对象实现的Ajax请求那样受到同源策略的限制；它的兼容性更好，在更加古老的浏览器中都可以运行。</li>\n<li>它只支持 GET 请求，而不支持 POST 请求等其他类型的 HTTP 请求。</li>\n</ul>\n<h4 id=\"CORS-Cross-Origin-Resource-Sharing\"><a href=\"#CORS-Cross-Origin-Resource-Sharing\" class=\"headerlink\" title=\"CORS(Cross-Origin Resource Sharing)\"></a>CORS(Cross-Origin Resource Sharing)</h4><p>CORS全称是跨域资源共享,是一种ajax跨域请求资源的方式，支持现代浏览器，IE支持10以上。<br>实现方法很简单，当你从XMLHttpRequest发送请求时，浏览器发现该请求不符合同源策略，会给改请求加一个请求头：Origin，<br>后台进行一系列处理，如果确定接受请求则在返回结果中加入一个响应头：Access-Control-Origin;<br>浏览器判断相应头中事都包含Origin的值，如果有则浏览器会处理响应，我们就可以拿到响应数据，如果不包含则浏览器直接驳回，这时我们无法拿到响应数据。所以CORS的表象是让你觉得它与同源的ajax请求没啥区别，代码完全一样。</p>\n<p>前端和平常一样，利用ajax发送数据。<br>后端服务器 server.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">'/getNews'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> news = [</span><br><span class=\"line\">\t\t<span class=\"string\">\"this is a test message 1\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"this is a test message 2\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"this is a test message 3\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"this is a test message 4\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"this is a test message 5\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"this is a test message 6\"</span></span><br><span class=\"line\">\t]</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> data = [];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">3</span>; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> index = <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">Math</span>.random()*news.length);</span><br><span class=\"line\">\t\tdata.push(news[index]);</span><br><span class=\"line\">\t\tnews.splice(index, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// This is the point!! Backend has to add this to response header. So that front can get data</span></span><br><span class=\"line\">    res.setHeader(<span class=\"string\">'Access-Control-Allow-Origin'</span>,<span class=\"string\">'http://localhost:8080'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// This is the point!! Allow anybody to get date</span></span><br><span class=\"line\">    res.setHeader(<span class=\"string\">'Access-Control-Allow-Origin'</span>,<span class=\"string\">'*'</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>CORS的特性：</p>\n<ul>\n<li>JSONP 只能实现 GET 请求，而 CORS 支持所有类型的 HTTP 请求</li>\n<li>使用 CORS ，开发者可以是使用普通的 XMLHttpRequest 发起请求和获取数据，比起 JSONP 有更好的错误处理</li>\n<li>虽然绝大多数现代的浏览器都已经支持 CORS，但是 CORS 的兼容性比不上 JSONP，IE10以下的浏览器不支持CORS</li>\n</ul>\n<h3 id=\"服务端中转跨域\"><a href=\"#服务端中转跨域\" class=\"headerlink\" title=\"服务端中转跨域\"></a>服务端中转跨域</h3><p>JSONP、CORS 这两种跨域请求方式都需要对方服务器支持。假设对方服务器不提供支持怎么办？还有一个必杀技，自己搭建 server 中请求中转。</p>\n<p>假设 我们的页面为 <a href=\"https://jirengu.github.io/weather/weather.html，\" target=\"_blank\" rel=\"noopener\">https://jirengu.github.io/weather/weather.html，</a> 需要向 <a href=\"https://weather.com/now\" target=\"_blank\" rel=\"noopener\">https://weather.com/now</a> 这个接口发送请求获取数据，但此接口不支持JSONP 和 CORS跨域。</p>\n<p>我们可以这样做</p>\n<ul>\n<li>搭建服务器，创建接口，如 <a href=\"https://api.jirengu.com/weather\" target=\"_blank\" rel=\"noopener\">https://api.jirengu.com/weather</a></li>\n<li>设置这个接口允许 CORS 跨域</li>\n<li>我们的页面向自己的这个接口发请求</li>\n<li>接口收到请求后，在服务器端向<a href=\"https://weather.com/now\" target=\"_blank\" rel=\"noopener\">https://weather.com/now</a> 这个接口要数据（在服务端不存在同源策略限制），拿到数据后，返回给前端页面。</li>\n</ul>\n","site":{"data":{}},"thumbnailImageUrl":"https://kisky3.github.io/2019/06/10/关于js跨域及解决方法/20190610.png","excerpt":"<p>关于跨域</p>","more":"<h3 id=\"同源策略（Same-origin-Policy）和跨域\"><a href=\"#同源策略（Same-origin-Policy）和跨域\" class=\"headerlink\" title=\"同源策略（Same origin Policy）和跨域\"></a>同源策略（Same origin Policy）和跨域</h3><p>浏览器处于安全方面的考虑，只允许与本域下的接口进行交互。<br>不同源的客户端脚本在没有明确授权的情况下。不能读写对方的资源。</p>\n<p>简而言之就是你当前网页的协议名，域名和端口名与你请求的接口地址的各项是否相同，如果不相同则浏览器将会对返回的数据进行拦截。<br>这是隔离潜在恶意文件的关键安全机制。</p>\n<p>本域指的是：</p>\n<ul>\n<li>同协议： 比如都是http或者https</li>\n<li>同域名： 比如都是<a href=\"http://kisky3.com/a\" target=\"_blank\" rel=\"noopener\">http://kisky3.com/a</a> 和 <a href=\"http://kisky3.com/b\" target=\"_blank\" rel=\"noopener\">http://kisky3.com/b</a></li>\n<li>同端口： 比如都是80端口</li>\n</ul>\n<p>注意：对于当前页面来说页面存放的JS文件的域不重要，而是指当前页面的URL，也就是加载JS页面所在的域。</p>\n<p>而跨域就是绕过浏览器的同源策略，让前端能够获取到数据。</p>\n<h3 id=\"跨域的几种方法\"><a href=\"#跨域的几种方法\" class=\"headerlink\" title=\"跨域的几种方法\"></a>跨域的几种方法</h3><h4 id=\"JSONP（JSON-with-padding）\"><a href=\"#JSONP（JSON-with-padding）\" class=\"headerlink\" title=\"JSONP（JSON with padding）\"></a>JSONP（JSON with padding）</h4><p>JSONP就是通过script标签加载数据的方式去获取数据当作JS代码来执行。<br>提前在页面上声明一个函数。函数名通过接口传参的方式传给候梯，后台解析道函数名后在原始数据上包裹这个函数名，发送给前端。<br>换句话说，JSONP需要对应接口的后端的配合才能实现。</p>\n<p>例如</p>\n<p>后端服务器server.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">'/getNews'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> news = [</span><br><span class=\"line\">\t\t<span class=\"string\">\"this is a test message 1\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"this is a test message 2\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"this is a test message 3\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"this is a test message 4\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"this is a test message 5\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"this is a test message 6\"</span></span><br><span class=\"line\">\t]</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> data = [];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">3</span>; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> index = <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">Math</span>.random()*news.length);</span><br><span class=\"line\">\t\tdata.push(news[index]);</span><br><span class=\"line\">\t\tnews.splice(index, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// This is the point!! Backend has to check whether front request ask for a callback date or not</span></span><br><span class=\"line\">    <span class=\"comment\">// If so retuen a callback object contains JSON data =&gt; cb + '('+ JSON.stringify(data) + ')'</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> cb = req.query.callback;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(cb)&#123;</span><br><span class=\"line\">\t\tres.send(cb + <span class=\"string\">'('</span>+ <span class=\"built_in\">JSON</span>.stringify(data) + <span class=\"string\">')'</span>);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\tres.send(data);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>前端页面 index.html</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Front created a script with callback object and require date to backend server.js </span></span><br><span class=\"line\"> $(<span class=\"string\">'.change'</span>).addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</span><br><span class=\"line\">    script.src = <span class=\"string\">'http://127.0.0.1/getNews?callback=appendHtml'</span>;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.head.appendChild(script);</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.head.removeChild(script);</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>JSONP的特性：</p>\n<ul>\n<li>它不像XMLHttpRequest对象实现的Ajax请求那样受到同源策略的限制；它的兼容性更好，在更加古老的浏览器中都可以运行。</li>\n<li>它只支持 GET 请求，而不支持 POST 请求等其他类型的 HTTP 请求。</li>\n</ul>\n<h4 id=\"CORS-Cross-Origin-Resource-Sharing\"><a href=\"#CORS-Cross-Origin-Resource-Sharing\" class=\"headerlink\" title=\"CORS(Cross-Origin Resource Sharing)\"></a>CORS(Cross-Origin Resource Sharing)</h4><p>CORS全称是跨域资源共享,是一种ajax跨域请求资源的方式，支持现代浏览器，IE支持10以上。<br>实现方法很简单，当你从XMLHttpRequest发送请求时，浏览器发现该请求不符合同源策略，会给改请求加一个请求头：Origin，<br>后台进行一系列处理，如果确定接受请求则在返回结果中加入一个响应头：Access-Control-Origin;<br>浏览器判断相应头中事都包含Origin的值，如果有则浏览器会处理响应，我们就可以拿到响应数据，如果不包含则浏览器直接驳回，这时我们无法拿到响应数据。所以CORS的表象是让你觉得它与同源的ajax请求没啥区别，代码完全一样。</p>\n<p>前端和平常一样，利用ajax发送数据。<br>后端服务器 server.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">'/getNews'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> news = [</span><br><span class=\"line\">\t\t<span class=\"string\">\"this is a test message 1\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"this is a test message 2\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"this is a test message 3\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"this is a test message 4\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"this is a test message 5\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"this is a test message 6\"</span></span><br><span class=\"line\">\t]</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> data = [];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">3</span>; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> index = <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">Math</span>.random()*news.length);</span><br><span class=\"line\">\t\tdata.push(news[index]);</span><br><span class=\"line\">\t\tnews.splice(index, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// This is the point!! Backend has to add this to response header. So that front can get data</span></span><br><span class=\"line\">    res.setHeader(<span class=\"string\">'Access-Control-Allow-Origin'</span>,<span class=\"string\">'http://localhost:8080'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// This is the point!! Allow anybody to get date</span></span><br><span class=\"line\">    res.setHeader(<span class=\"string\">'Access-Control-Allow-Origin'</span>,<span class=\"string\">'*'</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>CORS的特性：</p>\n<ul>\n<li>JSONP 只能实现 GET 请求，而 CORS 支持所有类型的 HTTP 请求</li>\n<li>使用 CORS ，开发者可以是使用普通的 XMLHttpRequest 发起请求和获取数据，比起 JSONP 有更好的错误处理</li>\n<li>虽然绝大多数现代的浏览器都已经支持 CORS，但是 CORS 的兼容性比不上 JSONP，IE10以下的浏览器不支持CORS</li>\n</ul>\n<h3 id=\"服务端中转跨域\"><a href=\"#服务端中转跨域\" class=\"headerlink\" title=\"服务端中转跨域\"></a>服务端中转跨域</h3><p>JSONP、CORS 这两种跨域请求方式都需要对方服务器支持。假设对方服务器不提供支持怎么办？还有一个必杀技，自己搭建 server 中请求中转。</p>\n<p>假设 我们的页面为 <a href=\"https://jirengu.github.io/weather/weather.html，\" target=\"_blank\" rel=\"noopener\">https://jirengu.github.io/weather/weather.html，</a> 需要向 <a href=\"https://weather.com/now\" target=\"_blank\" rel=\"noopener\">https://weather.com/now</a> 这个接口发送请求获取数据，但此接口不支持JSONP 和 CORS跨域。</p>\n<p>我们可以这样做</p>\n<ul>\n<li>搭建服务器，创建接口，如 <a href=\"https://api.jirengu.com/weather\" target=\"_blank\" rel=\"noopener\">https://api.jirengu.com/weather</a></li>\n<li>设置这个接口允许 CORS 跨域</li>\n<li>我们的页面向自己的这个接口发请求</li>\n<li>接口收到请求后，在服务器端向<a href=\"https://weather.com/now\" target=\"_blank\" rel=\"noopener\">https://weather.com/now</a> 这个接口要数据（在服务端不存在同源策略限制），拿到数据后，返回给前端页面。</li>\n</ul>"},{"title":"About Webpage Rendering","date":"2019-02-23T09:03:58.000Z","clearReading":true,"thumbnailImage":"20190223.jpg","thumbnailImagePosition":"left","coverImage":"cover.jpg","coverCaption":"Hello World, Hello Programming","coverSize":"partial","comments":0,"_content":"\n关于浏览器渲染机制\n<!--more-->\n\n### 前言\n浏览器的内核是指支持浏览器运行的最核心的程序，分为两个部分的，一是渲染引擎，另一个是JS引擎。\n\n渲染引擎在不同的浏览器中也不是都相同的。比如在 Firefox 中叫做 Gecko，在 Chrome 和 Safari 中都是基于 WebKit 开发的。\n\n***\n\n### 浏览器渲染步骤\n<img src=\"./1.png\" style=\"width:500px\">\n\n#### 1.解析HTML标签，构建DOM树\n浏览器会遵守一套步骤将HTML 文件转换为 DOM 树。宏观上，可以分为几个步骤：\n字节数据 => 字符串 => Token => Node => DOM\n\n比如\n```HTML\n<html>\n<head>\n    <title>Web page parsing</title>\n</head>\n<body>\n    <div>\n        <h1>Web page parsing</h1>\n        <p>This is an example Web page.</p>\n    </div>\n</body>\n</html>\n```\n\n上面这段HTML会解析成这样：\n<img src=\"./2.png\" style=\"width:500px\">\n\n#### 2.解析CSS标签，构建CSSOM树\n\nDOM会捕获页面的内容，但浏览器还需要知道页面如何展示，所以需要构建CSSOM。\n构建CSSOM的过程与构建DOM的过程非常相似，当浏览器接收到一段CSS，浏览器首先要做的是识别出Token，然后构建节点并生成CSSOM。\n字节数据 => 字符串 => Token => Node => CSSOM\n\n#### 3.把DOM和CSSOM组合成渲染树（reder tree）\n当我们生成 DOM 树和 CSSOM 树以后，就需要将这两棵树组合为渲染树。然后在渲染树的基础上进行布局，计算每个节点的几何结构\n\n<img src=\"./3.png\" style=\"width:500px\">\n\n#### 4. 把每个节点绘制到屏幕上（painting）\n当浏览器生成渲染树以后，就会根据渲染树来进行布局（也可以叫做回流）。\n\n这一阶段浏览器要做的事情是要弄清楚各个节点在页面中的确切位置和大小。通常这一行为也被称为“自动重排”。\n布局流程的输出是一个“盒模型”，它会精确地捕获每个元素在视口内的确切位置和尺寸，所有相对测量值都将转换为屏幕上的绝对像素。\n布局完成后，浏览器会立即发出“Paint Setup”和“Paint”事件，将渲染树转换成屏幕上的像素。\n\n***\n\n### 关于JS渲染\nJavaScript的加载、解析与执行会阻塞DOM的构建，也就是说，在构建DOM时，HTML解析器若遇到了JavaScript，那么它会暂停构建DOM，将控制权移交给JavaScript引擎，等JavaScript引擎运行完毕，浏览器再从中断的地方恢复DOM构建。\n\n也就是说，如果你想首屏渲染的越快，就越不应该在首屏就加载 JS 文件，这也是都建议将 script 标签放在 body 标签底部的原因。当然在当下，并不是说 script 标签必须放在底部，因为你可以给 script 标签添加 defer 或者 async 属性\n\nJS文件不只是阻塞DOM的构建，它会导致CSSOM也阻塞DOM的构建。\n因为JavaScript不只是可以改DOM，它还可以更改样式，也就是它可以更改CSSOM\n原本DOM和CSSOM的构建是互不影响，井水不犯河水，但是一旦引入了JavaScript，CSSOM也开始阻塞DOM的构建，只有CSSOM构建完毕后，DOM再恢复DOM构建。\n\n***\n\n### 关于回流和重绘\n我们知道，当网页生成的时候，至少会渲染一次。在用户访问的过程中，还会不断重新渲染。重新渲染会重复上图中的第四步(回流)+第五步(重绘)或者只有第五个步(重绘)。\n\n#### repaint：重绘\n页面元素不发生位置的变化，不需要重新计算所有元素的位置。比如说改变DOM的颜色等\n\n#### reflow： 回流\n当我们增加，删除更新DOM元素的时候，元素自身位置发生变化，导致其余的元素位置也发生变化，导致页面必须重新计算的现象称为回流\n比如\n\n- 添加或者删除可见的DOM元素；\n- 元素尺寸改变——边距、填充、边框、宽度和高度\n- 内容变化，比如用户在input框中输入文字\n- 浏览器窗口尺寸改变——resize事件发生时\n- 计算 offsetWidth 和 offsetHeight 属性\n- 设置 style 属性的值\n- 回流必定会发生重绘，重绘不一定会引发回流。\n- 重绘和回流会在我们设置节点样式时频繁出现，同时也会很大程度上影响性能。回流所需的成本比重绘高的多，改变父节点里的子节点很可能会导致父节点的一系列回流。\n\n***\n\n### async和defer的作用是什么\n没有 defer 或 async，浏览器会立即加载并执行指定的脚本，也就是说不等待后续载入的文档元素，读到就加载并执行。\n\n#### (异步下载)\nasync 属性表示异步执行引入的 JavaScript，与 defer 的区别在于，如果已经加载好，就会开始执行——无论此刻是 HTML 解析阶段还是 DOMContentLoaded 触发之后。\n\n#### (延迟执行)\ndefer 属性表示延迟执行引入的 JavaScript，即这段 JavaScript 加载时 HTML 并未停止解析，这两个过程是并行的。整个 document 解析完毕且 defer-script 也加载完成之后（这两件事情的顺序无关），会执行所有由 defer-script 加载的 JavaScript 代码，然后触发 DOMContentLoaded 事件。\n\ndefer 与相比普通 script，有两点区别：载入 JavaScript 文件时不阻塞 HTML 的解析，执行阶段被放到 HTML 标签解析完成之后。在加载多个JS脚本的时候，async是无顺序的加载，而defer是有顺序的加载。\n\n***\n\n### 关于白屏和 FOUC\n由于浏览器的渲染机制不同，在渲染页面时会出现两种常见的不良现象—-白屏问题和FOUS（无样式内容闪烁）\n\n#### FOUC：\n由于浏览器渲染机制（比如firefox），再CSS加载之前，先呈现了HTML，就会导致展示出无样式内容，然后样式突然呈现的现象；\n\n#### 白屏：\n有些浏览器渲染机制（比如chrome）要先构建DOM树和CSSOM树，构建完成后再进行渲染，如果CSS部分放在HTML尾部，由于CSS未加载完成，浏览器迟迟未渲染，从而导致白屏；也可能是把js文件放在头部，脚本会阻塞后面内容的呈现，脚本会阻塞其后组件的下载，出现白屏问题。\n\n***\n\n### 总结\n浏览器工作流程：构建DOM -> 构建CSSOM -> 构建渲染树 -> 布局 -> 绘制。\n\nCSSOM会阻塞渲染，只有当CSSOM构建完毕后才会进入下一个阶段构建渲染树。\n\n通常情况下DOM和CSSOM是并行构建的，但是当浏览器遇到一个script标签时，DOM构建将暂停，直至脚本完成执行。但由于JavaScript可以修改CSSOM，所以需要等CSSOM构建完毕后再执行JS。\n\n如果你想首屏渲染的越快，就越不应该在首屏就加载 JS 文件，建议将 script 标签放在 body 标签底部。\n","source":"_posts/关于浏览器渲染机制.md","raw":"---\ntitle: About Webpage Rendering\ndate: 2019-02-23 18:03:58\ntags:\n- Browser\nclearReading: true\nthumbnailImage: 20190223.jpg\nthumbnailImagePosition: left\ncoverImage: cover.jpg\ncoverCaption: \"Hello World, Hello Programming\"\ncoverSize: partial\ncomments: false\ncategories: Front-end Knowledge\n---\n\n关于浏览器渲染机制\n<!--more-->\n\n### 前言\n浏览器的内核是指支持浏览器运行的最核心的程序，分为两个部分的，一是渲染引擎，另一个是JS引擎。\n\n渲染引擎在不同的浏览器中也不是都相同的。比如在 Firefox 中叫做 Gecko，在 Chrome 和 Safari 中都是基于 WebKit 开发的。\n\n***\n\n### 浏览器渲染步骤\n<img src=\"./1.png\" style=\"width:500px\">\n\n#### 1.解析HTML标签，构建DOM树\n浏览器会遵守一套步骤将HTML 文件转换为 DOM 树。宏观上，可以分为几个步骤：\n字节数据 => 字符串 => Token => Node => DOM\n\n比如\n```HTML\n<html>\n<head>\n    <title>Web page parsing</title>\n</head>\n<body>\n    <div>\n        <h1>Web page parsing</h1>\n        <p>This is an example Web page.</p>\n    </div>\n</body>\n</html>\n```\n\n上面这段HTML会解析成这样：\n<img src=\"./2.png\" style=\"width:500px\">\n\n#### 2.解析CSS标签，构建CSSOM树\n\nDOM会捕获页面的内容，但浏览器还需要知道页面如何展示，所以需要构建CSSOM。\n构建CSSOM的过程与构建DOM的过程非常相似，当浏览器接收到一段CSS，浏览器首先要做的是识别出Token，然后构建节点并生成CSSOM。\n字节数据 => 字符串 => Token => Node => CSSOM\n\n#### 3.把DOM和CSSOM组合成渲染树（reder tree）\n当我们生成 DOM 树和 CSSOM 树以后，就需要将这两棵树组合为渲染树。然后在渲染树的基础上进行布局，计算每个节点的几何结构\n\n<img src=\"./3.png\" style=\"width:500px\">\n\n#### 4. 把每个节点绘制到屏幕上（painting）\n当浏览器生成渲染树以后，就会根据渲染树来进行布局（也可以叫做回流）。\n\n这一阶段浏览器要做的事情是要弄清楚各个节点在页面中的确切位置和大小。通常这一行为也被称为“自动重排”。\n布局流程的输出是一个“盒模型”，它会精确地捕获每个元素在视口内的确切位置和尺寸，所有相对测量值都将转换为屏幕上的绝对像素。\n布局完成后，浏览器会立即发出“Paint Setup”和“Paint”事件，将渲染树转换成屏幕上的像素。\n\n***\n\n### 关于JS渲染\nJavaScript的加载、解析与执行会阻塞DOM的构建，也就是说，在构建DOM时，HTML解析器若遇到了JavaScript，那么它会暂停构建DOM，将控制权移交给JavaScript引擎，等JavaScript引擎运行完毕，浏览器再从中断的地方恢复DOM构建。\n\n也就是说，如果你想首屏渲染的越快，就越不应该在首屏就加载 JS 文件，这也是都建议将 script 标签放在 body 标签底部的原因。当然在当下，并不是说 script 标签必须放在底部，因为你可以给 script 标签添加 defer 或者 async 属性\n\nJS文件不只是阻塞DOM的构建，它会导致CSSOM也阻塞DOM的构建。\n因为JavaScript不只是可以改DOM，它还可以更改样式，也就是它可以更改CSSOM\n原本DOM和CSSOM的构建是互不影响，井水不犯河水，但是一旦引入了JavaScript，CSSOM也开始阻塞DOM的构建，只有CSSOM构建完毕后，DOM再恢复DOM构建。\n\n***\n\n### 关于回流和重绘\n我们知道，当网页生成的时候，至少会渲染一次。在用户访问的过程中，还会不断重新渲染。重新渲染会重复上图中的第四步(回流)+第五步(重绘)或者只有第五个步(重绘)。\n\n#### repaint：重绘\n页面元素不发生位置的变化，不需要重新计算所有元素的位置。比如说改变DOM的颜色等\n\n#### reflow： 回流\n当我们增加，删除更新DOM元素的时候，元素自身位置发生变化，导致其余的元素位置也发生变化，导致页面必须重新计算的现象称为回流\n比如\n\n- 添加或者删除可见的DOM元素；\n- 元素尺寸改变——边距、填充、边框、宽度和高度\n- 内容变化，比如用户在input框中输入文字\n- 浏览器窗口尺寸改变——resize事件发生时\n- 计算 offsetWidth 和 offsetHeight 属性\n- 设置 style 属性的值\n- 回流必定会发生重绘，重绘不一定会引发回流。\n- 重绘和回流会在我们设置节点样式时频繁出现，同时也会很大程度上影响性能。回流所需的成本比重绘高的多，改变父节点里的子节点很可能会导致父节点的一系列回流。\n\n***\n\n### async和defer的作用是什么\n没有 defer 或 async，浏览器会立即加载并执行指定的脚本，也就是说不等待后续载入的文档元素，读到就加载并执行。\n\n#### (异步下载)\nasync 属性表示异步执行引入的 JavaScript，与 defer 的区别在于，如果已经加载好，就会开始执行——无论此刻是 HTML 解析阶段还是 DOMContentLoaded 触发之后。\n\n#### (延迟执行)\ndefer 属性表示延迟执行引入的 JavaScript，即这段 JavaScript 加载时 HTML 并未停止解析，这两个过程是并行的。整个 document 解析完毕且 defer-script 也加载完成之后（这两件事情的顺序无关），会执行所有由 defer-script 加载的 JavaScript 代码，然后触发 DOMContentLoaded 事件。\n\ndefer 与相比普通 script，有两点区别：载入 JavaScript 文件时不阻塞 HTML 的解析，执行阶段被放到 HTML 标签解析完成之后。在加载多个JS脚本的时候，async是无顺序的加载，而defer是有顺序的加载。\n\n***\n\n### 关于白屏和 FOUC\n由于浏览器的渲染机制不同，在渲染页面时会出现两种常见的不良现象—-白屏问题和FOUS（无样式内容闪烁）\n\n#### FOUC：\n由于浏览器渲染机制（比如firefox），再CSS加载之前，先呈现了HTML，就会导致展示出无样式内容，然后样式突然呈现的现象；\n\n#### 白屏：\n有些浏览器渲染机制（比如chrome）要先构建DOM树和CSSOM树，构建完成后再进行渲染，如果CSS部分放在HTML尾部，由于CSS未加载完成，浏览器迟迟未渲染，从而导致白屏；也可能是把js文件放在头部，脚本会阻塞后面内容的呈现，脚本会阻塞其后组件的下载，出现白屏问题。\n\n***\n\n### 总结\n浏览器工作流程：构建DOM -> 构建CSSOM -> 构建渲染树 -> 布局 -> 绘制。\n\nCSSOM会阻塞渲染，只有当CSSOM构建完毕后才会进入下一个阶段构建渲染树。\n\n通常情况下DOM和CSSOM是并行构建的，但是当浏览器遇到一个script标签时，DOM构建将暂停，直至脚本完成执行。但由于JavaScript可以修改CSSOM，所以需要等CSSOM构建完毕后再执行JS。\n\n如果你想首屏渲染的越快，就越不应该在首屏就加载 JS 文件，建议将 script 标签放在 body 标签底部。\n","slug":"关于浏览器渲染机制","published":1,"updated":"2019-11-23T23:54:38.000Z","layout":"post","photos":[],"link":"","_id":"ck3it6k2v003lteyizyappznm","content":"<p>关于浏览器渲染机制</p>\n<a id=\"more\"></a>\n\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>浏览器的内核是指支持浏览器运行的最核心的程序，分为两个部分的，一是渲染引擎，另一个是JS引擎。</p>\n<p>渲染引擎在不同的浏览器中也不是都相同的。比如在 Firefox 中叫做 Gecko，在 Chrome 和 Safari 中都是基于 WebKit 开发的。</p>\n<hr>\n<h3 id=\"浏览器渲染步骤\"><a href=\"#浏览器渲染步骤\" class=\"headerlink\" title=\"浏览器渲染步骤\"></a>浏览器渲染步骤</h3><img src=\"./1.png\" style=\"width:500px\">\n\n<h4 id=\"1-解析HTML标签，构建DOM树\"><a href=\"#1-解析HTML标签，构建DOM树\" class=\"headerlink\" title=\"1.解析HTML标签，构建DOM树\"></a>1.解析HTML标签，构建DOM树</h4><p>浏览器会遵守一套步骤将HTML 文件转换为 DOM 树。宏观上，可以分为几个步骤：<br>字节数据 =&gt; 字符串 =&gt; Token =&gt; Node =&gt; DOM</p>\n<p>比如</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Web page parsing<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Web page parsing<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>This is an example Web page.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面这段HTML会解析成这样：<br><img src=\"./2.png\" style=\"width:500px\"></p>\n<h4 id=\"2-解析CSS标签，构建CSSOM树\"><a href=\"#2-解析CSS标签，构建CSSOM树\" class=\"headerlink\" title=\"2.解析CSS标签，构建CSSOM树\"></a>2.解析CSS标签，构建CSSOM树</h4><p>DOM会捕获页面的内容，但浏览器还需要知道页面如何展示，所以需要构建CSSOM。<br>构建CSSOM的过程与构建DOM的过程非常相似，当浏览器接收到一段CSS，浏览器首先要做的是识别出Token，然后构建节点并生成CSSOM。<br>字节数据 =&gt; 字符串 =&gt; Token =&gt; Node =&gt; CSSOM</p>\n<h4 id=\"3-把DOM和CSSOM组合成渲染树（reder-tree）\"><a href=\"#3-把DOM和CSSOM组合成渲染树（reder-tree）\" class=\"headerlink\" title=\"3.把DOM和CSSOM组合成渲染树（reder tree）\"></a>3.把DOM和CSSOM组合成渲染树（reder tree）</h4><p>当我们生成 DOM 树和 CSSOM 树以后，就需要将这两棵树组合为渲染树。然后在渲染树的基础上进行布局，计算每个节点的几何结构</p>\n<img src=\"./3.png\" style=\"width:500px\">\n\n<h4 id=\"4-把每个节点绘制到屏幕上（painting）\"><a href=\"#4-把每个节点绘制到屏幕上（painting）\" class=\"headerlink\" title=\"4. 把每个节点绘制到屏幕上（painting）\"></a>4. 把每个节点绘制到屏幕上（painting）</h4><p>当浏览器生成渲染树以后，就会根据渲染树来进行布局（也可以叫做回流）。</p>\n<p>这一阶段浏览器要做的事情是要弄清楚各个节点在页面中的确切位置和大小。通常这一行为也被称为“自动重排”。<br>布局流程的输出是一个“盒模型”，它会精确地捕获每个元素在视口内的确切位置和尺寸，所有相对测量值都将转换为屏幕上的绝对像素。<br>布局完成后，浏览器会立即发出“Paint Setup”和“Paint”事件，将渲染树转换成屏幕上的像素。</p>\n<hr>\n<h3 id=\"关于JS渲染\"><a href=\"#关于JS渲染\" class=\"headerlink\" title=\"关于JS渲染\"></a>关于JS渲染</h3><p>JavaScript的加载、解析与执行会阻塞DOM的构建，也就是说，在构建DOM时，HTML解析器若遇到了JavaScript，那么它会暂停构建DOM，将控制权移交给JavaScript引擎，等JavaScript引擎运行完毕，浏览器再从中断的地方恢复DOM构建。</p>\n<p>也就是说，如果你想首屏渲染的越快，就越不应该在首屏就加载 JS 文件，这也是都建议将 script 标签放在 body 标签底部的原因。当然在当下，并不是说 script 标签必须放在底部，因为你可以给 script 标签添加 defer 或者 async 属性</p>\n<p>JS文件不只是阻塞DOM的构建，它会导致CSSOM也阻塞DOM的构建。<br>因为JavaScript不只是可以改DOM，它还可以更改样式，也就是它可以更改CSSOM<br>原本DOM和CSSOM的构建是互不影响，井水不犯河水，但是一旦引入了JavaScript，CSSOM也开始阻塞DOM的构建，只有CSSOM构建完毕后，DOM再恢复DOM构建。</p>\n<hr>\n<h3 id=\"关于回流和重绘\"><a href=\"#关于回流和重绘\" class=\"headerlink\" title=\"关于回流和重绘\"></a>关于回流和重绘</h3><p>我们知道，当网页生成的时候，至少会渲染一次。在用户访问的过程中，还会不断重新渲染。重新渲染会重复上图中的第四步(回流)+第五步(重绘)或者只有第五个步(重绘)。</p>\n<h4 id=\"repaint：重绘\"><a href=\"#repaint：重绘\" class=\"headerlink\" title=\"repaint：重绘\"></a>repaint：重绘</h4><p>页面元素不发生位置的变化，不需要重新计算所有元素的位置。比如说改变DOM的颜色等</p>\n<h4 id=\"reflow：-回流\"><a href=\"#reflow：-回流\" class=\"headerlink\" title=\"reflow： 回流\"></a>reflow： 回流</h4><p>当我们增加，删除更新DOM元素的时候，元素自身位置发生变化，导致其余的元素位置也发生变化，导致页面必须重新计算的现象称为回流<br>比如</p>\n<ul>\n<li>添加或者删除可见的DOM元素；</li>\n<li>元素尺寸改变——边距、填充、边框、宽度和高度</li>\n<li>内容变化，比如用户在input框中输入文字</li>\n<li>浏览器窗口尺寸改变——resize事件发生时</li>\n<li>计算 offsetWidth 和 offsetHeight 属性</li>\n<li>设置 style 属性的值</li>\n<li>回流必定会发生重绘，重绘不一定会引发回流。</li>\n<li>重绘和回流会在我们设置节点样式时频繁出现，同时也会很大程度上影响性能。回流所需的成本比重绘高的多，改变父节点里的子节点很可能会导致父节点的一系列回流。</li>\n</ul>\n<hr>\n<h3 id=\"async和defer的作用是什么\"><a href=\"#async和defer的作用是什么\" class=\"headerlink\" title=\"async和defer的作用是什么\"></a>async和defer的作用是什么</h3><p>没有 defer 或 async，浏览器会立即加载并执行指定的脚本，也就是说不等待后续载入的文档元素，读到就加载并执行。</p>\n<h4 id=\"异步下载\"><a href=\"#异步下载\" class=\"headerlink\" title=\"(异步下载)\"></a>(异步下载)</h4><p>async 属性表示异步执行引入的 JavaScript，与 defer 的区别在于，如果已经加载好，就会开始执行——无论此刻是 HTML 解析阶段还是 DOMContentLoaded 触发之后。</p>\n<h4 id=\"延迟执行\"><a href=\"#延迟执行\" class=\"headerlink\" title=\"(延迟执行)\"></a>(延迟执行)</h4><p>defer 属性表示延迟执行引入的 JavaScript，即这段 JavaScript 加载时 HTML 并未停止解析，这两个过程是并行的。整个 document 解析完毕且 defer-script 也加载完成之后（这两件事情的顺序无关），会执行所有由 defer-script 加载的 JavaScript 代码，然后触发 DOMContentLoaded 事件。</p>\n<p>defer 与相比普通 script，有两点区别：载入 JavaScript 文件时不阻塞 HTML 的解析，执行阶段被放到 HTML 标签解析完成之后。在加载多个JS脚本的时候，async是无顺序的加载，而defer是有顺序的加载。</p>\n<hr>\n<h3 id=\"关于白屏和-FOUC\"><a href=\"#关于白屏和-FOUC\" class=\"headerlink\" title=\"关于白屏和 FOUC\"></a>关于白屏和 FOUC</h3><p>由于浏览器的渲染机制不同，在渲染页面时会出现两种常见的不良现象—-白屏问题和FOUS（无样式内容闪烁）</p>\n<h4 id=\"FOUC：\"><a href=\"#FOUC：\" class=\"headerlink\" title=\"FOUC：\"></a>FOUC：</h4><p>由于浏览器渲染机制（比如firefox），再CSS加载之前，先呈现了HTML，就会导致展示出无样式内容，然后样式突然呈现的现象；</p>\n<h4 id=\"白屏：\"><a href=\"#白屏：\" class=\"headerlink\" title=\"白屏：\"></a>白屏：</h4><p>有些浏览器渲染机制（比如chrome）要先构建DOM树和CSSOM树，构建完成后再进行渲染，如果CSS部分放在HTML尾部，由于CSS未加载完成，浏览器迟迟未渲染，从而导致白屏；也可能是把js文件放在头部，脚本会阻塞后面内容的呈现，脚本会阻塞其后组件的下载，出现白屏问题。</p>\n<hr>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>浏览器工作流程：构建DOM -&gt; 构建CSSOM -&gt; 构建渲染树 -&gt; 布局 -&gt; 绘制。</p>\n<p>CSSOM会阻塞渲染，只有当CSSOM构建完毕后才会进入下一个阶段构建渲染树。</p>\n<p>通常情况下DOM和CSSOM是并行构建的，但是当浏览器遇到一个script标签时，DOM构建将暂停，直至脚本完成执行。但由于JavaScript可以修改CSSOM，所以需要等CSSOM构建完毕后再执行JS。</p>\n<p>如果你想首屏渲染的越快，就越不应该在首屏就加载 JS 文件，建议将 script 标签放在 body 标签底部。</p>\n","site":{"data":{}},"thumbnailImageUrl":"https://kisky3.github.io/2019/02/23/关于浏览器渲染机制/20190223.jpg","excerpt":"<p>关于浏览器渲染机制</p>","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>浏览器的内核是指支持浏览器运行的最核心的程序，分为两个部分的，一是渲染引擎，另一个是JS引擎。</p>\n<p>渲染引擎在不同的浏览器中也不是都相同的。比如在 Firefox 中叫做 Gecko，在 Chrome 和 Safari 中都是基于 WebKit 开发的。</p>\n<hr>\n<h3 id=\"浏览器渲染步骤\"><a href=\"#浏览器渲染步骤\" class=\"headerlink\" title=\"浏览器渲染步骤\"></a>浏览器渲染步骤</h3><img src=\"./1.png\" style=\"width:500px\">\n\n<h4 id=\"1-解析HTML标签，构建DOM树\"><a href=\"#1-解析HTML标签，构建DOM树\" class=\"headerlink\" title=\"1.解析HTML标签，构建DOM树\"></a>1.解析HTML标签，构建DOM树</h4><p>浏览器会遵守一套步骤将HTML 文件转换为 DOM 树。宏观上，可以分为几个步骤：<br>字节数据 =&gt; 字符串 =&gt; Token =&gt; Node =&gt; DOM</p>\n<p>比如</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Web page parsing<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Web page parsing<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>This is an example Web page.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面这段HTML会解析成这样：<br><img src=\"./2.png\" style=\"width:500px\"></p>\n<h4 id=\"2-解析CSS标签，构建CSSOM树\"><a href=\"#2-解析CSS标签，构建CSSOM树\" class=\"headerlink\" title=\"2.解析CSS标签，构建CSSOM树\"></a>2.解析CSS标签，构建CSSOM树</h4><p>DOM会捕获页面的内容，但浏览器还需要知道页面如何展示，所以需要构建CSSOM。<br>构建CSSOM的过程与构建DOM的过程非常相似，当浏览器接收到一段CSS，浏览器首先要做的是识别出Token，然后构建节点并生成CSSOM。<br>字节数据 =&gt; 字符串 =&gt; Token =&gt; Node =&gt; CSSOM</p>\n<h4 id=\"3-把DOM和CSSOM组合成渲染树（reder-tree）\"><a href=\"#3-把DOM和CSSOM组合成渲染树（reder-tree）\" class=\"headerlink\" title=\"3.把DOM和CSSOM组合成渲染树（reder tree）\"></a>3.把DOM和CSSOM组合成渲染树（reder tree）</h4><p>当我们生成 DOM 树和 CSSOM 树以后，就需要将这两棵树组合为渲染树。然后在渲染树的基础上进行布局，计算每个节点的几何结构</p>\n<img src=\"./3.png\" style=\"width:500px\">\n\n<h4 id=\"4-把每个节点绘制到屏幕上（painting）\"><a href=\"#4-把每个节点绘制到屏幕上（painting）\" class=\"headerlink\" title=\"4. 把每个节点绘制到屏幕上（painting）\"></a>4. 把每个节点绘制到屏幕上（painting）</h4><p>当浏览器生成渲染树以后，就会根据渲染树来进行布局（也可以叫做回流）。</p>\n<p>这一阶段浏览器要做的事情是要弄清楚各个节点在页面中的确切位置和大小。通常这一行为也被称为“自动重排”。<br>布局流程的输出是一个“盒模型”，它会精确地捕获每个元素在视口内的确切位置和尺寸，所有相对测量值都将转换为屏幕上的绝对像素。<br>布局完成后，浏览器会立即发出“Paint Setup”和“Paint”事件，将渲染树转换成屏幕上的像素。</p>\n<hr>\n<h3 id=\"关于JS渲染\"><a href=\"#关于JS渲染\" class=\"headerlink\" title=\"关于JS渲染\"></a>关于JS渲染</h3><p>JavaScript的加载、解析与执行会阻塞DOM的构建，也就是说，在构建DOM时，HTML解析器若遇到了JavaScript，那么它会暂停构建DOM，将控制权移交给JavaScript引擎，等JavaScript引擎运行完毕，浏览器再从中断的地方恢复DOM构建。</p>\n<p>也就是说，如果你想首屏渲染的越快，就越不应该在首屏就加载 JS 文件，这也是都建议将 script 标签放在 body 标签底部的原因。当然在当下，并不是说 script 标签必须放在底部，因为你可以给 script 标签添加 defer 或者 async 属性</p>\n<p>JS文件不只是阻塞DOM的构建，它会导致CSSOM也阻塞DOM的构建。<br>因为JavaScript不只是可以改DOM，它还可以更改样式，也就是它可以更改CSSOM<br>原本DOM和CSSOM的构建是互不影响，井水不犯河水，但是一旦引入了JavaScript，CSSOM也开始阻塞DOM的构建，只有CSSOM构建完毕后，DOM再恢复DOM构建。</p>\n<hr>\n<h3 id=\"关于回流和重绘\"><a href=\"#关于回流和重绘\" class=\"headerlink\" title=\"关于回流和重绘\"></a>关于回流和重绘</h3><p>我们知道，当网页生成的时候，至少会渲染一次。在用户访问的过程中，还会不断重新渲染。重新渲染会重复上图中的第四步(回流)+第五步(重绘)或者只有第五个步(重绘)。</p>\n<h4 id=\"repaint：重绘\"><a href=\"#repaint：重绘\" class=\"headerlink\" title=\"repaint：重绘\"></a>repaint：重绘</h4><p>页面元素不发生位置的变化，不需要重新计算所有元素的位置。比如说改变DOM的颜色等</p>\n<h4 id=\"reflow：-回流\"><a href=\"#reflow：-回流\" class=\"headerlink\" title=\"reflow： 回流\"></a>reflow： 回流</h4><p>当我们增加，删除更新DOM元素的时候，元素自身位置发生变化，导致其余的元素位置也发生变化，导致页面必须重新计算的现象称为回流<br>比如</p>\n<ul>\n<li>添加或者删除可见的DOM元素；</li>\n<li>元素尺寸改变——边距、填充、边框、宽度和高度</li>\n<li>内容变化，比如用户在input框中输入文字</li>\n<li>浏览器窗口尺寸改变——resize事件发生时</li>\n<li>计算 offsetWidth 和 offsetHeight 属性</li>\n<li>设置 style 属性的值</li>\n<li>回流必定会发生重绘，重绘不一定会引发回流。</li>\n<li>重绘和回流会在我们设置节点样式时频繁出现，同时也会很大程度上影响性能。回流所需的成本比重绘高的多，改变父节点里的子节点很可能会导致父节点的一系列回流。</li>\n</ul>\n<hr>\n<h3 id=\"async和defer的作用是什么\"><a href=\"#async和defer的作用是什么\" class=\"headerlink\" title=\"async和defer的作用是什么\"></a>async和defer的作用是什么</h3><p>没有 defer 或 async，浏览器会立即加载并执行指定的脚本，也就是说不等待后续载入的文档元素，读到就加载并执行。</p>\n<h4 id=\"异步下载\"><a href=\"#异步下载\" class=\"headerlink\" title=\"(异步下载)\"></a>(异步下载)</h4><p>async 属性表示异步执行引入的 JavaScript，与 defer 的区别在于，如果已经加载好，就会开始执行——无论此刻是 HTML 解析阶段还是 DOMContentLoaded 触发之后。</p>\n<h4 id=\"延迟执行\"><a href=\"#延迟执行\" class=\"headerlink\" title=\"(延迟执行)\"></a>(延迟执行)</h4><p>defer 属性表示延迟执行引入的 JavaScript，即这段 JavaScript 加载时 HTML 并未停止解析，这两个过程是并行的。整个 document 解析完毕且 defer-script 也加载完成之后（这两件事情的顺序无关），会执行所有由 defer-script 加载的 JavaScript 代码，然后触发 DOMContentLoaded 事件。</p>\n<p>defer 与相比普通 script，有两点区别：载入 JavaScript 文件时不阻塞 HTML 的解析，执行阶段被放到 HTML 标签解析完成之后。在加载多个JS脚本的时候，async是无顺序的加载，而defer是有顺序的加载。</p>\n<hr>\n<h3 id=\"关于白屏和-FOUC\"><a href=\"#关于白屏和-FOUC\" class=\"headerlink\" title=\"关于白屏和 FOUC\"></a>关于白屏和 FOUC</h3><p>由于浏览器的渲染机制不同，在渲染页面时会出现两种常见的不良现象—-白屏问题和FOUS（无样式内容闪烁）</p>\n<h4 id=\"FOUC：\"><a href=\"#FOUC：\" class=\"headerlink\" title=\"FOUC：\"></a>FOUC：</h4><p>由于浏览器渲染机制（比如firefox），再CSS加载之前，先呈现了HTML，就会导致展示出无样式内容，然后样式突然呈现的现象；</p>\n<h4 id=\"白屏：\"><a href=\"#白屏：\" class=\"headerlink\" title=\"白屏：\"></a>白屏：</h4><p>有些浏览器渲染机制（比如chrome）要先构建DOM树和CSSOM树，构建完成后再进行渲染，如果CSS部分放在HTML尾部，由于CSS未加载完成，浏览器迟迟未渲染，从而导致白屏；也可能是把js文件放在头部，脚本会阻塞后面内容的呈现，脚本会阻塞其后组件的下载，出现白屏问题。</p>\n<hr>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>浏览器工作流程：构建DOM -&gt; 构建CSSOM -&gt; 构建渲染树 -&gt; 布局 -&gt; 绘制。</p>\n<p>CSSOM会阻塞渲染，只有当CSSOM构建完毕后才会进入下一个阶段构建渲染树。</p>\n<p>通常情况下DOM和CSSOM是并行构建的，但是当浏览器遇到一个script标签时，DOM构建将暂停，直至脚本完成执行。但由于JavaScript可以修改CSSOM，所以需要等CSSOM构建完毕后再执行JS。</p>\n<p>如果你想首屏渲染的越快，就越不应该在首屏就加载 JS 文件，建议将 script 标签放在 body 标签底部。</p>"},{"title":"About Closure","date":"2019-06-23T10:14:57.000Z","clearReading":true,"thumbnailImage":"20190623.jpg","thumbnailImagePosition":"left","coverImage":"cover.jpg","coverCaption":"Hello World, Hello Programming","coverSize":"partial","comments":0,"_content":"\n关于闭包\n<!--more-->\n\n### 词法作用域（lexical environment）\n\n作用域链\n- 函数在执行的过程中，先从自己内部找变量\n- 如果找不到，再从创造当前函数所在的作用域（词法作用域）去找，以此往上\n- 注意找的是变量的当前状态\n\n函数连同它作用域链上的要找的这个变量，共同构成闭包\n一般情况下使用闭包住要是为了\n1. 封装数据\n2. 暂存数据\n\n例子\n```JS\nvar fnArr = [];\nfor (var i = 0; i < 2; i++){\n  fnArr[i] = (function(j){\n  \treturn function(){\n  \t\treturn j\n  \t}\n  })(i)\n}\n\nfnArr[1]() // 1\n```\n这个例子里有两个闭包，\n相当于可以将for循环拆开，等效于以下代码\n\n```JS\nfnArr[0] = (function(j){\n\treturn function(){\n\t\treturn j;\n\t}\n})(0)\n\nfnArr[1] = (function(j){\n\treturn function(){\n\t    return j;\n\t}\n})(1)\n\n\nfnArr[1]();\n```\n\n再简化一下，写成a,b 函数\n```JS\nvar a = (function(j){\n\treturn function(){\n\t\treturn j;\n\t}\n})(0)\n\nvar b = (function(j){\n\treturn function(){\n\t    return j;\n\t}\n})(1)\n\nb();\n\n```\n\n再同步一下，将var b里的立即执行函数单独拆出来，\n```JS\nvar a = (function(j){\n\treturn function(){\n\t\treturn j;\n\t}\n})(0)\n\nfunction fn2(j){\n  var j = arguments[0];\n  return function(){\n    return j;\n  }\n}\n\nvar b = fn2(1);\n\nb();\n\n```\n\n### 其他的等效方法\n方法1:\n```JS\nvar fnArr = [];\n\nfor(var i = 0; i < 2; i++){\n  fnArr[i] = (function(j){\n    return j;\n  })(i)\n}\n```\n\n方法2:\n```JS\nvar fnArr = [];\nfor(var i = 0;i < 2; i++){\n  (function(i){\n    fnArr[i] = function(){\n    \treturn i;\n    }\n  })(i)\n}\n```\n\n方法3:（使用ES6）\n```JS\nvar fnArr = [];\nfor(let i = 0; i < 10; i++){\n  fnArr[i] = function(){\n  \treturn i;\n  }\n}\n```\n\n### 闭包例题\n\n#### 封装一个Car对象\n可以将其封装成一个对象返回，由于形成闭包，当调用方法时，不会对原有的参数speed进行影响。\n\n```JS\nvar Car = (function(){\n  var speed = 0;\n   \n  function setSpeed (s) {\n    speed = s;\n  }\n\n  function getSpeed (){\n    return speed\n  }\n\n  function speedUp(){\n    speed++\n  }\n\n  function speedDown(){\n    speed --;\n  }\n  \n  return {\n      setSpeed: setSpeed,\n      getSpeed: getSpeed,\n      speedUp: speedUp,\n      speedDown: speedDown\n   }\n})() \n```\n","source":"_posts/关于闭包.md","raw":"---\ntitle: About Closure\ndate: 2019-06-23 19:14:57\ntags:\n- JS\n- Closure\nclearReading: true\nthumbnailImage: 20190623.jpg\nthumbnailImagePosition: left\ncoverImage: cover.jpg\ncoverCaption: \"Hello World, Hello Programming\"\ncoverSize: partial\ncomments: false\ncategories: Front-end Knowledge\n---\n\n关于闭包\n<!--more-->\n\n### 词法作用域（lexical environment）\n\n作用域链\n- 函数在执行的过程中，先从自己内部找变量\n- 如果找不到，再从创造当前函数所在的作用域（词法作用域）去找，以此往上\n- 注意找的是变量的当前状态\n\n函数连同它作用域链上的要找的这个变量，共同构成闭包\n一般情况下使用闭包住要是为了\n1. 封装数据\n2. 暂存数据\n\n例子\n```JS\nvar fnArr = [];\nfor (var i = 0; i < 2; i++){\n  fnArr[i] = (function(j){\n  \treturn function(){\n  \t\treturn j\n  \t}\n  })(i)\n}\n\nfnArr[1]() // 1\n```\n这个例子里有两个闭包，\n相当于可以将for循环拆开，等效于以下代码\n\n```JS\nfnArr[0] = (function(j){\n\treturn function(){\n\t\treturn j;\n\t}\n})(0)\n\nfnArr[1] = (function(j){\n\treturn function(){\n\t    return j;\n\t}\n})(1)\n\n\nfnArr[1]();\n```\n\n再简化一下，写成a,b 函数\n```JS\nvar a = (function(j){\n\treturn function(){\n\t\treturn j;\n\t}\n})(0)\n\nvar b = (function(j){\n\treturn function(){\n\t    return j;\n\t}\n})(1)\n\nb();\n\n```\n\n再同步一下，将var b里的立即执行函数单独拆出来，\n```JS\nvar a = (function(j){\n\treturn function(){\n\t\treturn j;\n\t}\n})(0)\n\nfunction fn2(j){\n  var j = arguments[0];\n  return function(){\n    return j;\n  }\n}\n\nvar b = fn2(1);\n\nb();\n\n```\n\n### 其他的等效方法\n方法1:\n```JS\nvar fnArr = [];\n\nfor(var i = 0; i < 2; i++){\n  fnArr[i] = (function(j){\n    return j;\n  })(i)\n}\n```\n\n方法2:\n```JS\nvar fnArr = [];\nfor(var i = 0;i < 2; i++){\n  (function(i){\n    fnArr[i] = function(){\n    \treturn i;\n    }\n  })(i)\n}\n```\n\n方法3:（使用ES6）\n```JS\nvar fnArr = [];\nfor(let i = 0; i < 10; i++){\n  fnArr[i] = function(){\n  \treturn i;\n  }\n}\n```\n\n### 闭包例题\n\n#### 封装一个Car对象\n可以将其封装成一个对象返回，由于形成闭包，当调用方法时，不会对原有的参数speed进行影响。\n\n```JS\nvar Car = (function(){\n  var speed = 0;\n   \n  function setSpeed (s) {\n    speed = s;\n  }\n\n  function getSpeed (){\n    return speed\n  }\n\n  function speedUp(){\n    speed++\n  }\n\n  function speedDown(){\n    speed --;\n  }\n  \n  return {\n      setSpeed: setSpeed,\n      getSpeed: getSpeed,\n      speedUp: speedUp,\n      speedDown: speedDown\n   }\n})() \n```\n","slug":"关于闭包","published":1,"updated":"2019-11-23T23:54:38.000Z","layout":"post","photos":[],"link":"","_id":"ck3it6k2w003oteyisspq064m","content":"<p>关于闭包</p>\n<a id=\"more\"></a>\n\n<h3 id=\"词法作用域（lexical-environment）\"><a href=\"#词法作用域（lexical-environment）\" class=\"headerlink\" title=\"词法作用域（lexical environment）\"></a>词法作用域（lexical environment）</h3><p>作用域链</p>\n<ul>\n<li>函数在执行的过程中，先从自己内部找变量</li>\n<li>如果找不到，再从创造当前函数所在的作用域（词法作用域）去找，以此往上</li>\n<li>注意找的是变量的当前状态</li>\n</ul>\n<p>函数连同它作用域链上的要找的这个变量，共同构成闭包<br>一般情况下使用闭包住要是为了</p>\n<ol>\n<li>封装数据</li>\n<li>暂存数据</li>\n</ol>\n<p>例子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fnArr = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++)&#123;</span><br><span class=\"line\">  fnArr[i] = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">j</span>)</span>&#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  \t\t<span class=\"keyword\">return</span> j</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  &#125;)(i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fnArr[<span class=\"number\">1</span>]() <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n<p>这个例子里有两个闭包，<br>相当于可以将for循环拆开，等效于以下代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fnArr[<span class=\"number\">0</span>] = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">j</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> j;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fnArr[<span class=\"number\">1</span>] = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">j</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> j;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">fnArr[<span class=\"number\">1</span>]();</span><br></pre></td></tr></table></figure>\n\n<p>再简化一下，写成a,b 函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">j</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> j;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">j</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> j;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">b();</span><br></pre></td></tr></table></figure>\n\n<p>再同步一下，将var b里的立即执行函数单独拆出来，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">j</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> j;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn2</span>(<span class=\"params\">j</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> j = <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> j;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = fn2(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">b();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"其他的等效方法\"><a href=\"#其他的等效方法\" class=\"headerlink\" title=\"其他的等效方法\"></a>其他的等效方法</h3><p>方法1:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fnArr = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++)&#123;</span><br><span class=\"line\">  fnArr[i] = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">j</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> j;</span><br><span class=\"line\">  &#125;)(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>方法2:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fnArr = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">2</span>; i++)&#123;</span><br><span class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>)</span>&#123;</span><br><span class=\"line\">    fnArr[i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>方法3:（使用ES6）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fnArr = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)&#123;</span><br><span class=\"line\">  fnArr[i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"闭包例题\"><a href=\"#闭包例题\" class=\"headerlink\" title=\"闭包例题\"></a>闭包例题</h3><h4 id=\"封装一个Car对象\"><a href=\"#封装一个Car对象\" class=\"headerlink\" title=\"封装一个Car对象\"></a>封装一个Car对象</h4><p>可以将其封装成一个对象返回，由于形成闭包，当调用方法时，不会对原有的参数speed进行影响。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Car = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> speed = <span class=\"number\">0</span>;</span><br><span class=\"line\">   </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setSpeed</span> (<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    speed = s;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSpeed</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> speed</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">speedUp</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    speed++</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">speedDown</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    speed --;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      setSpeed: setSpeed,</span><br><span class=\"line\">      getSpeed: getSpeed,</span><br><span class=\"line\">      speedUp: speedUp,</span><br><span class=\"line\">      speedDown: speedDown</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"thumbnailImageUrl":"https://kisky3.github.io/2019/06/23/关于闭包/20190623.jpg","excerpt":"<p>关于闭包</p>","more":"<h3 id=\"词法作用域（lexical-environment）\"><a href=\"#词法作用域（lexical-environment）\" class=\"headerlink\" title=\"词法作用域（lexical environment）\"></a>词法作用域（lexical environment）</h3><p>作用域链</p>\n<ul>\n<li>函数在执行的过程中，先从自己内部找变量</li>\n<li>如果找不到，再从创造当前函数所在的作用域（词法作用域）去找，以此往上</li>\n<li>注意找的是变量的当前状态</li>\n</ul>\n<p>函数连同它作用域链上的要找的这个变量，共同构成闭包<br>一般情况下使用闭包住要是为了</p>\n<ol>\n<li>封装数据</li>\n<li>暂存数据</li>\n</ol>\n<p>例子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fnArr = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++)&#123;</span><br><span class=\"line\">  fnArr[i] = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">j</span>)</span>&#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  \t\t<span class=\"keyword\">return</span> j</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  &#125;)(i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fnArr[<span class=\"number\">1</span>]() <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n<p>这个例子里有两个闭包，<br>相当于可以将for循环拆开，等效于以下代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fnArr[<span class=\"number\">0</span>] = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">j</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> j;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fnArr[<span class=\"number\">1</span>] = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">j</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> j;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">fnArr[<span class=\"number\">1</span>]();</span><br></pre></td></tr></table></figure>\n\n<p>再简化一下，写成a,b 函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">j</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> j;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">j</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> j;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">b();</span><br></pre></td></tr></table></figure>\n\n<p>再同步一下，将var b里的立即执行函数单独拆出来，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">j</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> j;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn2</span>(<span class=\"params\">j</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> j = <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> j;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = fn2(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">b();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"其他的等效方法\"><a href=\"#其他的等效方法\" class=\"headerlink\" title=\"其他的等效方法\"></a>其他的等效方法</h3><p>方法1:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fnArr = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++)&#123;</span><br><span class=\"line\">  fnArr[i] = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">j</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> j;</span><br><span class=\"line\">  &#125;)(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>方法2:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fnArr = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">2</span>; i++)&#123;</span><br><span class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>)</span>&#123;</span><br><span class=\"line\">    fnArr[i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>方法3:（使用ES6）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fnArr = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)&#123;</span><br><span class=\"line\">  fnArr[i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"闭包例题\"><a href=\"#闭包例题\" class=\"headerlink\" title=\"闭包例题\"></a>闭包例题</h3><h4 id=\"封装一个Car对象\"><a href=\"#封装一个Car对象\" class=\"headerlink\" title=\"封装一个Car对象\"></a>封装一个Car对象</h4><p>可以将其封装成一个对象返回，由于形成闭包，当调用方法时，不会对原有的参数speed进行影响。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Car = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> speed = <span class=\"number\">0</span>;</span><br><span class=\"line\">   </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setSpeed</span> (<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    speed = s;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSpeed</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> speed</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">speedUp</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    speed++</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">speedDown</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    speed --;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      setSpeed: setSpeed,</span><br><span class=\"line\">      getSpeed: getSpeed,</span><br><span class=\"line\">      speedUp: speedUp,</span><br><span class=\"line\">      speedDown: speedDown</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>"},{"title":"Created A StyleGuide For SPACE CLOUD Servive","date":"2019-06-20T01:18:50.000Z","clearReading":true,"thumbnailImage":"20190620.jpg","thumbnailImagePosition":"left","coverImage":"cover.jpg","coverCaption":"Hello World, Hello Programming","coverSize":"partial","comments":0,"_content":"\n### はじめに\n<!--more-->\nみなさん、こんにちは！!\n\nフロントエンドエンジニアの向宇(こう　う)と申します。 開発経験はまだ浅いですが、毎日楽しんで開発をチャレンジしています。\n\n今回はSPACE CLOUDのスタイルガイドの開発について、お話しさせていただきますね。\n\n### 開発目的\n\n私気づいた問題点は、フロントの書き方と全体スタイルの統一性はよくないと感じました。\n\n例えば、入力ボックスを実装する時に、 Reactを利用してComponentを作る人もいるし、 CakePHPのテンプレートで直接実装する人もいます。\n\n書き方を統一して、コピペだけですぐ実装できるスタイルガイドがあると統一感を持たせることができると考え、 SPACE CLOUD専用のスタイルガイドを作成始めました。\n\n### 開発流れ\n#### スタイルガイドのトップページについて\n\nまずはHTMLとCSSを利用して、トップページをオシャレにしました〜\n\n出来上がったものはこんな感じです！ ちょっとだけアニメーションも追加しました。\n\n<img src=\"./1.png\" style=\"width:600px\">\n\n***\n\n#### スタイルガイドの各ページについて\n\nまずReactを利用して、各ページの枠を作ります。 ソース構造と主なフォルダー説明は下記でございます〜\n\n{% alert danger no-icon %}\nAtomic: SPACE CLOUD専用のReactコンポーネントのベースです\n{% endalert %}\n\n{% alert danger no-icon %}\nComponent: スタイルガイドの各ページ用のコンポーネントです\n{% endalert %}\n\n{% alert danger no-icon %}\nComponent/Pages: 最後各コンポーネントをまとめて表示するためのコンポーネント\n{% endalert %}\n\n<br>\n<img src=\"./2.png\" style=\"width:600px\">\n\n***\n\n#### アップロードのForm部品の例\n\nFormの画像アップロードを例として説明しますね〜 \n\n下記はForm ImgUploadのReactコンポーネントの一部です。利用しているのはReactのライブラリ{% hl_text #FFCCCC %}react-dropzone{% endhl_text %}です。\n\n```JS\n<div\n  onMouseEnter={() => this.onMouseEnter(this.state.uploadStatus)}\n  onMouseLeave={() => this.onMouseLeave(this.state.uploadStatus)}\n>\n  <Dropzone\n    type={\"field\"}\n    accept={\"image/jpeg,image/png,image/jpg\"}\n    onDrop={this.onDrop}\n    multiple={false} // 個別アップロード\n    style={{ border: 0 }}\n  >\n    <div>{this.getContent()}</div>\n  </Dropzone>\n  <div>{this.getModifyModal()}</div>\n</div>\n```\n\nマウスホバーする時に画像変更と削除処理ができるように、onMouseEnterとonMouseLeaveを作りました。 プラス画像アップロードの進捗を表示するために下記の処理も追加しました。\n\n```JS\n// ファイルの読み込み進捗を取得\nreader.onprogress = files => {\n  this.setState({ loadPercentage: files.loaded / files.total * 100 });\n};\n```\nプレビュー状態を表示する時に、ProgressBarコンポーネントに渡します。\n\n```JS\n// プレビュー状態を表示\nif (\n  this.state &&\n  this.state.file &&\n  this.state.file.image.preview !== \"\" &&\n  this.state.file.image.dataURL !== \"\" &&\n  this.state.error === \"\"\n) {\n  return (\n    <div\n      className={imageWrapper + imageActive}\n      style={{ backgroundImage: `url(${this.state.file.image.dataURL})` }}\n    >\n      <ProgressBar percentage={this.state.loadPercentage}>\n        アップロード中・・・\n      </ProgressBar>\n    </div>\n  );\n}\n```\n\n最後はImgUploadDefaultの中でImgUploadコンポーネントを呼び出します。 実用性を考え、コピー機能のコンポーネントも作りました〜\n\n```js\n<div className={\"c-item__container\"}>\n<h2>Image Upload 【画像アップロード】</h2>\n<div\n  className={\"c-click-box\"}\n  role=\"button\"\n  onClick={() => this.onChangeState(FormText.ImgUploadText)}\n>\n<div className={\"c-item-line\"}>\n    <ImgUpload showUploadImage={true} />\n  </div>\n</div>\n<div id=\"button-item-text\" className={\"c-button-item-text\"}>\n  <CopyButton text={this.state.text} />\n  <pre>{this.state.text}</pre>\n</div>\n</div>\n```\n\n出来上がったものはこんな感じです。\n<img src=\"./3.png\" style=\"width:600px\">\n\n***\n\n#### その他のコンポーネント\n他の要素とページも上記と同じ感じで実装しました。 最後、一部のイメージ図を載せておきますね〜\n- ボタン\n<img src=\"./4.png\" style=\"width:600px\">\n\n***\n- フォーム\n<img src=\"./5.png\" style=\"width:600px\">\n\n***\n- カラー\n<img src=\"./6.png\" style=\"width:600px\">\n\n***\n\n### 終わりに\nSPACE CLOUDは多くのコンポーネントが必要で、統一感のある実装が困難な状況でしたが、 スタイルガイドによって今後は統一することができるようになったと思います。\n\nスタイルガイドの実装を通じて、本当に色々勉強になりました〜 やっとReactコンポーネントの基本とライブラリの使い方とかの基礎知識が分かってきましたと気がします。\n\n今後の開発によって、スタイルガイドを変更したり、追加したりする可能性もありますが、 その時にまた記事を更新しますね〜\n\n最後まで読んでいただきまして、誠にありがとうございました！！\n","source":"_posts/系统式样统一页面的制作.md","raw":"---\ntitle: Created A StyleGuide For SPACE CLOUD Servive\ndate: 2019-06-20 10:18:50\ntags:\n- JS\n- React\n- Redux\nclearReading: true\nthumbnailImage: 20190620.jpg\nthumbnailImagePosition: left\ncoverImage: cover.jpg\ncoverCaption: \"Hello World, Hello Programming\"\ncoverSize: partial\ncomments: false\ncategories: Front-end Knowledge\n---\n\n### はじめに\n<!--more-->\nみなさん、こんにちは！!\n\nフロントエンドエンジニアの向宇(こう　う)と申します。 開発経験はまだ浅いですが、毎日楽しんで開発をチャレンジしています。\n\n今回はSPACE CLOUDのスタイルガイドの開発について、お話しさせていただきますね。\n\n### 開発目的\n\n私気づいた問題点は、フロントの書き方と全体スタイルの統一性はよくないと感じました。\n\n例えば、入力ボックスを実装する時に、 Reactを利用してComponentを作る人もいるし、 CakePHPのテンプレートで直接実装する人もいます。\n\n書き方を統一して、コピペだけですぐ実装できるスタイルガイドがあると統一感を持たせることができると考え、 SPACE CLOUD専用のスタイルガイドを作成始めました。\n\n### 開発流れ\n#### スタイルガイドのトップページについて\n\nまずはHTMLとCSSを利用して、トップページをオシャレにしました〜\n\n出来上がったものはこんな感じです！ ちょっとだけアニメーションも追加しました。\n\n<img src=\"./1.png\" style=\"width:600px\">\n\n***\n\n#### スタイルガイドの各ページについて\n\nまずReactを利用して、各ページの枠を作ります。 ソース構造と主なフォルダー説明は下記でございます〜\n\n{% alert danger no-icon %}\nAtomic: SPACE CLOUD専用のReactコンポーネントのベースです\n{% endalert %}\n\n{% alert danger no-icon %}\nComponent: スタイルガイドの各ページ用のコンポーネントです\n{% endalert %}\n\n{% alert danger no-icon %}\nComponent/Pages: 最後各コンポーネントをまとめて表示するためのコンポーネント\n{% endalert %}\n\n<br>\n<img src=\"./2.png\" style=\"width:600px\">\n\n***\n\n#### アップロードのForm部品の例\n\nFormの画像アップロードを例として説明しますね〜 \n\n下記はForm ImgUploadのReactコンポーネントの一部です。利用しているのはReactのライブラリ{% hl_text #FFCCCC %}react-dropzone{% endhl_text %}です。\n\n```JS\n<div\n  onMouseEnter={() => this.onMouseEnter(this.state.uploadStatus)}\n  onMouseLeave={() => this.onMouseLeave(this.state.uploadStatus)}\n>\n  <Dropzone\n    type={\"field\"}\n    accept={\"image/jpeg,image/png,image/jpg\"}\n    onDrop={this.onDrop}\n    multiple={false} // 個別アップロード\n    style={{ border: 0 }}\n  >\n    <div>{this.getContent()}</div>\n  </Dropzone>\n  <div>{this.getModifyModal()}</div>\n</div>\n```\n\nマウスホバーする時に画像変更と削除処理ができるように、onMouseEnterとonMouseLeaveを作りました。 プラス画像アップロードの進捗を表示するために下記の処理も追加しました。\n\n```JS\n// ファイルの読み込み進捗を取得\nreader.onprogress = files => {\n  this.setState({ loadPercentage: files.loaded / files.total * 100 });\n};\n```\nプレビュー状態を表示する時に、ProgressBarコンポーネントに渡します。\n\n```JS\n// プレビュー状態を表示\nif (\n  this.state &&\n  this.state.file &&\n  this.state.file.image.preview !== \"\" &&\n  this.state.file.image.dataURL !== \"\" &&\n  this.state.error === \"\"\n) {\n  return (\n    <div\n      className={imageWrapper + imageActive}\n      style={{ backgroundImage: `url(${this.state.file.image.dataURL})` }}\n    >\n      <ProgressBar percentage={this.state.loadPercentage}>\n        アップロード中・・・\n      </ProgressBar>\n    </div>\n  );\n}\n```\n\n最後はImgUploadDefaultの中でImgUploadコンポーネントを呼び出します。 実用性を考え、コピー機能のコンポーネントも作りました〜\n\n```js\n<div className={\"c-item__container\"}>\n<h2>Image Upload 【画像アップロード】</h2>\n<div\n  className={\"c-click-box\"}\n  role=\"button\"\n  onClick={() => this.onChangeState(FormText.ImgUploadText)}\n>\n<div className={\"c-item-line\"}>\n    <ImgUpload showUploadImage={true} />\n  </div>\n</div>\n<div id=\"button-item-text\" className={\"c-button-item-text\"}>\n  <CopyButton text={this.state.text} />\n  <pre>{this.state.text}</pre>\n</div>\n</div>\n```\n\n出来上がったものはこんな感じです。\n<img src=\"./3.png\" style=\"width:600px\">\n\n***\n\n#### その他のコンポーネント\n他の要素とページも上記と同じ感じで実装しました。 最後、一部のイメージ図を載せておきますね〜\n- ボタン\n<img src=\"./4.png\" style=\"width:600px\">\n\n***\n- フォーム\n<img src=\"./5.png\" style=\"width:600px\">\n\n***\n- カラー\n<img src=\"./6.png\" style=\"width:600px\">\n\n***\n\n### 終わりに\nSPACE CLOUDは多くのコンポーネントが必要で、統一感のある実装が困難な状況でしたが、 スタイルガイドによって今後は統一することができるようになったと思います。\n\nスタイルガイドの実装を通じて、本当に色々勉強になりました〜 やっとReactコンポーネントの基本とライブラリの使い方とかの基礎知識が分かってきましたと気がします。\n\n今後の開発によって、スタイルガイドを変更したり、追加したりする可能性もありますが、 その時にまた記事を更新しますね〜\n\n最後まで読んでいただきまして、誠にありがとうございました！！\n","slug":"系统式样统一页面的制作","published":1,"updated":"2019-11-23T23:54:38.000Z","layout":"post","photos":[],"link":"","_id":"ck3it6k2x003qteyisuz3lfyu","content":"<h3 id=\"はじめに\"><a href=\"#はじめに\" class=\"headerlink\" title=\"はじめに\"></a>はじめに</h3><a id=\"more\"></a>\n<p>みなさん、こんにちは！!</p>\n<p>フロントエンドエンジニアの向宇(こう　う)と申します。 開発経験はまだ浅いですが、毎日楽しんで開発をチャレンジしています。</p>\n<p>今回はSPACE CLOUDのスタイルガイドの開発について、お話しさせていただきますね。</p>\n<h3 id=\"開発目的\"><a href=\"#開発目的\" class=\"headerlink\" title=\"開発目的\"></a>開発目的</h3><p>私気づいた問題点は、フロントの書き方と全体スタイルの統一性はよくないと感じました。</p>\n<p>例えば、入力ボックスを実装する時に、 Reactを利用してComponentを作る人もいるし、 CakePHPのテンプレートで直接実装する人もいます。</p>\n<p>書き方を統一して、コピペだけですぐ実装できるスタイルガイドがあると統一感を持たせることができると考え、 SPACE CLOUD専用のスタイルガイドを作成始めました。</p>\n<h3 id=\"開発流れ\"><a href=\"#開発流れ\" class=\"headerlink\" title=\"開発流れ\"></a>開発流れ</h3><h4 id=\"スタイルガイドのトップページについて\"><a href=\"#スタイルガイドのトップページについて\" class=\"headerlink\" title=\"スタイルガイドのトップページについて\"></a>スタイルガイドのトップページについて</h4><p>まずはHTMLとCSSを利用して、トップページをオシャレにしました〜</p>\n<p>出来上がったものはこんな感じです！ ちょっとだけアニメーションも追加しました。</p>\n<img src=\"./1.png\" style=\"width:600px\">\n\n<hr>\n<h4 id=\"スタイルガイドの各ページについて\"><a href=\"#スタイルガイドの各ページについて\" class=\"headerlink\" title=\"スタイルガイドの各ページについて\"></a>スタイルガイドの各ページについて</h4><p>まずReactを利用して、各ページの枠を作ります。 ソース構造と主なフォルダー説明は下記でございます〜</p>\n<div class=\"alert danger no-icon\"><p>Atomic: SPACE CLOUD専用のReactコンポーネントのベースです</p>\n</div>\n\n<div class=\"alert danger no-icon\"><p>Component: スタイルガイドの各ページ用のコンポーネントです</p>\n</div>\n\n<div class=\"alert danger no-icon\"><p>Component/Pages: 最後各コンポーネントをまとめて表示するためのコンポーネント</p>\n</div>\n\n<br>\n<img src=\"./2.png\" style=\"width:600px\">\n\n<hr>\n<h4 id=\"アップロードのForm部品の例\"><a href=\"#アップロードのForm部品の例\" class=\"headerlink\" title=\"アップロードのForm部品の例\"></a>アップロードのForm部品の例</h4><p>Formの画像アップロードを例として説明しますね〜 </p>\n<p>下記はForm ImgUploadのReactコンポーネントの一部です。利用しているのはReactのライブラリ<span class=\"highlight-text\" style=\"background-color:#FFCCCC;\">react-dropzone</span>です。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div</span><br><span class=\"line\">  onMouseEnter=&#123;() =&gt; <span class=\"keyword\">this</span>.onMouseEnter(<span class=\"keyword\">this</span>.state.uploadStatus)&#125;</span><br><span class=\"line\">  onMouseLeave=&#123;() =&gt; <span class=\"keyword\">this</span>.onMouseLeave(<span class=\"keyword\">this</span>.state.uploadStatus)&#125;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">  &lt;Dropzone</span><br><span class=\"line\">    type=&#123;<span class=\"string\">\"field\"</span>&#125;</span><br><span class=\"line\">    accept=&#123;<span class=\"string\">\"image/jpeg,image/png,image/jpg\"</span>&#125;</span><br><span class=\"line\">    onDrop=&#123;<span class=\"keyword\">this</span>.onDrop&#125;</span><br><span class=\"line\">    multiple=&#123;<span class=\"literal\">false</span>&#125; <span class=\"comment\">// 個別アップロード</span></span><br><span class=\"line\">    style=&#123;&#123; <span class=\"attr\">border</span>: <span class=\"number\">0</span> &#125;&#125;</span><br><span class=\"line\">  &gt;</span><br><span class=\"line\">    &lt;div&gt;&#123;<span class=\"keyword\">this</span>.getContent()&#125;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>Dropzone&gt;</span><br><span class=\"line\">  &lt;div&gt;&#123;<span class=\"keyword\">this</span>.getModifyModal()&#125;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>マウスホバーする時に画像変更と削除処理ができるように、onMouseEnterとonMouseLeaveを作りました。 プラス画像アップロードの進捗を表示するために下記の処理も追加しました。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ファイルの読み込み進捗を取得</span></span><br><span class=\"line\">reader.onprogress = <span class=\"function\"><span class=\"params\">files</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.setState(&#123; <span class=\"attr\">loadPercentage</span>: files.loaded / files.total * <span class=\"number\">100</span> &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>プレビュー状態を表示する時に、ProgressBarコンポーネントに渡します。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// プレビュー状態を表示</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.state &amp;&amp;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.state.file &amp;&amp;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.state.file.image.preview !== <span class=\"string\">\"\"</span> &amp;&amp;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.state.file.image.dataURL !== <span class=\"string\">\"\"</span> &amp;&amp;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.state.error === <span class=\"string\">\"\"</span></span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div</span><br><span class=\"line\">      className=&#123;imageWrapper + imageActive&#125;</span><br><span class=\"line\">      style=&#123;&#123; <span class=\"attr\">backgroundImage</span>: <span class=\"string\">`url(<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.state.file.image.dataURL&#125;</span>)`</span> &#125;&#125;</span><br><span class=\"line\">    &gt;</span><br><span class=\"line\">      &lt;ProgressBar percentage=&#123;<span class=\"keyword\">this</span>.state.loadPercentage&#125;&gt;</span><br><span class=\"line\">        アップロード中・・・</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/ProgressBar&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最後はImgUploadDefaultの中でImgUploadコンポーネントを呼び出します。 実用性を考え、コピー機能のコンポーネントも作りました〜</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div className=&#123;<span class=\"string\">\"c-item__container\"</span>&#125;&gt;</span><br><span class=\"line\">&lt;h2&gt;Image Upload 【画像アップロード】&lt;<span class=\"regexp\">/h2&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;div</span></span><br><span class=\"line\"><span class=\"regexp\">  className=&#123;\"c-click-box\"&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  role=\"button\"</span></span><br><span class=\"line\"><span class=\"regexp\">  onClick=&#123;() =&gt; this.onChangeState(FormText.ImgUploadText)&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;div className=&#123;\"c-item-line\"&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;ImgUpload showUploadImage=&#123;true&#125; /</span>&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"button-item-text\"</span> className=&#123;<span class=\"string\">\"c-button-item-text\"</span>&#125;&gt;</span><br><span class=\"line\">  &lt;CopyButton text=&#123;<span class=\"keyword\">this</span>.state.text&#125; /&gt;</span><br><span class=\"line\">  &lt;pre&gt;&#123;<span class=\"keyword\">this</span>.state.text&#125;&lt;<span class=\"regexp\">/pre&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>出来上がったものはこんな感じです。<br><img src=\"./3.png\" style=\"width:600px\"></p>\n<hr>\n<h4 id=\"その他のコンポーネント\"><a href=\"#その他のコンポーネント\" class=\"headerlink\" title=\"その他のコンポーネント\"></a>その他のコンポーネント</h4><p>他の要素とページも上記と同じ感じで実装しました。 最後、一部のイメージ図を載せておきますね〜</p>\n<ul>\n<li>ボタン<img src=\"./4.png\" style=\"width:600px\">\n\n</li>\n</ul>\n<hr>\n<ul>\n<li>フォーム<img src=\"./5.png\" style=\"width:600px\">\n\n</li>\n</ul>\n<hr>\n<ul>\n<li>カラー<img src=\"./6.png\" style=\"width:600px\">\n\n</li>\n</ul>\n<hr>\n<h3 id=\"終わりに\"><a href=\"#終わりに\" class=\"headerlink\" title=\"終わりに\"></a>終わりに</h3><p>SPACE CLOUDは多くのコンポーネントが必要で、統一感のある実装が困難な状況でしたが、 スタイルガイドによって今後は統一することができるようになったと思います。</p>\n<p>スタイルガイドの実装を通じて、本当に色々勉強になりました〜 やっとReactコンポーネントの基本とライブラリの使い方とかの基礎知識が分かってきましたと気がします。</p>\n<p>今後の開発によって、スタイルガイドを変更したり、追加したりする可能性もありますが、 その時にまた記事を更新しますね〜</p>\n<p>最後まで読んでいただきまして、誠にありがとうございました！！</p>\n","site":{"data":{}},"thumbnailImageUrl":"https://kisky3.github.io/2019/06/20/系统式样统一页面的制作/20190620.jpg","excerpt":"<h3 id=\"はじめに\"><a href=\"#はじめに\" class=\"headerlink\" title=\"はじめに\"></a>はじめに</h3>","more":"<p>みなさん、こんにちは！!</p>\n<p>フロントエンドエンジニアの向宇(こう　う)と申します。 開発経験はまだ浅いですが、毎日楽しんで開発をチャレンジしています。</p>\n<p>今回はSPACE CLOUDのスタイルガイドの開発について、お話しさせていただきますね。</p>\n<h3 id=\"開発目的\"><a href=\"#開発目的\" class=\"headerlink\" title=\"開発目的\"></a>開発目的</h3><p>私気づいた問題点は、フロントの書き方と全体スタイルの統一性はよくないと感じました。</p>\n<p>例えば、入力ボックスを実装する時に、 Reactを利用してComponentを作る人もいるし、 CakePHPのテンプレートで直接実装する人もいます。</p>\n<p>書き方を統一して、コピペだけですぐ実装できるスタイルガイドがあると統一感を持たせることができると考え、 SPACE CLOUD専用のスタイルガイドを作成始めました。</p>\n<h3 id=\"開発流れ\"><a href=\"#開発流れ\" class=\"headerlink\" title=\"開発流れ\"></a>開発流れ</h3><h4 id=\"スタイルガイドのトップページについて\"><a href=\"#スタイルガイドのトップページについて\" class=\"headerlink\" title=\"スタイルガイドのトップページについて\"></a>スタイルガイドのトップページについて</h4><p>まずはHTMLとCSSを利用して、トップページをオシャレにしました〜</p>\n<p>出来上がったものはこんな感じです！ ちょっとだけアニメーションも追加しました。</p>\n<img src=\"./1.png\" style=\"width:600px\">\n\n<hr>\n<h4 id=\"スタイルガイドの各ページについて\"><a href=\"#スタイルガイドの各ページについて\" class=\"headerlink\" title=\"スタイルガイドの各ページについて\"></a>スタイルガイドの各ページについて</h4><p>まずReactを利用して、各ページの枠を作ります。 ソース構造と主なフォルダー説明は下記でございます〜</p>\n<div class=\"alert danger no-icon\"><p>Atomic: SPACE CLOUD専用のReactコンポーネントのベースです</p>\n</div>\n\n<div class=\"alert danger no-icon\"><p>Component: スタイルガイドの各ページ用のコンポーネントです</p>\n</div>\n\n<div class=\"alert danger no-icon\"><p>Component/Pages: 最後各コンポーネントをまとめて表示するためのコンポーネント</p>\n</div>\n\n<br>\n<img src=\"./2.png\" style=\"width:600px\">\n\n<hr>\n<h4 id=\"アップロードのForm部品の例\"><a href=\"#アップロードのForm部品の例\" class=\"headerlink\" title=\"アップロードのForm部品の例\"></a>アップロードのForm部品の例</h4><p>Formの画像アップロードを例として説明しますね〜 </p>\n<p>下記はForm ImgUploadのReactコンポーネントの一部です。利用しているのはReactのライブラリ<span class=\"highlight-text\" style=\"background-color:#FFCCCC;\">react-dropzone</span>です。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div</span><br><span class=\"line\">  onMouseEnter=&#123;() =&gt; <span class=\"keyword\">this</span>.onMouseEnter(<span class=\"keyword\">this</span>.state.uploadStatus)&#125;</span><br><span class=\"line\">  onMouseLeave=&#123;() =&gt; <span class=\"keyword\">this</span>.onMouseLeave(<span class=\"keyword\">this</span>.state.uploadStatus)&#125;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">  &lt;Dropzone</span><br><span class=\"line\">    type=&#123;<span class=\"string\">\"field\"</span>&#125;</span><br><span class=\"line\">    accept=&#123;<span class=\"string\">\"image/jpeg,image/png,image/jpg\"</span>&#125;</span><br><span class=\"line\">    onDrop=&#123;<span class=\"keyword\">this</span>.onDrop&#125;</span><br><span class=\"line\">    multiple=&#123;<span class=\"literal\">false</span>&#125; <span class=\"comment\">// 個別アップロード</span></span><br><span class=\"line\">    style=&#123;&#123; <span class=\"attr\">border</span>: <span class=\"number\">0</span> &#125;&#125;</span><br><span class=\"line\">  &gt;</span><br><span class=\"line\">    &lt;div&gt;&#123;<span class=\"keyword\">this</span>.getContent()&#125;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>Dropzone&gt;</span><br><span class=\"line\">  &lt;div&gt;&#123;<span class=\"keyword\">this</span>.getModifyModal()&#125;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>マウスホバーする時に画像変更と削除処理ができるように、onMouseEnterとonMouseLeaveを作りました。 プラス画像アップロードの進捗を表示するために下記の処理も追加しました。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ファイルの読み込み進捗を取得</span></span><br><span class=\"line\">reader.onprogress = <span class=\"function\"><span class=\"params\">files</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.setState(&#123; <span class=\"attr\">loadPercentage</span>: files.loaded / files.total * <span class=\"number\">100</span> &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>プレビュー状態を表示する時に、ProgressBarコンポーネントに渡します。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// プレビュー状態を表示</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.state &amp;&amp;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.state.file &amp;&amp;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.state.file.image.preview !== <span class=\"string\">\"\"</span> &amp;&amp;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.state.file.image.dataURL !== <span class=\"string\">\"\"</span> &amp;&amp;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.state.error === <span class=\"string\">\"\"</span></span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div</span><br><span class=\"line\">      className=&#123;imageWrapper + imageActive&#125;</span><br><span class=\"line\">      style=&#123;&#123; <span class=\"attr\">backgroundImage</span>: <span class=\"string\">`url(<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.state.file.image.dataURL&#125;</span>)`</span> &#125;&#125;</span><br><span class=\"line\">    &gt;</span><br><span class=\"line\">      &lt;ProgressBar percentage=&#123;<span class=\"keyword\">this</span>.state.loadPercentage&#125;&gt;</span><br><span class=\"line\">        アップロード中・・・</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/ProgressBar&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最後はImgUploadDefaultの中でImgUploadコンポーネントを呼び出します。 実用性を考え、コピー機能のコンポーネントも作りました〜</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div className=&#123;<span class=\"string\">\"c-item__container\"</span>&#125;&gt;</span><br><span class=\"line\">&lt;h2&gt;Image Upload 【画像アップロード】&lt;<span class=\"regexp\">/h2&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;div</span></span><br><span class=\"line\"><span class=\"regexp\">  className=&#123;\"c-click-box\"&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  role=\"button\"</span></span><br><span class=\"line\"><span class=\"regexp\">  onClick=&#123;() =&gt; this.onChangeState(FormText.ImgUploadText)&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;div className=&#123;\"c-item-line\"&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;ImgUpload showUploadImage=&#123;true&#125; /</span>&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"button-item-text\"</span> className=&#123;<span class=\"string\">\"c-button-item-text\"</span>&#125;&gt;</span><br><span class=\"line\">  &lt;CopyButton text=&#123;<span class=\"keyword\">this</span>.state.text&#125; /&gt;</span><br><span class=\"line\">  &lt;pre&gt;&#123;<span class=\"keyword\">this</span>.state.text&#125;&lt;<span class=\"regexp\">/pre&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>出来上がったものはこんな感じです。<br><img src=\"./3.png\" style=\"width:600px\"></p>\n<hr>\n<h4 id=\"その他のコンポーネント\"><a href=\"#その他のコンポーネント\" class=\"headerlink\" title=\"その他のコンポーネント\"></a>その他のコンポーネント</h4><p>他の要素とページも上記と同じ感じで実装しました。 最後、一部のイメージ図を載せておきますね〜</p>\n<ul>\n<li>ボタン<img src=\"./4.png\" style=\"width:600px\">\n\n</li>\n</ul>\n<hr>\n<ul>\n<li>フォーム<img src=\"./5.png\" style=\"width:600px\">\n\n</li>\n</ul>\n<hr>\n<ul>\n<li>カラー<img src=\"./6.png\" style=\"width:600px\">\n\n</li>\n</ul>\n<hr>\n<h3 id=\"終わりに\"><a href=\"#終わりに\" class=\"headerlink\" title=\"終わりに\"></a>終わりに</h3><p>SPACE CLOUDは多くのコンポーネントが必要で、統一感のある実装が困難な状況でしたが、 スタイルガイドによって今後は統一することができるようになったと思います。</p>\n<p>スタイルガイドの実装を通じて、本当に色々勉強になりました〜 やっとReactコンポーネントの基本とライブラリの使い方とかの基礎知識が分かってきましたと気がします。</p>\n<p>今後の開発によって、スタイルガイドを変更したり、追加したりする可能性もありますが、 その時にまた記事を更新しますね〜</p>\n<p>最後まで読んでいただきまして、誠にありがとうございました！！</p>"},{"title":"So Easy! Let's Start Your Blog With Hexo And Github From Zero","date":"2019-05-28T11:30:05.000Z","clearReading":true,"thumbnailImage":"20190528.jpg","thumbnailImagePosition":"left","coverImage":"cover.jpg","coverCaption":"Hello World, Hello Programming","coverSize":"partial","comments":0,"_content":"\n超简单! 教你从零用Hexo和Github搭建个人博客\n<!--more-->\n\n### 前言\nHexo是高效的静态站点生成框架，它基于Node.js搭建博客，并可以托管于github服务器上。\n之后便可以用markdown语法进行你的博客记录了。\n生成上传命令行简便快捷，值得推荐！\n\n### 准备工作\n#### 1. 下载node.js\n\n [点击下载安装Node.js](https://nodejs.org/ja/download/)\n\n 无特殊要求可以一路默认点击Next直到安装完成。\n\n***\n\n#### 2. 安装Git\n\n[点击下载Git](https://git-scm.com/download/win)\n\n以上两步完成后可以在命令行输入以下命令来确认node.js和git安装是否成功\n\n```\nnode -v\nnpm -v\ngit --version\n```\n\n***\n\n#### 3. 在github上新建项目\n\n<img src=\"./1.png\" style=\"width:600px\">\n\n输入你的Github用户名+.github.io，例子：Kisky3.github.io\n\n注意勾选下面的生成README选项\n\n<img src=\"./2.png\" style=\"width:600px\">\n\n在新项目的setting里，添加生成可视化page\n\n<img src=\"./3.png\" style=\"width:600px\">\n\n***\n\n#### 4. 安装Hexo\n新建文件夹用来存放博客文章。比如MyBlog\n\n然后在该文件夹下执行一下命令行安装Hexo\n ```\n$ npm install hexo-cli -g  \n$ hexo init \n$ npm install  \n$ hexo server  \n ```\n\n 当启动hexo server后，打开 http://localhost:4000 就可以看到生成的默认页面了！\n\n <img src=\"./5.png\" style=\"width:600px\">\n\n#### 5.推送至Github\n\n在博客文件夹MyBlog下的_config.yml配置文件的url换成你的项目主URL¥，否则后续图片的显示会出问题\n```HTML\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: https://kisky3.github.io/\n```\n\n之后在deploy里修改type为git,并且写入你在Github生成的项目地址\n```HTML\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: https://github.com/Kisky3/Kisky3.github.io\n  branch: master\n```\n\n并在MyBlog文件夹下运行以下命令行\n\n```HTML\nnpm install hexo-deployer-git –save //下载hexo-deployer-git，否则deploy会出现error\nhexo g // 生成本地静态文件\nhexo d // 将本地文件deploy到Github上\n```\n\n此时访问项目的主页http://你的Github名.github.io，就可以看到初始页面了\n\n***\n\n#### 6. 更新博文\n并在MyBlog文件夹下运行以下命令行来写博文\n\n```\nhexo new 你的博文题目 // 生成博文\n```\n\n用markdown语法完成博客记录后\n\n```\nhexo g // 生成本地静态文件\nhexo d // 将本地文件deploy到Github上\n```\n\n#### 7. 更换主题\n默认主题太没个性了，可以在网上下载自己喜欢的主题\n\n例：\n<img src=\"./4.png\" style=\"width:600px\">\n\n- [下载地址](https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak)\n- [参考文档](https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak/blob/master/DOCUMENTATION.md)\n\n#### 8. 部分翻译\n##### 主题安装\n1. 下载最新版本\n2. 重命名下载文件夹为 tranquilpeak,并将其放置于你MyBlog/theme文件夹下\n3. 修改_config.yml文件夹的theme为tranquilpeak\n4. 执行hexo clean删除public文件夹、并再次执行hexo generate重新生成。\n\n##### 博文内配置解释\n例子\n```HTML\n---\ntitle: 超简单! 用Hexo和Github搭建个人博客\ndate: 2019-05-28 20:30:05\ntags:\n- hexo\n- blog\n- github\nclearReading: true\nthumbnailImage: 20190528.jpg\nthumbnailImagePosition: left\ncoverImage: 20190528.jpg\ncoverCaption: \"Hello World, Hello Programming\"\ncoverSize: partial\ncomments: false\ncategories: Front-end Knowledge\n---\n这里是文章的概览，显示在主页缩略内容上面\n<!-- more -->\n\n这里是自动生成的文章目录\n<!-- toc -->\n\n# 这是大标题\n\n## 这是二级标题\n\n## 这里有个本地图片\n<!-- 图片需要放置于你生成博文名字的文件夹里面 -->\n<img src=\"./1.png\">\n\n\n```\n\n博文内常用配置设定说明:\n```\n・ tags:\n   定义该文章的标签，定义之后可以在分类里面查看自动建立的索引\n\n・ thumbnailImage:\n   首页的文章标题旁边图片\n\n・ thumbnailImagePosition:\n   首页的文章图片位置\n\n・ coverImage:\n   文章打开时顶部的封面图片\n\n・ <!-- more -->\n   这个标志之前的内容将会自动生成首页的概览,如果不写thumbnailImagePosition的设置将不起作用\n\n・ <!-- toc -->\n   这个标志的位置将会自动生成文章目录\n```\n\n***\n\n##### 文章置顶\n修改node_modules/hexo-generator-index/lib/generator.js\n\n\n ```HTML\n 'use strict';\nvar pagination = require('hexo-pagination');\nmodule.exports = function(locals){\n  var config = this.config;\n  var posts = locals.posts;\n    posts.data = posts.data.sort(function(a, b) {\n        if(a.top && b.top) { // 两篇文章top都有定义\n            if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排\n            else return b.top - a.top; // 否则按照top值降序排\n        }\n        else if(a.top && !b.top) { // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）\n            return -1;\n        }\n        else if(!a.top && b.top) {\n            return 1;\n        }\n        else return b.date - a.date; // 都没定义按照文章日期降序排\n    });\n  var paginationDir = config.pagination_dir || 'page';\n  return pagination('', posts, {\n    perPage: config.index_generator.per_page,\n    layout: ['index', 'archive'],\n    format: paginationDir + '/%d/',\n    data: {\n      __index: true\n    }\n  });\n};\n```\n在文章Front-matter中添加top值，数值越大文章越靠前，如：\n```HTML\n---\ntitle: Hexo \ndate: 2019-05-28 21:49:33\ntags:\n- Hexo\ncategories: Front-end Knowledge\ntop: 10\n---\n```\n\n注意:\n\n这里的github推送地址和当前Hexo项目地址是分开的，也就是说，github.io的地址上面是没有hexo源码的，只有生成的静态页面。\n\n所以最好将源文件夹做一个备份，以防更换机子或者文件丢失时无法维护博客\n","source":"_posts/超简单用hexo和github搭建个人博客.md","raw":"---\ntitle: So Easy! Let's Start Your Blog With Hexo And Github From Zero\ndate: 2019-05-28 20:30:05\ntags:\n- hexo\n- blog\n- github\nclearReading: true\nthumbnailImage: 20190528.jpg\nthumbnailImagePosition: left\ncoverImage: cover.jpg\ncoverCaption: \"Hello World, Hello Programming\"\ncoverSize: partial\ncomments: false\ncategories: Front-end Knowledge\n---\n\n超简单! 教你从零用Hexo和Github搭建个人博客\n<!--more-->\n\n### 前言\nHexo是高效的静态站点生成框架，它基于Node.js搭建博客，并可以托管于github服务器上。\n之后便可以用markdown语法进行你的博客记录了。\n生成上传命令行简便快捷，值得推荐！\n\n### 准备工作\n#### 1. 下载node.js\n\n [点击下载安装Node.js](https://nodejs.org/ja/download/)\n\n 无特殊要求可以一路默认点击Next直到安装完成。\n\n***\n\n#### 2. 安装Git\n\n[点击下载Git](https://git-scm.com/download/win)\n\n以上两步完成后可以在命令行输入以下命令来确认node.js和git安装是否成功\n\n```\nnode -v\nnpm -v\ngit --version\n```\n\n***\n\n#### 3. 在github上新建项目\n\n<img src=\"./1.png\" style=\"width:600px\">\n\n输入你的Github用户名+.github.io，例子：Kisky3.github.io\n\n注意勾选下面的生成README选项\n\n<img src=\"./2.png\" style=\"width:600px\">\n\n在新项目的setting里，添加生成可视化page\n\n<img src=\"./3.png\" style=\"width:600px\">\n\n***\n\n#### 4. 安装Hexo\n新建文件夹用来存放博客文章。比如MyBlog\n\n然后在该文件夹下执行一下命令行安装Hexo\n ```\n$ npm install hexo-cli -g  \n$ hexo init \n$ npm install  \n$ hexo server  \n ```\n\n 当启动hexo server后，打开 http://localhost:4000 就可以看到生成的默认页面了！\n\n <img src=\"./5.png\" style=\"width:600px\">\n\n#### 5.推送至Github\n\n在博客文件夹MyBlog下的_config.yml配置文件的url换成你的项目主URL¥，否则后续图片的显示会出问题\n```HTML\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: https://kisky3.github.io/\n```\n\n之后在deploy里修改type为git,并且写入你在Github生成的项目地址\n```HTML\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: https://github.com/Kisky3/Kisky3.github.io\n  branch: master\n```\n\n并在MyBlog文件夹下运行以下命令行\n\n```HTML\nnpm install hexo-deployer-git –save //下载hexo-deployer-git，否则deploy会出现error\nhexo g // 生成本地静态文件\nhexo d // 将本地文件deploy到Github上\n```\n\n此时访问项目的主页http://你的Github名.github.io，就可以看到初始页面了\n\n***\n\n#### 6. 更新博文\n并在MyBlog文件夹下运行以下命令行来写博文\n\n```\nhexo new 你的博文题目 // 生成博文\n```\n\n用markdown语法完成博客记录后\n\n```\nhexo g // 生成本地静态文件\nhexo d // 将本地文件deploy到Github上\n```\n\n#### 7. 更换主题\n默认主题太没个性了，可以在网上下载自己喜欢的主题\n\n例：\n<img src=\"./4.png\" style=\"width:600px\">\n\n- [下载地址](https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak)\n- [参考文档](https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak/blob/master/DOCUMENTATION.md)\n\n#### 8. 部分翻译\n##### 主题安装\n1. 下载最新版本\n2. 重命名下载文件夹为 tranquilpeak,并将其放置于你MyBlog/theme文件夹下\n3. 修改_config.yml文件夹的theme为tranquilpeak\n4. 执行hexo clean删除public文件夹、并再次执行hexo generate重新生成。\n\n##### 博文内配置解释\n例子\n```HTML\n---\ntitle: 超简单! 用Hexo和Github搭建个人博客\ndate: 2019-05-28 20:30:05\ntags:\n- hexo\n- blog\n- github\nclearReading: true\nthumbnailImage: 20190528.jpg\nthumbnailImagePosition: left\ncoverImage: 20190528.jpg\ncoverCaption: \"Hello World, Hello Programming\"\ncoverSize: partial\ncomments: false\ncategories: Front-end Knowledge\n---\n这里是文章的概览，显示在主页缩略内容上面\n<!-- more -->\n\n这里是自动生成的文章目录\n<!-- toc -->\n\n# 这是大标题\n\n## 这是二级标题\n\n## 这里有个本地图片\n<!-- 图片需要放置于你生成博文名字的文件夹里面 -->\n<img src=\"./1.png\">\n\n\n```\n\n博文内常用配置设定说明:\n```\n・ tags:\n   定义该文章的标签，定义之后可以在分类里面查看自动建立的索引\n\n・ thumbnailImage:\n   首页的文章标题旁边图片\n\n・ thumbnailImagePosition:\n   首页的文章图片位置\n\n・ coverImage:\n   文章打开时顶部的封面图片\n\n・ <!-- more -->\n   这个标志之前的内容将会自动生成首页的概览,如果不写thumbnailImagePosition的设置将不起作用\n\n・ <!-- toc -->\n   这个标志的位置将会自动生成文章目录\n```\n\n***\n\n##### 文章置顶\n修改node_modules/hexo-generator-index/lib/generator.js\n\n\n ```HTML\n 'use strict';\nvar pagination = require('hexo-pagination');\nmodule.exports = function(locals){\n  var config = this.config;\n  var posts = locals.posts;\n    posts.data = posts.data.sort(function(a, b) {\n        if(a.top && b.top) { // 两篇文章top都有定义\n            if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排\n            else return b.top - a.top; // 否则按照top值降序排\n        }\n        else if(a.top && !b.top) { // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）\n            return -1;\n        }\n        else if(!a.top && b.top) {\n            return 1;\n        }\n        else return b.date - a.date; // 都没定义按照文章日期降序排\n    });\n  var paginationDir = config.pagination_dir || 'page';\n  return pagination('', posts, {\n    perPage: config.index_generator.per_page,\n    layout: ['index', 'archive'],\n    format: paginationDir + '/%d/',\n    data: {\n      __index: true\n    }\n  });\n};\n```\n在文章Front-matter中添加top值，数值越大文章越靠前，如：\n```HTML\n---\ntitle: Hexo \ndate: 2019-05-28 21:49:33\ntags:\n- Hexo\ncategories: Front-end Knowledge\ntop: 10\n---\n```\n\n注意:\n\n这里的github推送地址和当前Hexo项目地址是分开的，也就是说，github.io的地址上面是没有hexo源码的，只有生成的静态页面。\n\n所以最好将源文件夹做一个备份，以防更换机子或者文件丢失时无法维护博客\n","slug":"超简单用hexo和github搭建个人博客","published":1,"updated":"2019-11-23T23:54:38.000Z","layout":"post","photos":[],"link":"","_id":"ck3it6k2y003tteyioz2e22ds","content":"<p>超简单! 教你从零用Hexo和Github搭建个人博客</p>\n<a id=\"more\"></a>\n\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>Hexo是高效的静态站点生成框架，它基于Node.js搭建博客，并可以托管于github服务器上。<br>之后便可以用markdown语法进行你的博客记录了。<br>生成上传命令行简便快捷，值得推荐！</p>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><h4 id=\"1-下载node-js\"><a href=\"#1-下载node-js\" class=\"headerlink\" title=\"1. 下载node.js\"></a>1. 下载node.js</h4><p> <a href=\"https://nodejs.org/ja/download/\" target=\"_blank\" rel=\"noopener\">点击下载安装Node.js</a></p>\n<p> 无特殊要求可以一路默认点击Next直到安装完成。</p>\n<hr>\n<h4 id=\"2-安装Git\"><a href=\"#2-安装Git\" class=\"headerlink\" title=\"2. 安装Git\"></a>2. 安装Git</h4><p><a href=\"https://git-scm.com/download/win\" target=\"_blank\" rel=\"noopener\">点击下载Git</a></p>\n<p>以上两步完成后可以在命令行输入以下命令来确认node.js和git安装是否成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br><span class=\"line\">npm -v</span><br><span class=\"line\">git --version</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"3-在github上新建项目\"><a href=\"#3-在github上新建项目\" class=\"headerlink\" title=\"3. 在github上新建项目\"></a>3. 在github上新建项目</h4><img src=\"./1.png\" style=\"width:600px\">\n\n<p>输入你的Github用户名+.github.io，例子：Kisky3.github.io</p>\n<p>注意勾选下面的生成README选项</p>\n<img src=\"./2.png\" style=\"width:600px\">\n\n<p>在新项目的setting里，添加生成可视化page</p>\n<img src=\"./3.png\" style=\"width:600px\">\n\n<hr>\n<h4 id=\"4-安装Hexo\"><a href=\"#4-安装Hexo\" class=\"headerlink\" title=\"4. 安装Hexo\"></a>4. 安装Hexo</h4><p>新建文件夹用来存放博客文章。比如MyBlog</p>\n<p>然后在该文件夹下执行一下命令行安装Hexo<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-cli -g  </span><br><span class=\"line\">$ hexo init </span><br><span class=\"line\">$ npm install  </span><br><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure></p>\n<p> 当启动hexo server后，打开 <a href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener\">http://localhost:4000</a> 就可以看到生成的默认页面了！</p>\n <img src=\"./5.png\" style=\"width:600px\">\n\n<h4 id=\"5-推送至Github\"><a href=\"#5-推送至Github\" class=\"headerlink\" title=\"5.推送至Github\"></a>5.推送至Github</h4><p>在博客文件夹MyBlog下的_config.yml配置文件的url换成你的项目主URL¥，否则后续图片的显示会出问题</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># URL</span><br><span class=\"line\">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span><br><span class=\"line\">url: https://kisky3.github.io/</span><br></pre></td></tr></table></figure>\n\n<p>之后在deploy里修改type为git,并且写入你在Github生成的项目地址</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repository: https://github.com/Kisky3/Kisky3.github.io</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n\n<p>并在MyBlog文件夹下运行以下命令行</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git –save //下载hexo-deployer-git，否则deploy会出现error</span><br><span class=\"line\">hexo g // 生成本地静态文件</span><br><span class=\"line\">hexo d // 将本地文件deploy到Github上</span><br></pre></td></tr></table></figure>\n\n<p>此时访问项目的主页http://你的Github名.github.io，就可以看到初始页面了</p>\n<hr>\n<h4 id=\"6-更新博文\"><a href=\"#6-更新博文\" class=\"headerlink\" title=\"6. 更新博文\"></a>6. 更新博文</h4><p>并在MyBlog文件夹下运行以下命令行来写博文</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new 你的博文题目 // 生成博文</span><br></pre></td></tr></table></figure>\n\n<p>用markdown语法完成博客记录后</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g // 生成本地静态文件</span><br><span class=\"line\">hexo d // 将本地文件deploy到Github上</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"7-更换主题\"><a href=\"#7-更换主题\" class=\"headerlink\" title=\"7. 更换主题\"></a>7. 更换主题</h4><p>默认主题太没个性了，可以在网上下载自己喜欢的主题</p>\n<p>例：<br><img src=\"./4.png\" style=\"width:600px\"></p>\n<ul>\n<li><a href=\"https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak\" target=\"_blank\" rel=\"noopener\">下载地址</a></li>\n<li><a href=\"https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak/blob/master/DOCUMENTATION.md\" target=\"_blank\" rel=\"noopener\">参考文档</a></li>\n</ul>\n<h4 id=\"8-部分翻译\"><a href=\"#8-部分翻译\" class=\"headerlink\" title=\"8. 部分翻译\"></a>8. 部分翻译</h4><h5 id=\"主题安装\"><a href=\"#主题安装\" class=\"headerlink\" title=\"主题安装\"></a>主题安装</h5><ol>\n<li>下载最新版本</li>\n<li>重命名下载文件夹为 tranquilpeak,并将其放置于你MyBlog/theme文件夹下</li>\n<li>修改_config.yml文件夹的theme为tranquilpeak</li>\n<li>执行hexo clean删除public文件夹、并再次执行hexo generate重新生成。</li>\n</ol>\n<h5 id=\"博文内配置解释\"><a href=\"#博文内配置解释\" class=\"headerlink\" title=\"博文内配置解释\"></a>博文内配置解释</h5><p>例子</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 超简单! 用Hexo和Github搭建个人博客</span><br><span class=\"line\">date: 2019-05-28 20:30:05</span><br><span class=\"line\">tags:</span><br><span class=\"line\">- hexo</span><br><span class=\"line\">- blog</span><br><span class=\"line\">- github</span><br><span class=\"line\">clearReading: true</span><br><span class=\"line\">thumbnailImage: 20190528.jpg</span><br><span class=\"line\">thumbnailImagePosition: left</span><br><span class=\"line\">coverImage: 20190528.jpg</span><br><span class=\"line\">coverCaption: \"Hello World, Hello Programming\"</span><br><span class=\"line\">coverSize: partial</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">categories: Front-end Knowledge</span><br><span class=\"line\">---</span><br><span class=\"line\">这里是文章的概览，显示在主页缩略内容上面</span><br><span class=\"line\"><span class=\"comment\">&lt;!-- more --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">这里是自动生成的文章目录</span><br><span class=\"line\"><span class=\"comment\">&lt;!-- toc --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"># 这是大标题</span><br><span class=\"line\"></span><br><span class=\"line\">## 这是二级标题</span><br><span class=\"line\"></span><br><span class=\"line\">## 这里有个本地图片</span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 图片需要放置于你生成博文名字的文件夹里面 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./1.png\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>博文内常用配置设定说明:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">・ tags:</span><br><span class=\"line\">   定义该文章的标签，定义之后可以在分类里面查看自动建立的索引</span><br><span class=\"line\"></span><br><span class=\"line\">・ thumbnailImage:</span><br><span class=\"line\">   首页的文章标题旁边图片</span><br><span class=\"line\"></span><br><span class=\"line\">・ thumbnailImagePosition:</span><br><span class=\"line\">   首页的文章图片位置</span><br><span class=\"line\"></span><br><span class=\"line\">・ coverImage:</span><br><span class=\"line\">   文章打开时顶部的封面图片</span><br><span class=\"line\"></span><br><span class=\"line\">・ &lt;!-- more --&gt;</span><br><span class=\"line\">   这个标志之前的内容将会自动生成首页的概览,如果不写thumbnailImagePosition的设置将不起作用</span><br><span class=\"line\"></span><br><span class=\"line\">・ &lt;!-- toc --&gt;</span><br><span class=\"line\">   这个标志的位置将会自动生成文章目录</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h5 id=\"文章置顶\"><a href=\"#文章置顶\" class=\"headerlink\" title=\"文章置顶\"></a>文章置顶</h5><p>修改node_modules/hexo-generator-index/lib/generator.js</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 'use strict';</span><br><span class=\"line\">var pagination = require('hexo-pagination');</span><br><span class=\"line\">module.exports = function(locals)&#123;</span><br><span class=\"line\">  var config = this.config;</span><br><span class=\"line\">  var posts = locals.posts;</span><br><span class=\"line\">    posts.data = posts.data.sort(function(a, b) &#123;</span><br><span class=\"line\">        if(a.top &amp;&amp; b.top) &#123; // 两篇文章top都有定义</span><br><span class=\"line\">            if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排</span><br><span class=\"line\">            else return b.top - a.top; // 否则按照top值降序排</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else if(a.top &amp;&amp; !b.top) &#123; // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span><br><span class=\"line\">            return -1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else if(!a.top &amp;&amp; b.top) &#123;</span><br><span class=\"line\">            return 1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else return b.date - a.date; // 都没定义按照文章日期降序排</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  var paginationDir = config.pagination_dir || 'page';</span><br><span class=\"line\">  return pagination('', posts, &#123;</span><br><span class=\"line\">    perPage: config.index_generator.per_page,</span><br><span class=\"line\">    layout: ['index', 'archive'],</span><br><span class=\"line\">    format: paginationDir + '/%d/',</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      __index: true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在文章Front-matter中添加top值，数值越大文章越靠前，如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: Hexo </span><br><span class=\"line\">date: 2019-05-28 21:49:33</span><br><span class=\"line\">tags:</span><br><span class=\"line\">- Hexo</span><br><span class=\"line\">categories: Front-end Knowledge</span><br><span class=\"line\">top: 10</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>注意:</p>\n<p>这里的github推送地址和当前Hexo项目地址是分开的，也就是说，github.io的地址上面是没有hexo源码的，只有生成的静态页面。</p>\n<p>所以最好将源文件夹做一个备份，以防更换机子或者文件丢失时无法维护博客</p>\n","site":{"data":{}},"thumbnailImageUrl":"https://kisky3.github.io/2019/05/28/超简单用hexo和github搭建个人博客/20190528.jpg","excerpt":"<p>超简单! 教你从零用Hexo和Github搭建个人博客</p>","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>Hexo是高效的静态站点生成框架，它基于Node.js搭建博客，并可以托管于github服务器上。<br>之后便可以用markdown语法进行你的博客记录了。<br>生成上传命令行简便快捷，值得推荐！</p>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><h4 id=\"1-下载node-js\"><a href=\"#1-下载node-js\" class=\"headerlink\" title=\"1. 下载node.js\"></a>1. 下载node.js</h4><p> <a href=\"https://nodejs.org/ja/download/\" target=\"_blank\" rel=\"noopener\">点击下载安装Node.js</a></p>\n<p> 无特殊要求可以一路默认点击Next直到安装完成。</p>\n<hr>\n<h4 id=\"2-安装Git\"><a href=\"#2-安装Git\" class=\"headerlink\" title=\"2. 安装Git\"></a>2. 安装Git</h4><p><a href=\"https://git-scm.com/download/win\" target=\"_blank\" rel=\"noopener\">点击下载Git</a></p>\n<p>以上两步完成后可以在命令行输入以下命令来确认node.js和git安装是否成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br><span class=\"line\">npm -v</span><br><span class=\"line\">git --version</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"3-在github上新建项目\"><a href=\"#3-在github上新建项目\" class=\"headerlink\" title=\"3. 在github上新建项目\"></a>3. 在github上新建项目</h4><img src=\"./1.png\" style=\"width:600px\">\n\n<p>输入你的Github用户名+.github.io，例子：Kisky3.github.io</p>\n<p>注意勾选下面的生成README选项</p>\n<img src=\"./2.png\" style=\"width:600px\">\n\n<p>在新项目的setting里，添加生成可视化page</p>\n<img src=\"./3.png\" style=\"width:600px\">\n\n<hr>\n<h4 id=\"4-安装Hexo\"><a href=\"#4-安装Hexo\" class=\"headerlink\" title=\"4. 安装Hexo\"></a>4. 安装Hexo</h4><p>新建文件夹用来存放博客文章。比如MyBlog</p>\n<p>然后在该文件夹下执行一下命令行安装Hexo<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-cli -g  </span><br><span class=\"line\">$ hexo init </span><br><span class=\"line\">$ npm install  </span><br><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure></p>\n<p> 当启动hexo server后，打开 <a href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener\">http://localhost:4000</a> 就可以看到生成的默认页面了！</p>\n <img src=\"./5.png\" style=\"width:600px\">\n\n<h4 id=\"5-推送至Github\"><a href=\"#5-推送至Github\" class=\"headerlink\" title=\"5.推送至Github\"></a>5.推送至Github</h4><p>在博客文件夹MyBlog下的_config.yml配置文件的url换成你的项目主URL¥，否则后续图片的显示会出问题</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># URL</span><br><span class=\"line\">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span><br><span class=\"line\">url: https://kisky3.github.io/</span><br></pre></td></tr></table></figure>\n\n<p>之后在deploy里修改type为git,并且写入你在Github生成的项目地址</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repository: https://github.com/Kisky3/Kisky3.github.io</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n\n<p>并在MyBlog文件夹下运行以下命令行</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git –save //下载hexo-deployer-git，否则deploy会出现error</span><br><span class=\"line\">hexo g // 生成本地静态文件</span><br><span class=\"line\">hexo d // 将本地文件deploy到Github上</span><br></pre></td></tr></table></figure>\n\n<p>此时访问项目的主页http://你的Github名.github.io，就可以看到初始页面了</p>\n<hr>\n<h4 id=\"6-更新博文\"><a href=\"#6-更新博文\" class=\"headerlink\" title=\"6. 更新博文\"></a>6. 更新博文</h4><p>并在MyBlog文件夹下运行以下命令行来写博文</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new 你的博文题目 // 生成博文</span><br></pre></td></tr></table></figure>\n\n<p>用markdown语法完成博客记录后</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g // 生成本地静态文件</span><br><span class=\"line\">hexo d // 将本地文件deploy到Github上</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"7-更换主题\"><a href=\"#7-更换主题\" class=\"headerlink\" title=\"7. 更换主题\"></a>7. 更换主题</h4><p>默认主题太没个性了，可以在网上下载自己喜欢的主题</p>\n<p>例：<br><img src=\"./4.png\" style=\"width:600px\"></p>\n<ul>\n<li><a href=\"https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak\" target=\"_blank\" rel=\"noopener\">下载地址</a></li>\n<li><a href=\"https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak/blob/master/DOCUMENTATION.md\" target=\"_blank\" rel=\"noopener\">参考文档</a></li>\n</ul>\n<h4 id=\"8-部分翻译\"><a href=\"#8-部分翻译\" class=\"headerlink\" title=\"8. 部分翻译\"></a>8. 部分翻译</h4><h5 id=\"主题安装\"><a href=\"#主题安装\" class=\"headerlink\" title=\"主题安装\"></a>主题安装</h5><ol>\n<li>下载最新版本</li>\n<li>重命名下载文件夹为 tranquilpeak,并将其放置于你MyBlog/theme文件夹下</li>\n<li>修改_config.yml文件夹的theme为tranquilpeak</li>\n<li>执行hexo clean删除public文件夹、并再次执行hexo generate重新生成。</li>\n</ol>\n<h5 id=\"博文内配置解释\"><a href=\"#博文内配置解释\" class=\"headerlink\" title=\"博文内配置解释\"></a>博文内配置解释</h5><p>例子</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 超简单! 用Hexo和Github搭建个人博客</span><br><span class=\"line\">date: 2019-05-28 20:30:05</span><br><span class=\"line\">tags:</span><br><span class=\"line\">- hexo</span><br><span class=\"line\">- blog</span><br><span class=\"line\">- github</span><br><span class=\"line\">clearReading: true</span><br><span class=\"line\">thumbnailImage: 20190528.jpg</span><br><span class=\"line\">thumbnailImagePosition: left</span><br><span class=\"line\">coverImage: 20190528.jpg</span><br><span class=\"line\">coverCaption: \"Hello World, Hello Programming\"</span><br><span class=\"line\">coverSize: partial</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">categories: Front-end Knowledge</span><br><span class=\"line\">---</span><br><span class=\"line\">这里是文章的概览，显示在主页缩略内容上面</span><br><span class=\"line\"><span class=\"comment\">&lt;!-- more --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">这里是自动生成的文章目录</span><br><span class=\"line\"><span class=\"comment\">&lt;!-- toc --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"># 这是大标题</span><br><span class=\"line\"></span><br><span class=\"line\">## 这是二级标题</span><br><span class=\"line\"></span><br><span class=\"line\">## 这里有个本地图片</span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 图片需要放置于你生成博文名字的文件夹里面 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./1.png\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>博文内常用配置设定说明:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">・ tags:</span><br><span class=\"line\">   定义该文章的标签，定义之后可以在分类里面查看自动建立的索引</span><br><span class=\"line\"></span><br><span class=\"line\">・ thumbnailImage:</span><br><span class=\"line\">   首页的文章标题旁边图片</span><br><span class=\"line\"></span><br><span class=\"line\">・ thumbnailImagePosition:</span><br><span class=\"line\">   首页的文章图片位置</span><br><span class=\"line\"></span><br><span class=\"line\">・ coverImage:</span><br><span class=\"line\">   文章打开时顶部的封面图片</span><br><span class=\"line\"></span><br><span class=\"line\">・ &lt;!-- more --&gt;</span><br><span class=\"line\">   这个标志之前的内容将会自动生成首页的概览,如果不写thumbnailImagePosition的设置将不起作用</span><br><span class=\"line\"></span><br><span class=\"line\">・ &lt;!-- toc --&gt;</span><br><span class=\"line\">   这个标志的位置将会自动生成文章目录</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h5 id=\"文章置顶\"><a href=\"#文章置顶\" class=\"headerlink\" title=\"文章置顶\"></a>文章置顶</h5><p>修改node_modules/hexo-generator-index/lib/generator.js</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 'use strict';</span><br><span class=\"line\">var pagination = require('hexo-pagination');</span><br><span class=\"line\">module.exports = function(locals)&#123;</span><br><span class=\"line\">  var config = this.config;</span><br><span class=\"line\">  var posts = locals.posts;</span><br><span class=\"line\">    posts.data = posts.data.sort(function(a, b) &#123;</span><br><span class=\"line\">        if(a.top &amp;&amp; b.top) &#123; // 两篇文章top都有定义</span><br><span class=\"line\">            if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排</span><br><span class=\"line\">            else return b.top - a.top; // 否则按照top值降序排</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else if(a.top &amp;&amp; !b.top) &#123; // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span><br><span class=\"line\">            return -1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else if(!a.top &amp;&amp; b.top) &#123;</span><br><span class=\"line\">            return 1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else return b.date - a.date; // 都没定义按照文章日期降序排</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  var paginationDir = config.pagination_dir || 'page';</span><br><span class=\"line\">  return pagination('', posts, &#123;</span><br><span class=\"line\">    perPage: config.index_generator.per_page,</span><br><span class=\"line\">    layout: ['index', 'archive'],</span><br><span class=\"line\">    format: paginationDir + '/%d/',</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      __index: true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在文章Front-matter中添加top值，数值越大文章越靠前，如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: Hexo </span><br><span class=\"line\">date: 2019-05-28 21:49:33</span><br><span class=\"line\">tags:</span><br><span class=\"line\">- Hexo</span><br><span class=\"line\">categories: Front-end Knowledge</span><br><span class=\"line\">top: 10</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>注意:</p>\n<p>这里的github推送地址和当前Hexo项目地址是分开的，也就是说，github.io的地址上面是没有hexo源码的，只有生成的静态页面。</p>\n<p>所以最好将源文件夹做一个备份，以防更换机子或者文件丢失时无法维护博客</p>"},{"title":"jQuery Common API","date":"2019-07-16T09:57:55.000Z","clearReading":true,"thumbnailImage":"20190716.png","thumbnailImagePosition":"left","coverImage":"cover.jpg","coverCaption":"Hello World, Hello Programming","coverSize":"partial","comments":0,"_content":"\n\njQuery常用API\n<!--more-->\n\n## jQuery常用DOM操作\n\n### .append()\n添加元素，通过$符号，生成一个dom元素并将它添加到页面，也可以添加jQuery对象，字符串等\n```HTML\n<body>\n<p>你好！</p>\n \n<script>\n    $('p').append('小明和小红。');\n</script>\n</body>\n\n/*执行结果*/\n/*<p>你好！小明和小红。</p>*/\n```\n***\n### .prepend()\n在元素的前头添加字符串或元素。\n```HTML\n<ul>\n    <li>太郎</li>\n    <li>花子</li>\n    <li>三郎</li>\n</ul>\n\n$('li').prepend('<strong>ユーザー名：</strong>');\n/* 执行结果*/\n/* <ul>\n    <li><strong>ユーザー名：</strong>太郎</li>\n    <li><strong>ユーザー名：</strong>花子</li>\n    <li><strong>ユーザー名：</strong>三郎</li>\n</ul>*/\n```\n***\n### .before()\n在对象前面（不是内部而是外面，和对象同级）插入内容，参数和append相似。\n```HTML\n<p> is what I said...</p>\n<p> is what you said too...</p>\n\n$(\"p\").before(\"<b>Hello</b>\");\n/* 执行结果 */\n/*\n<b>Hello</b>\n<p> is what I said...</p>\n<b>Hello</b>\n<p> is what you said too...</p>\n*/\n```\n***\n### .after()\n在对象后面（不是内部而是外面，和对象同级）插入内容，参数和append相似。\n```HTML\n<p> is what I said...</p>\n<p> is what you said too...</p>\n\n$(\"p\").before(\"<b>Hello</b>\");\n/* 执行结果 */\n/*\n<p> is what I said...</p>\n<b>Hello</b>\n<p> is what you said too...</p>\n<b>Hello</b>\n*/\n```\n***\n### .remove()\n删除所选对象的元素或者子元素。\n```HTML\n<body>\n<div>\n    <p>sample1</p>\n    <p class=\"two\">sample2</p>\n</div>\n \n<script>\n    $('.two').remove();\n</script>\n</body>\n\n/* 执行结果*/\n/*\n<div>\n    <p>sample1</p>\n</div>\n*/\n```\n***\n### .empty()\n删除指定元素内的所有子元素。该元素保留\n```HTML\n<div id=\"parent\">\n  <p class=\"child\">子元素</p>\n</div>\n<button id=\"button\">删除子元素</button>\n\n$(\"#button\").on(\"click\", function(){\n  $(\"#parent\").empty();\n});\n\n/* 执行结果*/\n/*\n<div id=\"parent\">\n</div>\n<button id=\"button\">删除子元素</button>\n*/\n```\n***\n### .html()\n实用html()能够任意的获取HTML元素，并进行添加或替换处理。\n获取：\n```HTML\n<body>\n<p>你好</p>\n<a href=\"#\">sample</a>\n \n<script>\n    const result1 = $('p').html();\n    const result2 = $('a').html();\n \n    console.log( result1 );\n    console.log( result2 );\n</script>\n</body>\n/* 执行结果*/\n/*\n你好\nsample\n*/\n```\n替换：\n```HTML\n<body>\n<div>\n    <h1>title</h1>\n    <p>sample text</p>\n    <a href=\"#\">link</a>\n</div>\n \n<script>\n    $('div').html('<p>Hello</p>');\n</script>\n</body>\n\n/* 执行结果*/\n/*\n<div>\n    <p>こんにちは</p>\n</div>\n*/\n```\n添加：\n```HTML\n<body>\n<p>here is the link</p>\n \n<script>\n    $('p').html('<p>link is<a href=\"#\">this one</a>!!</p>');\n</script>\n</body>\n/* 执行结果*/\n/*\n<p>link is<a href=\"#\">this one</a>!!</p>\n*/\n```\n***\n### .text() \ntext()和html()十分相似，$node.text()和$node.html()的区别是text取得所有符合条件的元素进行处理，添加时只能添加字符串。\ntext()和html()的获取元素对比：\n```HTML\n<body>\n<p>Good Morning</p>\n<p>Hello</p>\n \n<script>\n    const result1 = $('p').html();\n    const result2 = $('p').text();\n \n    console.log( result1 );\n    console.log( result2 );\n</script>\n</body>\n\n/* 执行结果*/\n/*\nGood Morning\nGood MorningHello\n*/\n```\n\ntext()插入字符串\n```HTML\n<body>\n<div>\n    <p>Good Morning</p>\n</div>\n \n<script>\n    $('div').text('<h1>Title</h1>');\n</script>\n</body>\n\n/* 执行结果*/\n/* 「<h1>Title</h1>」被当作字符串插入*/\n```\n***\n## jQuery属性&CSS操作\n### 属性相关\n### .val()\nval()用于取得HTML元素的value，并可以对其进行修改和设定\n```HTML\n<button id=\"btn-a\" value=\"a\">Button A</button>\n\n\t\n$('#btn-a').val('value-a');\n\n\n/* 执行结果*/\n/*\n<button id=\"btn-a\" value=\"value-a\">ボタンA</button>\n*/\n```\n\n### .attr()\nattr()用于获取HTML元素的属性，并对其进行修改和设定\n获取元素的属性并修改：\n```HTML\n<body>\n<p id=\"sample\">Hello</p>\n \n<script>\nconst result = $('p').attr('id', 'text');\n \nconsole.log( result[0] );\n</script>\n</body>\n\n/* 执行结果*/\n/*\n<p id=\"text\">Hello</p>\n*/\n```\n添加元素的属性：\n```HTML\n<body>\n<input>\n \n<script>\nconst result = $('input').attr({\n    id: 'text',\n    class: 'form',\n    type: 'checkbox',\n    value: 'one',\n    checked: true\n});\n \nconsole.log( result[0] );\n</script>\n</body>\n\n/* 执行结果*/\n/*\n<input id=\"text\" class=\"form\" type=\"checkbox\" value=\"one\" checked=\"checked\">\n*/\n```\n***\n### .removeAttr()\n.removeAttr()用于删除对象元素的属性\n```HTML\n<body>\n<p class=\"text\">Hello</p>\n \n<script>\nconst result = $('p').removeAttr('class');\n \nconsole.log( result[0] );\n</script>\n</body>\n\n\n/* 执行结果*/\n/*\n<p>Hello</p>\n*/\n\n```\n\n### .prop()\nprop()和removeAttr()十分相似，不同在于prop能够确认属性是否存在的状态。\n当某个属性比如checked / disabled不存在时，和removeAttr()返回undefined,而prop返回false.\n```HTML\n<body>\n<button class=\"btn1\">Button1</button>\n<button class=\"btn2\" disabled>Button1</button>\n \n<script>\nconst result1 = $('.btn1').attr('disabled');\nconst result2 = $('.btn2').attr('disabled');\n \nconst result3 = $('.btn1').prop('disabled');\nconst result4 = $('.btn2').prop('disabled');\n \n \nconsole.log( result1 );\nconsole.log( result2 );\nconsole.log( result3 );\nconsole.log( result4 );\n</script>\n</body>\n\n/* 执行结果*/\n/*\nundefined\ndisabled\n \nfalse\ntrue\n*/\n\n```\n***\n### .css()\n.css()能够进行元素css的设定，添加，获取，修改等。\n元素css的设定\n```HTML\n<body>\n<p>sample text</p>\n \n<script>\n</script>\n    $('p').css('color', '#f00');\n</body>\n\n/* 执行结果\n   将p内的文字颜色变红（#f00）\n*/\n\n```\n\n修改元素的css\n```HTML\n<body>\n<p style=\"font-size:12px\">sample1</p>\n<p style=\"font-size:16px\">sample2</p>\n<p style=\"font-size:20px\">sample3</p>\n \n<script>\n    $('p').css('font-size', function(index, value) {\n        var newValue = parseInt(value) + 6;\n    \n        return newValue + 'px';\n    })\n</script>\n</body>\n\n/* 执行结果 */\n/* \n\n<p style=\"font-size:18px\">sample1</p>\n<p style=\"font-size:22px\">sample2</p>\n<p style=\"font-size:26px\">sample3</p>\n*/\n```\n\n### .addClass()\n用于给任何一个元素添加css\n\n如果p元素没有任何的样式，则添加addRed样式。index为该对象HTML元素的下标，myclass为该元素最初自身拥有的class属性名\n```HTML\n<p class=\"addBlue\">Good Morning</p>\n<p class=\"addGreen\">Hello</p>\n<p>こんばんは</p>\n\n$('p').addClass(function( index, myclass ) {\n \n    if( !myclass ) {\n        return 'addRed';\n    }\n    \n})\n```\n\n### removeClass()\nremoveClass()用于给任何元素删除css，有重复的情况下，删除所有匹配元素的css。\n复数指定时用空格隔开，不传参则对象元素全部删除css。\n\n```HTML\n<ul>\n    <li class=\"test\">list1</li>\n    <li class=\"sample\">list2</li>\n    <li class=\"text\">list3</li>\n</ul>\n\n$('li').removeClass('test sample');\n\n/* css为text和sample的list2，list3的css被删除 */\n```\n\n### .hasClass()\nhasClass()用于查看对象元素是否存在某样式css。存在返回true，不存在返回false。\n复数的情况下用空格隔开，并且要求搜索参数值与css值完全一致。\n```HTML\n<ul>\n      <li class=\"red\">リスト１</li>\n      <li class=\"blue\">リスト２</li>\n      <li class=\"red green\">リスト３</li>\n</ul>\n\n\nvar li = $('li').hasClass('red green');\n \nconsole.log(li);\n\n/* 执行结果 */\n\n/* true */\n```\n\n### .toggleClass()\ntoggleClass()可以操作对象的class属性，并进行添加，删除等循环操作。\n\n利用toggleClass()进行mytoggle的显示/隐藏的切换：\n```HTML\n.mytoggle {\n    display: none;\n}\n\n<body>\n<h1>Title</h1>\n<button>Button</button>\n \n<script>\n    $('button').click(function() {\n        $('h1').toggleClass('mytoggle');\n    })\n</script>\n</body>\n```\n\n### .each()\n.each()用于循环历遍每个元素。相当于forEach。\n\n对HTML元素的操作：\n```HTML\n<ul>\n    <li>sample1</li>\n    <li>sample2</li>\n    <li>sample3</li>\n</ul>\n\n$('li').each(function(index, element) {\n \n    console.log(index);\n    console.log($(element).text());\n \n})\n\n/* 执行结果*/\n\nsample1 \n1 \nsample2 \n2 \nsample3\n```\n\n对数列的操作：\n```HTML\nvar array = [3,6,2,8,6];\n \n$.each(array, function(index, value) {\n \n    console.log(index + ': ' + value);\n \n})\n\n/* 执行结果*/\n0: 3 \n1: 6 \n2: 2 \n3: 8 \n4: 6\n\n```\n\n### $.extend()\n$.extend()用与连结两个或多个对象，将其整合为一个对象。\n无指定则在第一个传递的对象上进行覆盖，如果想保留原对象，则第一参数传空{}\n\n```HTML\nvar user1 = {\n  name: '太郎',\n  area: 'tokyo'\n}\n \nvar user2 = {\n  name: '花子',\n  age: 28\n}\n\nvar result = $.extend({}, user1, user2);\n \nconsole.log(result);\nconsole.log('------------');\nconsole.log(user1);\n\n/* 执行结果 */\nObject { name: \"花子\", area: \"tokyo\", age: 28 }\n------------\nObject { name: \"太郎\", area: \"tokyo\" }\n```\n\n### .clone()\n.clone()用于复制对象和元素。参数要指定true，false时或不传参数时不能复制。\n\n按键时按钮被复制：\n```HTML\n<button name=\"clone\">Clone!</button>\n\n<script>\n  $('button[name=clone]').on('click', function () {\n    $(this).clone(true).insertAfter(this);\n  });\n</script>\n```\n\n### .index()\n.index()用于取得元素的下标\n\n点击按钮时获取下标：\n```HTML\n<ul>\n  <li>北海道</li>\n  <li>東北</li>\n  <li>関東</li>\n  <li>東海</li>\n  <li>関西</li>\n  <li>中国</li>\n  <li>四国</li>\n  <li>九州</li>\n</ul>\n \n<p><span id=\"num\">－</span>几个</p>\n\n\n$(function() {\n \n  $('li').click(function() {\n \n    var i = $('li').index(this);\n\n    $('#num').text(i);\n \n  });\n});\n\n```\n\n### .ready()\n.ready()可以忽略浏览器默认加载，在DOM准备好后就立即执行这个函数。\n\n下面的函数执行时，由于对h1的操作在body的h1生成之前，所以相当于无效。\n```HTML\n<head>\n    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\n    <script>\n        $('h1').text('Hello World');\n    </script>\n</head>\n \n<body>\n    <h1>こんにちは</h1>\n</body>\n```\n\n此时使用.ready()，则可以在h1加载完成时再立马执行处理。\n\n```HTML\n<head>\n    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\n    <script>\n        $(document).ready(function() {\n \n            $('h1').text('Hello World');\n \n        })\n    </script>\n</head>\n \n<body>\n    <h1>こんにちは</h1>\n</body>\n```\n\n还可以简写成下面的形式:\n\n```HTML\n$(function() {\n \n    //your coding\n \n});\n\nor\n\n$(showLog);\n\nfunction showLog() {\n \n    console.log('Hey! Let's see log);\n \n}\n```","source":"_posts/API.md","raw":"---\ntitle: jQuery Common API\ndate: 2019-07-16 18:57:55\ntags:\n- jQuery\nclearReading: true\nthumbnailImage: 20190716.png\nthumbnailImagePosition: left\ncoverImage: cover.jpg\ncoverCaption: \"Hello World, Hello Programming\"\ncoverSize: partial\ncomments: false\ncategories: Front-end Knowledge\n---\n\n\njQuery常用API\n<!--more-->\n\n## jQuery常用DOM操作\n\n### .append()\n添加元素，通过$符号，生成一个dom元素并将它添加到页面，也可以添加jQuery对象，字符串等\n```HTML\n<body>\n<p>你好！</p>\n \n<script>\n    $('p').append('小明和小红。');\n</script>\n</body>\n\n/*执行结果*/\n/*<p>你好！小明和小红。</p>*/\n```\n***\n### .prepend()\n在元素的前头添加字符串或元素。\n```HTML\n<ul>\n    <li>太郎</li>\n    <li>花子</li>\n    <li>三郎</li>\n</ul>\n\n$('li').prepend('<strong>ユーザー名：</strong>');\n/* 执行结果*/\n/* <ul>\n    <li><strong>ユーザー名：</strong>太郎</li>\n    <li><strong>ユーザー名：</strong>花子</li>\n    <li><strong>ユーザー名：</strong>三郎</li>\n</ul>*/\n```\n***\n### .before()\n在对象前面（不是内部而是外面，和对象同级）插入内容，参数和append相似。\n```HTML\n<p> is what I said...</p>\n<p> is what you said too...</p>\n\n$(\"p\").before(\"<b>Hello</b>\");\n/* 执行结果 */\n/*\n<b>Hello</b>\n<p> is what I said...</p>\n<b>Hello</b>\n<p> is what you said too...</p>\n*/\n```\n***\n### .after()\n在对象后面（不是内部而是外面，和对象同级）插入内容，参数和append相似。\n```HTML\n<p> is what I said...</p>\n<p> is what you said too...</p>\n\n$(\"p\").before(\"<b>Hello</b>\");\n/* 执行结果 */\n/*\n<p> is what I said...</p>\n<b>Hello</b>\n<p> is what you said too...</p>\n<b>Hello</b>\n*/\n```\n***\n### .remove()\n删除所选对象的元素或者子元素。\n```HTML\n<body>\n<div>\n    <p>sample1</p>\n    <p class=\"two\">sample2</p>\n</div>\n \n<script>\n    $('.two').remove();\n</script>\n</body>\n\n/* 执行结果*/\n/*\n<div>\n    <p>sample1</p>\n</div>\n*/\n```\n***\n### .empty()\n删除指定元素内的所有子元素。该元素保留\n```HTML\n<div id=\"parent\">\n  <p class=\"child\">子元素</p>\n</div>\n<button id=\"button\">删除子元素</button>\n\n$(\"#button\").on(\"click\", function(){\n  $(\"#parent\").empty();\n});\n\n/* 执行结果*/\n/*\n<div id=\"parent\">\n</div>\n<button id=\"button\">删除子元素</button>\n*/\n```\n***\n### .html()\n实用html()能够任意的获取HTML元素，并进行添加或替换处理。\n获取：\n```HTML\n<body>\n<p>你好</p>\n<a href=\"#\">sample</a>\n \n<script>\n    const result1 = $('p').html();\n    const result2 = $('a').html();\n \n    console.log( result1 );\n    console.log( result2 );\n</script>\n</body>\n/* 执行结果*/\n/*\n你好\nsample\n*/\n```\n替换：\n```HTML\n<body>\n<div>\n    <h1>title</h1>\n    <p>sample text</p>\n    <a href=\"#\">link</a>\n</div>\n \n<script>\n    $('div').html('<p>Hello</p>');\n</script>\n</body>\n\n/* 执行结果*/\n/*\n<div>\n    <p>こんにちは</p>\n</div>\n*/\n```\n添加：\n```HTML\n<body>\n<p>here is the link</p>\n \n<script>\n    $('p').html('<p>link is<a href=\"#\">this one</a>!!</p>');\n</script>\n</body>\n/* 执行结果*/\n/*\n<p>link is<a href=\"#\">this one</a>!!</p>\n*/\n```\n***\n### .text() \ntext()和html()十分相似，$node.text()和$node.html()的区别是text取得所有符合条件的元素进行处理，添加时只能添加字符串。\ntext()和html()的获取元素对比：\n```HTML\n<body>\n<p>Good Morning</p>\n<p>Hello</p>\n \n<script>\n    const result1 = $('p').html();\n    const result2 = $('p').text();\n \n    console.log( result1 );\n    console.log( result2 );\n</script>\n</body>\n\n/* 执行结果*/\n/*\nGood Morning\nGood MorningHello\n*/\n```\n\ntext()插入字符串\n```HTML\n<body>\n<div>\n    <p>Good Morning</p>\n</div>\n \n<script>\n    $('div').text('<h1>Title</h1>');\n</script>\n</body>\n\n/* 执行结果*/\n/* 「<h1>Title</h1>」被当作字符串插入*/\n```\n***\n## jQuery属性&CSS操作\n### 属性相关\n### .val()\nval()用于取得HTML元素的value，并可以对其进行修改和设定\n```HTML\n<button id=\"btn-a\" value=\"a\">Button A</button>\n\n\t\n$('#btn-a').val('value-a');\n\n\n/* 执行结果*/\n/*\n<button id=\"btn-a\" value=\"value-a\">ボタンA</button>\n*/\n```\n\n### .attr()\nattr()用于获取HTML元素的属性，并对其进行修改和设定\n获取元素的属性并修改：\n```HTML\n<body>\n<p id=\"sample\">Hello</p>\n \n<script>\nconst result = $('p').attr('id', 'text');\n \nconsole.log( result[0] );\n</script>\n</body>\n\n/* 执行结果*/\n/*\n<p id=\"text\">Hello</p>\n*/\n```\n添加元素的属性：\n```HTML\n<body>\n<input>\n \n<script>\nconst result = $('input').attr({\n    id: 'text',\n    class: 'form',\n    type: 'checkbox',\n    value: 'one',\n    checked: true\n});\n \nconsole.log( result[0] );\n</script>\n</body>\n\n/* 执行结果*/\n/*\n<input id=\"text\" class=\"form\" type=\"checkbox\" value=\"one\" checked=\"checked\">\n*/\n```\n***\n### .removeAttr()\n.removeAttr()用于删除对象元素的属性\n```HTML\n<body>\n<p class=\"text\">Hello</p>\n \n<script>\nconst result = $('p').removeAttr('class');\n \nconsole.log( result[0] );\n</script>\n</body>\n\n\n/* 执行结果*/\n/*\n<p>Hello</p>\n*/\n\n```\n\n### .prop()\nprop()和removeAttr()十分相似，不同在于prop能够确认属性是否存在的状态。\n当某个属性比如checked / disabled不存在时，和removeAttr()返回undefined,而prop返回false.\n```HTML\n<body>\n<button class=\"btn1\">Button1</button>\n<button class=\"btn2\" disabled>Button1</button>\n \n<script>\nconst result1 = $('.btn1').attr('disabled');\nconst result2 = $('.btn2').attr('disabled');\n \nconst result3 = $('.btn1').prop('disabled');\nconst result4 = $('.btn2').prop('disabled');\n \n \nconsole.log( result1 );\nconsole.log( result2 );\nconsole.log( result3 );\nconsole.log( result4 );\n</script>\n</body>\n\n/* 执行结果*/\n/*\nundefined\ndisabled\n \nfalse\ntrue\n*/\n\n```\n***\n### .css()\n.css()能够进行元素css的设定，添加，获取，修改等。\n元素css的设定\n```HTML\n<body>\n<p>sample text</p>\n \n<script>\n</script>\n    $('p').css('color', '#f00');\n</body>\n\n/* 执行结果\n   将p内的文字颜色变红（#f00）\n*/\n\n```\n\n修改元素的css\n```HTML\n<body>\n<p style=\"font-size:12px\">sample1</p>\n<p style=\"font-size:16px\">sample2</p>\n<p style=\"font-size:20px\">sample3</p>\n \n<script>\n    $('p').css('font-size', function(index, value) {\n        var newValue = parseInt(value) + 6;\n    \n        return newValue + 'px';\n    })\n</script>\n</body>\n\n/* 执行结果 */\n/* \n\n<p style=\"font-size:18px\">sample1</p>\n<p style=\"font-size:22px\">sample2</p>\n<p style=\"font-size:26px\">sample3</p>\n*/\n```\n\n### .addClass()\n用于给任何一个元素添加css\n\n如果p元素没有任何的样式，则添加addRed样式。index为该对象HTML元素的下标，myclass为该元素最初自身拥有的class属性名\n```HTML\n<p class=\"addBlue\">Good Morning</p>\n<p class=\"addGreen\">Hello</p>\n<p>こんばんは</p>\n\n$('p').addClass(function( index, myclass ) {\n \n    if( !myclass ) {\n        return 'addRed';\n    }\n    \n})\n```\n\n### removeClass()\nremoveClass()用于给任何元素删除css，有重复的情况下，删除所有匹配元素的css。\n复数指定时用空格隔开，不传参则对象元素全部删除css。\n\n```HTML\n<ul>\n    <li class=\"test\">list1</li>\n    <li class=\"sample\">list2</li>\n    <li class=\"text\">list3</li>\n</ul>\n\n$('li').removeClass('test sample');\n\n/* css为text和sample的list2，list3的css被删除 */\n```\n\n### .hasClass()\nhasClass()用于查看对象元素是否存在某样式css。存在返回true，不存在返回false。\n复数的情况下用空格隔开，并且要求搜索参数值与css值完全一致。\n```HTML\n<ul>\n      <li class=\"red\">リスト１</li>\n      <li class=\"blue\">リスト２</li>\n      <li class=\"red green\">リスト３</li>\n</ul>\n\n\nvar li = $('li').hasClass('red green');\n \nconsole.log(li);\n\n/* 执行结果 */\n\n/* true */\n```\n\n### .toggleClass()\ntoggleClass()可以操作对象的class属性，并进行添加，删除等循环操作。\n\n利用toggleClass()进行mytoggle的显示/隐藏的切换：\n```HTML\n.mytoggle {\n    display: none;\n}\n\n<body>\n<h1>Title</h1>\n<button>Button</button>\n \n<script>\n    $('button').click(function() {\n        $('h1').toggleClass('mytoggle');\n    })\n</script>\n</body>\n```\n\n### .each()\n.each()用于循环历遍每个元素。相当于forEach。\n\n对HTML元素的操作：\n```HTML\n<ul>\n    <li>sample1</li>\n    <li>sample2</li>\n    <li>sample3</li>\n</ul>\n\n$('li').each(function(index, element) {\n \n    console.log(index);\n    console.log($(element).text());\n \n})\n\n/* 执行结果*/\n\nsample1 \n1 \nsample2 \n2 \nsample3\n```\n\n对数列的操作：\n```HTML\nvar array = [3,6,2,8,6];\n \n$.each(array, function(index, value) {\n \n    console.log(index + ': ' + value);\n \n})\n\n/* 执行结果*/\n0: 3 \n1: 6 \n2: 2 \n3: 8 \n4: 6\n\n```\n\n### $.extend()\n$.extend()用与连结两个或多个对象，将其整合为一个对象。\n无指定则在第一个传递的对象上进行覆盖，如果想保留原对象，则第一参数传空{}\n\n```HTML\nvar user1 = {\n  name: '太郎',\n  area: 'tokyo'\n}\n \nvar user2 = {\n  name: '花子',\n  age: 28\n}\n\nvar result = $.extend({}, user1, user2);\n \nconsole.log(result);\nconsole.log('------------');\nconsole.log(user1);\n\n/* 执行结果 */\nObject { name: \"花子\", area: \"tokyo\", age: 28 }\n------------\nObject { name: \"太郎\", area: \"tokyo\" }\n```\n\n### .clone()\n.clone()用于复制对象和元素。参数要指定true，false时或不传参数时不能复制。\n\n按键时按钮被复制：\n```HTML\n<button name=\"clone\">Clone!</button>\n\n<script>\n  $('button[name=clone]').on('click', function () {\n    $(this).clone(true).insertAfter(this);\n  });\n</script>\n```\n\n### .index()\n.index()用于取得元素的下标\n\n点击按钮时获取下标：\n```HTML\n<ul>\n  <li>北海道</li>\n  <li>東北</li>\n  <li>関東</li>\n  <li>東海</li>\n  <li>関西</li>\n  <li>中国</li>\n  <li>四国</li>\n  <li>九州</li>\n</ul>\n \n<p><span id=\"num\">－</span>几个</p>\n\n\n$(function() {\n \n  $('li').click(function() {\n \n    var i = $('li').index(this);\n\n    $('#num').text(i);\n \n  });\n});\n\n```\n\n### .ready()\n.ready()可以忽略浏览器默认加载，在DOM准备好后就立即执行这个函数。\n\n下面的函数执行时，由于对h1的操作在body的h1生成之前，所以相当于无效。\n```HTML\n<head>\n    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\n    <script>\n        $('h1').text('Hello World');\n    </script>\n</head>\n \n<body>\n    <h1>こんにちは</h1>\n</body>\n```\n\n此时使用.ready()，则可以在h1加载完成时再立马执行处理。\n\n```HTML\n<head>\n    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\n    <script>\n        $(document).ready(function() {\n \n            $('h1').text('Hello World');\n \n        })\n    </script>\n</head>\n \n<body>\n    <h1>こんにちは</h1>\n</body>\n```\n\n还可以简写成下面的形式:\n\n```HTML\n$(function() {\n \n    //your coding\n \n});\n\nor\n\n$(showLog);\n\nfunction showLog() {\n \n    console.log('Hey! Let's see log);\n \n}\n```","slug":"API","published":1,"updated":"2019-11-23T23:54:38.000Z","layout":"post","photos":[],"link":"","_id":"ck3it6k6e007bteyipcwjevjm","content":"<p>jQuery常用API</p>\n<a id=\"more\"></a>\n\n<h2 id=\"jQuery常用DOM操作\"><a href=\"#jQuery常用DOM操作\" class=\"headerlink\" title=\"jQuery常用DOM操作\"></a>jQuery常用DOM操作</h2><h3 id=\"append\"><a href=\"#append\" class=\"headerlink\" title=\".append()\"></a>.append()</h3><p>添加元素，通过$符号，生成一个dom元素并将它添加到页面，也可以添加jQuery对象，字符串等</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>你好！<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    $(<span class=\"string\">'p'</span>).append(<span class=\"string\">'小明和小红。'</span>);</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">/*执行结果*/</span><br><span class=\"line\">/*<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>你好！小明和小红。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>*/</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"prepend\"><a href=\"#prepend\" class=\"headerlink\" title=\".prepend()\"></a>.prepend()</h3><p>在元素的前头添加字符串或元素。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>太郎<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>花子<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>三郎<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">$('li').prepend('<span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>ユーザー名：<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span>');</span><br><span class=\"line\">/* 执行结果*/</span><br><span class=\"line\">/* <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>ユーザー名：<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span>太郎<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>ユーザー名：<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span>花子<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>ユーザー名：<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span>三郎<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span>*/</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"before\"><a href=\"#before\" class=\"headerlink\" title=\".before()\"></a>.before()</h3><p>在对象前面（不是内部而是外面，和对象同级）插入内容，参数和append相似。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> is what I said...<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> is what you said too...<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">$(\"p\").before(\"<span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span>\");</span><br><span class=\"line\">/* 执行结果 */</span><br><span class=\"line\">/*</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> is what I said...<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> is what you said too...<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"after\"><a href=\"#after\" class=\"headerlink\" title=\".after()\"></a>.after()</h3><p>在对象后面（不是内部而是外面，和对象同级）插入内容，参数和append相似。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> is what I said...<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> is what you said too...<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">$(\"p\").before(\"<span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span>\");</span><br><span class=\"line\">/* 执行结果 */</span><br><span class=\"line\">/*</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> is what I said...<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> is what you said too...<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"remove\"><a href=\"#remove\" class=\"headerlink\" title=\".remove()\"></a>.remove()</h3><p>删除所选对象的元素或者子元素。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>sample1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"two\"</span>&gt;</span>sample2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    $(<span class=\"string\">'.two'</span>).remove();</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">/* 执行结果*/</span><br><span class=\"line\">/*</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>sample1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"empty\"><a href=\"#empty\" class=\"headerlink\" title=\".empty()\"></a>.empty()</h3><p>删除指定元素内的所有子元素。该元素保留</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child\"</span>&gt;</span>子元素<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"button\"</span>&gt;</span>删除子元素<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">$(\"#button\").on(\"click\", function()&#123;</span><br><span class=\"line\">  $(\"#parent\").empty();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">/* 执行结果*/</span><br><span class=\"line\">/*</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"button\"</span>&gt;</span>删除子元素<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\".html()\"></a>.html()</h3><p>实用html()能够任意的获取HTML元素，并进行添加或替换处理。<br>获取：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>你好<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span>sample<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> result1 = $(<span class=\"string\">'p'</span>).html();</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> result2 = $(<span class=\"string\">'a'</span>).html();</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log( result1 );</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log( result2 );</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">/* 执行结果*/</span><br><span class=\"line\">/*</span><br><span class=\"line\">你好</span><br><span class=\"line\">sample</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n\n<p>替换：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>title<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>sample text<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span>link<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    $(<span class=\"string\">'div'</span>).html(<span class=\"string\">'&lt;p&gt;Hello&lt;/p&gt;'</span>);</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">/* 执行结果*/</span><br><span class=\"line\">/*</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>こんにちは<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n\n<p>添加：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>here is the link<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"xml\">    $('p').html('<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>link is<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span>this one<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>!!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>');</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">/* 执行结果*/</span><br><span class=\"line\">/*</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>link is<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span>this one<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>!!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"text\"><a href=\"#text\" class=\"headerlink\" title=\".text()\"></a>.text()</h3><p>text()和html()十分相似，$node.text()和$node.html()的区别是text取得所有符合条件的元素进行处理，添加时只能添加字符串。<br>text()和html()的获取元素对比：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Good Morning<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> result1 = $(<span class=\"string\">'p'</span>).html();</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> result2 = $(<span class=\"string\">'p'</span>).text();</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log( result1 );</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log( result2 );</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">/* 执行结果*/</span><br><span class=\"line\">/*</span><br><span class=\"line\">Good Morning</span><br><span class=\"line\">Good MorningHello</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n\n<p>text()插入字符串</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Good Morning<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    $(<span class=\"string\">'div'</span>).text(<span class=\"string\">'&lt;h1&gt;Title&lt;/h1&gt;'</span>);</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">/* 执行结果*/</span><br><span class=\"line\">/* 「<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>」被当作字符串插入*/</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"jQuery属性-amp-CSS操作\"><a href=\"#jQuery属性-amp-CSS操作\" class=\"headerlink\" title=\"jQuery属性&amp;CSS操作\"></a>jQuery属性&amp;CSS操作</h2><h3 id=\"属性相关\"><a href=\"#属性相关\" class=\"headerlink\" title=\"属性相关\"></a>属性相关</h3><h3 id=\"val\"><a href=\"#val\" class=\"headerlink\" title=\".val()\"></a>.val()</h3><p>val()用于取得HTML元素的value，并可以对其进行修改和设定</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"btn-a\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"a\"</span>&gt;</span>Button A<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">$('#btn-a').val('value-a');</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/* 执行结果*/</span><br><span class=\"line\">/*</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"btn-a\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"value-a\"</span>&gt;</span>ボタンA<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"attr\"><a href=\"#attr\" class=\"headerlink\" title=\".attr()\"></a>.attr()</h3><p>attr()用于获取HTML元素的属性，并对其进行修改和设定<br>获取元素的属性并修改：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sample\"</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">const</span> result = $(<span class=\"string\">'p'</span>).attr(<span class=\"string\">'id'</span>, <span class=\"string\">'text'</span>);</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"javascript\"><span class=\"built_in\">console</span>.log( result[<span class=\"number\">0</span>] );</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">/* 执行结果*/</span><br><span class=\"line\">/*</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"text\"</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n\n<p>添加元素的属性：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">const</span> result = $(<span class=\"string\">'input'</span>).attr(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    id: <span class=\"string\">'text'</span>,</span></span><br><span class=\"line\">    class: 'form',</span><br><span class=\"line\"><span class=\"javascript\">    type: <span class=\"string\">'checkbox'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    value: <span class=\"string\">'one'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    checked: <span class=\"literal\">true</span></span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"javascript\"><span class=\"built_in\">console</span>.log( result[<span class=\"number\">0</span>] );</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">/* 执行结果*/</span><br><span class=\"line\">/*</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"one\"</span> <span class=\"attr\">checked</span>=<span class=\"string\">\"checked\"</span>&gt;</span></span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"removeAttr\"><a href=\"#removeAttr\" class=\"headerlink\" title=\".removeAttr()\"></a>.removeAttr()</h3><p>.removeAttr()用于删除对象元素的属性</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"text\"</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">const</span> result = $(<span class=\"string\">'p'</span>).removeAttr(<span class=\"string\">'class'</span>);</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"javascript\"><span class=\"built_in\">console</span>.log( result[<span class=\"number\">0</span>] );</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/* 执行结果*/</span><br><span class=\"line\">/*</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"prop\"><a href=\"#prop\" class=\"headerlink\" title=\".prop()\"></a>.prop()</h3><p>prop()和removeAttr()十分相似，不同在于prop能够确认属性是否存在的状态。<br>当某个属性比如checked / disabled不存在时，和removeAttr()返回undefined,而prop返回false.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn1\"</span>&gt;</span>Button1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn2\"</span> <span class=\"attr\">disabled</span>&gt;</span>Button1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">const</span> result1 = $(<span class=\"string\">'.btn1'</span>).attr(<span class=\"string\">'disabled'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">const</span> result2 = $(<span class=\"string\">'.btn2'</span>).attr(<span class=\"string\">'disabled'</span>);</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">const</span> result3 = $(<span class=\"string\">'.btn1'</span>).prop(<span class=\"string\">'disabled'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">const</span> result4 = $(<span class=\"string\">'.btn2'</span>).prop(<span class=\"string\">'disabled'</span>);</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"javascript\"><span class=\"built_in\">console</span>.log( result1 );</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"built_in\">console</span>.log( result2 );</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"built_in\">console</span>.log( result3 );</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"built_in\">console</span>.log( result4 );</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">/* 执行结果*/</span><br><span class=\"line\">/*</span><br><span class=\"line\">undefined</span><br><span class=\"line\">disabled</span><br><span class=\"line\"> </span><br><span class=\"line\">false</span><br><span class=\"line\">true</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\".css()\"></a>.css()</h3><p>.css()能够进行元素css的设定，添加，获取，修改等。<br>元素css的设定</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>sample text<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    $('p').css('color', '#f00');</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">/* 执行结果</span><br><span class=\"line\">   将p内的文字颜色变红（#f00）</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n\n<p>修改元素的css</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">style</span>=<span class=\"string\">\"font-size:12px\"</span>&gt;</span>sample1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">style</span>=<span class=\"string\">\"font-size:16px\"</span>&gt;</span>sample2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">style</span>=<span class=\"string\">\"font-size:20px\"</span>&gt;</span>sample3<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    $(<span class=\"string\">'p'</span>).css(<span class=\"string\">'font-size'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index, value</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> newValue = <span class=\"built_in\">parseInt</span>(value) + <span class=\"number\">6</span>;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">return</span> newValue + <span class=\"string\">'px'</span>;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">/* 执行结果 */</span><br><span class=\"line\">/* </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">style</span>=<span class=\"string\">\"font-size:18px\"</span>&gt;</span>sample1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">style</span>=<span class=\"string\">\"font-size:22px\"</span>&gt;</span>sample2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">style</span>=<span class=\"string\">\"font-size:26px\"</span>&gt;</span>sample3<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"addClass\"><a href=\"#addClass\" class=\"headerlink\" title=\".addClass()\"></a>.addClass()</h3><p>用于给任何一个元素添加css</p>\n<p>如果p元素没有任何的样式，则添加addRed样式。index为该对象HTML元素的下标，myclass为该元素最初自身拥有的class属性名</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"addBlue\"</span>&gt;</span>Good Morning<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"addGreen\"</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>こんばんは<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">$('p').addClass(function( index, myclass ) &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    if( !myclass ) &#123;</span><br><span class=\"line\">        return 'addRed';</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"removeClass\"><a href=\"#removeClass\" class=\"headerlink\" title=\"removeClass()\"></a>removeClass()</h3><p>removeClass()用于给任何元素删除css，有重复的情况下，删除所有匹配元素的css。<br>复数指定时用空格隔开，不传参则对象元素全部删除css。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"test\"</span>&gt;</span>list1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sample\"</span>&gt;</span>list2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"text\"</span>&gt;</span>list3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">$('li').removeClass('test sample');</span><br><span class=\"line\"></span><br><span class=\"line\">/* css为text和sample的list2，list3的css被删除 */</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"hasClass\"><a href=\"#hasClass\" class=\"headerlink\" title=\".hasClass()\"></a>.hasClass()</h3><p>hasClass()用于查看对象元素是否存在某样式css。存在返回true，不存在返回false。<br>复数的情况下用空格隔开，并且要求搜索参数值与css值完全一致。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"red\"</span>&gt;</span>リスト１<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"blue\"</span>&gt;</span>リスト２<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"red green\"</span>&gt;</span>リスト３<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">var li = $('li').hasClass('red green');</span><br><span class=\"line\"> </span><br><span class=\"line\">console.log(li);</span><br><span class=\"line\"></span><br><span class=\"line\">/* 执行结果 */</span><br><span class=\"line\"></span><br><span class=\"line\">/* true */</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"toggleClass\"><a href=\"#toggleClass\" class=\"headerlink\" title=\".toggleClass()\"></a>.toggleClass()</h3><p>toggleClass()可以操作对象的class属性，并进行添加，删除等循环操作。</p>\n<p>利用toggleClass()进行mytoggle的显示/隐藏的切换：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.mytoggle &#123;</span><br><span class=\"line\">    display: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>Button<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    $(<span class=\"string\">'button'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        $(<span class=\"string\">'h1'</span>).toggleClass(<span class=\"string\">'mytoggle'</span>);</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"each\"><a href=\"#each\" class=\"headerlink\" title=\".each()\"></a>.each()</h3><p>.each()用于循环历遍每个元素。相当于forEach。</p>\n<p>对HTML元素的操作：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>sample1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>sample2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>sample3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">$('li').each(function(index, element) &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    console.log(index);</span><br><span class=\"line\">    console.log($(element).text());</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">/* 执行结果*/</span><br><span class=\"line\"></span><br><span class=\"line\">sample1 </span><br><span class=\"line\">1 </span><br><span class=\"line\">sample2 </span><br><span class=\"line\">2 </span><br><span class=\"line\">sample3</span><br></pre></td></tr></table></figure>\n\n<p>对数列的操作：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var array = [3,6,2,8,6];</span><br><span class=\"line\"> </span><br><span class=\"line\">$.each(array, function(index, value) &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    console.log(index + ': ' + value);</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">/* 执行结果*/</span><br><span class=\"line\">0: 3 </span><br><span class=\"line\">1: 6 </span><br><span class=\"line\">2: 2 </span><br><span class=\"line\">3: 8 </span><br><span class=\"line\">4: 6</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"extend\"><a href=\"#extend\" class=\"headerlink\" title=\"$.extend()\"></a>$.extend()</h3><p>$.extend()用与连结两个或多个对象，将其整合为一个对象。<br>无指定则在第一个传递的对象上进行覆盖，如果想保留原对象，则第一参数传空{}</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var user1 = &#123;</span><br><span class=\"line\">  name: '太郎',</span><br><span class=\"line\">  area: 'tokyo'</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">var user2 = &#123;</span><br><span class=\"line\">  name: '花子',</span><br><span class=\"line\">  age: 28</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var result = $.extend(&#123;&#125;, user1, user2);</span><br><span class=\"line\"> </span><br><span class=\"line\">console.log(result);</span><br><span class=\"line\">console.log('------------');</span><br><span class=\"line\">console.log(user1);</span><br><span class=\"line\"></span><br><span class=\"line\">/* 执行结果 */</span><br><span class=\"line\">Object &#123; name: \"花子\", area: \"tokyo\", age: 28 &#125;</span><br><span class=\"line\">------------</span><br><span class=\"line\">Object &#123; name: \"太郎\", area: \"tokyo\" &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"clone\"><a href=\"#clone\" class=\"headerlink\" title=\".clone()\"></a>.clone()</h3><p>.clone()用于复制对象和元素。参数要指定true，false时或不传参数时不能复制。</p>\n<p>按键时按钮被复制：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">name</span>=<span class=\"string\">\"clone\"</span>&gt;</span>Clone!<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  $(<span class=\"string\">'button[name=clone]'</span>).on(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    $(<span class=\"keyword\">this</span>).clone(<span class=\"literal\">true</span>).insertAfter(<span class=\"keyword\">this</span>);</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"index\"><a href=\"#index\" class=\"headerlink\" title=\".index()\"></a>.index()</h3><p>.index()用于取得元素的下标</p>\n<p>点击按钮时获取下标：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>北海道<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>東北<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>関東<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>東海<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>関西<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>中国<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>四国<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>九州<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"num\"</span>&gt;</span>－<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>几个<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$(function() &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">  $('li').click(function() &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    var i = $('li').index(this);</span><br><span class=\"line\"></span><br><span class=\"line\">    $('#num').text(i);</span><br><span class=\"line\"> </span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ready\"><a href=\"#ready\" class=\"headerlink\" title=\".ready()\"></a>.ready()</h3><p>.ready()可以忽略浏览器默认加载，在DOM准备好后就立即执行这个函数。</p>\n<p>下面的函数执行时，由于对h1的操作在body的h1生成之前，所以相当于无效。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">        $(<span class=\"string\">'h1'</span>).text(<span class=\"string\">'Hello World'</span>);</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>こんにちは<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>此时使用.ready()，则可以在h1加载完成时再立马执行处理。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">        $(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"javascript\">            $(<span class=\"string\">'h1'</span>).text(<span class=\"string\">'Hello World'</span>);</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>こんにちは<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>还可以简写成下面的形式:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(function() &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    //your coding</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">or</span><br><span class=\"line\"></span><br><span class=\"line\">$(showLog);</span><br><span class=\"line\"></span><br><span class=\"line\">function showLog() &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    console.log('Hey! Let's see log);</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"thumbnailImageUrl":"https://kisky3.github.io/2019/07/16/API/20190716.png","excerpt":"<p>jQuery常用API</p>","more":"<h2 id=\"jQuery常用DOM操作\"><a href=\"#jQuery常用DOM操作\" class=\"headerlink\" title=\"jQuery常用DOM操作\"></a>jQuery常用DOM操作</h2><h3 id=\"append\"><a href=\"#append\" class=\"headerlink\" title=\".append()\"></a>.append()</h3><p>添加元素，通过$符号，生成一个dom元素并将它添加到页面，也可以添加jQuery对象，字符串等</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>你好！<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    $(<span class=\"string\">'p'</span>).append(<span class=\"string\">'小明和小红。'</span>);</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">/*执行结果*/</span><br><span class=\"line\">/*<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>你好！小明和小红。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>*/</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"prepend\"><a href=\"#prepend\" class=\"headerlink\" title=\".prepend()\"></a>.prepend()</h3><p>在元素的前头添加字符串或元素。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>太郎<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>花子<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>三郎<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">$('li').prepend('<span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>ユーザー名：<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span>');</span><br><span class=\"line\">/* 执行结果*/</span><br><span class=\"line\">/* <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>ユーザー名：<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span>太郎<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>ユーザー名：<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span>花子<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>ユーザー名：<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span>三郎<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span>*/</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"before\"><a href=\"#before\" class=\"headerlink\" title=\".before()\"></a>.before()</h3><p>在对象前面（不是内部而是外面，和对象同级）插入内容，参数和append相似。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> is what I said...<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> is what you said too...<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">$(\"p\").before(\"<span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span>\");</span><br><span class=\"line\">/* 执行结果 */</span><br><span class=\"line\">/*</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> is what I said...<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> is what you said too...<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"after\"><a href=\"#after\" class=\"headerlink\" title=\".after()\"></a>.after()</h3><p>在对象后面（不是内部而是外面，和对象同级）插入内容，参数和append相似。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> is what I said...<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> is what you said too...<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">$(\"p\").before(\"<span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span>\");</span><br><span class=\"line\">/* 执行结果 */</span><br><span class=\"line\">/*</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> is what I said...<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> is what you said too...<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"remove\"><a href=\"#remove\" class=\"headerlink\" title=\".remove()\"></a>.remove()</h3><p>删除所选对象的元素或者子元素。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>sample1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"two\"</span>&gt;</span>sample2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    $(<span class=\"string\">'.two'</span>).remove();</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">/* 执行结果*/</span><br><span class=\"line\">/*</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>sample1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"empty\"><a href=\"#empty\" class=\"headerlink\" title=\".empty()\"></a>.empty()</h3><p>删除指定元素内的所有子元素。该元素保留</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child\"</span>&gt;</span>子元素<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"button\"</span>&gt;</span>删除子元素<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">$(\"#button\").on(\"click\", function()&#123;</span><br><span class=\"line\">  $(\"#parent\").empty();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">/* 执行结果*/</span><br><span class=\"line\">/*</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"button\"</span>&gt;</span>删除子元素<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\".html()\"></a>.html()</h3><p>实用html()能够任意的获取HTML元素，并进行添加或替换处理。<br>获取：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>你好<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span>sample<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> result1 = $(<span class=\"string\">'p'</span>).html();</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> result2 = $(<span class=\"string\">'a'</span>).html();</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log( result1 );</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log( result2 );</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">/* 执行结果*/</span><br><span class=\"line\">/*</span><br><span class=\"line\">你好</span><br><span class=\"line\">sample</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n\n<p>替换：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>title<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>sample text<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span>link<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    $(<span class=\"string\">'div'</span>).html(<span class=\"string\">'&lt;p&gt;Hello&lt;/p&gt;'</span>);</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">/* 执行结果*/</span><br><span class=\"line\">/*</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>こんにちは<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n\n<p>添加：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>here is the link<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"xml\">    $('p').html('<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>link is<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span>this one<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>!!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>');</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">/* 执行结果*/</span><br><span class=\"line\">/*</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>link is<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span>this one<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>!!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"text\"><a href=\"#text\" class=\"headerlink\" title=\".text()\"></a>.text()</h3><p>text()和html()十分相似，$node.text()和$node.html()的区别是text取得所有符合条件的元素进行处理，添加时只能添加字符串。<br>text()和html()的获取元素对比：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Good Morning<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> result1 = $(<span class=\"string\">'p'</span>).html();</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> result2 = $(<span class=\"string\">'p'</span>).text();</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log( result1 );</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log( result2 );</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">/* 执行结果*/</span><br><span class=\"line\">/*</span><br><span class=\"line\">Good Morning</span><br><span class=\"line\">Good MorningHello</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n\n<p>text()插入字符串</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Good Morning<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    $(<span class=\"string\">'div'</span>).text(<span class=\"string\">'&lt;h1&gt;Title&lt;/h1&gt;'</span>);</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">/* 执行结果*/</span><br><span class=\"line\">/* 「<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>」被当作字符串插入*/</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"jQuery属性-amp-CSS操作\"><a href=\"#jQuery属性-amp-CSS操作\" class=\"headerlink\" title=\"jQuery属性&amp;CSS操作\"></a>jQuery属性&amp;CSS操作</h2><h3 id=\"属性相关\"><a href=\"#属性相关\" class=\"headerlink\" title=\"属性相关\"></a>属性相关</h3><h3 id=\"val\"><a href=\"#val\" class=\"headerlink\" title=\".val()\"></a>.val()</h3><p>val()用于取得HTML元素的value，并可以对其进行修改和设定</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"btn-a\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"a\"</span>&gt;</span>Button A<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">$('#btn-a').val('value-a');</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/* 执行结果*/</span><br><span class=\"line\">/*</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"btn-a\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"value-a\"</span>&gt;</span>ボタンA<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"attr\"><a href=\"#attr\" class=\"headerlink\" title=\".attr()\"></a>.attr()</h3><p>attr()用于获取HTML元素的属性，并对其进行修改和设定<br>获取元素的属性并修改：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sample\"</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">const</span> result = $(<span class=\"string\">'p'</span>).attr(<span class=\"string\">'id'</span>, <span class=\"string\">'text'</span>);</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"javascript\"><span class=\"built_in\">console</span>.log( result[<span class=\"number\">0</span>] );</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">/* 执行结果*/</span><br><span class=\"line\">/*</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"text\"</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n\n<p>添加元素的属性：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">const</span> result = $(<span class=\"string\">'input'</span>).attr(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    id: <span class=\"string\">'text'</span>,</span></span><br><span class=\"line\">    class: 'form',</span><br><span class=\"line\"><span class=\"javascript\">    type: <span class=\"string\">'checkbox'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    value: <span class=\"string\">'one'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    checked: <span class=\"literal\">true</span></span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"javascript\"><span class=\"built_in\">console</span>.log( result[<span class=\"number\">0</span>] );</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">/* 执行结果*/</span><br><span class=\"line\">/*</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"one\"</span> <span class=\"attr\">checked</span>=<span class=\"string\">\"checked\"</span>&gt;</span></span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"removeAttr\"><a href=\"#removeAttr\" class=\"headerlink\" title=\".removeAttr()\"></a>.removeAttr()</h3><p>.removeAttr()用于删除对象元素的属性</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"text\"</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">const</span> result = $(<span class=\"string\">'p'</span>).removeAttr(<span class=\"string\">'class'</span>);</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"javascript\"><span class=\"built_in\">console</span>.log( result[<span class=\"number\">0</span>] );</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/* 执行结果*/</span><br><span class=\"line\">/*</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"prop\"><a href=\"#prop\" class=\"headerlink\" title=\".prop()\"></a>.prop()</h3><p>prop()和removeAttr()十分相似，不同在于prop能够确认属性是否存在的状态。<br>当某个属性比如checked / disabled不存在时，和removeAttr()返回undefined,而prop返回false.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn1\"</span>&gt;</span>Button1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn2\"</span> <span class=\"attr\">disabled</span>&gt;</span>Button1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">const</span> result1 = $(<span class=\"string\">'.btn1'</span>).attr(<span class=\"string\">'disabled'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">const</span> result2 = $(<span class=\"string\">'.btn2'</span>).attr(<span class=\"string\">'disabled'</span>);</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">const</span> result3 = $(<span class=\"string\">'.btn1'</span>).prop(<span class=\"string\">'disabled'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">const</span> result4 = $(<span class=\"string\">'.btn2'</span>).prop(<span class=\"string\">'disabled'</span>);</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"javascript\"><span class=\"built_in\">console</span>.log( result1 );</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"built_in\">console</span>.log( result2 );</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"built_in\">console</span>.log( result3 );</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"built_in\">console</span>.log( result4 );</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">/* 执行结果*/</span><br><span class=\"line\">/*</span><br><span class=\"line\">undefined</span><br><span class=\"line\">disabled</span><br><span class=\"line\"> </span><br><span class=\"line\">false</span><br><span class=\"line\">true</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\".css()\"></a>.css()</h3><p>.css()能够进行元素css的设定，添加，获取，修改等。<br>元素css的设定</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>sample text<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    $('p').css('color', '#f00');</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">/* 执行结果</span><br><span class=\"line\">   将p内的文字颜色变红（#f00）</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n\n<p>修改元素的css</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">style</span>=<span class=\"string\">\"font-size:12px\"</span>&gt;</span>sample1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">style</span>=<span class=\"string\">\"font-size:16px\"</span>&gt;</span>sample2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">style</span>=<span class=\"string\">\"font-size:20px\"</span>&gt;</span>sample3<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    $(<span class=\"string\">'p'</span>).css(<span class=\"string\">'font-size'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index, value</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> newValue = <span class=\"built_in\">parseInt</span>(value) + <span class=\"number\">6</span>;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">return</span> newValue + <span class=\"string\">'px'</span>;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">/* 执行结果 */</span><br><span class=\"line\">/* </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">style</span>=<span class=\"string\">\"font-size:18px\"</span>&gt;</span>sample1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">style</span>=<span class=\"string\">\"font-size:22px\"</span>&gt;</span>sample2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">style</span>=<span class=\"string\">\"font-size:26px\"</span>&gt;</span>sample3<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"addClass\"><a href=\"#addClass\" class=\"headerlink\" title=\".addClass()\"></a>.addClass()</h3><p>用于给任何一个元素添加css</p>\n<p>如果p元素没有任何的样式，则添加addRed样式。index为该对象HTML元素的下标，myclass为该元素最初自身拥有的class属性名</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"addBlue\"</span>&gt;</span>Good Morning<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"addGreen\"</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>こんばんは<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">$('p').addClass(function( index, myclass ) &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    if( !myclass ) &#123;</span><br><span class=\"line\">        return 'addRed';</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"removeClass\"><a href=\"#removeClass\" class=\"headerlink\" title=\"removeClass()\"></a>removeClass()</h3><p>removeClass()用于给任何元素删除css，有重复的情况下，删除所有匹配元素的css。<br>复数指定时用空格隔开，不传参则对象元素全部删除css。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"test\"</span>&gt;</span>list1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sample\"</span>&gt;</span>list2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"text\"</span>&gt;</span>list3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">$('li').removeClass('test sample');</span><br><span class=\"line\"></span><br><span class=\"line\">/* css为text和sample的list2，list3的css被删除 */</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"hasClass\"><a href=\"#hasClass\" class=\"headerlink\" title=\".hasClass()\"></a>.hasClass()</h3><p>hasClass()用于查看对象元素是否存在某样式css。存在返回true，不存在返回false。<br>复数的情况下用空格隔开，并且要求搜索参数值与css值完全一致。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"red\"</span>&gt;</span>リスト１<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"blue\"</span>&gt;</span>リスト２<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"red green\"</span>&gt;</span>リスト３<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">var li = $('li').hasClass('red green');</span><br><span class=\"line\"> </span><br><span class=\"line\">console.log(li);</span><br><span class=\"line\"></span><br><span class=\"line\">/* 执行结果 */</span><br><span class=\"line\"></span><br><span class=\"line\">/* true */</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"toggleClass\"><a href=\"#toggleClass\" class=\"headerlink\" title=\".toggleClass()\"></a>.toggleClass()</h3><p>toggleClass()可以操作对象的class属性，并进行添加，删除等循环操作。</p>\n<p>利用toggleClass()进行mytoggle的显示/隐藏的切换：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.mytoggle &#123;</span><br><span class=\"line\">    display: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>Button<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    $(<span class=\"string\">'button'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        $(<span class=\"string\">'h1'</span>).toggleClass(<span class=\"string\">'mytoggle'</span>);</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"each\"><a href=\"#each\" class=\"headerlink\" title=\".each()\"></a>.each()</h3><p>.each()用于循环历遍每个元素。相当于forEach。</p>\n<p>对HTML元素的操作：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>sample1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>sample2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>sample3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">$('li').each(function(index, element) &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    console.log(index);</span><br><span class=\"line\">    console.log($(element).text());</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">/* 执行结果*/</span><br><span class=\"line\"></span><br><span class=\"line\">sample1 </span><br><span class=\"line\">1 </span><br><span class=\"line\">sample2 </span><br><span class=\"line\">2 </span><br><span class=\"line\">sample3</span><br></pre></td></tr></table></figure>\n\n<p>对数列的操作：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var array = [3,6,2,8,6];</span><br><span class=\"line\"> </span><br><span class=\"line\">$.each(array, function(index, value) &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    console.log(index + ': ' + value);</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">/* 执行结果*/</span><br><span class=\"line\">0: 3 </span><br><span class=\"line\">1: 6 </span><br><span class=\"line\">2: 2 </span><br><span class=\"line\">3: 8 </span><br><span class=\"line\">4: 6</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"extend\"><a href=\"#extend\" class=\"headerlink\" title=\"$.extend()\"></a>$.extend()</h3><p>$.extend()用与连结两个或多个对象，将其整合为一个对象。<br>无指定则在第一个传递的对象上进行覆盖，如果想保留原对象，则第一参数传空{}</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var user1 = &#123;</span><br><span class=\"line\">  name: '太郎',</span><br><span class=\"line\">  area: 'tokyo'</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">var user2 = &#123;</span><br><span class=\"line\">  name: '花子',</span><br><span class=\"line\">  age: 28</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var result = $.extend(&#123;&#125;, user1, user2);</span><br><span class=\"line\"> </span><br><span class=\"line\">console.log(result);</span><br><span class=\"line\">console.log('------------');</span><br><span class=\"line\">console.log(user1);</span><br><span class=\"line\"></span><br><span class=\"line\">/* 执行结果 */</span><br><span class=\"line\">Object &#123; name: \"花子\", area: \"tokyo\", age: 28 &#125;</span><br><span class=\"line\">------------</span><br><span class=\"line\">Object &#123; name: \"太郎\", area: \"tokyo\" &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"clone\"><a href=\"#clone\" class=\"headerlink\" title=\".clone()\"></a>.clone()</h3><p>.clone()用于复制对象和元素。参数要指定true，false时或不传参数时不能复制。</p>\n<p>按键时按钮被复制：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">name</span>=<span class=\"string\">\"clone\"</span>&gt;</span>Clone!<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  $(<span class=\"string\">'button[name=clone]'</span>).on(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    $(<span class=\"keyword\">this</span>).clone(<span class=\"literal\">true</span>).insertAfter(<span class=\"keyword\">this</span>);</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"index\"><a href=\"#index\" class=\"headerlink\" title=\".index()\"></a>.index()</h3><p>.index()用于取得元素的下标</p>\n<p>点击按钮时获取下标：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>北海道<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>東北<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>関東<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>東海<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>関西<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>中国<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>四国<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>九州<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"num\"</span>&gt;</span>－<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>几个<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$(function() &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">  $('li').click(function() &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    var i = $('li').index(this);</span><br><span class=\"line\"></span><br><span class=\"line\">    $('#num').text(i);</span><br><span class=\"line\"> </span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ready\"><a href=\"#ready\" class=\"headerlink\" title=\".ready()\"></a>.ready()</h3><p>.ready()可以忽略浏览器默认加载，在DOM准备好后就立即执行这个函数。</p>\n<p>下面的函数执行时，由于对h1的操作在body的h1生成之前，所以相当于无效。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">        $(<span class=\"string\">'h1'</span>).text(<span class=\"string\">'Hello World'</span>);</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>こんにちは<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>此时使用.ready()，则可以在h1加载完成时再立马执行处理。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">        $(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"javascript\">            $(<span class=\"string\">'h1'</span>).text(<span class=\"string\">'Hello World'</span>);</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>こんにちは<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>还可以简写成下面的形式:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(function() &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    //your coding</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">or</span><br><span class=\"line\"></span><br><span class=\"line\">$(showLog);</span><br><span class=\"line\"></span><br><span class=\"line\">function showLog() &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    console.log('Hey! Let's see log);</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Create A Temple Page With Docker Bake","date":"2019-04-06T11:00:52.000Z","clearReading":true,"thumbnailImage":"20190406.png","thumbnailImagePosition":"left","coverImage":"cover.jpg","coverCaption":"Hello World, Hello Programming","coverSize":"partial","comments":0,"_content":"\nDocker环境下使用bake自动生成页面\n<!--more-->\n\n### 上节回顾\n使用Docker配置Cakephp3开发环境\n\n上节做到了用Docker构建环境并连接好了数据库，这节使用bake进行自动化页面的生成。\n\n***\n\n### 执行bake\n\n执行bake时要注意，执行commend的场所在bin路径下。执行前确保数据库里存在相应的表。\n\n1.创建User表\n\n```\n// User Table\nCREATE TABLE `users` (\n    `id` int(11) unsigned NOT NULL AUTO_INCREMENT PRIMARY KEY,\n    `email` varchar(255) NOT NULL,\n    `password` varchar(255) NOT NULL,\n    `status` char(1) DEFAULT 0,\n    `created` DATETIME DEFAULT NULL,\n    `modified` DATETIME DEFAULT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;\n```\n\n2.使用bake进行users全页面自动生成\n\n```\n# bin/cake bake all users\nBake All\n---------------------------------------------------------------\nOne moment while associations are detected.\n \nBaking table class for Users...\n \nCreating file /var/www/html/cakephp3.com/src/Model/Table/UsersTable.php\nWrote `/var/www/html/cakephp3.com/src/Model/Table/UsersTable.php`\nDeleted `/var/www/html/cakephp3.com/src/Model/Table/empty`\n \nBaking entity class for User...\n \nCreating file /var/www/html/cakephp3.com/src/Model/Entity/User.php\nWrote `/var/www/html/cakephp3.com/src/Model/Entity/User.php`\nDeleted `/var/www/html/cakephp3.com/src/Model/Entity/empty`\n \nBaking test fixture for Users...\n \nCreating file /var/www/html/cakephp3.com/tests/Fixture/UsersFixture.php\nWrote `/var/www/html/cakephp3.com/tests/Fixture/UsersFixture.php`\nDeleted `/var/www/html/cakephp3.com/tests/Fixture/empty`\nBake is detecting possible fixtures...\n \nBaking test case for App\\Model\\Table\\UsersTable ...\n \nCreating file /var/www/html/cakephp3.com/tests/TestCase/Model/Table/UsersTableTest.php\nWrote `/var/www/html/cakephp3.com/tests/TestCase/Model/Table/UsersTableTest.php`\n \nBaking controller class for Users...\n \nCreating file /var/www/html/cakephp3.com/src/Controller/UsersController.php\nWrote `/var/www/html/cakephp3.com/src/Controller/UsersController.php`\nBake is detecting possible fixtures...\n \nBaking test case for App\\Controller\\UsersController ...\n \nCreating file /var/www/html/cakephp3.com/tests/TestCase/Controller/UsersControllerTest.php\nWrote `/var/www/html/cakephp3.com/tests/TestCase/Controller/UsersControllerTest.php`\n \nBaking `index` view template file...\n \nCreating file /var/www/html/cakephp3.com/src/Template/Users/index.ctp\nWrote `/var/www/html/cakephp3.com/src/Template/Users/index.ctp`\n \nBaking `view` view template file...\n \nCreating file /var/www/html/cakephp3.com/src/Template/Users/view.ctp\nWrote `/var/www/html/cakephp3.com/src/Template/Users/view.ctp`\n \nBaking `add` view template file...\n \nCreating file /var/www/html/cakephp3.com/src/Template/Users/add.ctp\nWrote `/var/www/html/cakephp3.com/src/Template/Users/add.ctp`\n \nBaking `edit` view template file...\n \nCreating file /var/www/html/cakephp3.com/src/Template/Users/edit.ctp\nWrote `/var/www/html/cakephp3.com/src/Template/Users/edit.ctp`\nBake All complete.\n```\n\n3.bake自动生成的页面确认\n\n此时user表为基准，生成了一系列users信息表（预览，添加，修改，删除）\nuser添加页面： https://开发环境的URL/users/add\n<br>\n<img src=\"./1.png\" style=\"width:500px\">\n\n***\n\n### 自动生成的文件\n\n1.Model/Table/UsersTable.php\n\n```PHP\n# cat src/Model/Table/UsersTable.php\n<?php\nnamespace App\\Model\\Table;\n \nuse Cake\\ORM\\Query;\nuse Cake\\ORM\\RulesChecker;\nuse Cake\\ORM\\Table;\nuse Cake\\Validation\\Validator;\n \n/**\n * Users Model\n *\n * @method \\App\\Model\\Entity\\User get($primaryKey, $options = [])\n * @method \\App\\Model\\Entity\\User newEntity($data = null, array $options = [])\n * @method \\App\\Model\\Entity\\User[] newEntities(array $data, array $options = [])\n * @method \\App\\Model\\Entity\\User|bool save(\\Cake\\Datasource\\EntityInterface $entity, $options = [])\n * @method \\App\\Model\\Entity\\User patchEntity(\\Cake\\Datasource\\EntityInterface $entity, array $data, array $options = [])\n * @method \\App\\Model\\Entity\\User[] patchEntities($entities, array $data, array $options = [])\n * @method \\App\\Model\\Entity\\User findOrCreate($search, callable $callback = null, $options = [])\n *\n * @mixin \\Cake\\ORM\\Behavior\\TimestampBehavior\n */\nclass UsersTable extends Table\n{\n \n    /**\n     * Initialize method\n     *\n     * @param array $config The configuration for the Table.\n     * @return void\n     */\n    public function initialize(array $config)\n    {\n        parent::initialize($config);\n \n        $this->setTable('users');\n        $this->setDisplayField('id');\n        $this->setPrimaryKey('id');\n \n        $this->addBehavior('Timestamp');\n    }\n \n    /**\n     * Default validation rules.\n     *\n     * @param \\Cake\\Validation\\Validator $validator Validator instance.\n     * @return \\Cake\\Validation\\Validator\n     */\n    public function validationDefault(Validator $validator)\n    {\n        $validator\n            ->integer('id')\n            ->allowEmpty('id', 'create');\n \n        $validator\n            ->email('email')\n            ->requirePresence('email', 'create')\n            ->notEmpty('email');\n \n        $validator\n            ->scalar('password')\n            ->requirePresence('password', 'create')\n            ->notEmpty('password');\n \n        $validator\n            ->scalar('status')\n            ->allowEmpty('status');\n \n        return $validator;\n    }\n \n    /**\n     * Returns a rules checker object that will be used for validating\n     * application integrity.\n     *\n     * @param \\Cake\\ORM\\RulesChecker $rules The rules object to be modified.\n     * @return \\Cake\\ORM\\RulesChecker\n     */\n    public function buildRules(RulesChecker $rules)\n    {\n        $rules->add($rules->isUnique(['email']));\n \n        return $rules;\n    }\n}\n```\n\n***\n\n2.Model/Entity/User.php\n\n```PHP\n# cat src/Model/Entity/User.php \n<?php\nnamespace App\\Model\\Entity;\n \nuse Cake\\ORM\\Entity;\n \n/**\n * User Entity\n *\n * @property int $id\n * @property string $email\n * @property string $password\n * @property string $status\n * @property \\Cake\\I18n\\FrozenTime $created\n * @property \\Cake\\I18n\\FrozenTime $modified\n */\nclass User extends Entity\n{\n \n    /**\n     * Fields that can be mass assigned using newEntity() or patchEntity().\n     *\n     * Note that when '*' is set to true, this allows all unspecified fields to\n     * be mass assigned. For security purposes, it is advised to set '*' to false\n     * (or remove it), and explicitly make individual fields accessible as needed.\n     *\n     * @var array\n     */\n    protected $_accessible = [\n        'email' => true,\n        'password' => true,\n        'status' => true,\n        'created' => true,\n        'modified' => true\n    ];\n \n    /**\n     * Fields that are excluded from JSON versions of the entity.\n     *\n     * @var array\n     */\n    protected $_hidden = [\n        'password'\n    ];\n}\n```\n\n***\n\n3.Template/Users/index.ctp\n\n```PHP\n# cat src/Template/Users/index.ctp \n<?php\n/**\n * @var \\App\\View\\AppView $this\n * @var \\App\\Model\\Entity\\User[]|\\Cake\\Collection\\CollectionInterface $users\n */\n?>\n<nav class=\"large-3 medium-4 columns\" id=\"actions-sidebar\">\n    <ul class=\"side-nav\">\n        <li class=\"heading\"><?= __('Actions') ?></li>\n        <li><?= $this->Html->link(__('New User'), ['action' => 'add']) ?></li>\n    </ul>\n</nav>\n<div class=\"users index large-9 medium-8 columns content\">\n    <h3><?= __('Users') ?></h3>\n    <table cellpadding=\"0\" cellspacing=\"0\">\n        <thead>\n            <tr>\n                <th scope=\"col\"><?= $this->Paginator->sort('id') ?></th>\n                <th scope=\"col\"><?= $this->Paginator->sort('email') ?></th>\n                <th scope=\"col\"><?= $this->Paginator->sort('password') ?></th>\n                <th scope=\"col\"><?= $this->Paginator->sort('status') ?></th>\n                <th scope=\"col\"><?= $this->Paginator->sort('created') ?></th>\n                <th scope=\"col\"><?= $this->Paginator->sort('modified') ?></th>\n                <th scope=\"col\" class=\"actions\"><?= __('Actions') ?></th>\n            </tr>\n        </thead>\n        <tbody>\n            <?php foreach ($users as $user): ?>\n            <tr>\n                <td><?= $this->Number->format($user->id) ?></td>\n                <td><?= h($user->email) ?></td>\n                <td><?= h($user->password) ?></td>\n                <td><?= h($user->status) ?></td>\n                <td><?= h($user->created) ?></td>\n                <td><?= h($user->modified) ?></td>\n                <td class=\"actions\">\n                    <?= $this->Html->link(__('View'), ['action' => 'view', $user->id]) ?>\n                    <?= $this->Html->link(__('Edit'), ['action' => 'edit', $user->id]) ?>\n                    <?= $this->Form->postLink(__('Delete'), ['action' => 'delete', $user->id], ['confirm' => __('Are you sure you want to delete # {0}?', $user->id)]) ?>\n                </td>\n            </tr>\n            <?php endforeach; ?>\n        </tbody>\n    </table>\n    <div class=\"paginator\">\n        <ul class=\"pagination\">\n            <?= $this->Paginator->first('<< ' . __('first')) ?>\n            <?= $this->Paginator->prev('< ' . __('previous')) ?>\n            <?= $this->Paginator->numbers() ?>\n            <?= $this->Paginator->next(__('next') . ' >') ?>\n            <?= $this->Paginator->last(__('last') . ' >>') ?>\n        </ul>\n        <p><?= $this->Paginator->counter(['format' => __('Page {{page}} of {{pages}}, showing {{current}} record(s) out of {{count}} total')]) ?></p>\n    </div>\n</div>\n```\n\n***\n\n4.Controller/UsersController.php\n\n```PHP\n# cat src/Controller/UsersController.php \n<?php\nnamespace App\\Controller;\n \nuse App\\Controller\\AppController;\n \n/**\n * Users Controller\n *\n * @property \\App\\Model\\Table\\UsersTable $Users\n *\n * @method \\App\\Model\\Entity\\User[] paginate($object = null, array $settings = [])\n */\nclass UsersController extends AppController\n{\n \n    /**\n     * Index method\n     *\n     * @return \\Cake\\Http\\Response|void\n     */\n    public function index()\n    {\n        $users = $this->paginate($this->Users);\n \n        $this->set(compact('users'));\n        $this->set('_serialize', ['users']);\n    }\n \n    /**\n     * View method\n     *\n     * @param string|null $id User id.\n     * @return \\Cake\\Http\\Response|void\n     * @throws \\Cake\\Datasource\\Exception\\RecordNotFoundException When record not found.\n     */\n    public function view($id = null)\n    {\n        $user = $this->Users->get($id, [\n            'contain' => []\n        ]);\n \n        $this->set('user', $user);\n        $this->set('_serialize', ['user']);\n    }\n \n    /**\n     * Add method\n     *\n     * @return \\Cake\\Http\\Response|null Redirects on successful add, renders view otherwise.\n     */\n    public function add()\n    {\n        $user = $this->Users->newEntity();\n        if ($this->request->is('post')) {\n            $user = $this->Users->patchEntity($user, $this->request->getData());\n            if ($this->Users->save($user)) {\n                $this->Flash->success(__('The user has been saved.'));\n \n                return $this->redirect(['action' => 'index']);\n            }\n            $this->Flash->error(__('The user could not be saved. Please, try again.'));\n        }\n        $this->set(compact('user'));\n        $this->set('_serialize', ['user']);\n    }\n \n    /**\n     * Edit method\n     *\n     * @param string|null $id User id.\n     * @return \\Cake\\Http\\Response|null Redirects on successful edit, renders view otherwise.\n     * @throws \\Cake\\Network\\Exception\\NotFoundException When record not found.\n     */\n    public function edit($id = null)\n    {\n        $user = $this->Users->get($id, [\n            'contain' => []\n        ]);\n        if ($this->request->is(['patch', 'post', 'put'])) {\n            $user = $this->Users->patchEntity($user, $this->request->getData());\n            if ($this->Users->save($user)) {\n                $this->Flash->success(__('The user has been saved.'));\n \n                return $this->redirect(['action' => 'index']);\n            }\n            $this->Flash->error(__('The user could not be saved. Please, try again.'));\n        }\n        $this->set(compact('user'));\n        $this->set('_serialize', ['user']);\n    }\n \n    /**\n     * Delete method\n     *\n     * @param string|null $id User id.\n     * @return \\Cake\\Http\\Response|null Redirects to index.\n     * @throws \\Cake\\Datasource\\Exception\\RecordNotFoundException When record not found.\n     */\n    public function delete($id = null)\n    {\n        $this->request->allowMethod(['post', 'delete']);\n        $user = $this->Users->get($id);\n        if ($this->Users->delete($user)) {\n            $this->Flash->success(__('The user has been deleted.'));\n        } else {\n            $this->Flash->error(__('The user could not be deleted. Please, try again.'));\n        }\n \n        return $this->redirect(['action' => 'index']);\n    }\n}\n```","source":"_posts/Docker环境下使用bake自动生成页面.md","raw":"---\ntitle: Create A Temple Page With Docker Bake\ndate: 2019-04-06 20:00:52\ntags:\n- Docker\nclearReading: true\nthumbnailImage: 20190406.png\nthumbnailImagePosition: left\ncoverImage: cover.jpg\ncoverCaption: \"Hello World, Hello Programming\"\ncoverSize: partial\ncomments: false\ncategories: Back-end Knowledge\n---\n\nDocker环境下使用bake自动生成页面\n<!--more-->\n\n### 上节回顾\n使用Docker配置Cakephp3开发环境\n\n上节做到了用Docker构建环境并连接好了数据库，这节使用bake进行自动化页面的生成。\n\n***\n\n### 执行bake\n\n执行bake时要注意，执行commend的场所在bin路径下。执行前确保数据库里存在相应的表。\n\n1.创建User表\n\n```\n// User Table\nCREATE TABLE `users` (\n    `id` int(11) unsigned NOT NULL AUTO_INCREMENT PRIMARY KEY,\n    `email` varchar(255) NOT NULL,\n    `password` varchar(255) NOT NULL,\n    `status` char(1) DEFAULT 0,\n    `created` DATETIME DEFAULT NULL,\n    `modified` DATETIME DEFAULT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;\n```\n\n2.使用bake进行users全页面自动生成\n\n```\n# bin/cake bake all users\nBake All\n---------------------------------------------------------------\nOne moment while associations are detected.\n \nBaking table class for Users...\n \nCreating file /var/www/html/cakephp3.com/src/Model/Table/UsersTable.php\nWrote `/var/www/html/cakephp3.com/src/Model/Table/UsersTable.php`\nDeleted `/var/www/html/cakephp3.com/src/Model/Table/empty`\n \nBaking entity class for User...\n \nCreating file /var/www/html/cakephp3.com/src/Model/Entity/User.php\nWrote `/var/www/html/cakephp3.com/src/Model/Entity/User.php`\nDeleted `/var/www/html/cakephp3.com/src/Model/Entity/empty`\n \nBaking test fixture for Users...\n \nCreating file /var/www/html/cakephp3.com/tests/Fixture/UsersFixture.php\nWrote `/var/www/html/cakephp3.com/tests/Fixture/UsersFixture.php`\nDeleted `/var/www/html/cakephp3.com/tests/Fixture/empty`\nBake is detecting possible fixtures...\n \nBaking test case for App\\Model\\Table\\UsersTable ...\n \nCreating file /var/www/html/cakephp3.com/tests/TestCase/Model/Table/UsersTableTest.php\nWrote `/var/www/html/cakephp3.com/tests/TestCase/Model/Table/UsersTableTest.php`\n \nBaking controller class for Users...\n \nCreating file /var/www/html/cakephp3.com/src/Controller/UsersController.php\nWrote `/var/www/html/cakephp3.com/src/Controller/UsersController.php`\nBake is detecting possible fixtures...\n \nBaking test case for App\\Controller\\UsersController ...\n \nCreating file /var/www/html/cakephp3.com/tests/TestCase/Controller/UsersControllerTest.php\nWrote `/var/www/html/cakephp3.com/tests/TestCase/Controller/UsersControllerTest.php`\n \nBaking `index` view template file...\n \nCreating file /var/www/html/cakephp3.com/src/Template/Users/index.ctp\nWrote `/var/www/html/cakephp3.com/src/Template/Users/index.ctp`\n \nBaking `view` view template file...\n \nCreating file /var/www/html/cakephp3.com/src/Template/Users/view.ctp\nWrote `/var/www/html/cakephp3.com/src/Template/Users/view.ctp`\n \nBaking `add` view template file...\n \nCreating file /var/www/html/cakephp3.com/src/Template/Users/add.ctp\nWrote `/var/www/html/cakephp3.com/src/Template/Users/add.ctp`\n \nBaking `edit` view template file...\n \nCreating file /var/www/html/cakephp3.com/src/Template/Users/edit.ctp\nWrote `/var/www/html/cakephp3.com/src/Template/Users/edit.ctp`\nBake All complete.\n```\n\n3.bake自动生成的页面确认\n\n此时user表为基准，生成了一系列users信息表（预览，添加，修改，删除）\nuser添加页面： https://开发环境的URL/users/add\n<br>\n<img src=\"./1.png\" style=\"width:500px\">\n\n***\n\n### 自动生成的文件\n\n1.Model/Table/UsersTable.php\n\n```PHP\n# cat src/Model/Table/UsersTable.php\n<?php\nnamespace App\\Model\\Table;\n \nuse Cake\\ORM\\Query;\nuse Cake\\ORM\\RulesChecker;\nuse Cake\\ORM\\Table;\nuse Cake\\Validation\\Validator;\n \n/**\n * Users Model\n *\n * @method \\App\\Model\\Entity\\User get($primaryKey, $options = [])\n * @method \\App\\Model\\Entity\\User newEntity($data = null, array $options = [])\n * @method \\App\\Model\\Entity\\User[] newEntities(array $data, array $options = [])\n * @method \\App\\Model\\Entity\\User|bool save(\\Cake\\Datasource\\EntityInterface $entity, $options = [])\n * @method \\App\\Model\\Entity\\User patchEntity(\\Cake\\Datasource\\EntityInterface $entity, array $data, array $options = [])\n * @method \\App\\Model\\Entity\\User[] patchEntities($entities, array $data, array $options = [])\n * @method \\App\\Model\\Entity\\User findOrCreate($search, callable $callback = null, $options = [])\n *\n * @mixin \\Cake\\ORM\\Behavior\\TimestampBehavior\n */\nclass UsersTable extends Table\n{\n \n    /**\n     * Initialize method\n     *\n     * @param array $config The configuration for the Table.\n     * @return void\n     */\n    public function initialize(array $config)\n    {\n        parent::initialize($config);\n \n        $this->setTable('users');\n        $this->setDisplayField('id');\n        $this->setPrimaryKey('id');\n \n        $this->addBehavior('Timestamp');\n    }\n \n    /**\n     * Default validation rules.\n     *\n     * @param \\Cake\\Validation\\Validator $validator Validator instance.\n     * @return \\Cake\\Validation\\Validator\n     */\n    public function validationDefault(Validator $validator)\n    {\n        $validator\n            ->integer('id')\n            ->allowEmpty('id', 'create');\n \n        $validator\n            ->email('email')\n            ->requirePresence('email', 'create')\n            ->notEmpty('email');\n \n        $validator\n            ->scalar('password')\n            ->requirePresence('password', 'create')\n            ->notEmpty('password');\n \n        $validator\n            ->scalar('status')\n            ->allowEmpty('status');\n \n        return $validator;\n    }\n \n    /**\n     * Returns a rules checker object that will be used for validating\n     * application integrity.\n     *\n     * @param \\Cake\\ORM\\RulesChecker $rules The rules object to be modified.\n     * @return \\Cake\\ORM\\RulesChecker\n     */\n    public function buildRules(RulesChecker $rules)\n    {\n        $rules->add($rules->isUnique(['email']));\n \n        return $rules;\n    }\n}\n```\n\n***\n\n2.Model/Entity/User.php\n\n```PHP\n# cat src/Model/Entity/User.php \n<?php\nnamespace App\\Model\\Entity;\n \nuse Cake\\ORM\\Entity;\n \n/**\n * User Entity\n *\n * @property int $id\n * @property string $email\n * @property string $password\n * @property string $status\n * @property \\Cake\\I18n\\FrozenTime $created\n * @property \\Cake\\I18n\\FrozenTime $modified\n */\nclass User extends Entity\n{\n \n    /**\n     * Fields that can be mass assigned using newEntity() or patchEntity().\n     *\n     * Note that when '*' is set to true, this allows all unspecified fields to\n     * be mass assigned. For security purposes, it is advised to set '*' to false\n     * (or remove it), and explicitly make individual fields accessible as needed.\n     *\n     * @var array\n     */\n    protected $_accessible = [\n        'email' => true,\n        'password' => true,\n        'status' => true,\n        'created' => true,\n        'modified' => true\n    ];\n \n    /**\n     * Fields that are excluded from JSON versions of the entity.\n     *\n     * @var array\n     */\n    protected $_hidden = [\n        'password'\n    ];\n}\n```\n\n***\n\n3.Template/Users/index.ctp\n\n```PHP\n# cat src/Template/Users/index.ctp \n<?php\n/**\n * @var \\App\\View\\AppView $this\n * @var \\App\\Model\\Entity\\User[]|\\Cake\\Collection\\CollectionInterface $users\n */\n?>\n<nav class=\"large-3 medium-4 columns\" id=\"actions-sidebar\">\n    <ul class=\"side-nav\">\n        <li class=\"heading\"><?= __('Actions') ?></li>\n        <li><?= $this->Html->link(__('New User'), ['action' => 'add']) ?></li>\n    </ul>\n</nav>\n<div class=\"users index large-9 medium-8 columns content\">\n    <h3><?= __('Users') ?></h3>\n    <table cellpadding=\"0\" cellspacing=\"0\">\n        <thead>\n            <tr>\n                <th scope=\"col\"><?= $this->Paginator->sort('id') ?></th>\n                <th scope=\"col\"><?= $this->Paginator->sort('email') ?></th>\n                <th scope=\"col\"><?= $this->Paginator->sort('password') ?></th>\n                <th scope=\"col\"><?= $this->Paginator->sort('status') ?></th>\n                <th scope=\"col\"><?= $this->Paginator->sort('created') ?></th>\n                <th scope=\"col\"><?= $this->Paginator->sort('modified') ?></th>\n                <th scope=\"col\" class=\"actions\"><?= __('Actions') ?></th>\n            </tr>\n        </thead>\n        <tbody>\n            <?php foreach ($users as $user): ?>\n            <tr>\n                <td><?= $this->Number->format($user->id) ?></td>\n                <td><?= h($user->email) ?></td>\n                <td><?= h($user->password) ?></td>\n                <td><?= h($user->status) ?></td>\n                <td><?= h($user->created) ?></td>\n                <td><?= h($user->modified) ?></td>\n                <td class=\"actions\">\n                    <?= $this->Html->link(__('View'), ['action' => 'view', $user->id]) ?>\n                    <?= $this->Html->link(__('Edit'), ['action' => 'edit', $user->id]) ?>\n                    <?= $this->Form->postLink(__('Delete'), ['action' => 'delete', $user->id], ['confirm' => __('Are you sure you want to delete # {0}?', $user->id)]) ?>\n                </td>\n            </tr>\n            <?php endforeach; ?>\n        </tbody>\n    </table>\n    <div class=\"paginator\">\n        <ul class=\"pagination\">\n            <?= $this->Paginator->first('<< ' . __('first')) ?>\n            <?= $this->Paginator->prev('< ' . __('previous')) ?>\n            <?= $this->Paginator->numbers() ?>\n            <?= $this->Paginator->next(__('next') . ' >') ?>\n            <?= $this->Paginator->last(__('last') . ' >>') ?>\n        </ul>\n        <p><?= $this->Paginator->counter(['format' => __('Page {{page}} of {{pages}}, showing {{current}} record(s) out of {{count}} total')]) ?></p>\n    </div>\n</div>\n```\n\n***\n\n4.Controller/UsersController.php\n\n```PHP\n# cat src/Controller/UsersController.php \n<?php\nnamespace App\\Controller;\n \nuse App\\Controller\\AppController;\n \n/**\n * Users Controller\n *\n * @property \\App\\Model\\Table\\UsersTable $Users\n *\n * @method \\App\\Model\\Entity\\User[] paginate($object = null, array $settings = [])\n */\nclass UsersController extends AppController\n{\n \n    /**\n     * Index method\n     *\n     * @return \\Cake\\Http\\Response|void\n     */\n    public function index()\n    {\n        $users = $this->paginate($this->Users);\n \n        $this->set(compact('users'));\n        $this->set('_serialize', ['users']);\n    }\n \n    /**\n     * View method\n     *\n     * @param string|null $id User id.\n     * @return \\Cake\\Http\\Response|void\n     * @throws \\Cake\\Datasource\\Exception\\RecordNotFoundException When record not found.\n     */\n    public function view($id = null)\n    {\n        $user = $this->Users->get($id, [\n            'contain' => []\n        ]);\n \n        $this->set('user', $user);\n        $this->set('_serialize', ['user']);\n    }\n \n    /**\n     * Add method\n     *\n     * @return \\Cake\\Http\\Response|null Redirects on successful add, renders view otherwise.\n     */\n    public function add()\n    {\n        $user = $this->Users->newEntity();\n        if ($this->request->is('post')) {\n            $user = $this->Users->patchEntity($user, $this->request->getData());\n            if ($this->Users->save($user)) {\n                $this->Flash->success(__('The user has been saved.'));\n \n                return $this->redirect(['action' => 'index']);\n            }\n            $this->Flash->error(__('The user could not be saved. Please, try again.'));\n        }\n        $this->set(compact('user'));\n        $this->set('_serialize', ['user']);\n    }\n \n    /**\n     * Edit method\n     *\n     * @param string|null $id User id.\n     * @return \\Cake\\Http\\Response|null Redirects on successful edit, renders view otherwise.\n     * @throws \\Cake\\Network\\Exception\\NotFoundException When record not found.\n     */\n    public function edit($id = null)\n    {\n        $user = $this->Users->get($id, [\n            'contain' => []\n        ]);\n        if ($this->request->is(['patch', 'post', 'put'])) {\n            $user = $this->Users->patchEntity($user, $this->request->getData());\n            if ($this->Users->save($user)) {\n                $this->Flash->success(__('The user has been saved.'));\n \n                return $this->redirect(['action' => 'index']);\n            }\n            $this->Flash->error(__('The user could not be saved. Please, try again.'));\n        }\n        $this->set(compact('user'));\n        $this->set('_serialize', ['user']);\n    }\n \n    /**\n     * Delete method\n     *\n     * @param string|null $id User id.\n     * @return \\Cake\\Http\\Response|null Redirects to index.\n     * @throws \\Cake\\Datasource\\Exception\\RecordNotFoundException When record not found.\n     */\n    public function delete($id = null)\n    {\n        $this->request->allowMethod(['post', 'delete']);\n        $user = $this->Users->get($id);\n        if ($this->Users->delete($user)) {\n            $this->Flash->success(__('The user has been deleted.'));\n        } else {\n            $this->Flash->error(__('The user could not be deleted. Please, try again.'));\n        }\n \n        return $this->redirect(['action' => 'index']);\n    }\n}\n```","slug":"Docker环境下使用bake自动生成页面","published":1,"updated":"2019-11-23T23:54:38.000Z","layout":"post","photos":[],"link":"","_id":"ck3it6k6g007cteyil3qxqa8d","content":"<p>Docker环境下使用bake自动生成页面</p>\n<a id=\"more\"></a>\n\n<h3 id=\"上节回顾\"><a href=\"#上节回顾\" class=\"headerlink\" title=\"上节回顾\"></a>上节回顾</h3><p>使用Docker配置Cakephp3开发环境</p>\n<p>上节做到了用Docker构建环境并连接好了数据库，这节使用bake进行自动化页面的生成。</p>\n<hr>\n<h3 id=\"执行bake\"><a href=\"#执行bake\" class=\"headerlink\" title=\"执行bake\"></a>执行bake</h3><p>执行bake时要注意，执行commend的场所在bin路径下。执行前确保数据库里存在相应的表。</p>\n<p>1.创建User表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// User Table</span><br><span class=\"line\">CREATE TABLE `users` (</span><br><span class=\"line\">    `id` int(11) unsigned NOT NULL AUTO_INCREMENT PRIMARY KEY,</span><br><span class=\"line\">    `email` varchar(255) NOT NULL,</span><br><span class=\"line\">    `password` varchar(255) NOT NULL,</span><br><span class=\"line\">    `status` char(1) DEFAULT 0,</span><br><span class=\"line\">    `created` DATETIME DEFAULT NULL,</span><br><span class=\"line\">    `modified` DATETIME DEFAULT NULL</span><br><span class=\"line\">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;</span><br></pre></td></tr></table></figure>\n\n<p>2.使用bake进行users全页面自动生成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># bin/cake bake all users</span><br><span class=\"line\">Bake All</span><br><span class=\"line\">---------------------------------------------------------------</span><br><span class=\"line\">One moment while associations are detected.</span><br><span class=\"line\"> </span><br><span class=\"line\">Baking table class for Users...</span><br><span class=\"line\"> </span><br><span class=\"line\">Creating file /var/www/html/cakephp3.com/src/Model/Table/UsersTable.php</span><br><span class=\"line\">Wrote `/var/www/html/cakephp3.com/src/Model/Table/UsersTable.php`</span><br><span class=\"line\">Deleted `/var/www/html/cakephp3.com/src/Model/Table/empty`</span><br><span class=\"line\"> </span><br><span class=\"line\">Baking entity class for User...</span><br><span class=\"line\"> </span><br><span class=\"line\">Creating file /var/www/html/cakephp3.com/src/Model/Entity/User.php</span><br><span class=\"line\">Wrote `/var/www/html/cakephp3.com/src/Model/Entity/User.php`</span><br><span class=\"line\">Deleted `/var/www/html/cakephp3.com/src/Model/Entity/empty`</span><br><span class=\"line\"> </span><br><span class=\"line\">Baking test fixture for Users...</span><br><span class=\"line\"> </span><br><span class=\"line\">Creating file /var/www/html/cakephp3.com/tests/Fixture/UsersFixture.php</span><br><span class=\"line\">Wrote `/var/www/html/cakephp3.com/tests/Fixture/UsersFixture.php`</span><br><span class=\"line\">Deleted `/var/www/html/cakephp3.com/tests/Fixture/empty`</span><br><span class=\"line\">Bake is detecting possible fixtures...</span><br><span class=\"line\"> </span><br><span class=\"line\">Baking test case for App\\Model\\Table\\UsersTable ...</span><br><span class=\"line\"> </span><br><span class=\"line\">Creating file /var/www/html/cakephp3.com/tests/TestCase/Model/Table/UsersTableTest.php</span><br><span class=\"line\">Wrote `/var/www/html/cakephp3.com/tests/TestCase/Model/Table/UsersTableTest.php`</span><br><span class=\"line\"> </span><br><span class=\"line\">Baking controller class for Users...</span><br><span class=\"line\"> </span><br><span class=\"line\">Creating file /var/www/html/cakephp3.com/src/Controller/UsersController.php</span><br><span class=\"line\">Wrote `/var/www/html/cakephp3.com/src/Controller/UsersController.php`</span><br><span class=\"line\">Bake is detecting possible fixtures...</span><br><span class=\"line\"> </span><br><span class=\"line\">Baking test case for App\\Controller\\UsersController ...</span><br><span class=\"line\"> </span><br><span class=\"line\">Creating file /var/www/html/cakephp3.com/tests/TestCase/Controller/UsersControllerTest.php</span><br><span class=\"line\">Wrote `/var/www/html/cakephp3.com/tests/TestCase/Controller/UsersControllerTest.php`</span><br><span class=\"line\"> </span><br><span class=\"line\">Baking `index` view template file...</span><br><span class=\"line\"> </span><br><span class=\"line\">Creating file /var/www/html/cakephp3.com/src/Template/Users/index.ctp</span><br><span class=\"line\">Wrote `/var/www/html/cakephp3.com/src/Template/Users/index.ctp`</span><br><span class=\"line\"> </span><br><span class=\"line\">Baking `view` view template file...</span><br><span class=\"line\"> </span><br><span class=\"line\">Creating file /var/www/html/cakephp3.com/src/Template/Users/view.ctp</span><br><span class=\"line\">Wrote `/var/www/html/cakephp3.com/src/Template/Users/view.ctp`</span><br><span class=\"line\"> </span><br><span class=\"line\">Baking `add` view template file...</span><br><span class=\"line\"> </span><br><span class=\"line\">Creating file /var/www/html/cakephp3.com/src/Template/Users/add.ctp</span><br><span class=\"line\">Wrote `/var/www/html/cakephp3.com/src/Template/Users/add.ctp`</span><br><span class=\"line\"> </span><br><span class=\"line\">Baking `edit` view template file...</span><br><span class=\"line\"> </span><br><span class=\"line\">Creating file /var/www/html/cakephp3.com/src/Template/Users/edit.ctp</span><br><span class=\"line\">Wrote `/var/www/html/cakephp3.com/src/Template/Users/edit.ctp`</span><br><span class=\"line\">Bake All complete.</span><br></pre></td></tr></table></figure>\n\n<p>3.bake自动生成的页面确认</p>\n<p>此时user表为基准，生成了一系列users信息表（预览，添加，修改，删除）<br>user添加页面： https://开发环境的URL/users/add<br><br><br><img src=\"./1.png\" style=\"width:500px\"></p>\n<hr>\n<h3 id=\"自动生成的文件\"><a href=\"#自动生成的文件\" class=\"headerlink\" title=\"自动生成的文件\"></a>自动生成的文件</h3><p>1.Model/Table/UsersTable.php</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cat src/Model/Table/UsersTable.php</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">App</span>\\<span class=\"title\">Model</span>\\<span class=\"title\">Table</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Cake</span>\\<span class=\"title\">ORM</span>\\<span class=\"title\">Query</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Cake</span>\\<span class=\"title\">ORM</span>\\<span class=\"title\">RulesChecker</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Cake</span>\\<span class=\"title\">ORM</span>\\<span class=\"title\">Table</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Cake</span>\\<span class=\"title\">Validation</span>\\<span class=\"title\">Validator</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Users Model</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@method</span> \\App\\Model\\Entity\\User get($primaryKey, $options = [])</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@method</span> \\App\\Model\\Entity\\User newEntity($data = null, array $options = [])</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@method</span> \\App\\Model\\Entity\\User[] newEntities(array $data, array $options = [])</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@method</span> \\App\\Model\\Entity\\User|bool save(\\Cake\\Datasource\\EntityInterface $entity, $options = [])</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@method</span> \\App\\Model\\Entity\\User patchEntity(\\Cake\\Datasource\\EntityInterface $entity, array $data, array $options = [])</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@method</span> \\App\\Model\\Entity\\User[] patchEntities($entities, array $data, array $options = [])</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@method</span> \\App\\Model\\Entity\\User findOrCreate($search, callable $callback = null, $options = [])</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@mixin</span> \\Cake\\ORM\\Behavior\\TimestampBehavior</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UsersTable</span> <span class=\"keyword\">extends</span> <span class=\"title\">Table</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Initialize method</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> array $config The configuration for the Table.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> void</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initialize</span><span class=\"params\">(array $config)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">parent</span>::initialize($config);</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;setTable(<span class=\"string\">'users'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;setDisplayField(<span class=\"string\">'id'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;setPrimaryKey(<span class=\"string\">'id'</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;addBehavior(<span class=\"string\">'Timestamp'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Default validation rules.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> \\Cake\\Validation\\Validator $validator Validator instance.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> \\Cake\\Validation\\Validator</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validationDefault</span><span class=\"params\">(Validator $validator)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $validator</span><br><span class=\"line\">            -&gt;integer(<span class=\"string\">'id'</span>)</span><br><span class=\"line\">            -&gt;allowEmpty(<span class=\"string\">'id'</span>, <span class=\"string\">'create'</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">        $validator</span><br><span class=\"line\">            -&gt;email(<span class=\"string\">'email'</span>)</span><br><span class=\"line\">            -&gt;requirePresence(<span class=\"string\">'email'</span>, <span class=\"string\">'create'</span>)</span><br><span class=\"line\">            -&gt;notEmpty(<span class=\"string\">'email'</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">        $validator</span><br><span class=\"line\">            -&gt;scalar(<span class=\"string\">'password'</span>)</span><br><span class=\"line\">            -&gt;requirePresence(<span class=\"string\">'password'</span>, <span class=\"string\">'create'</span>)</span><br><span class=\"line\">            -&gt;notEmpty(<span class=\"string\">'password'</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">        $validator</span><br><span class=\"line\">            -&gt;scalar(<span class=\"string\">'status'</span>)</span><br><span class=\"line\">            -&gt;allowEmpty(<span class=\"string\">'status'</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">return</span> $validator;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns a rules checker object that will be used for validating</span></span><br><span class=\"line\"><span class=\"comment\">     * application integrity.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> \\Cake\\ORM\\RulesChecker $rules The rules object to be modified.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> \\Cake\\ORM\\RulesChecker</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildRules</span><span class=\"params\">(RulesChecker $rules)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $rules-&gt;add($rules-&gt;isUnique([<span class=\"string\">'email'</span>]));</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">return</span> $rules;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>2.Model/Entity/User.php</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cat src/Model/Entity/User.php </span></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">App</span>\\<span class=\"title\">Model</span>\\<span class=\"title\">Entity</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Cake</span>\\<span class=\"title\">ORM</span>\\<span class=\"title\">Entity</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * User Entity</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@property</span> int $id</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@property</span> string $email</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@property</span> string $password</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@property</span> string $status</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@property</span> \\Cake\\I18n\\FrozenTime $created</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@property</span> \\Cake\\I18n\\FrozenTime $modified</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">extends</span> <span class=\"title\">Entity</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Fields that can be mass assigned using newEntity() or patchEntity().</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * Note that when '*' is set to true, this allows all unspecified fields to</span></span><br><span class=\"line\"><span class=\"comment\">     * be mass assigned. For security purposes, it is advised to set '*' to false</span></span><br><span class=\"line\"><span class=\"comment\">     * (or remove it), and explicitly make individual fields accessible as needed.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> array</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $_accessible = [</span><br><span class=\"line\">        <span class=\"string\">'email'</span> =&gt; <span class=\"keyword\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">'password'</span> =&gt; <span class=\"keyword\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">'status'</span> =&gt; <span class=\"keyword\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">'created'</span> =&gt; <span class=\"keyword\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">'modified'</span> =&gt; <span class=\"keyword\">true</span></span><br><span class=\"line\">    ];</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Fields that are excluded from JSON versions of the entity.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> array</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $_hidden = [</span><br><span class=\"line\">        <span class=\"string\">'password'</span></span><br><span class=\"line\">    ];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>3.Template/Users/index.ctp</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cat src/Template/Users/index.ctp </span></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@var</span> \\App\\View\\AppView $this</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@var</span> \\App\\Model\\Entity\\User[]|\\Cake\\Collection\\CollectionInterface $users</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\">&lt;nav class=\"large-3 medium-4 columns\" id=\"actions-sidebar\"&gt;</span><br><span class=\"line\">    &lt;ul class=\"side-nav\"&gt;</span><br><span class=\"line\">        &lt;li class=\"heading\"&gt;&lt;?= __('Actions') ?&gt;&lt;/li&gt;</span><br><span class=\"line\">        &lt;li&gt;<span class=\"meta\">&lt;?</span>= <span class=\"keyword\">$this</span>-&gt;Html-&gt;link(__(<span class=\"string\">'New User'</span>), [<span class=\"string\">'action'</span> =&gt; <span class=\"string\">'add'</span>]) <span class=\"meta\">?&gt;</span>&lt;/li&gt;</span><br><span class=\"line\">    &lt;/ul&gt;</span><br><span class=\"line\">&lt;/nav&gt;</span><br><span class=\"line\">&lt;div class=\"users index large-9 medium-8 columns content\"&gt;</span><br><span class=\"line\">    &lt;h3&gt;<span class=\"meta\">&lt;?</span>= __(<span class=\"string\">'Users'</span>) <span class=\"meta\">?&gt;</span>&lt;/h3&gt;</span><br><span class=\"line\">    &lt;table cellpadding=<span class=\"string\">\"0\"</span> cellspacing=<span class=\"string\">\"0\"</span>&gt;</span><br><span class=\"line\">        &lt;thead&gt;</span><br><span class=\"line\">            &lt;tr&gt;</span><br><span class=\"line\">                &lt;th scope=<span class=\"string\">\"col\"</span>&gt;<span class=\"meta\">&lt;?</span>= <span class=\"keyword\">$this</span>-&gt;Paginator-&gt;sort(<span class=\"string\">'id'</span>) <span class=\"meta\">?&gt;</span>&lt;/th&gt;</span><br><span class=\"line\">                &lt;th scope=<span class=\"string\">\"col\"</span>&gt;<span class=\"meta\">&lt;?</span>= <span class=\"keyword\">$this</span>-&gt;Paginator-&gt;sort(<span class=\"string\">'email'</span>) <span class=\"meta\">?&gt;</span>&lt;/th&gt;</span><br><span class=\"line\">                &lt;th scope=<span class=\"string\">\"col\"</span>&gt;<span class=\"meta\">&lt;?</span>= <span class=\"keyword\">$this</span>-&gt;Paginator-&gt;sort(<span class=\"string\">'password'</span>) <span class=\"meta\">?&gt;</span>&lt;/th&gt;</span><br><span class=\"line\">                &lt;th scope=<span class=\"string\">\"col\"</span>&gt;<span class=\"meta\">&lt;?</span>= <span class=\"keyword\">$this</span>-&gt;Paginator-&gt;sort(<span class=\"string\">'status'</span>) <span class=\"meta\">?&gt;</span>&lt;/th&gt;</span><br><span class=\"line\">                &lt;th scope=<span class=\"string\">\"col\"</span>&gt;<span class=\"meta\">&lt;?</span>= <span class=\"keyword\">$this</span>-&gt;Paginator-&gt;sort(<span class=\"string\">'created'</span>) <span class=\"meta\">?&gt;</span>&lt;/th&gt;</span><br><span class=\"line\">                &lt;th scope=<span class=\"string\">\"col\"</span>&gt;<span class=\"meta\">&lt;?</span>= <span class=\"keyword\">$this</span>-&gt;Paginator-&gt;sort(<span class=\"string\">'modified'</span>) <span class=\"meta\">?&gt;</span>&lt;/th&gt;</span><br><span class=\"line\">                &lt;th scope=\"col\" class=\"actions\"&gt;&lt;?= __('Actions') ?&gt;&lt;/th&gt;</span><br><span class=\"line\">            &lt;/tr&gt;</span><br><span class=\"line\">        &lt;/thead&gt;</span><br><span class=\"line\">        &lt;tbody&gt;</span><br><span class=\"line\">            <span class=\"meta\">&lt;?php</span> <span class=\"keyword\">foreach</span> ($users <span class=\"keyword\">as</span> $user): <span class=\"meta\">?&gt;</span></span><br><span class=\"line\">            &lt;tr&gt;</span><br><span class=\"line\">                &lt;td&gt;<span class=\"meta\">&lt;?</span>= <span class=\"keyword\">$this</span>-&gt;Number-&gt;format($user-&gt;id) <span class=\"meta\">?&gt;</span>&lt;/td&gt;</span><br><span class=\"line\">                &lt;td&gt;<span class=\"meta\">&lt;?</span>= h($user-&gt;email) <span class=\"meta\">?&gt;</span>&lt;/td&gt;</span><br><span class=\"line\">                &lt;td&gt;<span class=\"meta\">&lt;?</span>= h($user-&gt;password) <span class=\"meta\">?&gt;</span>&lt;/td&gt;</span><br><span class=\"line\">                &lt;td&gt;<span class=\"meta\">&lt;?</span>= h($user-&gt;status) <span class=\"meta\">?&gt;</span>&lt;/td&gt;</span><br><span class=\"line\">                &lt;td&gt;<span class=\"meta\">&lt;?</span>= h($user-&gt;created) <span class=\"meta\">?&gt;</span>&lt;/td&gt;</span><br><span class=\"line\">                &lt;td&gt;<span class=\"meta\">&lt;?</span>= h($user-&gt;modified) <span class=\"meta\">?&gt;</span>&lt;/td&gt;</span><br><span class=\"line\">                &lt;td class=\"actions\"&gt;</span><br><span class=\"line\">                    <span class=\"meta\">&lt;?</span>= <span class=\"keyword\">$this</span>-&gt;Html-&gt;link(__(<span class=\"string\">'View'</span>), [<span class=\"string\">'action'</span> =&gt; <span class=\"string\">'view'</span>, $user-&gt;id]) <span class=\"meta\">?&gt;</span></span><br><span class=\"line\">                    <span class=\"meta\">&lt;?</span>= <span class=\"keyword\">$this</span>-&gt;Html-&gt;link(__(<span class=\"string\">'Edit'</span>), [<span class=\"string\">'action'</span> =&gt; <span class=\"string\">'edit'</span>, $user-&gt;id]) <span class=\"meta\">?&gt;</span></span><br><span class=\"line\">                    <span class=\"meta\">&lt;?</span>= <span class=\"keyword\">$this</span>-&gt;Form-&gt;postLink(__(<span class=\"string\">'Delete'</span>), [<span class=\"string\">'action'</span> =&gt; <span class=\"string\">'delete'</span>, $user-&gt;id], [<span class=\"string\">'confirm'</span> =&gt; __(<span class=\"string\">'Are you sure you want to delete # &#123;0&#125;?'</span>, $user-&gt;id)]) <span class=\"meta\">?&gt;</span></span><br><span class=\"line\">                &lt;/td&gt;</span><br><span class=\"line\">            &lt;/tr&gt;</span><br><span class=\"line\">            <span class=\"meta\">&lt;?php</span> <span class=\"keyword\">endforeach</span>; <span class=\"meta\">?&gt;</span></span><br><span class=\"line\">        &lt;/tbody&gt;</span><br><span class=\"line\">    &lt;/table&gt;</span><br><span class=\"line\">    &lt;div class=\"paginator\"&gt;</span><br><span class=\"line\">        &lt;ul class=\"pagination\"&gt;</span><br><span class=\"line\">            <span class=\"meta\">&lt;?</span>= <span class=\"keyword\">$this</span>-&gt;Paginator-&gt;first(<span class=\"string\">'&lt;&lt; '</span> . __(<span class=\"string\">'first'</span>)) <span class=\"meta\">?&gt;</span></span><br><span class=\"line\">            <span class=\"meta\">&lt;?</span>= <span class=\"keyword\">$this</span>-&gt;Paginator-&gt;prev(<span class=\"string\">'&lt; '</span> . __(<span class=\"string\">'previous'</span>)) <span class=\"meta\">?&gt;</span></span><br><span class=\"line\">            <span class=\"meta\">&lt;?</span>= <span class=\"keyword\">$this</span>-&gt;Paginator-&gt;numbers() <span class=\"meta\">?&gt;</span></span><br><span class=\"line\">            <span class=\"meta\">&lt;?</span>= <span class=\"keyword\">$this</span>-&gt;Paginator-&gt;next(__(<span class=\"string\">'next'</span>) . <span class=\"string\">' &gt;'</span>) <span class=\"meta\">?&gt;</span></span><br><span class=\"line\">            <span class=\"meta\">&lt;?</span>= <span class=\"keyword\">$this</span>-&gt;Paginator-&gt;last(__(<span class=\"string\">'last'</span>) . <span class=\"string\">' &gt;&gt;'</span>) <span class=\"meta\">?&gt;</span></span><br><span class=\"line\">        &lt;/ul&gt;</span><br><span class=\"line\">        &lt;p&gt;<span class=\"meta\">&lt;?</span>= <span class=\"keyword\">$this</span>-&gt;Paginator-&gt;counter([<span class=\"string\">'format'</span> =&gt; __(<span class=\"string\">'Page &#123;&#123;page&#125;&#125; of &#123;&#123;pages&#125;&#125;, showing &#123;&#123;current&#125;&#125; record(s) out of &#123;&#123;count&#125;&#125; total'</span>)]) <span class=\"meta\">?&gt;</span>&lt;/p&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>4.Controller/UsersController.php</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cat src/Controller/UsersController.php </span></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">App</span>\\<span class=\"title\">Controller</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">App</span>\\<span class=\"title\">Controller</span>\\<span class=\"title\">AppController</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Users Controller</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@property</span> \\App\\Model\\Table\\UsersTable $Users</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@method</span> \\App\\Model\\Entity\\User[] paginate($object = null, array $settings = [])</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UsersController</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppController</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Index method</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> \\Cake\\Http\\Response|void</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">index</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $users = <span class=\"keyword\">$this</span>-&gt;paginate(<span class=\"keyword\">$this</span>-&gt;Users);</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;set(compact(<span class=\"string\">'users'</span>));</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;set(<span class=\"string\">'_serialize'</span>, [<span class=\"string\">'users'</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * View method</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> string|null $id User id.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> \\Cake\\Http\\Response|void</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> \\Cake\\Datasource\\Exception\\RecordNotFoundException When record not found.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">view</span><span class=\"params\">($id = null)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $user = <span class=\"keyword\">$this</span>-&gt;Users-&gt;get($id, [</span><br><span class=\"line\">            <span class=\"string\">'contain'</span> =&gt; []</span><br><span class=\"line\">        ]);</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;set(<span class=\"string\">'user'</span>, $user);</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;set(<span class=\"string\">'_serialize'</span>, [<span class=\"string\">'user'</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Add method</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> \\Cake\\Http\\Response|null Redirects on successful add, renders view otherwise.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $user = <span class=\"keyword\">$this</span>-&gt;Users-&gt;newEntity();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;request-&gt;is(<span class=\"string\">'post'</span>)) &#123;</span><br><span class=\"line\">            $user = <span class=\"keyword\">$this</span>-&gt;Users-&gt;patchEntity($user, <span class=\"keyword\">$this</span>-&gt;request-&gt;getData());</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;Users-&gt;save($user)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">$this</span>-&gt;Flash-&gt;success(__(<span class=\"string\">'The user has been saved.'</span>));</span><br><span class=\"line\"> </span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;redirect([<span class=\"string\">'action'</span> =&gt; <span class=\"string\">'index'</span>]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;Flash-&gt;error(__(<span class=\"string\">'The user could not be saved. Please, try again.'</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;set(compact(<span class=\"string\">'user'</span>));</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;set(<span class=\"string\">'_serialize'</span>, [<span class=\"string\">'user'</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Edit method</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> string|null $id User id.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> \\Cake\\Http\\Response|null Redirects on successful edit, renders view otherwise.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> \\Cake\\Network\\Exception\\NotFoundException When record not found.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">edit</span><span class=\"params\">($id = null)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $user = <span class=\"keyword\">$this</span>-&gt;Users-&gt;get($id, [</span><br><span class=\"line\">            <span class=\"string\">'contain'</span> =&gt; []</span><br><span class=\"line\">        ]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;request-&gt;is([<span class=\"string\">'patch'</span>, <span class=\"string\">'post'</span>, <span class=\"string\">'put'</span>])) &#123;</span><br><span class=\"line\">            $user = <span class=\"keyword\">$this</span>-&gt;Users-&gt;patchEntity($user, <span class=\"keyword\">$this</span>-&gt;request-&gt;getData());</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;Users-&gt;save($user)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">$this</span>-&gt;Flash-&gt;success(__(<span class=\"string\">'The user has been saved.'</span>));</span><br><span class=\"line\"> </span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;redirect([<span class=\"string\">'action'</span> =&gt; <span class=\"string\">'index'</span>]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;Flash-&gt;error(__(<span class=\"string\">'The user could not be saved. Please, try again.'</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;set(compact(<span class=\"string\">'user'</span>));</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;set(<span class=\"string\">'_serialize'</span>, [<span class=\"string\">'user'</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Delete method</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> string|null $id User id.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> \\Cake\\Http\\Response|null Redirects to index.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> \\Cake\\Datasource\\Exception\\RecordNotFoundException When record not found.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">delete</span><span class=\"params\">($id = null)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;request-&gt;allowMethod([<span class=\"string\">'post'</span>, <span class=\"string\">'delete'</span>]);</span><br><span class=\"line\">        $user = <span class=\"keyword\">$this</span>-&gt;Users-&gt;get($id);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;Users-&gt;delete($user)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;Flash-&gt;success(__(<span class=\"string\">'The user has been deleted.'</span>));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;Flash-&gt;error(__(<span class=\"string\">'The user could not be deleted. Please, try again.'</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;redirect([<span class=\"string\">'action'</span> =&gt; <span class=\"string\">'index'</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"thumbnailImageUrl":"https://kisky3.github.io/2019/04/06/Docker环境下使用bake自动生成页面/20190406.png","excerpt":"<p>Docker环境下使用bake自动生成页面</p>","more":"<h3 id=\"上节回顾\"><a href=\"#上节回顾\" class=\"headerlink\" title=\"上节回顾\"></a>上节回顾</h3><p>使用Docker配置Cakephp3开发环境</p>\n<p>上节做到了用Docker构建环境并连接好了数据库，这节使用bake进行自动化页面的生成。</p>\n<hr>\n<h3 id=\"执行bake\"><a href=\"#执行bake\" class=\"headerlink\" title=\"执行bake\"></a>执行bake</h3><p>执行bake时要注意，执行commend的场所在bin路径下。执行前确保数据库里存在相应的表。</p>\n<p>1.创建User表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// User Table</span><br><span class=\"line\">CREATE TABLE `users` (</span><br><span class=\"line\">    `id` int(11) unsigned NOT NULL AUTO_INCREMENT PRIMARY KEY,</span><br><span class=\"line\">    `email` varchar(255) NOT NULL,</span><br><span class=\"line\">    `password` varchar(255) NOT NULL,</span><br><span class=\"line\">    `status` char(1) DEFAULT 0,</span><br><span class=\"line\">    `created` DATETIME DEFAULT NULL,</span><br><span class=\"line\">    `modified` DATETIME DEFAULT NULL</span><br><span class=\"line\">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;</span><br></pre></td></tr></table></figure>\n\n<p>2.使用bake进行users全页面自动生成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># bin/cake bake all users</span><br><span class=\"line\">Bake All</span><br><span class=\"line\">---------------------------------------------------------------</span><br><span class=\"line\">One moment while associations are detected.</span><br><span class=\"line\"> </span><br><span class=\"line\">Baking table class for Users...</span><br><span class=\"line\"> </span><br><span class=\"line\">Creating file /var/www/html/cakephp3.com/src/Model/Table/UsersTable.php</span><br><span class=\"line\">Wrote `/var/www/html/cakephp3.com/src/Model/Table/UsersTable.php`</span><br><span class=\"line\">Deleted `/var/www/html/cakephp3.com/src/Model/Table/empty`</span><br><span class=\"line\"> </span><br><span class=\"line\">Baking entity class for User...</span><br><span class=\"line\"> </span><br><span class=\"line\">Creating file /var/www/html/cakephp3.com/src/Model/Entity/User.php</span><br><span class=\"line\">Wrote `/var/www/html/cakephp3.com/src/Model/Entity/User.php`</span><br><span class=\"line\">Deleted `/var/www/html/cakephp3.com/src/Model/Entity/empty`</span><br><span class=\"line\"> </span><br><span class=\"line\">Baking test fixture for Users...</span><br><span class=\"line\"> </span><br><span class=\"line\">Creating file /var/www/html/cakephp3.com/tests/Fixture/UsersFixture.php</span><br><span class=\"line\">Wrote `/var/www/html/cakephp3.com/tests/Fixture/UsersFixture.php`</span><br><span class=\"line\">Deleted `/var/www/html/cakephp3.com/tests/Fixture/empty`</span><br><span class=\"line\">Bake is detecting possible fixtures...</span><br><span class=\"line\"> </span><br><span class=\"line\">Baking test case for App\\Model\\Table\\UsersTable ...</span><br><span class=\"line\"> </span><br><span class=\"line\">Creating file /var/www/html/cakephp3.com/tests/TestCase/Model/Table/UsersTableTest.php</span><br><span class=\"line\">Wrote `/var/www/html/cakephp3.com/tests/TestCase/Model/Table/UsersTableTest.php`</span><br><span class=\"line\"> </span><br><span class=\"line\">Baking controller class for Users...</span><br><span class=\"line\"> </span><br><span class=\"line\">Creating file /var/www/html/cakephp3.com/src/Controller/UsersController.php</span><br><span class=\"line\">Wrote `/var/www/html/cakephp3.com/src/Controller/UsersController.php`</span><br><span class=\"line\">Bake is detecting possible fixtures...</span><br><span class=\"line\"> </span><br><span class=\"line\">Baking test case for App\\Controller\\UsersController ...</span><br><span class=\"line\"> </span><br><span class=\"line\">Creating file /var/www/html/cakephp3.com/tests/TestCase/Controller/UsersControllerTest.php</span><br><span class=\"line\">Wrote `/var/www/html/cakephp3.com/tests/TestCase/Controller/UsersControllerTest.php`</span><br><span class=\"line\"> </span><br><span class=\"line\">Baking `index` view template file...</span><br><span class=\"line\"> </span><br><span class=\"line\">Creating file /var/www/html/cakephp3.com/src/Template/Users/index.ctp</span><br><span class=\"line\">Wrote `/var/www/html/cakephp3.com/src/Template/Users/index.ctp`</span><br><span class=\"line\"> </span><br><span class=\"line\">Baking `view` view template file...</span><br><span class=\"line\"> </span><br><span class=\"line\">Creating file /var/www/html/cakephp3.com/src/Template/Users/view.ctp</span><br><span class=\"line\">Wrote `/var/www/html/cakephp3.com/src/Template/Users/view.ctp`</span><br><span class=\"line\"> </span><br><span class=\"line\">Baking `add` view template file...</span><br><span class=\"line\"> </span><br><span class=\"line\">Creating file /var/www/html/cakephp3.com/src/Template/Users/add.ctp</span><br><span class=\"line\">Wrote `/var/www/html/cakephp3.com/src/Template/Users/add.ctp`</span><br><span class=\"line\"> </span><br><span class=\"line\">Baking `edit` view template file...</span><br><span class=\"line\"> </span><br><span class=\"line\">Creating file /var/www/html/cakephp3.com/src/Template/Users/edit.ctp</span><br><span class=\"line\">Wrote `/var/www/html/cakephp3.com/src/Template/Users/edit.ctp`</span><br><span class=\"line\">Bake All complete.</span><br></pre></td></tr></table></figure>\n\n<p>3.bake自动生成的页面确认</p>\n<p>此时user表为基准，生成了一系列users信息表（预览，添加，修改，删除）<br>user添加页面： https://开发环境的URL/users/add<br><br><br><img src=\"./1.png\" style=\"width:500px\"></p>\n<hr>\n<h3 id=\"自动生成的文件\"><a href=\"#自动生成的文件\" class=\"headerlink\" title=\"自动生成的文件\"></a>自动生成的文件</h3><p>1.Model/Table/UsersTable.php</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cat src/Model/Table/UsersTable.php</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">App</span>\\<span class=\"title\">Model</span>\\<span class=\"title\">Table</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Cake</span>\\<span class=\"title\">ORM</span>\\<span class=\"title\">Query</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Cake</span>\\<span class=\"title\">ORM</span>\\<span class=\"title\">RulesChecker</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Cake</span>\\<span class=\"title\">ORM</span>\\<span class=\"title\">Table</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Cake</span>\\<span class=\"title\">Validation</span>\\<span class=\"title\">Validator</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Users Model</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@method</span> \\App\\Model\\Entity\\User get($primaryKey, $options = [])</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@method</span> \\App\\Model\\Entity\\User newEntity($data = null, array $options = [])</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@method</span> \\App\\Model\\Entity\\User[] newEntities(array $data, array $options = [])</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@method</span> \\App\\Model\\Entity\\User|bool save(\\Cake\\Datasource\\EntityInterface $entity, $options = [])</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@method</span> \\App\\Model\\Entity\\User patchEntity(\\Cake\\Datasource\\EntityInterface $entity, array $data, array $options = [])</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@method</span> \\App\\Model\\Entity\\User[] patchEntities($entities, array $data, array $options = [])</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@method</span> \\App\\Model\\Entity\\User findOrCreate($search, callable $callback = null, $options = [])</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@mixin</span> \\Cake\\ORM\\Behavior\\TimestampBehavior</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UsersTable</span> <span class=\"keyword\">extends</span> <span class=\"title\">Table</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Initialize method</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> array $config The configuration for the Table.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> void</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initialize</span><span class=\"params\">(array $config)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">parent</span>::initialize($config);</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;setTable(<span class=\"string\">'users'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;setDisplayField(<span class=\"string\">'id'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;setPrimaryKey(<span class=\"string\">'id'</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;addBehavior(<span class=\"string\">'Timestamp'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Default validation rules.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> \\Cake\\Validation\\Validator $validator Validator instance.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> \\Cake\\Validation\\Validator</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validationDefault</span><span class=\"params\">(Validator $validator)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $validator</span><br><span class=\"line\">            -&gt;integer(<span class=\"string\">'id'</span>)</span><br><span class=\"line\">            -&gt;allowEmpty(<span class=\"string\">'id'</span>, <span class=\"string\">'create'</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">        $validator</span><br><span class=\"line\">            -&gt;email(<span class=\"string\">'email'</span>)</span><br><span class=\"line\">            -&gt;requirePresence(<span class=\"string\">'email'</span>, <span class=\"string\">'create'</span>)</span><br><span class=\"line\">            -&gt;notEmpty(<span class=\"string\">'email'</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">        $validator</span><br><span class=\"line\">            -&gt;scalar(<span class=\"string\">'password'</span>)</span><br><span class=\"line\">            -&gt;requirePresence(<span class=\"string\">'password'</span>, <span class=\"string\">'create'</span>)</span><br><span class=\"line\">            -&gt;notEmpty(<span class=\"string\">'password'</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">        $validator</span><br><span class=\"line\">            -&gt;scalar(<span class=\"string\">'status'</span>)</span><br><span class=\"line\">            -&gt;allowEmpty(<span class=\"string\">'status'</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">return</span> $validator;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns a rules checker object that will be used for validating</span></span><br><span class=\"line\"><span class=\"comment\">     * application integrity.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> \\Cake\\ORM\\RulesChecker $rules The rules object to be modified.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> \\Cake\\ORM\\RulesChecker</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildRules</span><span class=\"params\">(RulesChecker $rules)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $rules-&gt;add($rules-&gt;isUnique([<span class=\"string\">'email'</span>]));</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">return</span> $rules;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>2.Model/Entity/User.php</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cat src/Model/Entity/User.php </span></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">App</span>\\<span class=\"title\">Model</span>\\<span class=\"title\">Entity</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Cake</span>\\<span class=\"title\">ORM</span>\\<span class=\"title\">Entity</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * User Entity</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@property</span> int $id</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@property</span> string $email</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@property</span> string $password</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@property</span> string $status</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@property</span> \\Cake\\I18n\\FrozenTime $created</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@property</span> \\Cake\\I18n\\FrozenTime $modified</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">extends</span> <span class=\"title\">Entity</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Fields that can be mass assigned using newEntity() or patchEntity().</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * Note that when '*' is set to true, this allows all unspecified fields to</span></span><br><span class=\"line\"><span class=\"comment\">     * be mass assigned. For security purposes, it is advised to set '*' to false</span></span><br><span class=\"line\"><span class=\"comment\">     * (or remove it), and explicitly make individual fields accessible as needed.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> array</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $_accessible = [</span><br><span class=\"line\">        <span class=\"string\">'email'</span> =&gt; <span class=\"keyword\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">'password'</span> =&gt; <span class=\"keyword\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">'status'</span> =&gt; <span class=\"keyword\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">'created'</span> =&gt; <span class=\"keyword\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">'modified'</span> =&gt; <span class=\"keyword\">true</span></span><br><span class=\"line\">    ];</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Fields that are excluded from JSON versions of the entity.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> array</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $_hidden = [</span><br><span class=\"line\">        <span class=\"string\">'password'</span></span><br><span class=\"line\">    ];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>3.Template/Users/index.ctp</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cat src/Template/Users/index.ctp </span></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@var</span> \\App\\View\\AppView $this</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@var</span> \\App\\Model\\Entity\\User[]|\\Cake\\Collection\\CollectionInterface $users</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\">&lt;nav class=\"large-3 medium-4 columns\" id=\"actions-sidebar\"&gt;</span><br><span class=\"line\">    &lt;ul class=\"side-nav\"&gt;</span><br><span class=\"line\">        &lt;li class=\"heading\"&gt;&lt;?= __('Actions') ?&gt;&lt;/li&gt;</span><br><span class=\"line\">        &lt;li&gt;<span class=\"meta\">&lt;?</span>= <span class=\"keyword\">$this</span>-&gt;Html-&gt;link(__(<span class=\"string\">'New User'</span>), [<span class=\"string\">'action'</span> =&gt; <span class=\"string\">'add'</span>]) <span class=\"meta\">?&gt;</span>&lt;/li&gt;</span><br><span class=\"line\">    &lt;/ul&gt;</span><br><span class=\"line\">&lt;/nav&gt;</span><br><span class=\"line\">&lt;div class=\"users index large-9 medium-8 columns content\"&gt;</span><br><span class=\"line\">    &lt;h3&gt;<span class=\"meta\">&lt;?</span>= __(<span class=\"string\">'Users'</span>) <span class=\"meta\">?&gt;</span>&lt;/h3&gt;</span><br><span class=\"line\">    &lt;table cellpadding=<span class=\"string\">\"0\"</span> cellspacing=<span class=\"string\">\"0\"</span>&gt;</span><br><span class=\"line\">        &lt;thead&gt;</span><br><span class=\"line\">            &lt;tr&gt;</span><br><span class=\"line\">                &lt;th scope=<span class=\"string\">\"col\"</span>&gt;<span class=\"meta\">&lt;?</span>= <span class=\"keyword\">$this</span>-&gt;Paginator-&gt;sort(<span class=\"string\">'id'</span>) <span class=\"meta\">?&gt;</span>&lt;/th&gt;</span><br><span class=\"line\">                &lt;th scope=<span class=\"string\">\"col\"</span>&gt;<span class=\"meta\">&lt;?</span>= <span class=\"keyword\">$this</span>-&gt;Paginator-&gt;sort(<span class=\"string\">'email'</span>) <span class=\"meta\">?&gt;</span>&lt;/th&gt;</span><br><span class=\"line\">                &lt;th scope=<span class=\"string\">\"col\"</span>&gt;<span class=\"meta\">&lt;?</span>= <span class=\"keyword\">$this</span>-&gt;Paginator-&gt;sort(<span class=\"string\">'password'</span>) <span class=\"meta\">?&gt;</span>&lt;/th&gt;</span><br><span class=\"line\">                &lt;th scope=<span class=\"string\">\"col\"</span>&gt;<span class=\"meta\">&lt;?</span>= <span class=\"keyword\">$this</span>-&gt;Paginator-&gt;sort(<span class=\"string\">'status'</span>) <span class=\"meta\">?&gt;</span>&lt;/th&gt;</span><br><span class=\"line\">                &lt;th scope=<span class=\"string\">\"col\"</span>&gt;<span class=\"meta\">&lt;?</span>= <span class=\"keyword\">$this</span>-&gt;Paginator-&gt;sort(<span class=\"string\">'created'</span>) <span class=\"meta\">?&gt;</span>&lt;/th&gt;</span><br><span class=\"line\">                &lt;th scope=<span class=\"string\">\"col\"</span>&gt;<span class=\"meta\">&lt;?</span>= <span class=\"keyword\">$this</span>-&gt;Paginator-&gt;sort(<span class=\"string\">'modified'</span>) <span class=\"meta\">?&gt;</span>&lt;/th&gt;</span><br><span class=\"line\">                &lt;th scope=\"col\" class=\"actions\"&gt;&lt;?= __('Actions') ?&gt;&lt;/th&gt;</span><br><span class=\"line\">            &lt;/tr&gt;</span><br><span class=\"line\">        &lt;/thead&gt;</span><br><span class=\"line\">        &lt;tbody&gt;</span><br><span class=\"line\">            <span class=\"meta\">&lt;?php</span> <span class=\"keyword\">foreach</span> ($users <span class=\"keyword\">as</span> $user): <span class=\"meta\">?&gt;</span></span><br><span class=\"line\">            &lt;tr&gt;</span><br><span class=\"line\">                &lt;td&gt;<span class=\"meta\">&lt;?</span>= <span class=\"keyword\">$this</span>-&gt;Number-&gt;format($user-&gt;id) <span class=\"meta\">?&gt;</span>&lt;/td&gt;</span><br><span class=\"line\">                &lt;td&gt;<span class=\"meta\">&lt;?</span>= h($user-&gt;email) <span class=\"meta\">?&gt;</span>&lt;/td&gt;</span><br><span class=\"line\">                &lt;td&gt;<span class=\"meta\">&lt;?</span>= h($user-&gt;password) <span class=\"meta\">?&gt;</span>&lt;/td&gt;</span><br><span class=\"line\">                &lt;td&gt;<span class=\"meta\">&lt;?</span>= h($user-&gt;status) <span class=\"meta\">?&gt;</span>&lt;/td&gt;</span><br><span class=\"line\">                &lt;td&gt;<span class=\"meta\">&lt;?</span>= h($user-&gt;created) <span class=\"meta\">?&gt;</span>&lt;/td&gt;</span><br><span class=\"line\">                &lt;td&gt;<span class=\"meta\">&lt;?</span>= h($user-&gt;modified) <span class=\"meta\">?&gt;</span>&lt;/td&gt;</span><br><span class=\"line\">                &lt;td class=\"actions\"&gt;</span><br><span class=\"line\">                    <span class=\"meta\">&lt;?</span>= <span class=\"keyword\">$this</span>-&gt;Html-&gt;link(__(<span class=\"string\">'View'</span>), [<span class=\"string\">'action'</span> =&gt; <span class=\"string\">'view'</span>, $user-&gt;id]) <span class=\"meta\">?&gt;</span></span><br><span class=\"line\">                    <span class=\"meta\">&lt;?</span>= <span class=\"keyword\">$this</span>-&gt;Html-&gt;link(__(<span class=\"string\">'Edit'</span>), [<span class=\"string\">'action'</span> =&gt; <span class=\"string\">'edit'</span>, $user-&gt;id]) <span class=\"meta\">?&gt;</span></span><br><span class=\"line\">                    <span class=\"meta\">&lt;?</span>= <span class=\"keyword\">$this</span>-&gt;Form-&gt;postLink(__(<span class=\"string\">'Delete'</span>), [<span class=\"string\">'action'</span> =&gt; <span class=\"string\">'delete'</span>, $user-&gt;id], [<span class=\"string\">'confirm'</span> =&gt; __(<span class=\"string\">'Are you sure you want to delete # &#123;0&#125;?'</span>, $user-&gt;id)]) <span class=\"meta\">?&gt;</span></span><br><span class=\"line\">                &lt;/td&gt;</span><br><span class=\"line\">            &lt;/tr&gt;</span><br><span class=\"line\">            <span class=\"meta\">&lt;?php</span> <span class=\"keyword\">endforeach</span>; <span class=\"meta\">?&gt;</span></span><br><span class=\"line\">        &lt;/tbody&gt;</span><br><span class=\"line\">    &lt;/table&gt;</span><br><span class=\"line\">    &lt;div class=\"paginator\"&gt;</span><br><span class=\"line\">        &lt;ul class=\"pagination\"&gt;</span><br><span class=\"line\">            <span class=\"meta\">&lt;?</span>= <span class=\"keyword\">$this</span>-&gt;Paginator-&gt;first(<span class=\"string\">'&lt;&lt; '</span> . __(<span class=\"string\">'first'</span>)) <span class=\"meta\">?&gt;</span></span><br><span class=\"line\">            <span class=\"meta\">&lt;?</span>= <span class=\"keyword\">$this</span>-&gt;Paginator-&gt;prev(<span class=\"string\">'&lt; '</span> . __(<span class=\"string\">'previous'</span>)) <span class=\"meta\">?&gt;</span></span><br><span class=\"line\">            <span class=\"meta\">&lt;?</span>= <span class=\"keyword\">$this</span>-&gt;Paginator-&gt;numbers() <span class=\"meta\">?&gt;</span></span><br><span class=\"line\">            <span class=\"meta\">&lt;?</span>= <span class=\"keyword\">$this</span>-&gt;Paginator-&gt;next(__(<span class=\"string\">'next'</span>) . <span class=\"string\">' &gt;'</span>) <span class=\"meta\">?&gt;</span></span><br><span class=\"line\">            <span class=\"meta\">&lt;?</span>= <span class=\"keyword\">$this</span>-&gt;Paginator-&gt;last(__(<span class=\"string\">'last'</span>) . <span class=\"string\">' &gt;&gt;'</span>) <span class=\"meta\">?&gt;</span></span><br><span class=\"line\">        &lt;/ul&gt;</span><br><span class=\"line\">        &lt;p&gt;<span class=\"meta\">&lt;?</span>= <span class=\"keyword\">$this</span>-&gt;Paginator-&gt;counter([<span class=\"string\">'format'</span> =&gt; __(<span class=\"string\">'Page &#123;&#123;page&#125;&#125; of &#123;&#123;pages&#125;&#125;, showing &#123;&#123;current&#125;&#125; record(s) out of &#123;&#123;count&#125;&#125; total'</span>)]) <span class=\"meta\">?&gt;</span>&lt;/p&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>4.Controller/UsersController.php</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cat src/Controller/UsersController.php </span></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">App</span>\\<span class=\"title\">Controller</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">App</span>\\<span class=\"title\">Controller</span>\\<span class=\"title\">AppController</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Users Controller</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@property</span> \\App\\Model\\Table\\UsersTable $Users</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@method</span> \\App\\Model\\Entity\\User[] paginate($object = null, array $settings = [])</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UsersController</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppController</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Index method</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> \\Cake\\Http\\Response|void</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">index</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $users = <span class=\"keyword\">$this</span>-&gt;paginate(<span class=\"keyword\">$this</span>-&gt;Users);</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;set(compact(<span class=\"string\">'users'</span>));</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;set(<span class=\"string\">'_serialize'</span>, [<span class=\"string\">'users'</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * View method</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> string|null $id User id.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> \\Cake\\Http\\Response|void</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> \\Cake\\Datasource\\Exception\\RecordNotFoundException When record not found.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">view</span><span class=\"params\">($id = null)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $user = <span class=\"keyword\">$this</span>-&gt;Users-&gt;get($id, [</span><br><span class=\"line\">            <span class=\"string\">'contain'</span> =&gt; []</span><br><span class=\"line\">        ]);</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;set(<span class=\"string\">'user'</span>, $user);</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;set(<span class=\"string\">'_serialize'</span>, [<span class=\"string\">'user'</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Add method</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> \\Cake\\Http\\Response|null Redirects on successful add, renders view otherwise.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $user = <span class=\"keyword\">$this</span>-&gt;Users-&gt;newEntity();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;request-&gt;is(<span class=\"string\">'post'</span>)) &#123;</span><br><span class=\"line\">            $user = <span class=\"keyword\">$this</span>-&gt;Users-&gt;patchEntity($user, <span class=\"keyword\">$this</span>-&gt;request-&gt;getData());</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;Users-&gt;save($user)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">$this</span>-&gt;Flash-&gt;success(__(<span class=\"string\">'The user has been saved.'</span>));</span><br><span class=\"line\"> </span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;redirect([<span class=\"string\">'action'</span> =&gt; <span class=\"string\">'index'</span>]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;Flash-&gt;error(__(<span class=\"string\">'The user could not be saved. Please, try again.'</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;set(compact(<span class=\"string\">'user'</span>));</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;set(<span class=\"string\">'_serialize'</span>, [<span class=\"string\">'user'</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Edit method</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> string|null $id User id.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> \\Cake\\Http\\Response|null Redirects on successful edit, renders view otherwise.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> \\Cake\\Network\\Exception\\NotFoundException When record not found.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">edit</span><span class=\"params\">($id = null)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $user = <span class=\"keyword\">$this</span>-&gt;Users-&gt;get($id, [</span><br><span class=\"line\">            <span class=\"string\">'contain'</span> =&gt; []</span><br><span class=\"line\">        ]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;request-&gt;is([<span class=\"string\">'patch'</span>, <span class=\"string\">'post'</span>, <span class=\"string\">'put'</span>])) &#123;</span><br><span class=\"line\">            $user = <span class=\"keyword\">$this</span>-&gt;Users-&gt;patchEntity($user, <span class=\"keyword\">$this</span>-&gt;request-&gt;getData());</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;Users-&gt;save($user)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">$this</span>-&gt;Flash-&gt;success(__(<span class=\"string\">'The user has been saved.'</span>));</span><br><span class=\"line\"> </span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;redirect([<span class=\"string\">'action'</span> =&gt; <span class=\"string\">'index'</span>]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;Flash-&gt;error(__(<span class=\"string\">'The user could not be saved. Please, try again.'</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;set(compact(<span class=\"string\">'user'</span>));</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;set(<span class=\"string\">'_serialize'</span>, [<span class=\"string\">'user'</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Delete method</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> string|null $id User id.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> \\Cake\\Http\\Response|null Redirects to index.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> \\Cake\\Datasource\\Exception\\RecordNotFoundException When record not found.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">delete</span><span class=\"params\">($id = null)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;request-&gt;allowMethod([<span class=\"string\">'post'</span>, <span class=\"string\">'delete'</span>]);</span><br><span class=\"line\">        $user = <span class=\"keyword\">$this</span>-&gt;Users-&gt;get($id);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;Users-&gt;delete($user)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;Flash-&gt;success(__(<span class=\"string\">'The user has been deleted.'</span>));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;Flash-&gt;error(__(<span class=\"string\">'The user could not be deleted. Please, try again.'</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;redirect([<span class=\"string\">'action'</span> =&gt; <span class=\"string\">'index'</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Miss Saigon (Musical 2014)","date":"2019-10-20T01:01:43.000Z","clearReading":true,"thumbnailImage":"20191020.jpg","thumbnailImagePosition":"top","coverImage":"cover.jpg","coverCaption":"Hello World, Hello Programming","coverSize":"partial","comments":0,"_content":"音乐剧：西贡小姐（英国/美国 2014年）\n<!--more-->\n「西贡小姐」是西方现代四大音乐名剧之一, 也是在80年代是百老汇上受欧洲影响的剧目之一，与「歌剧魅影」，「悲惨世界」和「猫」齐名. 据说是翻「蝴蝶夫人」.\n\n### 第一幕\n\n故事发生在1975年西贡的一间夜总会，就在西贡解放前几天。今天是金（Kim)做妓女的第一天，工程师（Engineer）向她问候。工程师是一个法国裔越南皮条，有一家迎合美国士兵需要的夜总会.\n在后台，所有的女孩子们都准备着晚上的节目，她们一边帮金穿上戏服一边取笑她的幼稚.\n\n夜总会的节目开始了，所有的美国大兵和越南妓女们一起狂欢（The Heat is on in Saigon）.\n\n士兵们都知道他们已经节节败退，只想在离开越南以前再玩一下子. 我们认识了克里斯（Chris）--- 一个年轻的、却不幻想的陆军作战队士兵 和他的朋友约翰(John).\n<img src=\"./1.jpg\" style=\"width:500px;margin:40px 0\">\n\n\n女孩子们在大兵面前骚手弄姿，都想争夺“西贡小姐”的称号. 得主将被作为奖品被大兵们抽奖，而妓女们认为，这就表示她们可能会被带到美国去，从此过上好日子. 每一个妓女都用自己上场的机会使出浑身解数取悦大兵们，而轮到金时，她的纯洁与天真吸引了克里斯的注意.\n\n<img src=\"./2.jpg\" style=\"width:500px;margin:40px 0\">\n\n\n约翰注意到了克里斯对金的迷恋，他与工程师谈了价钱，给克里斯买下了金的处女之夜（The Transaction”）.\n\n<img src=\"./3.jpg\" style=\"width:500px;margin:40px 0\">\n\n克里斯痛恨越南的一切，然而他完完全全为金迷恋，他问上帝为什么他一定要在临走之前才遇到这个人（Why God Why”）。\n金醒来之后，克里斯想给她钱，被她回绝了,他告诉她她不需要在夜总会卖身，因为他想让她跟他一起生活。两个人疯狂地相爱了（Sun and Moon”）。\n<img src=\"./4.jpg\" style=\"width:500px;margin:40px 0\">\n\n金和其他的女孩子们为克里斯和金准备了婚礼（“婚礼 - Dju Vui Vai”）。在婚礼上，金的表兄岁（Thuy），也是金的父母为以前她订下的丈夫，闯进来要救金离开这里。\n当他得知金是要嫁给另一个人的时候，他十分伤心 （“岁的到来 - Thuy's Arrival”）。\n<img src=\"./5.jpg\" style=\"width:500px;margin:40px 0\">\n\n金为此十分难过，她认为克里斯也会离开她，克里斯说他是要离开越南，但是他会带金一起走。克里斯与金拥抱在一起，跟着一首夜总会的庸俗歌曲“世界的最后一晚”一起跳舞。然而这首歌在这里非比寻常，因为对金和克里斯来说，这一晚，的确就是她们的世界里的最后一晚。（“世界的最后一晚 - Last Night of the World”)。\n<img src=\"./6.jpg\" style=\"width:500px;margin:40px 0\">\n\n故事向后跳跃三年，我们到了1978年。西贡（现已经改名为“胡志明市”）人都走到街头，举城欢庆打败美国、越南统一三周年的纪念活动（“龙之晨 - Morning of the Dragon”）。\n\n岁现在是新政府的官员，他命令他手下的士兵去把工程师找来,命令工程师去把在共产党入城时就没了踪影的金找到，并把她带到他那里去。\n\n金被克里斯留在了越南，她一直生活在贫民窟里。她依然深深地爱着克里斯，而且坚信他会回来救她出去。\n\n与此同时，我们看到克里斯与他的新美国人妻子，艾伦(Ellen），躺在一起。艾伦很爱克里斯，但是她很渴望知道一直缠绕他内心的阴影究竟是什么。他突然从睡梦中惊醒，坐起来叫着金的名字，艾伦安慰他重新躺下。\n两个身处地球两端的女人不约而同地表白她们对克里斯的爱情。（“我依然相信 - I Still Believe”）。\n<img src=\"./7.jpg\" style=\"width:500px;margin:40px 0\">\n\n工程师找到金，把她带到岁那里。岁解释说他寻找金已经找了三年了，而且，他仍然想把金带回家做他的妻子。她拒绝了，哪怕克里斯不在她也全心全意地爱着他。金把她与克里斯的两岁的儿子，谭（Tam），介绍给岁，令岁大为震惊。\n<img src=\"./9.jpg\" style=\"width:500px;margin:40px 0\">\n\n岁愤怒已极，他骂金是叛国者，谭则是国家的敌人，他企图用刀杀了谭。金抽出克里斯留下的手枪，被迫朝岁开了一枪。岁死在了金的怀中。\n<img src=\"./8.jpg\" style=\"width:500px;margin:40px 0\">\n\n金跑到工程师那里，告诉他所发生的事情（“假如你愿意死在温床上 - If You Want to Die in Bed”）. 金吐露克里斯是谭的父亲，他立刻兴高采烈把这小孩看成自己去美国的签证。他告诉金从现在起他就是孩子的叔叔了，而他将带她们去曼谷。金向谭保证，哪怕是牺牲她的性命，她也要让谭过上好的日子。他们三人随着其他饱受坚辛的难民一起，登上了去曼谷的船（“为了你我可以付出生命 - I'd Give My Life for You”）。\n<img src=\"./10.jpg\" style=\"width:500px;margin:40px 0\">\n\n***\n### 第二幕\n1978年，乔治亚州的亚特兰大市。约翰现在为一家帮助\"Bui-Doi\"（指越战期间美国士兵与越南女人所生的小孩）寻找美国父亲的机构工作。\n在越南，这些混血儿因为外貌特称明显，经常受到很大程度的歧视。\n\n约翰把克里斯拉到一边，说他有很重要的消息要告诉他。约翰告诉克里斯金还活着，这让克里斯十分欣慰，因为他几年来一直做着金死去的梦魇。\n<img src=\"./11.jpg\" style=\"width:500px;margin:40px 0\">\n\n1978年，曼谷。工程师现在已经沦落到招揽游客进下等酒吧的皮条客，而金则是酒吧里的舞女（“真是浪费 - What a Waste”）。\n克里斯、艾伦和约翰来到曼谷寻找金的下落，约翰走进酒吧，见到了金和工程师。金见了约翰十分惊讶，等听说了克里斯也在曼谷的消息更是欣喜不已。\n<img src=\"./12.jpg\" style=\"width:500px;margin:40px 0\">\n\n约翰去找克里斯的时候，工程师让金自己去找克里斯，因为他不相信克里斯真的会来（Chris is Here）。在金准备出门去找克里斯的时候，岁的鬼魂出现了。他恐吓金，说克里斯会跟西贡解放那晚一样，遗弃金。金的思绪，立刻被带回到那一夜（“金的梦魇 - Kim's Nightmare”）。\n<img src=\"./13.jpg\" style=\"width:500px;margin:40px 0\">\n\n1975年，西贡。在越共逐渐逼近、西贡日益混乱的时候，克里斯和金作好了逃离越南的准备。克里斯被招回去保护大使馆，他把枪留给她，让她在家收拾行李，说他们会有充足的时间离开。\n几乎就在克里斯走进大使馆的那一瞬间，大使馆的门关闭了。大使命令不许放任何越南进入大使馆。\n听说了这个消息，金挤到大使馆门口，但她不过是无数企图收买、乞求、爬进大使馆的越南人中间的一个罢了。\n<img src=\"./14.jpg\" style=\"width:500px;margin:40px 0\">\n与此同时，美国人不许克里斯出去。约翰最后不得不打他的脸，让他停止无谓的挣扎。克里斯坐上了最后一班离开西贡的直升飞机，金从大门口看着他离开，她绝望地向他表白着她对他的忠贞。直升飞机在克里斯呼唤金的声音里起飞了。\n<img src=\"./15.jpg\" style=\"width:500px;margin:40px 0\">\n\n1978年，曼谷。回忆结束了.\n金来到克里斯的旅馆房间，但当她走进屋里的时候，那里只有一个女人，艾伦。而当艾伦告诉她他们不可能带谭去美国时，她所有那些希望儿子过上好日子的梦想也破灭了。艾伦说他们可以从美国寄钱来救济她们。金仍不能相信，她愤怒地要求克里斯当面告诉她这些话（Room 317）\n<img src=\"./16.jpg\" style=\"width:500px;margin:40px 0\">\n\n克里斯和约翰没找到金，回到旅馆。克里斯听艾伦讲述了和金的激烈会面，惊恐万分。他决定让金和谭留在曼谷，他们会从美国寄钱来保证她们的生活，他们认为金是个好人，她“很聪明，她会理解的”（“对质 - The Confrontation”）。工程师仍把谭看做自己去美国的船票，他梦想着自己在美国的崭新生活。他、克里斯、艾伦一起来到金的房间（The American Dream）。\n<img src=\"./17.jpg\" style=\"width:500px;margin:40px 0\">\n\n在金的房间里，金告诉谭他应该高兴，因为他现在有爸爸了。看到克里斯、艾伦、约翰和工程师从远处走过来，她对谭说了再见，吻着他的额头。她走到帘子后面，开枪自尽了。\n\n克里斯、艾伦、约翰和工程师听到枪响立刻冲进房间，看到金倒在地上奄奄一息。克里斯跑到金旁边抱她起来，他心碎地问金为什么要这样做，但她只是求他再抱她最后一次。\n她再次重复当初两人坠入爱河时说过的话：“为什么一夜之间我们改变了这么多？”在其他人震惊的目光里，金在克里斯的怀里死去了。而艾伦跪下来，朝谭伸开了双臂（Finale）。\n<img src=\"./18.jpg\" style=\"width:500px;margin:40px 0\">\n\n***\n### 总结\n「西贡小姐」虽然借助了一个「蝴蝶夫人」的老套故事，极尽一切歌唱和宣泄，嘲讽整个时代人性的虚伪，悲天悯人的大情感收纳着一个小小女人的辛酸之泪.\n假借中西悲催恋情演绎的他乡故事不过是一个西方意淫的东方爱情和充满嘲讽的所谓的美国梦的结合罢了。\n\n西贡小姐中，金比蝴蝶夫人巧巧桑更加立体，有血有肉、柔中带刚，会为维护真爱而勇敢杀人，会为内心自由而怒斥情敌，会为孩子再度沦落风尘，表现在Sun and moon中那种婉约，在I'd give my life for you中那种坚毅的在Please中那种渴望和坚守。虽然两者皆以自杀收场，金是悲壮睿智且义无返顾的。\n\n如果这部风靡全球的歌剧曾经给以无数西方观众以灵魂震撼，在全球化的视野下，他们将如何定位他们的东方，他们将如何想象这朵“东方美学”的西方救赎意味。\n当然，或许我们不必纠结于这种文化矛盾和生命哲学气息，于音乐来说不应该受精神的绑架；让故事安于它们被叙述的语境吧。\n","source":"_posts/MissSaigon.md","raw":"---\ntitle: Miss Saigon (Musical 2014)\ndate: 2019-10-20 10:01:43\ntags:\n- musical\n- Miss Saigon\nclearReading: true\nthumbnailImage: 20191020.jpg\nthumbnailImagePosition: top\ncoverImage: cover.jpg\ncoverCaption: \"Hello World, Hello Programming\"\ncoverSize: partial\ncomments: false\ncategories: About Me\n---\n音乐剧：西贡小姐（英国/美国 2014年）\n<!--more-->\n「西贡小姐」是西方现代四大音乐名剧之一, 也是在80年代是百老汇上受欧洲影响的剧目之一，与「歌剧魅影」，「悲惨世界」和「猫」齐名. 据说是翻「蝴蝶夫人」.\n\n### 第一幕\n\n故事发生在1975年西贡的一间夜总会，就在西贡解放前几天。今天是金（Kim)做妓女的第一天，工程师（Engineer）向她问候。工程师是一个法国裔越南皮条，有一家迎合美国士兵需要的夜总会.\n在后台，所有的女孩子们都准备着晚上的节目，她们一边帮金穿上戏服一边取笑她的幼稚.\n\n夜总会的节目开始了，所有的美国大兵和越南妓女们一起狂欢（The Heat is on in Saigon）.\n\n士兵们都知道他们已经节节败退，只想在离开越南以前再玩一下子. 我们认识了克里斯（Chris）--- 一个年轻的、却不幻想的陆军作战队士兵 和他的朋友约翰(John).\n<img src=\"./1.jpg\" style=\"width:500px;margin:40px 0\">\n\n\n女孩子们在大兵面前骚手弄姿，都想争夺“西贡小姐”的称号. 得主将被作为奖品被大兵们抽奖，而妓女们认为，这就表示她们可能会被带到美国去，从此过上好日子. 每一个妓女都用自己上场的机会使出浑身解数取悦大兵们，而轮到金时，她的纯洁与天真吸引了克里斯的注意.\n\n<img src=\"./2.jpg\" style=\"width:500px;margin:40px 0\">\n\n\n约翰注意到了克里斯对金的迷恋，他与工程师谈了价钱，给克里斯买下了金的处女之夜（The Transaction”）.\n\n<img src=\"./3.jpg\" style=\"width:500px;margin:40px 0\">\n\n克里斯痛恨越南的一切，然而他完完全全为金迷恋，他问上帝为什么他一定要在临走之前才遇到这个人（Why God Why”）。\n金醒来之后，克里斯想给她钱，被她回绝了,他告诉她她不需要在夜总会卖身，因为他想让她跟他一起生活。两个人疯狂地相爱了（Sun and Moon”）。\n<img src=\"./4.jpg\" style=\"width:500px;margin:40px 0\">\n\n金和其他的女孩子们为克里斯和金准备了婚礼（“婚礼 - Dju Vui Vai”）。在婚礼上，金的表兄岁（Thuy），也是金的父母为以前她订下的丈夫，闯进来要救金离开这里。\n当他得知金是要嫁给另一个人的时候，他十分伤心 （“岁的到来 - Thuy's Arrival”）。\n<img src=\"./5.jpg\" style=\"width:500px;margin:40px 0\">\n\n金为此十分难过，她认为克里斯也会离开她，克里斯说他是要离开越南，但是他会带金一起走。克里斯与金拥抱在一起，跟着一首夜总会的庸俗歌曲“世界的最后一晚”一起跳舞。然而这首歌在这里非比寻常，因为对金和克里斯来说，这一晚，的确就是她们的世界里的最后一晚。（“世界的最后一晚 - Last Night of the World”)。\n<img src=\"./6.jpg\" style=\"width:500px;margin:40px 0\">\n\n故事向后跳跃三年，我们到了1978年。西贡（现已经改名为“胡志明市”）人都走到街头，举城欢庆打败美国、越南统一三周年的纪念活动（“龙之晨 - Morning of the Dragon”）。\n\n岁现在是新政府的官员，他命令他手下的士兵去把工程师找来,命令工程师去把在共产党入城时就没了踪影的金找到，并把她带到他那里去。\n\n金被克里斯留在了越南，她一直生活在贫民窟里。她依然深深地爱着克里斯，而且坚信他会回来救她出去。\n\n与此同时，我们看到克里斯与他的新美国人妻子，艾伦(Ellen），躺在一起。艾伦很爱克里斯，但是她很渴望知道一直缠绕他内心的阴影究竟是什么。他突然从睡梦中惊醒，坐起来叫着金的名字，艾伦安慰他重新躺下。\n两个身处地球两端的女人不约而同地表白她们对克里斯的爱情。（“我依然相信 - I Still Believe”）。\n<img src=\"./7.jpg\" style=\"width:500px;margin:40px 0\">\n\n工程师找到金，把她带到岁那里。岁解释说他寻找金已经找了三年了，而且，他仍然想把金带回家做他的妻子。她拒绝了，哪怕克里斯不在她也全心全意地爱着他。金把她与克里斯的两岁的儿子，谭（Tam），介绍给岁，令岁大为震惊。\n<img src=\"./9.jpg\" style=\"width:500px;margin:40px 0\">\n\n岁愤怒已极，他骂金是叛国者，谭则是国家的敌人，他企图用刀杀了谭。金抽出克里斯留下的手枪，被迫朝岁开了一枪。岁死在了金的怀中。\n<img src=\"./8.jpg\" style=\"width:500px;margin:40px 0\">\n\n金跑到工程师那里，告诉他所发生的事情（“假如你愿意死在温床上 - If You Want to Die in Bed”）. 金吐露克里斯是谭的父亲，他立刻兴高采烈把这小孩看成自己去美国的签证。他告诉金从现在起他就是孩子的叔叔了，而他将带她们去曼谷。金向谭保证，哪怕是牺牲她的性命，她也要让谭过上好的日子。他们三人随着其他饱受坚辛的难民一起，登上了去曼谷的船（“为了你我可以付出生命 - I'd Give My Life for You”）。\n<img src=\"./10.jpg\" style=\"width:500px;margin:40px 0\">\n\n***\n### 第二幕\n1978年，乔治亚州的亚特兰大市。约翰现在为一家帮助\"Bui-Doi\"（指越战期间美国士兵与越南女人所生的小孩）寻找美国父亲的机构工作。\n在越南，这些混血儿因为外貌特称明显，经常受到很大程度的歧视。\n\n约翰把克里斯拉到一边，说他有很重要的消息要告诉他。约翰告诉克里斯金还活着，这让克里斯十分欣慰，因为他几年来一直做着金死去的梦魇。\n<img src=\"./11.jpg\" style=\"width:500px;margin:40px 0\">\n\n1978年，曼谷。工程师现在已经沦落到招揽游客进下等酒吧的皮条客，而金则是酒吧里的舞女（“真是浪费 - What a Waste”）。\n克里斯、艾伦和约翰来到曼谷寻找金的下落，约翰走进酒吧，见到了金和工程师。金见了约翰十分惊讶，等听说了克里斯也在曼谷的消息更是欣喜不已。\n<img src=\"./12.jpg\" style=\"width:500px;margin:40px 0\">\n\n约翰去找克里斯的时候，工程师让金自己去找克里斯，因为他不相信克里斯真的会来（Chris is Here）。在金准备出门去找克里斯的时候，岁的鬼魂出现了。他恐吓金，说克里斯会跟西贡解放那晚一样，遗弃金。金的思绪，立刻被带回到那一夜（“金的梦魇 - Kim's Nightmare”）。\n<img src=\"./13.jpg\" style=\"width:500px;margin:40px 0\">\n\n1975年，西贡。在越共逐渐逼近、西贡日益混乱的时候，克里斯和金作好了逃离越南的准备。克里斯被招回去保护大使馆，他把枪留给她，让她在家收拾行李，说他们会有充足的时间离开。\n几乎就在克里斯走进大使馆的那一瞬间，大使馆的门关闭了。大使命令不许放任何越南进入大使馆。\n听说了这个消息，金挤到大使馆门口，但她不过是无数企图收买、乞求、爬进大使馆的越南人中间的一个罢了。\n<img src=\"./14.jpg\" style=\"width:500px;margin:40px 0\">\n与此同时，美国人不许克里斯出去。约翰最后不得不打他的脸，让他停止无谓的挣扎。克里斯坐上了最后一班离开西贡的直升飞机，金从大门口看着他离开，她绝望地向他表白着她对他的忠贞。直升飞机在克里斯呼唤金的声音里起飞了。\n<img src=\"./15.jpg\" style=\"width:500px;margin:40px 0\">\n\n1978年，曼谷。回忆结束了.\n金来到克里斯的旅馆房间，但当她走进屋里的时候，那里只有一个女人，艾伦。而当艾伦告诉她他们不可能带谭去美国时，她所有那些希望儿子过上好日子的梦想也破灭了。艾伦说他们可以从美国寄钱来救济她们。金仍不能相信，她愤怒地要求克里斯当面告诉她这些话（Room 317）\n<img src=\"./16.jpg\" style=\"width:500px;margin:40px 0\">\n\n克里斯和约翰没找到金，回到旅馆。克里斯听艾伦讲述了和金的激烈会面，惊恐万分。他决定让金和谭留在曼谷，他们会从美国寄钱来保证她们的生活，他们认为金是个好人，她“很聪明，她会理解的”（“对质 - The Confrontation”）。工程师仍把谭看做自己去美国的船票，他梦想着自己在美国的崭新生活。他、克里斯、艾伦一起来到金的房间（The American Dream）。\n<img src=\"./17.jpg\" style=\"width:500px;margin:40px 0\">\n\n在金的房间里，金告诉谭他应该高兴，因为他现在有爸爸了。看到克里斯、艾伦、约翰和工程师从远处走过来，她对谭说了再见，吻着他的额头。她走到帘子后面，开枪自尽了。\n\n克里斯、艾伦、约翰和工程师听到枪响立刻冲进房间，看到金倒在地上奄奄一息。克里斯跑到金旁边抱她起来，他心碎地问金为什么要这样做，但她只是求他再抱她最后一次。\n她再次重复当初两人坠入爱河时说过的话：“为什么一夜之间我们改变了这么多？”在其他人震惊的目光里，金在克里斯的怀里死去了。而艾伦跪下来，朝谭伸开了双臂（Finale）。\n<img src=\"./18.jpg\" style=\"width:500px;margin:40px 0\">\n\n***\n### 总结\n「西贡小姐」虽然借助了一个「蝴蝶夫人」的老套故事，极尽一切歌唱和宣泄，嘲讽整个时代人性的虚伪，悲天悯人的大情感收纳着一个小小女人的辛酸之泪.\n假借中西悲催恋情演绎的他乡故事不过是一个西方意淫的东方爱情和充满嘲讽的所谓的美国梦的结合罢了。\n\n西贡小姐中，金比蝴蝶夫人巧巧桑更加立体，有血有肉、柔中带刚，会为维护真爱而勇敢杀人，会为内心自由而怒斥情敌，会为孩子再度沦落风尘，表现在Sun and moon中那种婉约，在I'd give my life for you中那种坚毅的在Please中那种渴望和坚守。虽然两者皆以自杀收场，金是悲壮睿智且义无返顾的。\n\n如果这部风靡全球的歌剧曾经给以无数西方观众以灵魂震撼，在全球化的视野下，他们将如何定位他们的东方，他们将如何想象这朵“东方美学”的西方救赎意味。\n当然，或许我们不必纠结于这种文化矛盾和生命哲学气息，于音乐来说不应该受精神的绑架；让故事安于它们被叙述的语境吧。\n","slug":"MissSaigon","published":1,"updated":"2019-11-23T23:54:38.000Z","layout":"post","photos":[],"link":"","_id":"ck3it6k6k007eteyigcsht7hf","content":"<p>音乐剧：西贡小姐（英国/美国 2014年）</p>\n<a id=\"more\"></a>\n<p>「西贡小姐」是西方现代四大音乐名剧之一, 也是在80年代是百老汇上受欧洲影响的剧目之一，与「歌剧魅影」，「悲惨世界」和「猫」齐名. 据说是翻「蝴蝶夫人」.</p>\n<h3 id=\"第一幕\"><a href=\"#第一幕\" class=\"headerlink\" title=\"第一幕\"></a>第一幕</h3><p>故事发生在1975年西贡的一间夜总会，就在西贡解放前几天。今天是金（Kim)做妓女的第一天，工程师（Engineer）向她问候。工程师是一个法国裔越南皮条，有一家迎合美国士兵需要的夜总会.<br>在后台，所有的女孩子们都准备着晚上的节目，她们一边帮金穿上戏服一边取笑她的幼稚.</p>\n<p>夜总会的节目开始了，所有的美国大兵和越南妓女们一起狂欢（The Heat is on in Saigon）.</p>\n<p>士兵们都知道他们已经节节败退，只想在离开越南以前再玩一下子. 我们认识了克里斯（Chris）— 一个年轻的、却不幻想的陆军作战队士兵 和他的朋友约翰(John).<br><img src=\"./1.jpg\" style=\"width:500px;margin:40px 0\"></p>\n<p>女孩子们在大兵面前骚手弄姿，都想争夺“西贡小姐”的称号. 得主将被作为奖品被大兵们抽奖，而妓女们认为，这就表示她们可能会被带到美国去，从此过上好日子. 每一个妓女都用自己上场的机会使出浑身解数取悦大兵们，而轮到金时，她的纯洁与天真吸引了克里斯的注意.</p>\n<img src=\"./2.jpg\" style=\"width:500px;margin:40px 0\">\n\n\n<p>约翰注意到了克里斯对金的迷恋，他与工程师谈了价钱，给克里斯买下了金的处女之夜（The Transaction”）.</p>\n<img src=\"./3.jpg\" style=\"width:500px;margin:40px 0\">\n\n<p>克里斯痛恨越南的一切，然而他完完全全为金迷恋，他问上帝为什么他一定要在临走之前才遇到这个人（Why God Why”）。<br>金醒来之后，克里斯想给她钱，被她回绝了,他告诉她她不需要在夜总会卖身，因为他想让她跟他一起生活。两个人疯狂地相爱了（Sun and Moon”）。<br><img src=\"./4.jpg\" style=\"width:500px;margin:40px 0\"></p>\n<p>金和其他的女孩子们为克里斯和金准备了婚礼（“婚礼 - Dju Vui Vai”）。在婚礼上，金的表兄岁（Thuy），也是金的父母为以前她订下的丈夫，闯进来要救金离开这里。<br>当他得知金是要嫁给另一个人的时候，他十分伤心 （“岁的到来 - Thuy’s Arrival”）。<br><img src=\"./5.jpg\" style=\"width:500px;margin:40px 0\"></p>\n<p>金为此十分难过，她认为克里斯也会离开她，克里斯说他是要离开越南，但是他会带金一起走。克里斯与金拥抱在一起，跟着一首夜总会的庸俗歌曲“世界的最后一晚”一起跳舞。然而这首歌在这里非比寻常，因为对金和克里斯来说，这一晚，的确就是她们的世界里的最后一晚。（“世界的最后一晚 - Last Night of the World”)。<br><img src=\"./6.jpg\" style=\"width:500px;margin:40px 0\"></p>\n<p>故事向后跳跃三年，我们到了1978年。西贡（现已经改名为“胡志明市”）人都走到街头，举城欢庆打败美国、越南统一三周年的纪念活动（“龙之晨 - Morning of the Dragon”）。</p>\n<p>岁现在是新政府的官员，他命令他手下的士兵去把工程师找来,命令工程师去把在共产党入城时就没了踪影的金找到，并把她带到他那里去。</p>\n<p>金被克里斯留在了越南，她一直生活在贫民窟里。她依然深深地爱着克里斯，而且坚信他会回来救她出去。</p>\n<p>与此同时，我们看到克里斯与他的新美国人妻子，艾伦(Ellen），躺在一起。艾伦很爱克里斯，但是她很渴望知道一直缠绕他内心的阴影究竟是什么。他突然从睡梦中惊醒，坐起来叫着金的名字，艾伦安慰他重新躺下。<br>两个身处地球两端的女人不约而同地表白她们对克里斯的爱情。（“我依然相信 - I Still Believe”）。<br><img src=\"./7.jpg\" style=\"width:500px;margin:40px 0\"></p>\n<p>工程师找到金，把她带到岁那里。岁解释说他寻找金已经找了三年了，而且，他仍然想把金带回家做他的妻子。她拒绝了，哪怕克里斯不在她也全心全意地爱着他。金把她与克里斯的两岁的儿子，谭（Tam），介绍给岁，令岁大为震惊。<br><img src=\"./9.jpg\" style=\"width:500px;margin:40px 0\"></p>\n<p>岁愤怒已极，他骂金是叛国者，谭则是国家的敌人，他企图用刀杀了谭。金抽出克里斯留下的手枪，被迫朝岁开了一枪。岁死在了金的怀中。<br><img src=\"./8.jpg\" style=\"width:500px;margin:40px 0\"></p>\n<p>金跑到工程师那里，告诉他所发生的事情（“假如你愿意死在温床上 - If You Want to Die in Bed”）. 金吐露克里斯是谭的父亲，他立刻兴高采烈把这小孩看成自己去美国的签证。他告诉金从现在起他就是孩子的叔叔了，而他将带她们去曼谷。金向谭保证，哪怕是牺牲她的性命，她也要让谭过上好的日子。他们三人随着其他饱受坚辛的难民一起，登上了去曼谷的船（“为了你我可以付出生命 - I’d Give My Life for You”）。<br><img src=\"./10.jpg\" style=\"width:500px;margin:40px 0\"></p>\n<hr>\n<h3 id=\"第二幕\"><a href=\"#第二幕\" class=\"headerlink\" title=\"第二幕\"></a>第二幕</h3><p>1978年，乔治亚州的亚特兰大市。约翰现在为一家帮助”Bui-Doi”（指越战期间美国士兵与越南女人所生的小孩）寻找美国父亲的机构工作。<br>在越南，这些混血儿因为外貌特称明显，经常受到很大程度的歧视。</p>\n<p>约翰把克里斯拉到一边，说他有很重要的消息要告诉他。约翰告诉克里斯金还活着，这让克里斯十分欣慰，因为他几年来一直做着金死去的梦魇。<br><img src=\"./11.jpg\" style=\"width:500px;margin:40px 0\"></p>\n<p>1978年，曼谷。工程师现在已经沦落到招揽游客进下等酒吧的皮条客，而金则是酒吧里的舞女（“真是浪费 - What a Waste”）。<br>克里斯、艾伦和约翰来到曼谷寻找金的下落，约翰走进酒吧，见到了金和工程师。金见了约翰十分惊讶，等听说了克里斯也在曼谷的消息更是欣喜不已。<br><img src=\"./12.jpg\" style=\"width:500px;margin:40px 0\"></p>\n<p>约翰去找克里斯的时候，工程师让金自己去找克里斯，因为他不相信克里斯真的会来（Chris is Here）。在金准备出门去找克里斯的时候，岁的鬼魂出现了。他恐吓金，说克里斯会跟西贡解放那晚一样，遗弃金。金的思绪，立刻被带回到那一夜（“金的梦魇 - Kim’s Nightmare”）。<br><img src=\"./13.jpg\" style=\"width:500px;margin:40px 0\"></p>\n<p>1975年，西贡。在越共逐渐逼近、西贡日益混乱的时候，克里斯和金作好了逃离越南的准备。克里斯被招回去保护大使馆，他把枪留给她，让她在家收拾行李，说他们会有充足的时间离开。<br>几乎就在克里斯走进大使馆的那一瞬间，大使馆的门关闭了。大使命令不许放任何越南进入大使馆。<br>听说了这个消息，金挤到大使馆门口，但她不过是无数企图收买、乞求、爬进大使馆的越南人中间的一个罢了。<br><img src=\"./14.jpg\" style=\"width:500px;margin:40px 0\"><br>与此同时，美国人不许克里斯出去。约翰最后不得不打他的脸，让他停止无谓的挣扎。克里斯坐上了最后一班离开西贡的直升飞机，金从大门口看着他离开，她绝望地向他表白着她对他的忠贞。直升飞机在克里斯呼唤金的声音里起飞了。<br><img src=\"./15.jpg\" style=\"width:500px;margin:40px 0\"></p>\n<p>1978年，曼谷。回忆结束了.<br>金来到克里斯的旅馆房间，但当她走进屋里的时候，那里只有一个女人，艾伦。而当艾伦告诉她他们不可能带谭去美国时，她所有那些希望儿子过上好日子的梦想也破灭了。艾伦说他们可以从美国寄钱来救济她们。金仍不能相信，她愤怒地要求克里斯当面告诉她这些话（Room 317）<br><img src=\"./16.jpg\" style=\"width:500px;margin:40px 0\"></p>\n<p>克里斯和约翰没找到金，回到旅馆。克里斯听艾伦讲述了和金的激烈会面，惊恐万分。他决定让金和谭留在曼谷，他们会从美国寄钱来保证她们的生活，他们认为金是个好人，她“很聪明，她会理解的”（“对质 - The Confrontation”）。工程师仍把谭看做自己去美国的船票，他梦想着自己在美国的崭新生活。他、克里斯、艾伦一起来到金的房间（The American Dream）。<br><img src=\"./17.jpg\" style=\"width:500px;margin:40px 0\"></p>\n<p>在金的房间里，金告诉谭他应该高兴，因为他现在有爸爸了。看到克里斯、艾伦、约翰和工程师从远处走过来，她对谭说了再见，吻着他的额头。她走到帘子后面，开枪自尽了。</p>\n<p>克里斯、艾伦、约翰和工程师听到枪响立刻冲进房间，看到金倒在地上奄奄一息。克里斯跑到金旁边抱她起来，他心碎地问金为什么要这样做，但她只是求他再抱她最后一次。<br>她再次重复当初两人坠入爱河时说过的话：“为什么一夜之间我们改变了这么多？”在其他人震惊的目光里，金在克里斯的怀里死去了。而艾伦跪下来，朝谭伸开了双臂（Finale）。<br><img src=\"./18.jpg\" style=\"width:500px;margin:40px 0\"></p>\n<hr>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>「西贡小姐」虽然借助了一个「蝴蝶夫人」的老套故事，极尽一切歌唱和宣泄，嘲讽整个时代人性的虚伪，悲天悯人的大情感收纳着一个小小女人的辛酸之泪.<br>假借中西悲催恋情演绎的他乡故事不过是一个西方意淫的东方爱情和充满嘲讽的所谓的美国梦的结合罢了。</p>\n<p>西贡小姐中，金比蝴蝶夫人巧巧桑更加立体，有血有肉、柔中带刚，会为维护真爱而勇敢杀人，会为内心自由而怒斥情敌，会为孩子再度沦落风尘，表现在Sun and moon中那种婉约，在I’d give my life for you中那种坚毅的在Please中那种渴望和坚守。虽然两者皆以自杀收场，金是悲壮睿智且义无返顾的。</p>\n<p>如果这部风靡全球的歌剧曾经给以无数西方观众以灵魂震撼，在全球化的视野下，他们将如何定位他们的东方，他们将如何想象这朵“东方美学”的西方救赎意味。<br>当然，或许我们不必纠结于这种文化矛盾和生命哲学气息，于音乐来说不应该受精神的绑架；让故事安于它们被叙述的语境吧。</p>\n","site":{"data":{}},"thumbnailImageUrl":"https://kisky3.github.io/2019/10/20/MissSaigon/20191020.jpg","excerpt":"<p>音乐剧：西贡小姐（英国/美国 2014年）</p>","more":"<p>「西贡小姐」是西方现代四大音乐名剧之一, 也是在80年代是百老汇上受欧洲影响的剧目之一，与「歌剧魅影」，「悲惨世界」和「猫」齐名. 据说是翻「蝴蝶夫人」.</p>\n<h3 id=\"第一幕\"><a href=\"#第一幕\" class=\"headerlink\" title=\"第一幕\"></a>第一幕</h3><p>故事发生在1975年西贡的一间夜总会，就在西贡解放前几天。今天是金（Kim)做妓女的第一天，工程师（Engineer）向她问候。工程师是一个法国裔越南皮条，有一家迎合美国士兵需要的夜总会.<br>在后台，所有的女孩子们都准备着晚上的节目，她们一边帮金穿上戏服一边取笑她的幼稚.</p>\n<p>夜总会的节目开始了，所有的美国大兵和越南妓女们一起狂欢（The Heat is on in Saigon）.</p>\n<p>士兵们都知道他们已经节节败退，只想在离开越南以前再玩一下子. 我们认识了克里斯（Chris）— 一个年轻的、却不幻想的陆军作战队士兵 和他的朋友约翰(John).<br><img src=\"./1.jpg\" style=\"width:500px;margin:40px 0\"></p>\n<p>女孩子们在大兵面前骚手弄姿，都想争夺“西贡小姐”的称号. 得主将被作为奖品被大兵们抽奖，而妓女们认为，这就表示她们可能会被带到美国去，从此过上好日子. 每一个妓女都用自己上场的机会使出浑身解数取悦大兵们，而轮到金时，她的纯洁与天真吸引了克里斯的注意.</p>\n<img src=\"./2.jpg\" style=\"width:500px;margin:40px 0\">\n\n\n<p>约翰注意到了克里斯对金的迷恋，他与工程师谈了价钱，给克里斯买下了金的处女之夜（The Transaction”）.</p>\n<img src=\"./3.jpg\" style=\"width:500px;margin:40px 0\">\n\n<p>克里斯痛恨越南的一切，然而他完完全全为金迷恋，他问上帝为什么他一定要在临走之前才遇到这个人（Why God Why”）。<br>金醒来之后，克里斯想给她钱，被她回绝了,他告诉她她不需要在夜总会卖身，因为他想让她跟他一起生活。两个人疯狂地相爱了（Sun and Moon”）。<br><img src=\"./4.jpg\" style=\"width:500px;margin:40px 0\"></p>\n<p>金和其他的女孩子们为克里斯和金准备了婚礼（“婚礼 - Dju Vui Vai”）。在婚礼上，金的表兄岁（Thuy），也是金的父母为以前她订下的丈夫，闯进来要救金离开这里。<br>当他得知金是要嫁给另一个人的时候，他十分伤心 （“岁的到来 - Thuy’s Arrival”）。<br><img src=\"./5.jpg\" style=\"width:500px;margin:40px 0\"></p>\n<p>金为此十分难过，她认为克里斯也会离开她，克里斯说他是要离开越南，但是他会带金一起走。克里斯与金拥抱在一起，跟着一首夜总会的庸俗歌曲“世界的最后一晚”一起跳舞。然而这首歌在这里非比寻常，因为对金和克里斯来说，这一晚，的确就是她们的世界里的最后一晚。（“世界的最后一晚 - Last Night of the World”)。<br><img src=\"./6.jpg\" style=\"width:500px;margin:40px 0\"></p>\n<p>故事向后跳跃三年，我们到了1978年。西贡（现已经改名为“胡志明市”）人都走到街头，举城欢庆打败美国、越南统一三周年的纪念活动（“龙之晨 - Morning of the Dragon”）。</p>\n<p>岁现在是新政府的官员，他命令他手下的士兵去把工程师找来,命令工程师去把在共产党入城时就没了踪影的金找到，并把她带到他那里去。</p>\n<p>金被克里斯留在了越南，她一直生活在贫民窟里。她依然深深地爱着克里斯，而且坚信他会回来救她出去。</p>\n<p>与此同时，我们看到克里斯与他的新美国人妻子，艾伦(Ellen），躺在一起。艾伦很爱克里斯，但是她很渴望知道一直缠绕他内心的阴影究竟是什么。他突然从睡梦中惊醒，坐起来叫着金的名字，艾伦安慰他重新躺下。<br>两个身处地球两端的女人不约而同地表白她们对克里斯的爱情。（“我依然相信 - I Still Believe”）。<br><img src=\"./7.jpg\" style=\"width:500px;margin:40px 0\"></p>\n<p>工程师找到金，把她带到岁那里。岁解释说他寻找金已经找了三年了，而且，他仍然想把金带回家做他的妻子。她拒绝了，哪怕克里斯不在她也全心全意地爱着他。金把她与克里斯的两岁的儿子，谭（Tam），介绍给岁，令岁大为震惊。<br><img src=\"./9.jpg\" style=\"width:500px;margin:40px 0\"></p>\n<p>岁愤怒已极，他骂金是叛国者，谭则是国家的敌人，他企图用刀杀了谭。金抽出克里斯留下的手枪，被迫朝岁开了一枪。岁死在了金的怀中。<br><img src=\"./8.jpg\" style=\"width:500px;margin:40px 0\"></p>\n<p>金跑到工程师那里，告诉他所发生的事情（“假如你愿意死在温床上 - If You Want to Die in Bed”）. 金吐露克里斯是谭的父亲，他立刻兴高采烈把这小孩看成自己去美国的签证。他告诉金从现在起他就是孩子的叔叔了，而他将带她们去曼谷。金向谭保证，哪怕是牺牲她的性命，她也要让谭过上好的日子。他们三人随着其他饱受坚辛的难民一起，登上了去曼谷的船（“为了你我可以付出生命 - I’d Give My Life for You”）。<br><img src=\"./10.jpg\" style=\"width:500px;margin:40px 0\"></p>\n<hr>\n<h3 id=\"第二幕\"><a href=\"#第二幕\" class=\"headerlink\" title=\"第二幕\"></a>第二幕</h3><p>1978年，乔治亚州的亚特兰大市。约翰现在为一家帮助”Bui-Doi”（指越战期间美国士兵与越南女人所生的小孩）寻找美国父亲的机构工作。<br>在越南，这些混血儿因为外貌特称明显，经常受到很大程度的歧视。</p>\n<p>约翰把克里斯拉到一边，说他有很重要的消息要告诉他。约翰告诉克里斯金还活着，这让克里斯十分欣慰，因为他几年来一直做着金死去的梦魇。<br><img src=\"./11.jpg\" style=\"width:500px;margin:40px 0\"></p>\n<p>1978年，曼谷。工程师现在已经沦落到招揽游客进下等酒吧的皮条客，而金则是酒吧里的舞女（“真是浪费 - What a Waste”）。<br>克里斯、艾伦和约翰来到曼谷寻找金的下落，约翰走进酒吧，见到了金和工程师。金见了约翰十分惊讶，等听说了克里斯也在曼谷的消息更是欣喜不已。<br><img src=\"./12.jpg\" style=\"width:500px;margin:40px 0\"></p>\n<p>约翰去找克里斯的时候，工程师让金自己去找克里斯，因为他不相信克里斯真的会来（Chris is Here）。在金准备出门去找克里斯的时候，岁的鬼魂出现了。他恐吓金，说克里斯会跟西贡解放那晚一样，遗弃金。金的思绪，立刻被带回到那一夜（“金的梦魇 - Kim’s Nightmare”）。<br><img src=\"./13.jpg\" style=\"width:500px;margin:40px 0\"></p>\n<p>1975年，西贡。在越共逐渐逼近、西贡日益混乱的时候，克里斯和金作好了逃离越南的准备。克里斯被招回去保护大使馆，他把枪留给她，让她在家收拾行李，说他们会有充足的时间离开。<br>几乎就在克里斯走进大使馆的那一瞬间，大使馆的门关闭了。大使命令不许放任何越南进入大使馆。<br>听说了这个消息，金挤到大使馆门口，但她不过是无数企图收买、乞求、爬进大使馆的越南人中间的一个罢了。<br><img src=\"./14.jpg\" style=\"width:500px;margin:40px 0\"><br>与此同时，美国人不许克里斯出去。约翰最后不得不打他的脸，让他停止无谓的挣扎。克里斯坐上了最后一班离开西贡的直升飞机，金从大门口看着他离开，她绝望地向他表白着她对他的忠贞。直升飞机在克里斯呼唤金的声音里起飞了。<br><img src=\"./15.jpg\" style=\"width:500px;margin:40px 0\"></p>\n<p>1978年，曼谷。回忆结束了.<br>金来到克里斯的旅馆房间，但当她走进屋里的时候，那里只有一个女人，艾伦。而当艾伦告诉她他们不可能带谭去美国时，她所有那些希望儿子过上好日子的梦想也破灭了。艾伦说他们可以从美国寄钱来救济她们。金仍不能相信，她愤怒地要求克里斯当面告诉她这些话（Room 317）<br><img src=\"./16.jpg\" style=\"width:500px;margin:40px 0\"></p>\n<p>克里斯和约翰没找到金，回到旅馆。克里斯听艾伦讲述了和金的激烈会面，惊恐万分。他决定让金和谭留在曼谷，他们会从美国寄钱来保证她们的生活，他们认为金是个好人，她“很聪明，她会理解的”（“对质 - The Confrontation”）。工程师仍把谭看做自己去美国的船票，他梦想着自己在美国的崭新生活。他、克里斯、艾伦一起来到金的房间（The American Dream）。<br><img src=\"./17.jpg\" style=\"width:500px;margin:40px 0\"></p>\n<p>在金的房间里，金告诉谭他应该高兴，因为他现在有爸爸了。看到克里斯、艾伦、约翰和工程师从远处走过来，她对谭说了再见，吻着他的额头。她走到帘子后面，开枪自尽了。</p>\n<p>克里斯、艾伦、约翰和工程师听到枪响立刻冲进房间，看到金倒在地上奄奄一息。克里斯跑到金旁边抱她起来，他心碎地问金为什么要这样做，但她只是求他再抱她最后一次。<br>她再次重复当初两人坠入爱河时说过的话：“为什么一夜之间我们改变了这么多？”在其他人震惊的目光里，金在克里斯的怀里死去了。而艾伦跪下来，朝谭伸开了双臂（Finale）。<br><img src=\"./18.jpg\" style=\"width:500px;margin:40px 0\"></p>\n<hr>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>「西贡小姐」虽然借助了一个「蝴蝶夫人」的老套故事，极尽一切歌唱和宣泄，嘲讽整个时代人性的虚伪，悲天悯人的大情感收纳着一个小小女人的辛酸之泪.<br>假借中西悲催恋情演绎的他乡故事不过是一个西方意淫的东方爱情和充满嘲讽的所谓的美国梦的结合罢了。</p>\n<p>西贡小姐中，金比蝴蝶夫人巧巧桑更加立体，有血有肉、柔中带刚，会为维护真爱而勇敢杀人，会为内心自由而怒斥情敌，会为孩子再度沦落风尘，表现在Sun and moon中那种婉约，在I’d give my life for you中那种坚毅的在Please中那种渴望和坚守。虽然两者皆以自杀收场，金是悲壮睿智且义无返顾的。</p>\n<p>如果这部风靡全球的歌剧曾经给以无数西方观众以灵魂震撼，在全球化的视野下，他们将如何定位他们的东方，他们将如何想象这朵“东方美学”的西方救赎意味。<br>当然，或许我们不必纠结于这种文化矛盾和生命哲学气息，于音乐来说不应该受精神的绑架；让故事安于它们被叙述的语境吧。</p>"},{"title":"Create A Login&Register Modal With Rotation Animation","date":"2019-04-20T11:09:27.000Z","clearReading":true,"thumbnailImage":"20190420.png","thumbnailImagePosition":"left","coverImage":"cover.jpg","coverCaption":"Hello World, Hello Programming","coverSize":"partial","comments":0,"_content":"\n实现一个翻转注册登陆页面\n<!--more-->\n\n### 使用语言为CSS和原生JS\n大致思路如下：\n\n1.创造两个模态框，一个为login，一个为register.\n\n{% hl_text #FFCCCC %}\nHTML\n{% endhl_text %}\n\n```HTML\n<main>\n  <div class=\"flip-modal login\">\n    /* 登陆模态框 */\n    <div class=\"modal modal-login\"></div>\n\n    /* 注册模态框 */\n     <div class=\"modal modal-login\"></div>\n  </div>\n</main>\n```\n\n***\n\n2.并使用JS来控制flip-modal下的class为login或者register.\n\n{% hl_text #FFCCCC %}\nJS\n{% endhl_text %}\n\n```HTML\n$('.flip-modal').addEventListener('click', function(e){\n  e.stopPropagation();\n  if(e.target.classList.contains('login')){\n    $('.flip-modal').classList.remove('register');\n    $('.flip-modal').classList.add('login');\n  }\n  \n  if(e.target.classList.contains('register')){\n    $('.flip-modal').classList.add('register');\n    $('.flip-modal').classList.remove('login');\n  }\n  \n  if(e.target.classList.contains('close')){\n    $('.flip-modal').style.display = 'none';\n  }\n});\n```\n\n***\n\n3.CSS控制模态框翻转时,根据flip-modal下的class类型进行两个模态框的水平Y轴翻转，并隐藏翻转后的背面.\n加上transition的过渡效果使翻转更自然。\n\n```JS\n.flip-modal.login .modal-login,\n.flip-modal.register .modal-register {\n  transform: translate(-50%,-50%) rotateY(0deg);\n  backface-visibility: hidden;\n  transition: all 1s;\n}\n\n.flip-modal.login .modal-register,\n.flip-modal.register .modal-login {\n  transform: translate(-50%,-50%) rotateY(180deg);\n  backface-visibility: hidden;\n  transition: all 1s;\n}\n```\n\n***\n\n### 效果图如下\n\n<img src=\"./1.png\" style=\"width:500px\">\n\n[代码预览地址](http://js.jirengu.com/xukec/43/edit?html,css,js])\n\n***\n\n### 完整代码\n\n{% hl_text #FFCCCC %}\nHTML\n{% endhl_text %}\n\n```HTML\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>Login|Regist</title>\n  <link rel=\"stylesheet\" href=\"https://unpkg.com/font-awesome@4.7.0/css/font-awesome.min.css\">\n</head>\n<body>\n<main>\n  <header>\n    <a class=\"login\" href=\"#\">\n      <i class=\"fa fa-user-circle\"></i>\n    </a>\n  </header>\n  <div class=\"flip-modal login\">\n    <div class=\"modal modal-login\">\n      <a class=\"close fa fa-close\" href=\"#\"></a>\n      <div class=\"tabs\">\n        <a href=\"#\" class=\"login active\">登录</a>\n        <a href=\"#\" class=\"register\">注册</a>\n      </div>\n      <div class=\"content\">\n        <div class=\"errormsg\"></div>\n        <form action=\"/login\" method=\"post\">\n          <div class=\"input-field\">\n            <i class=\"fa fa-user-o\"></i>\n            <input name=\"username\" type=\"text\" placeholder=\"用户名\">\n          </div>\n          <div class=\"input-field\">\n            <i class=\"fa fa-lock\"></i>\n            <input name=\"password\" type=\"password\" placeholder=\"密码\">\n          </div>\n          <div class=\"input-field\">\n            <input type=\"submit\" value=\"登录\">\n          </div>\n        </form>\n      </div>\n    </div>\n\n    <div class=\"modal modal-register\">\n      <a class=\"close fa fa-close\" href=\"#\"></a>\n      <div class=\"tabs\">\n        <a href=\"#\" class=\"login\">登录</a>\n        <a href=\"#\" class=\"register active\">注册</a>\n      </div>\n      <div class=\"content\">\n        <div class=\"errormsg\"></div>\n        <form action=\"/login\" method=\"post\">\n          <div class=\"input-field\">\n            <i class=\"fa fa-user-o\"></i>\n            <input name=\"username\" type=\"text\" placeholder=\"用户名\">\n          </div>\n          <div class=\"input-field\">\n            <i class=\"fa fa-lock\"></i>\n            <input name=\"password\" type=\"password\" placeholder=\"密码\">\n          </div>\n          <div class=\"input-field\">\n            <i class=\"fa fa-lock\"></i>\n            <input name=\"password2\" type=\"password\" placeholder=\"再次输入密码\">\n          </div>\n          <div class=\"input-field\">\n            <input type=\"submit\" value=\"注册\">\n          </div>\n        </form>\n      </div>\n    </div>\n  </div>\n</main>\n</body>\n</html>\n```\n{% hl_text #FFCCCC %}\nJS\n{% endhl_text %}\n\n```JS\nfunction $(selector){\n  return document.querySelector(selector);\n}\n\nfunction $$(selector){\n  return document.querySelectorAll(selector);\n}\n\n$('header .login').onclick = function(e){\n  e.stopPropagation();\n  $('.flip-modal').style.display = 'block';\n};\n\n$('.flip-modal').addEventListener('click', function(e){\n  e.stopPropagation();\n  if(e.target.classList.contains('login')){\n    $('.flip-modal').classList.remove('register');\n    $('.flip-modal').classList.add('login');\n  }\n  \n  if(e.target.classList.contains('register')){\n    $('.flip-modal').classList.add('register');\n    $('.flip-modal').classList.remove('login');\n  }\n  \n  if(e.target.classList.contains('close')){\n    $('.flip-modal').style.display = 'none';\n  }\n});\n\ndocument.addEventListener ('click',function(){\n  $('.flip-modal').style.display = 'none';\n});\n\n$('.modal-login form').addEventListener('submit',function(e){\n  e.preventDefault();\n  if(!/^\\w{3,8}$/.test($('.modal-login input[name=username]').value)){\n    $('.modal-login .errormsg').innerText = '用户名需要输入3-8个字符，包括字母数字和下划线';\n    return false;\n  }\n  \n  if(!/^\\w{6,10}$/.test($('.modal-login input[name=password]').value)){\n    $('.modal-login .errormsg').innerText = '密码需要输入6-10个字符，包括字母数字和下划线';\n    return false;\n  }\n  this.submit();\n});\n\n$('.modal-register form').addEventListener('submit',function(e){\n  e.preventDefault();\n  if(!/^\\w{3,8}$/.test($('.modal-register input[name=username]').value)){\n    $('.modal-register .errormsg').innerText = '用户名需要输入3-8个字符，包括字母数字和下划线';\n    return false;\n  }\n  \n  if(!/^\\w{6,10}$/.test($('.modal-register input[name=password]').value)){\n    $('.modal-register .errormsg').innerText = '密码需要输入6-10个字符，包括字母数字和下划线';\n    return false;\n  }\n \n    if($('.modal-register input[name = password]').value != $('.modal-register input[name = password2]').value){\n    $('.modal-register .errormsg').innerText = '两次密码输入不一致';\n    return false;\n  }\n  this.submit();\n});\n```\n{% hl_text #FFCCCC %}\nCSS\n{% endhl_text %}\n\n```CSS\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nhtml, body, main {\n  height: 100%;\n}\n\nbody {\n  font: 14px/1.5 Arial;\n}\n\na {\n  text-decoration: none;\n  color: #444;\n}\n\nmain {\n  background: linear-gradient(to right top, rgba(38,50,105,0.78), rgba(255,152,0,0.45)), url(\"http://n.sinaimg.cn/sinacn20111/348/w690h458/20190317/95f8-hukwxnu7092764.jpg\") center center no-repeat;\n}\n\nherder {\n  position: absolute;\n  top: 10px;\n  width: 100%;\n}\n\nheader .login {\n  float: right;\n  margin-right: 20px;\n  font-size: 20px;\n}\n\n.flip-modal {\n  display: none;\n}\n\n.show-modal {\n  display: block!important;\n}\n\n.modal {\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  width: 400px;\n  padding: 16px;\n  background-color: #fff;\n  box-shadow: 0 3px 4px 5px rgba(0,0,0,0.2);\n}\n\n.modal .close {\n  position: absolute;\n  right: 10px;\n  top: 10px;\n}\n\n.modal .tabs {\n  text-align: center;\n}\n\n.modal .tabs a {\n  display: inline-block;\n  font-size: 16px;\n  margin: 0 10px;\n  color: #666;\n}\n\n.modal .tabs a.active {\n  border-bottom: 2px solid #444;\n  color: #444;\n}\n\n.modal .content {\n  padding: 20px 40px;\n}\n\n.modal .errormsg {\n  color: #ff9800;\n  font-size: 12px;\n}\n\n.modal .content .input-field {\n  position: relative;\n  margin-top: 10px;\n}\n\n.modal .content .input-field .fa {\n  position: absolute;\n  left: 13px;\n  top: 13px;\n}\n\n.modal .content input[type=text],\n.modal .content input[type=password] {\n  width: 100%;\n  padding: 10px 10px 10px 28px;\n  outline: none;\n}\n\n.modal .content input[type=submit] {\n  padding: 6px 10px;\n  border: none;\n  background: #fff;\n  box-shadow: 0 0 2px rgba(0,0,0,0.4);\n  outline: none;\n}\n\n.flip-modal.login .modal-login,\n.flip-modal.register .modal-register {\n  transform: translate(-50%,-50%) rotateY(0deg);\n  backface-visibility: hidden;\n  transition: all 1s;\n}\n\n.flip-modal.login .modal-register,\n.flip-modal.register .modal-login {\n  transform: translate(-50%,-50%) rotateY(180deg);\n  backface-visibility: hidden;\n  transition: all 1s;\n}\n```\n\n","source":"_posts/实现一个翻转注册登陆页面.md","raw":"---\ntitle: Create A Login&Register Modal With Rotation Animation\ndate: 2019-04-20 20:09:27\ntags:\n- CSS\nclearReading: true\nthumbnailImage: 20190420.png\nthumbnailImagePosition: left\ncoverImage: cover.jpg\ncoverCaption: \"Hello World, Hello Programming\"\ncoverSize: partial\ncomments: false\ncategories: Front-end Knowledge\n---\n\n实现一个翻转注册登陆页面\n<!--more-->\n\n### 使用语言为CSS和原生JS\n大致思路如下：\n\n1.创造两个模态框，一个为login，一个为register.\n\n{% hl_text #FFCCCC %}\nHTML\n{% endhl_text %}\n\n```HTML\n<main>\n  <div class=\"flip-modal login\">\n    /* 登陆模态框 */\n    <div class=\"modal modal-login\"></div>\n\n    /* 注册模态框 */\n     <div class=\"modal modal-login\"></div>\n  </div>\n</main>\n```\n\n***\n\n2.并使用JS来控制flip-modal下的class为login或者register.\n\n{% hl_text #FFCCCC %}\nJS\n{% endhl_text %}\n\n```HTML\n$('.flip-modal').addEventListener('click', function(e){\n  e.stopPropagation();\n  if(e.target.classList.contains('login')){\n    $('.flip-modal').classList.remove('register');\n    $('.flip-modal').classList.add('login');\n  }\n  \n  if(e.target.classList.contains('register')){\n    $('.flip-modal').classList.add('register');\n    $('.flip-modal').classList.remove('login');\n  }\n  \n  if(e.target.classList.contains('close')){\n    $('.flip-modal').style.display = 'none';\n  }\n});\n```\n\n***\n\n3.CSS控制模态框翻转时,根据flip-modal下的class类型进行两个模态框的水平Y轴翻转，并隐藏翻转后的背面.\n加上transition的过渡效果使翻转更自然。\n\n```JS\n.flip-modal.login .modal-login,\n.flip-modal.register .modal-register {\n  transform: translate(-50%,-50%) rotateY(0deg);\n  backface-visibility: hidden;\n  transition: all 1s;\n}\n\n.flip-modal.login .modal-register,\n.flip-modal.register .modal-login {\n  transform: translate(-50%,-50%) rotateY(180deg);\n  backface-visibility: hidden;\n  transition: all 1s;\n}\n```\n\n***\n\n### 效果图如下\n\n<img src=\"./1.png\" style=\"width:500px\">\n\n[代码预览地址](http://js.jirengu.com/xukec/43/edit?html,css,js])\n\n***\n\n### 完整代码\n\n{% hl_text #FFCCCC %}\nHTML\n{% endhl_text %}\n\n```HTML\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>Login|Regist</title>\n  <link rel=\"stylesheet\" href=\"https://unpkg.com/font-awesome@4.7.0/css/font-awesome.min.css\">\n</head>\n<body>\n<main>\n  <header>\n    <a class=\"login\" href=\"#\">\n      <i class=\"fa fa-user-circle\"></i>\n    </a>\n  </header>\n  <div class=\"flip-modal login\">\n    <div class=\"modal modal-login\">\n      <a class=\"close fa fa-close\" href=\"#\"></a>\n      <div class=\"tabs\">\n        <a href=\"#\" class=\"login active\">登录</a>\n        <a href=\"#\" class=\"register\">注册</a>\n      </div>\n      <div class=\"content\">\n        <div class=\"errormsg\"></div>\n        <form action=\"/login\" method=\"post\">\n          <div class=\"input-field\">\n            <i class=\"fa fa-user-o\"></i>\n            <input name=\"username\" type=\"text\" placeholder=\"用户名\">\n          </div>\n          <div class=\"input-field\">\n            <i class=\"fa fa-lock\"></i>\n            <input name=\"password\" type=\"password\" placeholder=\"密码\">\n          </div>\n          <div class=\"input-field\">\n            <input type=\"submit\" value=\"登录\">\n          </div>\n        </form>\n      </div>\n    </div>\n\n    <div class=\"modal modal-register\">\n      <a class=\"close fa fa-close\" href=\"#\"></a>\n      <div class=\"tabs\">\n        <a href=\"#\" class=\"login\">登录</a>\n        <a href=\"#\" class=\"register active\">注册</a>\n      </div>\n      <div class=\"content\">\n        <div class=\"errormsg\"></div>\n        <form action=\"/login\" method=\"post\">\n          <div class=\"input-field\">\n            <i class=\"fa fa-user-o\"></i>\n            <input name=\"username\" type=\"text\" placeholder=\"用户名\">\n          </div>\n          <div class=\"input-field\">\n            <i class=\"fa fa-lock\"></i>\n            <input name=\"password\" type=\"password\" placeholder=\"密码\">\n          </div>\n          <div class=\"input-field\">\n            <i class=\"fa fa-lock\"></i>\n            <input name=\"password2\" type=\"password\" placeholder=\"再次输入密码\">\n          </div>\n          <div class=\"input-field\">\n            <input type=\"submit\" value=\"注册\">\n          </div>\n        </form>\n      </div>\n    </div>\n  </div>\n</main>\n</body>\n</html>\n```\n{% hl_text #FFCCCC %}\nJS\n{% endhl_text %}\n\n```JS\nfunction $(selector){\n  return document.querySelector(selector);\n}\n\nfunction $$(selector){\n  return document.querySelectorAll(selector);\n}\n\n$('header .login').onclick = function(e){\n  e.stopPropagation();\n  $('.flip-modal').style.display = 'block';\n};\n\n$('.flip-modal').addEventListener('click', function(e){\n  e.stopPropagation();\n  if(e.target.classList.contains('login')){\n    $('.flip-modal').classList.remove('register');\n    $('.flip-modal').classList.add('login');\n  }\n  \n  if(e.target.classList.contains('register')){\n    $('.flip-modal').classList.add('register');\n    $('.flip-modal').classList.remove('login');\n  }\n  \n  if(e.target.classList.contains('close')){\n    $('.flip-modal').style.display = 'none';\n  }\n});\n\ndocument.addEventListener ('click',function(){\n  $('.flip-modal').style.display = 'none';\n});\n\n$('.modal-login form').addEventListener('submit',function(e){\n  e.preventDefault();\n  if(!/^\\w{3,8}$/.test($('.modal-login input[name=username]').value)){\n    $('.modal-login .errormsg').innerText = '用户名需要输入3-8个字符，包括字母数字和下划线';\n    return false;\n  }\n  \n  if(!/^\\w{6,10}$/.test($('.modal-login input[name=password]').value)){\n    $('.modal-login .errormsg').innerText = '密码需要输入6-10个字符，包括字母数字和下划线';\n    return false;\n  }\n  this.submit();\n});\n\n$('.modal-register form').addEventListener('submit',function(e){\n  e.preventDefault();\n  if(!/^\\w{3,8}$/.test($('.modal-register input[name=username]').value)){\n    $('.modal-register .errormsg').innerText = '用户名需要输入3-8个字符，包括字母数字和下划线';\n    return false;\n  }\n  \n  if(!/^\\w{6,10}$/.test($('.modal-register input[name=password]').value)){\n    $('.modal-register .errormsg').innerText = '密码需要输入6-10个字符，包括字母数字和下划线';\n    return false;\n  }\n \n    if($('.modal-register input[name = password]').value != $('.modal-register input[name = password2]').value){\n    $('.modal-register .errormsg').innerText = '两次密码输入不一致';\n    return false;\n  }\n  this.submit();\n});\n```\n{% hl_text #FFCCCC %}\nCSS\n{% endhl_text %}\n\n```CSS\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nhtml, body, main {\n  height: 100%;\n}\n\nbody {\n  font: 14px/1.5 Arial;\n}\n\na {\n  text-decoration: none;\n  color: #444;\n}\n\nmain {\n  background: linear-gradient(to right top, rgba(38,50,105,0.78), rgba(255,152,0,0.45)), url(\"http://n.sinaimg.cn/sinacn20111/348/w690h458/20190317/95f8-hukwxnu7092764.jpg\") center center no-repeat;\n}\n\nherder {\n  position: absolute;\n  top: 10px;\n  width: 100%;\n}\n\nheader .login {\n  float: right;\n  margin-right: 20px;\n  font-size: 20px;\n}\n\n.flip-modal {\n  display: none;\n}\n\n.show-modal {\n  display: block!important;\n}\n\n.modal {\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  width: 400px;\n  padding: 16px;\n  background-color: #fff;\n  box-shadow: 0 3px 4px 5px rgba(0,0,0,0.2);\n}\n\n.modal .close {\n  position: absolute;\n  right: 10px;\n  top: 10px;\n}\n\n.modal .tabs {\n  text-align: center;\n}\n\n.modal .tabs a {\n  display: inline-block;\n  font-size: 16px;\n  margin: 0 10px;\n  color: #666;\n}\n\n.modal .tabs a.active {\n  border-bottom: 2px solid #444;\n  color: #444;\n}\n\n.modal .content {\n  padding: 20px 40px;\n}\n\n.modal .errormsg {\n  color: #ff9800;\n  font-size: 12px;\n}\n\n.modal .content .input-field {\n  position: relative;\n  margin-top: 10px;\n}\n\n.modal .content .input-field .fa {\n  position: absolute;\n  left: 13px;\n  top: 13px;\n}\n\n.modal .content input[type=text],\n.modal .content input[type=password] {\n  width: 100%;\n  padding: 10px 10px 10px 28px;\n  outline: none;\n}\n\n.modal .content input[type=submit] {\n  padding: 6px 10px;\n  border: none;\n  background: #fff;\n  box-shadow: 0 0 2px rgba(0,0,0,0.4);\n  outline: none;\n}\n\n.flip-modal.login .modal-login,\n.flip-modal.register .modal-register {\n  transform: translate(-50%,-50%) rotateY(0deg);\n  backface-visibility: hidden;\n  transition: all 1s;\n}\n\n.flip-modal.login .modal-register,\n.flip-modal.register .modal-login {\n  transform: translate(-50%,-50%) rotateY(180deg);\n  backface-visibility: hidden;\n  transition: all 1s;\n}\n```\n\n","slug":"实现一个翻转注册登陆页面","published":1,"updated":"2019-11-23T23:54:38.000Z","layout":"post","photos":[],"link":"","_id":"ck3it6k7f007gteyixpc5996a","content":"<p>实现一个翻转注册登陆页面</p>\n<a id=\"more\"></a>\n\n<h3 id=\"使用语言为CSS和原生JS\"><a href=\"#使用语言为CSS和原生JS\" class=\"headerlink\" title=\"使用语言为CSS和原生JS\"></a>使用语言为CSS和原生JS</h3><p>大致思路如下：</p>\n<p>1.创造两个模态框，一个为login，一个为register.</p>\n<span class=\"highlight-text\" style=\"background-color:#FFCCCC;\">HTML</span>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"flip-modal login\"</span>&gt;</span></span><br><span class=\"line\">    /* 登陆模态框 */</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal modal-login\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    /* 注册模态框 */</span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal modal-login\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>2.并使用JS来控制flip-modal下的class为login或者register.</p>\n<span class=\"highlight-text\" style=\"background-color:#FFCCCC;\">JS</span>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$('.flip-modal').addEventListener('click', function(e)&#123;</span><br><span class=\"line\">  e.stopPropagation();</span><br><span class=\"line\">  if(e.target.classList.contains('login'))&#123;</span><br><span class=\"line\">    $('.flip-modal').classList.remove('register');</span><br><span class=\"line\">    $('.flip-modal').classList.add('login');</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  if(e.target.classList.contains('register'))&#123;</span><br><span class=\"line\">    $('.flip-modal').classList.add('register');</span><br><span class=\"line\">    $('.flip-modal').classList.remove('login');</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  if(e.target.classList.contains('close'))&#123;</span><br><span class=\"line\">    $('.flip-modal').style.display = 'none';</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>3.CSS控制模态框翻转时,根据flip-modal下的class类型进行两个模态框的水平Y轴翻转，并隐藏翻转后的背面.<br>加上transition的过渡效果使翻转更自然。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.flip-modal.login .modal-login,</span><br><span class=\"line\">.flip-modal.register .modal-register &#123;</span><br><span class=\"line\">  transform: translate(<span class=\"number\">-50</span>%,<span class=\"number\">-50</span>%) rotateY(<span class=\"number\">0</span>deg);</span><br><span class=\"line\">  backface-visibility: hidden;</span><br><span class=\"line\">  transition: all <span class=\"number\">1</span>s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.flip-modal.login .modal-register,</span><br><span class=\"line\">.flip-modal.register .modal-login &#123;</span><br><span class=\"line\">  transform: translate(<span class=\"number\">-50</span>%,<span class=\"number\">-50</span>%) rotateY(<span class=\"number\">180</span>deg);</span><br><span class=\"line\">  backface-visibility: hidden;</span><br><span class=\"line\">  transition: all <span class=\"number\">1</span>s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"效果图如下\"><a href=\"#效果图如下\" class=\"headerlink\" title=\"效果图如下\"></a>效果图如下</h3><img src=\"./1.png\" style=\"width:500px\">\n\n<p><a href=\"http://js.jirengu.com/xukec/43/edit?html,css,js]\" target=\"_blank\" rel=\"noopener\">代码预览地址</a></p>\n<hr>\n<h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><span class=\"highlight-text\" style=\"background-color:#FFCCCC;\">HTML</span>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Login|Regist<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://unpkg.com/font-awesome@4.7.0/css/font-awesome.min.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"login\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-user-circle\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"flip-modal login\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal modal-login\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"close fa fa-close\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"tabs\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"login active\"</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"register\"</span>&gt;</span>注册<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"errormsg\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/login\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"input-field\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-user-o\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"用户名\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"input-field\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-lock\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"密码\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"input-field\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"登录\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal modal-register\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"close fa fa-close\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"tabs\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"login\"</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"register active\"</span>&gt;</span>注册<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"errormsg\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/login\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"input-field\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-user-o\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"用户名\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"input-field\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-lock\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"密码\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"input-field\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-lock\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password2\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"再次输入密码\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"input-field\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"注册\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<span class=\"highlight-text\" style=\"background-color:#FFCCCC;\">JS</span>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">$</span>(<span class=\"params\">selector</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.querySelector(selector);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">$$</span>(<span class=\"params\">selector</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.querySelectorAll(selector);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">'header .login'</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">  e.stopPropagation();</span><br><span class=\"line\">  $(<span class=\"string\">'.flip-modal'</span>).style.display = <span class=\"string\">'block'</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">'.flip-modal'</span>).addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">  e.stopPropagation();</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(e.target.classList.contains(<span class=\"string\">'login'</span>))&#123;</span><br><span class=\"line\">    $(<span class=\"string\">'.flip-modal'</span>).classList.remove(<span class=\"string\">'register'</span>);</span><br><span class=\"line\">    $(<span class=\"string\">'.flip-modal'</span>).classList.add(<span class=\"string\">'login'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span>(e.target.classList.contains(<span class=\"string\">'register'</span>))&#123;</span><br><span class=\"line\">    $(<span class=\"string\">'.flip-modal'</span>).classList.add(<span class=\"string\">'register'</span>);</span><br><span class=\"line\">    $(<span class=\"string\">'.flip-modal'</span>).classList.remove(<span class=\"string\">'login'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span>(e.target.classList.contains(<span class=\"string\">'close'</span>))&#123;</span><br><span class=\"line\">    $(<span class=\"string\">'.flip-modal'</span>).style.display = <span class=\"string\">'none'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener (<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">'.flip-modal'</span>).style.display = <span class=\"string\">'none'</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">'.modal-login form'</span>).addEventListener(<span class=\"string\">'submit'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">  e.preventDefault();</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!<span class=\"regexp\">/^\\w&#123;3,8&#125;$/</span>.test($(<span class=\"string\">'.modal-login input[name=username]'</span>).value))&#123;</span><br><span class=\"line\">    $(<span class=\"string\">'.modal-login .errormsg'</span>).innerText = <span class=\"string\">'用户名需要输入3-8个字符，包括字母数字和下划线'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!<span class=\"regexp\">/^\\w&#123;6,10&#125;$/</span>.test($(<span class=\"string\">'.modal-login input[name=password]'</span>).value))&#123;</span><br><span class=\"line\">    $(<span class=\"string\">'.modal-login .errormsg'</span>).innerText = <span class=\"string\">'密码需要输入6-10个字符，包括字母数字和下划线'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.submit();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">'.modal-register form'</span>).addEventListener(<span class=\"string\">'submit'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">  e.preventDefault();</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!<span class=\"regexp\">/^\\w&#123;3,8&#125;$/</span>.test($(<span class=\"string\">'.modal-register input[name=username]'</span>).value))&#123;</span><br><span class=\"line\">    $(<span class=\"string\">'.modal-register .errormsg'</span>).innerText = <span class=\"string\">'用户名需要输入3-8个字符，包括字母数字和下划线'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!<span class=\"regexp\">/^\\w&#123;6,10&#125;$/</span>.test($(<span class=\"string\">'.modal-register input[name=password]'</span>).value))&#123;</span><br><span class=\"line\">    $(<span class=\"string\">'.modal-register .errormsg'</span>).innerText = <span class=\"string\">'密码需要输入6-10个字符，包括字母数字和下划线'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">if</span>($(<span class=\"string\">'.modal-register input[name = password]'</span>).value != $(<span class=\"string\">'.modal-register input[name = password2]'</span>).value)&#123;</span><br><span class=\"line\">    $(<span class=\"string\">'.modal-register .errormsg'</span>).innerText = <span class=\"string\">'两次密码输入不一致'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.submit();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<span class=\"highlight-text\" style=\"background-color:#FFCCCC;\">CSS</span>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">box-sizing</span>: border-box;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">html</span>, <span class=\"selector-tag\">body</span>, <span class=\"selector-tag\">main</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font</span>: <span class=\"number\">14px</span>/<span class=\"number\">1.5</span> Arial;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#444</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">main</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(to right top, rgba(38,50,105,0.78), <span class=\"built_in\">rgba</span>(255,152,0,0.45)), <span class=\"built_in\">url</span>(<span class=\"string\">\"http://n.sinaimg.cn/sinacn20111/348/w690h458/20190317/95f8-hukwxnu7092764.jpg\"</span>) center center no-repeat;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">herder</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">header</span> <span class=\"selector-class\">.login</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: right;</span><br><span class=\"line\">  <span class=\"attribute\">margin-right</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.flip-modal</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.show-modal</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block<span class=\"meta\">!important</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.modal</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-50%, -50%);</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">3px</span> <span class=\"number\">4px</span> <span class=\"number\">5px</span> <span class=\"built_in\">rgba</span>(0,0,0,0.2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.modal</span> <span class=\"selector-class\">.close</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.modal</span> <span class=\"selector-class\">.tabs</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.modal</span> <span class=\"selector-class\">.tabs</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#666</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.modal</span> <span class=\"selector-class\">.tabs</span> <span class=\"selector-tag\">a</span><span class=\"selector-class\">.active</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">2px</span> solid <span class=\"number\">#444</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#444</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.modal</span> <span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">20px</span> <span class=\"number\">40px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.modal</span> <span class=\"selector-class\">.errormsg</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#ff9800</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.modal</span> <span class=\"selector-class\">.content</span> <span class=\"selector-class\">.input-field</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.modal</span> <span class=\"selector-class\">.content</span> <span class=\"selector-class\">.input-field</span> <span class=\"selector-class\">.fa</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">13px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">13px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.modal</span> <span class=\"selector-class\">.content</span> <span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=text]</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.modal</span> <span class=\"selector-class\">.content</span> <span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=password]</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span> <span class=\"number\">10px</span> <span class=\"number\">10px</span> <span class=\"number\">28px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">outline</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.modal</span> <span class=\"selector-class\">.content</span> <span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=submit]</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">6px</span> <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"built_in\">rgba</span>(0,0,0,0.4);</span><br><span class=\"line\">  <span class=\"attribute\">outline</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.flip-modal</span><span class=\"selector-class\">.login</span> <span class=\"selector-class\">.modal-login</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.flip-modal</span><span class=\"selector-class\">.register</span> <span class=\"selector-class\">.modal-register</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-50%,-50%) <span class=\"built_in\">rotateY</span>(0deg);</span><br><span class=\"line\">  <span class=\"attribute\">backface-visibility</span>: hidden;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: all <span class=\"number\">1s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.flip-modal</span><span class=\"selector-class\">.login</span> <span class=\"selector-class\">.modal-register</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.flip-modal</span><span class=\"selector-class\">.register</span> <span class=\"selector-class\">.modal-login</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-50%,-50%) <span class=\"built_in\">rotateY</span>(180deg);</span><br><span class=\"line\">  <span class=\"attribute\">backface-visibility</span>: hidden;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: all <span class=\"number\">1s</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"thumbnailImageUrl":"https://kisky3.github.io/2019/04/20/实现一个翻转注册登陆页面/20190420.png","excerpt":"<p>实现一个翻转注册登陆页面</p>","more":"<h3 id=\"使用语言为CSS和原生JS\"><a href=\"#使用语言为CSS和原生JS\" class=\"headerlink\" title=\"使用语言为CSS和原生JS\"></a>使用语言为CSS和原生JS</h3><p>大致思路如下：</p>\n<p>1.创造两个模态框，一个为login，一个为register.</p>\n<span class=\"highlight-text\" style=\"background-color:#FFCCCC;\">HTML</span>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"flip-modal login\"</span>&gt;</span></span><br><span class=\"line\">    /* 登陆模态框 */</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal modal-login\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    /* 注册模态框 */</span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal modal-login\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>2.并使用JS来控制flip-modal下的class为login或者register.</p>\n<span class=\"highlight-text\" style=\"background-color:#FFCCCC;\">JS</span>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$('.flip-modal').addEventListener('click', function(e)&#123;</span><br><span class=\"line\">  e.stopPropagation();</span><br><span class=\"line\">  if(e.target.classList.contains('login'))&#123;</span><br><span class=\"line\">    $('.flip-modal').classList.remove('register');</span><br><span class=\"line\">    $('.flip-modal').classList.add('login');</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  if(e.target.classList.contains('register'))&#123;</span><br><span class=\"line\">    $('.flip-modal').classList.add('register');</span><br><span class=\"line\">    $('.flip-modal').classList.remove('login');</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  if(e.target.classList.contains('close'))&#123;</span><br><span class=\"line\">    $('.flip-modal').style.display = 'none';</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>3.CSS控制模态框翻转时,根据flip-modal下的class类型进行两个模态框的水平Y轴翻转，并隐藏翻转后的背面.<br>加上transition的过渡效果使翻转更自然。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.flip-modal.login .modal-login,</span><br><span class=\"line\">.flip-modal.register .modal-register &#123;</span><br><span class=\"line\">  transform: translate(<span class=\"number\">-50</span>%,<span class=\"number\">-50</span>%) rotateY(<span class=\"number\">0</span>deg);</span><br><span class=\"line\">  backface-visibility: hidden;</span><br><span class=\"line\">  transition: all <span class=\"number\">1</span>s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.flip-modal.login .modal-register,</span><br><span class=\"line\">.flip-modal.register .modal-login &#123;</span><br><span class=\"line\">  transform: translate(<span class=\"number\">-50</span>%,<span class=\"number\">-50</span>%) rotateY(<span class=\"number\">180</span>deg);</span><br><span class=\"line\">  backface-visibility: hidden;</span><br><span class=\"line\">  transition: all <span class=\"number\">1</span>s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"效果图如下\"><a href=\"#效果图如下\" class=\"headerlink\" title=\"效果图如下\"></a>效果图如下</h3><img src=\"./1.png\" style=\"width:500px\">\n\n<p><a href=\"http://js.jirengu.com/xukec/43/edit?html,css,js]\" target=\"_blank\" rel=\"noopener\">代码预览地址</a></p>\n<hr>\n<h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><span class=\"highlight-text\" style=\"background-color:#FFCCCC;\">HTML</span>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Login|Regist<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://unpkg.com/font-awesome@4.7.0/css/font-awesome.min.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"login\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-user-circle\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"flip-modal login\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal modal-login\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"close fa fa-close\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"tabs\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"login active\"</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"register\"</span>&gt;</span>注册<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"errormsg\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/login\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"input-field\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-user-o\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"用户名\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"input-field\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-lock\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"密码\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"input-field\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"登录\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal modal-register\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"close fa fa-close\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"tabs\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"login\"</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"register active\"</span>&gt;</span>注册<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"errormsg\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/login\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"input-field\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-user-o\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"用户名\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"input-field\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-lock\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"密码\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"input-field\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-lock\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password2\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"再次输入密码\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"input-field\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"注册\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<span class=\"highlight-text\" style=\"background-color:#FFCCCC;\">JS</span>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">$</span>(<span class=\"params\">selector</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.querySelector(selector);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">$$</span>(<span class=\"params\">selector</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.querySelectorAll(selector);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">'header .login'</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">  e.stopPropagation();</span><br><span class=\"line\">  $(<span class=\"string\">'.flip-modal'</span>).style.display = <span class=\"string\">'block'</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">'.flip-modal'</span>).addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">  e.stopPropagation();</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(e.target.classList.contains(<span class=\"string\">'login'</span>))&#123;</span><br><span class=\"line\">    $(<span class=\"string\">'.flip-modal'</span>).classList.remove(<span class=\"string\">'register'</span>);</span><br><span class=\"line\">    $(<span class=\"string\">'.flip-modal'</span>).classList.add(<span class=\"string\">'login'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span>(e.target.classList.contains(<span class=\"string\">'register'</span>))&#123;</span><br><span class=\"line\">    $(<span class=\"string\">'.flip-modal'</span>).classList.add(<span class=\"string\">'register'</span>);</span><br><span class=\"line\">    $(<span class=\"string\">'.flip-modal'</span>).classList.remove(<span class=\"string\">'login'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span>(e.target.classList.contains(<span class=\"string\">'close'</span>))&#123;</span><br><span class=\"line\">    $(<span class=\"string\">'.flip-modal'</span>).style.display = <span class=\"string\">'none'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener (<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">'.flip-modal'</span>).style.display = <span class=\"string\">'none'</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">'.modal-login form'</span>).addEventListener(<span class=\"string\">'submit'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">  e.preventDefault();</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!<span class=\"regexp\">/^\\w&#123;3,8&#125;$/</span>.test($(<span class=\"string\">'.modal-login input[name=username]'</span>).value))&#123;</span><br><span class=\"line\">    $(<span class=\"string\">'.modal-login .errormsg'</span>).innerText = <span class=\"string\">'用户名需要输入3-8个字符，包括字母数字和下划线'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!<span class=\"regexp\">/^\\w&#123;6,10&#125;$/</span>.test($(<span class=\"string\">'.modal-login input[name=password]'</span>).value))&#123;</span><br><span class=\"line\">    $(<span class=\"string\">'.modal-login .errormsg'</span>).innerText = <span class=\"string\">'密码需要输入6-10个字符，包括字母数字和下划线'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.submit();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">'.modal-register form'</span>).addEventListener(<span class=\"string\">'submit'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">  e.preventDefault();</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!<span class=\"regexp\">/^\\w&#123;3,8&#125;$/</span>.test($(<span class=\"string\">'.modal-register input[name=username]'</span>).value))&#123;</span><br><span class=\"line\">    $(<span class=\"string\">'.modal-register .errormsg'</span>).innerText = <span class=\"string\">'用户名需要输入3-8个字符，包括字母数字和下划线'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!<span class=\"regexp\">/^\\w&#123;6,10&#125;$/</span>.test($(<span class=\"string\">'.modal-register input[name=password]'</span>).value))&#123;</span><br><span class=\"line\">    $(<span class=\"string\">'.modal-register .errormsg'</span>).innerText = <span class=\"string\">'密码需要输入6-10个字符，包括字母数字和下划线'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">if</span>($(<span class=\"string\">'.modal-register input[name = password]'</span>).value != $(<span class=\"string\">'.modal-register input[name = password2]'</span>).value)&#123;</span><br><span class=\"line\">    $(<span class=\"string\">'.modal-register .errormsg'</span>).innerText = <span class=\"string\">'两次密码输入不一致'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.submit();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<span class=\"highlight-text\" style=\"background-color:#FFCCCC;\">CSS</span>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">box-sizing</span>: border-box;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">html</span>, <span class=\"selector-tag\">body</span>, <span class=\"selector-tag\">main</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font</span>: <span class=\"number\">14px</span>/<span class=\"number\">1.5</span> Arial;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#444</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">main</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(to right top, rgba(38,50,105,0.78), <span class=\"built_in\">rgba</span>(255,152,0,0.45)), <span class=\"built_in\">url</span>(<span class=\"string\">\"http://n.sinaimg.cn/sinacn20111/348/w690h458/20190317/95f8-hukwxnu7092764.jpg\"</span>) center center no-repeat;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">herder</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">header</span> <span class=\"selector-class\">.login</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: right;</span><br><span class=\"line\">  <span class=\"attribute\">margin-right</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.flip-modal</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.show-modal</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block<span class=\"meta\">!important</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.modal</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-50%, -50%);</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">3px</span> <span class=\"number\">4px</span> <span class=\"number\">5px</span> <span class=\"built_in\">rgba</span>(0,0,0,0.2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.modal</span> <span class=\"selector-class\">.close</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.modal</span> <span class=\"selector-class\">.tabs</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.modal</span> <span class=\"selector-class\">.tabs</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#666</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.modal</span> <span class=\"selector-class\">.tabs</span> <span class=\"selector-tag\">a</span><span class=\"selector-class\">.active</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">2px</span> solid <span class=\"number\">#444</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#444</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.modal</span> <span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">20px</span> <span class=\"number\">40px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.modal</span> <span class=\"selector-class\">.errormsg</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#ff9800</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.modal</span> <span class=\"selector-class\">.content</span> <span class=\"selector-class\">.input-field</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.modal</span> <span class=\"selector-class\">.content</span> <span class=\"selector-class\">.input-field</span> <span class=\"selector-class\">.fa</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">13px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">13px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.modal</span> <span class=\"selector-class\">.content</span> <span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=text]</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.modal</span> <span class=\"selector-class\">.content</span> <span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=password]</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span> <span class=\"number\">10px</span> <span class=\"number\">10px</span> <span class=\"number\">28px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">outline</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.modal</span> <span class=\"selector-class\">.content</span> <span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=submit]</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">6px</span> <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"built_in\">rgba</span>(0,0,0,0.4);</span><br><span class=\"line\">  <span class=\"attribute\">outline</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.flip-modal</span><span class=\"selector-class\">.login</span> <span class=\"selector-class\">.modal-login</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.flip-modal</span><span class=\"selector-class\">.register</span> <span class=\"selector-class\">.modal-register</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-50%,-50%) <span class=\"built_in\">rotateY</span>(0deg);</span><br><span class=\"line\">  <span class=\"attribute\">backface-visibility</span>: hidden;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: all <span class=\"number\">1s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.flip-modal</span><span class=\"selector-class\">.login</span> <span class=\"selector-class\">.modal-register</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.flip-modal</span><span class=\"selector-class\">.register</span> <span class=\"selector-class\">.modal-login</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-50%,-50%) <span class=\"built_in\">rotateY</span>(180deg);</span><br><span class=\"line\">  <span class=\"attribute\">backface-visibility</span>: hidden;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: all <span class=\"number\">1s</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Common Browser and Rendering Engine","date":"2018-10-29T10:42:04.000Z","clearReading":true,"thumbnailImage":"20181029.png","thumbnailImagePosition":"left","coverImage":"cover.jpg","coverCaption":"Hello World, Hello Programming","coverSize":"partial","comments":0,"_content":"\n常见浏览器及浏览器内核\n\n<!--more-->\n浏览器内核可以分为：渲染引擎(layout engineer)和JS引擎。\n它负责：\n- 获取网页的HTML，XML，图像等内容\n- 整理CSS讯息以及计算机网页的显示方式\n- 然后会输出至显示器或打印机。\n\n### 内核是什么\n浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。\n所有的网页浏览器，电子邮件客户端以及其他需要编辑显示网络内容的应用程序都需要内核。JS引擎是解析Javascript语言，执行javascript语言来实现网页的动态效果。\n\n最开始渲染引擎和JS引擎并没有很明确的区分，后来JS引擎越来越独立，内核就只倾向于只指渲染引擎。\n\n***\n\n### 内核的种类\n内核的种类有很多，加上没什么人使用的非商业的免费内核，可能会有10多种，但是常见的浏览器内核可以分为以下四种：\n{% hl_text #FFCCCC %}Trident，Gecko，Blink，Webkit。{% endhl_text %}\n\n#### Trident ([‘traɪd(ə)nt])\nTrident(IE内核)：该内核程序在 1997 年的 IE4 中首次被采用，是微软在 Mosaic（”马赛克”，这是人类历史上第一个浏览器，从此网页可以在图形界面的窗口浏览） 代码的基础之上修改而来的，并沿用到 IE11，也被普遍称作 “IE内核”。\n\nTrident实际上是一款开放的内核，其接口内核设计的相当成熟，因此才有许多采用 IE 内核而非 IE 的浏览器(壳浏览器)涌现。由于 IE 本身的 “垄断性”（虽然名义上 IE 并非垄断，但实际上，特别是从 Windows 95 年代一直到 XP 初期，就市场占有率来说 IE 的确借助 Windows 的东风处于 “垄断” 的地位）而使得 Trident 内核的长期一家独大，微软很长时间都并没有更新 Trident 内核，这导致了两个后果——\n\n一是 Trident 内核曾经几乎与 W3C 标准脱节（2005年），二是 Trident 内核的大量 Bug 等安全性问题没有得到及时解决，然后加上一些致力于开源的开发者和一些学者们公开自己认为 IE 浏览器不安全的观点，也有很多用户转向了其他浏览器，Firefox 和 Opera 就是这个时候兴起的。非 Trident 内核浏览器的市场占有率大幅提高也致使许多网页开发人员开始注意网页标准和非 IE浏览器的浏览效果问题。\n\n补充：IE 从版本 11 开始，初步支持 WebGL 技术。IE8 的 JavaScript 引擎是 Jscript，IE9 开始用 Chakra，这两个版本区别很大，Chakra 无论是速度和标准化方面都很出色。\n国内很多的双核浏览器的其中一核便是 Trident，美其名曰 “兼容模式”。\nWindow10 发布后，IE 将其内置浏览器命名为 Edge，Edge 最显著的特点就是新内核 EdgeHTML。\n关于 Edge 浏览器更多可以参考 如何评价 Microsoft Edge 浏览器\n\n#### Gecko ([‘gekəʊ])\nGecko(Firefox 内核)：Netscape6 开始采用的内核，后来的 Mozilla FireFox(火狐浏览器) 也采用了该内核，Gecko 的特点是代码完全公开，因此，其可开发程度很高，全世界的程序员都可以为其编写代码，增加功能。因为这是个开源内核，因此受到许多人的青睐，Gecko 内核的浏览器也很多，这也是 Gecko 内核虽然年轻但市场占有率能够迅速提高的重要原因。\n\n事实上，Gecko 引擎的由来跟 IE 不无关系，前面说过 IE 没有使用 W3C 的标准，这导致了微软内部一些开发人员的不满；他们与当时已经停止更新了的 Netscape 的一些员工一起创办了 Mozilla，以当时的 Mosaic 内核为基础重新编写内核，于是开发出了 Gecko。不过事实上，Gecko 内核的浏览器仍然还是 Firefox (火狐) 用户最多，所以有时也会被称为 Firefox 内核。此外 Gecko 也是一个跨平台内核，可以在Windows、 BSD、Linux 和 Mac OS X 中使用。\n\n#### Webkit\n一提到 webkit，首先想到的便是 chrome，可以说，chrome 将 Webkit内核 深入人心，殊不知，Webkit 的鼻祖其实是 Safari。现在很多人错误地把 webkit 叫做 chrome内核（即使 chrome内核已经是 blink 了），苹果都哭瞎了有木有。\n\nSafari 是苹果公司开发的浏览器，使用了KDE（Linux桌面系统）的 KHTML 作为浏览器的内核，Safari 所用浏览器内核的名称是大名鼎鼎的 WebKit。 Safari 在 2003 年 1 月 7 日首度发行测试版，并成为 Mac OS X v10.3 与之后版本的默认浏览器，也成为苹果其它系列产品的指定浏览器（也已支持 Windows 平台）。\n\n如上述可知，WebKit 前身是 KDE 小组的 KHTML 引擎，可以说 WebKit 是 KHTML 的一个开源的分支。当年苹果在比较了 Gecko 和 KHTML 后，选择了后者来做引擎开发，是因为 KHTML 拥有清晰的源码结构和极快的渲染速度。\n\nWebkit内核 可以说是以硬件盈利为主的苹果公司给软件行业的最大贡献之一。随后，2008 年谷歌公司发布 chrome 浏览器，采用的 chromium 内核便 fork 了 Webkit。\n\n#### Chromium/Blink\n2008 年，谷歌公司发布了 chrome 浏览器，浏览器使用的内核被命名为 chromium。\n\nchromium fork 自开源引擎 webkit，却把 WebKit 的代码梳理得可读性提高很多，所以以前可能需要一天进行编译的代码，现在只要两个小时就能搞定。因此 Chromium 引擎和其它基于 WebKit 的引擎所渲染页面的效果也是有出入的。所以有些地方会把 chromium 引擎和 webkit 区分开来单独介绍，而有的文章把 chromium 归入 webkit 引擎中，都是有一定道理的。\n\n谷歌公司还研发了自己的 Javascript 引擎，V8，极大地提高了 Javascript 的运算速度。\n\nchromium 问世后，带动了国产浏览器行业的发展。一些基于 chromium 的单核，双核浏览器如雨后春笋般拔地而起，例如 搜狗、360、QQ浏览器等等，无一不是套着不同的外壳用着相同的内核。\n\n然而 2013 年 4 月 3 日，谷歌在 Chromium Blog 上发表 博客，称将与苹果的开源浏览器核心 Webkit 分道扬镳，在 Chromium 项目中研发 Blink 渲染引擎（即浏览器核心），内置于 Chrome 浏览器之中。\n\nwebkit 用的好好的，为何要投入到一个新的内核中去呢？\n\nBlink 其实是 WebKit 的分支，如同 WebKit 是 KHTML 的分支。Google 的 Chromium 项目此前一直使用 WebKit(WebCore) 作为渲染引擎，但出于某种原因，并没有将其多进程架构移植入Webkit。\n\n后来，由于苹果推出的 WebKit2 与 Chromium 的沙箱设计存在冲突，所以 Chromium 一直停留在 WebKit，并使用移植的方式来实现和主线 WebKit2 的对接。这增加了 Chromium 的复杂性，且在一定程度上影响了 Chromium 的架构移植工作。\n\n基于以上原因，Google 决定从 WebKit 衍生出自己的 Blink 引擎（后由 Google 和 Opera Software 共同研发），将在 WebKit 代码的基础上研发更加快速和简约的渲染引擎，并逐步脱离 WebKit 的影响，创造一个完全独立的 Blink 引擎。这样以来，唯一一条维系 Google 和苹果之间技术关系的纽带就这样被切断了。\n\nGoogle 和苹果在多个领域都是竞争对手，而唯独在浏览器引擎上有技术合作，利益一致。但为了各自的利益，谁都不会拿出 100% 的 “诚意” 来做好 WebKit，因为你做出来的成果竞争对手可以直接享用。移动互联网已经崛起，手机和平板设备端必将成为浏览器的另一个战场。这个时候，如果 Google 跟苹果仍然黏在一起，将会严重阻碍双方的进步，也会阻碍 WebKit 的进步。\n\n#### Presto ([‘prestəʊ])\nPresto 是挪威产浏览器 opera 的 “前任” 内核，为何说是 “前任”，因为最新的 opera 浏览器早已将之抛弃从而投入到了谷歌大本营。\n\nOpera 的一个里程碑作品是 Opera7.0，因为它使用了 Opera Software 自主开发的 Presto 渲染引擎，取代了旧版 Opera 4 至 6 版本使用的 Elektra 排版引擎。该款引擎的特点就是渲染速度的优化达到了极致，然而代价是牺牲了网页的兼容性。\n\nPresto 加入了动态功能，例如网页或其部分可随着 DOM 及 Script 语法的事件而重新排版。Presto 在推出后不断有更新版本推出，使不少错误得以修正，以及阅读 Javascript 效能得以最佳化，并成为当时速度最快的引擎。\n\n然而为了减少研发成本，Opera 在 2013 年 2 月宣布放弃 Presto，转而跟随 Chrome 使用 WebKit 分支的 Chromium 引擎作为自家浏览器核心引擎，Presto 内核的 Opera 浏览器版本永远的停留在了 12.17。在 Chrome 于 2013 年推出 Blink 引擎之后，Opera 也紧跟其脚步表示将转而使用 Blink 作为浏览器核心引擎。\n\nPresto 与开源的 WebKit 和经过谷歌加持的 Chromium 系列相比毫无推广上的优势，这是 Opera 转投 WebKit 的主要原因，并且使用 WebKit 内核的 Opera 浏览器可以兼容谷歌 Chrome 浏览器海量的插件资源。但是换内核的代价对于 Opera 来说过于惨痛。使用谷歌的 WebKit 内核之后，原本快速，轻量化，稳定的 Opera 浏览器变得异常的卡顿，而且表现不稳定，Opera 原本旧内核浏览器书签同步到新内核上的工作 Opera 花了整整两年时间，期间很多 Opera 的用户纷纷转投谷歌浏览器和其他浏览器，造成了众多的用户流失。时至今日现在还有上千万人在使用老版本的 Opera。\n\n很多人都认为 Opera 浏览器终止在了 12.17，此后所更新的 Opera 版本号不再是原来那个 Opera。\n\n***\n\n### 关于移动端\n移动端的浏览器内核主要说的是系统内置浏览器的内核。\n\n目前移动设备浏览器上常用的内核有 Webkit，Blink，Trident，Gecko 等，其中 iPhone 和 iPad 等苹果 iOS 平台主要是 WebKit，Android 4.4 之前的 Android 系统浏览器内核是 WebKit，Android4.4 系统浏览器切换到了Chromium，内核是 Webkit 的分支 Blink，Windows Phone 8 系统浏览器内核是 Trident。\n\n***\n\n### 总结\n浏览器内核主要指的是浏览器的渲染引擎，2013 年以前，代表有 Trident（IE），Gecko（firefox），Webkit（Safari chrome 等）以及 Presto（opera)。2013 年，谷歌开始研发 blink 引擎，chrome 28 以后开始使用，而 opera 则放弃了自主研发的 Presto 引擎，投入谷歌怀抱，和谷歌一起研发 blink 引擎，国内各种 chrome系的浏览器（360、UC、QQ、2345 等等）也纷纷放弃 webkit，投入 blink 的怀抱。","source":"_posts/常见浏览器及浏览器内核.md","raw":"---\ntitle: Common Browser and Rendering Engine\ndate: 2018-10-29 19:42:04\ntags:\n-  Browser\nclearReading: true\nthumbnailImage: 20181029.png\nthumbnailImagePosition: left\ncoverImage: cover.jpg\ncoverCaption: \"Hello World, Hello Programming\"\ncoverSize: partial\ncomments: false\ncategories: Front-end Knowledge\n---\n\n常见浏览器及浏览器内核\n\n<!--more-->\n浏览器内核可以分为：渲染引擎(layout engineer)和JS引擎。\n它负责：\n- 获取网页的HTML，XML，图像等内容\n- 整理CSS讯息以及计算机网页的显示方式\n- 然后会输出至显示器或打印机。\n\n### 内核是什么\n浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。\n所有的网页浏览器，电子邮件客户端以及其他需要编辑显示网络内容的应用程序都需要内核。JS引擎是解析Javascript语言，执行javascript语言来实现网页的动态效果。\n\n最开始渲染引擎和JS引擎并没有很明确的区分，后来JS引擎越来越独立，内核就只倾向于只指渲染引擎。\n\n***\n\n### 内核的种类\n内核的种类有很多，加上没什么人使用的非商业的免费内核，可能会有10多种，但是常见的浏览器内核可以分为以下四种：\n{% hl_text #FFCCCC %}Trident，Gecko，Blink，Webkit。{% endhl_text %}\n\n#### Trident ([‘traɪd(ə)nt])\nTrident(IE内核)：该内核程序在 1997 年的 IE4 中首次被采用，是微软在 Mosaic（”马赛克”，这是人类历史上第一个浏览器，从此网页可以在图形界面的窗口浏览） 代码的基础之上修改而来的，并沿用到 IE11，也被普遍称作 “IE内核”。\n\nTrident实际上是一款开放的内核，其接口内核设计的相当成熟，因此才有许多采用 IE 内核而非 IE 的浏览器(壳浏览器)涌现。由于 IE 本身的 “垄断性”（虽然名义上 IE 并非垄断，但实际上，特别是从 Windows 95 年代一直到 XP 初期，就市场占有率来说 IE 的确借助 Windows 的东风处于 “垄断” 的地位）而使得 Trident 内核的长期一家独大，微软很长时间都并没有更新 Trident 内核，这导致了两个后果——\n\n一是 Trident 内核曾经几乎与 W3C 标准脱节（2005年），二是 Trident 内核的大量 Bug 等安全性问题没有得到及时解决，然后加上一些致力于开源的开发者和一些学者们公开自己认为 IE 浏览器不安全的观点，也有很多用户转向了其他浏览器，Firefox 和 Opera 就是这个时候兴起的。非 Trident 内核浏览器的市场占有率大幅提高也致使许多网页开发人员开始注意网页标准和非 IE浏览器的浏览效果问题。\n\n补充：IE 从版本 11 开始，初步支持 WebGL 技术。IE8 的 JavaScript 引擎是 Jscript，IE9 开始用 Chakra，这两个版本区别很大，Chakra 无论是速度和标准化方面都很出色。\n国内很多的双核浏览器的其中一核便是 Trident，美其名曰 “兼容模式”。\nWindow10 发布后，IE 将其内置浏览器命名为 Edge，Edge 最显著的特点就是新内核 EdgeHTML。\n关于 Edge 浏览器更多可以参考 如何评价 Microsoft Edge 浏览器\n\n#### Gecko ([‘gekəʊ])\nGecko(Firefox 内核)：Netscape6 开始采用的内核，后来的 Mozilla FireFox(火狐浏览器) 也采用了该内核，Gecko 的特点是代码完全公开，因此，其可开发程度很高，全世界的程序员都可以为其编写代码，增加功能。因为这是个开源内核，因此受到许多人的青睐，Gecko 内核的浏览器也很多，这也是 Gecko 内核虽然年轻但市场占有率能够迅速提高的重要原因。\n\n事实上，Gecko 引擎的由来跟 IE 不无关系，前面说过 IE 没有使用 W3C 的标准，这导致了微软内部一些开发人员的不满；他们与当时已经停止更新了的 Netscape 的一些员工一起创办了 Mozilla，以当时的 Mosaic 内核为基础重新编写内核，于是开发出了 Gecko。不过事实上，Gecko 内核的浏览器仍然还是 Firefox (火狐) 用户最多，所以有时也会被称为 Firefox 内核。此外 Gecko 也是一个跨平台内核，可以在Windows、 BSD、Linux 和 Mac OS X 中使用。\n\n#### Webkit\n一提到 webkit，首先想到的便是 chrome，可以说，chrome 将 Webkit内核 深入人心，殊不知，Webkit 的鼻祖其实是 Safari。现在很多人错误地把 webkit 叫做 chrome内核（即使 chrome内核已经是 blink 了），苹果都哭瞎了有木有。\n\nSafari 是苹果公司开发的浏览器，使用了KDE（Linux桌面系统）的 KHTML 作为浏览器的内核，Safari 所用浏览器内核的名称是大名鼎鼎的 WebKit。 Safari 在 2003 年 1 月 7 日首度发行测试版，并成为 Mac OS X v10.3 与之后版本的默认浏览器，也成为苹果其它系列产品的指定浏览器（也已支持 Windows 平台）。\n\n如上述可知，WebKit 前身是 KDE 小组的 KHTML 引擎，可以说 WebKit 是 KHTML 的一个开源的分支。当年苹果在比较了 Gecko 和 KHTML 后，选择了后者来做引擎开发，是因为 KHTML 拥有清晰的源码结构和极快的渲染速度。\n\nWebkit内核 可以说是以硬件盈利为主的苹果公司给软件行业的最大贡献之一。随后，2008 年谷歌公司发布 chrome 浏览器，采用的 chromium 内核便 fork 了 Webkit。\n\n#### Chromium/Blink\n2008 年，谷歌公司发布了 chrome 浏览器，浏览器使用的内核被命名为 chromium。\n\nchromium fork 自开源引擎 webkit，却把 WebKit 的代码梳理得可读性提高很多，所以以前可能需要一天进行编译的代码，现在只要两个小时就能搞定。因此 Chromium 引擎和其它基于 WebKit 的引擎所渲染页面的效果也是有出入的。所以有些地方会把 chromium 引擎和 webkit 区分开来单独介绍，而有的文章把 chromium 归入 webkit 引擎中，都是有一定道理的。\n\n谷歌公司还研发了自己的 Javascript 引擎，V8，极大地提高了 Javascript 的运算速度。\n\nchromium 问世后，带动了国产浏览器行业的发展。一些基于 chromium 的单核，双核浏览器如雨后春笋般拔地而起，例如 搜狗、360、QQ浏览器等等，无一不是套着不同的外壳用着相同的内核。\n\n然而 2013 年 4 月 3 日，谷歌在 Chromium Blog 上发表 博客，称将与苹果的开源浏览器核心 Webkit 分道扬镳，在 Chromium 项目中研发 Blink 渲染引擎（即浏览器核心），内置于 Chrome 浏览器之中。\n\nwebkit 用的好好的，为何要投入到一个新的内核中去呢？\n\nBlink 其实是 WebKit 的分支，如同 WebKit 是 KHTML 的分支。Google 的 Chromium 项目此前一直使用 WebKit(WebCore) 作为渲染引擎，但出于某种原因，并没有将其多进程架构移植入Webkit。\n\n后来，由于苹果推出的 WebKit2 与 Chromium 的沙箱设计存在冲突，所以 Chromium 一直停留在 WebKit，并使用移植的方式来实现和主线 WebKit2 的对接。这增加了 Chromium 的复杂性，且在一定程度上影响了 Chromium 的架构移植工作。\n\n基于以上原因，Google 决定从 WebKit 衍生出自己的 Blink 引擎（后由 Google 和 Opera Software 共同研发），将在 WebKit 代码的基础上研发更加快速和简约的渲染引擎，并逐步脱离 WebKit 的影响，创造一个完全独立的 Blink 引擎。这样以来，唯一一条维系 Google 和苹果之间技术关系的纽带就这样被切断了。\n\nGoogle 和苹果在多个领域都是竞争对手，而唯独在浏览器引擎上有技术合作，利益一致。但为了各自的利益，谁都不会拿出 100% 的 “诚意” 来做好 WebKit，因为你做出来的成果竞争对手可以直接享用。移动互联网已经崛起，手机和平板设备端必将成为浏览器的另一个战场。这个时候，如果 Google 跟苹果仍然黏在一起，将会严重阻碍双方的进步，也会阻碍 WebKit 的进步。\n\n#### Presto ([‘prestəʊ])\nPresto 是挪威产浏览器 opera 的 “前任” 内核，为何说是 “前任”，因为最新的 opera 浏览器早已将之抛弃从而投入到了谷歌大本营。\n\nOpera 的一个里程碑作品是 Opera7.0，因为它使用了 Opera Software 自主开发的 Presto 渲染引擎，取代了旧版 Opera 4 至 6 版本使用的 Elektra 排版引擎。该款引擎的特点就是渲染速度的优化达到了极致，然而代价是牺牲了网页的兼容性。\n\nPresto 加入了动态功能，例如网页或其部分可随着 DOM 及 Script 语法的事件而重新排版。Presto 在推出后不断有更新版本推出，使不少错误得以修正，以及阅读 Javascript 效能得以最佳化，并成为当时速度最快的引擎。\n\n然而为了减少研发成本，Opera 在 2013 年 2 月宣布放弃 Presto，转而跟随 Chrome 使用 WebKit 分支的 Chromium 引擎作为自家浏览器核心引擎，Presto 内核的 Opera 浏览器版本永远的停留在了 12.17。在 Chrome 于 2013 年推出 Blink 引擎之后，Opera 也紧跟其脚步表示将转而使用 Blink 作为浏览器核心引擎。\n\nPresto 与开源的 WebKit 和经过谷歌加持的 Chromium 系列相比毫无推广上的优势，这是 Opera 转投 WebKit 的主要原因，并且使用 WebKit 内核的 Opera 浏览器可以兼容谷歌 Chrome 浏览器海量的插件资源。但是换内核的代价对于 Opera 来说过于惨痛。使用谷歌的 WebKit 内核之后，原本快速，轻量化，稳定的 Opera 浏览器变得异常的卡顿，而且表现不稳定，Opera 原本旧内核浏览器书签同步到新内核上的工作 Opera 花了整整两年时间，期间很多 Opera 的用户纷纷转投谷歌浏览器和其他浏览器，造成了众多的用户流失。时至今日现在还有上千万人在使用老版本的 Opera。\n\n很多人都认为 Opera 浏览器终止在了 12.17，此后所更新的 Opera 版本号不再是原来那个 Opera。\n\n***\n\n### 关于移动端\n移动端的浏览器内核主要说的是系统内置浏览器的内核。\n\n目前移动设备浏览器上常用的内核有 Webkit，Blink，Trident，Gecko 等，其中 iPhone 和 iPad 等苹果 iOS 平台主要是 WebKit，Android 4.4 之前的 Android 系统浏览器内核是 WebKit，Android4.4 系统浏览器切换到了Chromium，内核是 Webkit 的分支 Blink，Windows Phone 8 系统浏览器内核是 Trident。\n\n***\n\n### 总结\n浏览器内核主要指的是浏览器的渲染引擎，2013 年以前，代表有 Trident（IE），Gecko（firefox），Webkit（Safari chrome 等）以及 Presto（opera)。2013 年，谷歌开始研发 blink 引擎，chrome 28 以后开始使用，而 opera 则放弃了自主研发的 Presto 引擎，投入谷歌怀抱，和谷歌一起研发 blink 引擎，国内各种 chrome系的浏览器（360、UC、QQ、2345 等等）也纷纷放弃 webkit，投入 blink 的怀抱。","slug":"常见浏览器及浏览器内核","published":1,"updated":"2019-11-23T23:54:38.000Z","layout":"post","photos":[],"link":"","_id":"ck3it6k7z007jteyic3z8ul06","content":"<p>常见浏览器及浏览器内核</p>\n<a id=\"more\"></a>\n<p>浏览器内核可以分为：渲染引擎(layout engineer)和JS引擎。<br>它负责：</p>\n<ul>\n<li>获取网页的HTML，XML，图像等内容</li>\n<li>整理CSS讯息以及计算机网页的显示方式</li>\n<li>然后会输出至显示器或打印机。</li>\n</ul>\n<h3 id=\"内核是什么\"><a href=\"#内核是什么\" class=\"headerlink\" title=\"内核是什么\"></a>内核是什么</h3><p>浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。<br>所有的网页浏览器，电子邮件客户端以及其他需要编辑显示网络内容的应用程序都需要内核。JS引擎是解析Javascript语言，执行javascript语言来实现网页的动态效果。</p>\n<p>最开始渲染引擎和JS引擎并没有很明确的区分，后来JS引擎越来越独立，内核就只倾向于只指渲染引擎。</p>\n<hr>\n<h3 id=\"内核的种类\"><a href=\"#内核的种类\" class=\"headerlink\" title=\"内核的种类\"></a>内核的种类</h3><p>内核的种类有很多，加上没什么人使用的非商业的免费内核，可能会有10多种，但是常见的浏览器内核可以分为以下四种：</p>\n<span class=\"highlight-text\" style=\"background-color:#FFCCCC;\">Trident，Gecko，Blink，Webkit。</span>\n\n<h4 id=\"Trident-‘traɪd-ə-nt\"><a href=\"#Trident-‘traɪd-ə-nt\" class=\"headerlink\" title=\"Trident ([‘traɪd(ə)nt])\"></a>Trident ([‘traɪd(ə)nt])</h4><p>Trident(IE内核)：该内核程序在 1997 年的 IE4 中首次被采用，是微软在 Mosaic（”马赛克”，这是人类历史上第一个浏览器，从此网页可以在图形界面的窗口浏览） 代码的基础之上修改而来的，并沿用到 IE11，也被普遍称作 “IE内核”。</p>\n<p>Trident实际上是一款开放的内核，其接口内核设计的相当成熟，因此才有许多采用 IE 内核而非 IE 的浏览器(壳浏览器)涌现。由于 IE 本身的 “垄断性”（虽然名义上 IE 并非垄断，但实际上，特别是从 Windows 95 年代一直到 XP 初期，就市场占有率来说 IE 的确借助 Windows 的东风处于 “垄断” 的地位）而使得 Trident 内核的长期一家独大，微软很长时间都并没有更新 Trident 内核，这导致了两个后果——</p>\n<p>一是 Trident 内核曾经几乎与 W3C 标准脱节（2005年），二是 Trident 内核的大量 Bug 等安全性问题没有得到及时解决，然后加上一些致力于开源的开发者和一些学者们公开自己认为 IE 浏览器不安全的观点，也有很多用户转向了其他浏览器，Firefox 和 Opera 就是这个时候兴起的。非 Trident 内核浏览器的市场占有率大幅提高也致使许多网页开发人员开始注意网页标准和非 IE浏览器的浏览效果问题。</p>\n<p>补充：IE 从版本 11 开始，初步支持 WebGL 技术。IE8 的 JavaScript 引擎是 Jscript，IE9 开始用 Chakra，这两个版本区别很大，Chakra 无论是速度和标准化方面都很出色。<br>国内很多的双核浏览器的其中一核便是 Trident，美其名曰 “兼容模式”。<br>Window10 发布后，IE 将其内置浏览器命名为 Edge，Edge 最显著的特点就是新内核 EdgeHTML。<br>关于 Edge 浏览器更多可以参考 如何评价 Microsoft Edge 浏览器</p>\n<h4 id=\"Gecko-‘gekəʊ\"><a href=\"#Gecko-‘gekəʊ\" class=\"headerlink\" title=\"Gecko ([‘gekəʊ])\"></a>Gecko ([‘gekəʊ])</h4><p>Gecko(Firefox 内核)：Netscape6 开始采用的内核，后来的 Mozilla FireFox(火狐浏览器) 也采用了该内核，Gecko 的特点是代码完全公开，因此，其可开发程度很高，全世界的程序员都可以为其编写代码，增加功能。因为这是个开源内核，因此受到许多人的青睐，Gecko 内核的浏览器也很多，这也是 Gecko 内核虽然年轻但市场占有率能够迅速提高的重要原因。</p>\n<p>事实上，Gecko 引擎的由来跟 IE 不无关系，前面说过 IE 没有使用 W3C 的标准，这导致了微软内部一些开发人员的不满；他们与当时已经停止更新了的 Netscape 的一些员工一起创办了 Mozilla，以当时的 Mosaic 内核为基础重新编写内核，于是开发出了 Gecko。不过事实上，Gecko 内核的浏览器仍然还是 Firefox (火狐) 用户最多，所以有时也会被称为 Firefox 内核。此外 Gecko 也是一个跨平台内核，可以在Windows、 BSD、Linux 和 Mac OS X 中使用。</p>\n<h4 id=\"Webkit\"><a href=\"#Webkit\" class=\"headerlink\" title=\"Webkit\"></a>Webkit</h4><p>一提到 webkit，首先想到的便是 chrome，可以说，chrome 将 Webkit内核 深入人心，殊不知，Webkit 的鼻祖其实是 Safari。现在很多人错误地把 webkit 叫做 chrome内核（即使 chrome内核已经是 blink 了），苹果都哭瞎了有木有。</p>\n<p>Safari 是苹果公司开发的浏览器，使用了KDE（Linux桌面系统）的 KHTML 作为浏览器的内核，Safari 所用浏览器内核的名称是大名鼎鼎的 WebKit。 Safari 在 2003 年 1 月 7 日首度发行测试版，并成为 Mac OS X v10.3 与之后版本的默认浏览器，也成为苹果其它系列产品的指定浏览器（也已支持 Windows 平台）。</p>\n<p>如上述可知，WebKit 前身是 KDE 小组的 KHTML 引擎，可以说 WebKit 是 KHTML 的一个开源的分支。当年苹果在比较了 Gecko 和 KHTML 后，选择了后者来做引擎开发，是因为 KHTML 拥有清晰的源码结构和极快的渲染速度。</p>\n<p>Webkit内核 可以说是以硬件盈利为主的苹果公司给软件行业的最大贡献之一。随后，2008 年谷歌公司发布 chrome 浏览器，采用的 chromium 内核便 fork 了 Webkit。</p>\n<h4 id=\"Chromium-Blink\"><a href=\"#Chromium-Blink\" class=\"headerlink\" title=\"Chromium/Blink\"></a>Chromium/Blink</h4><p>2008 年，谷歌公司发布了 chrome 浏览器，浏览器使用的内核被命名为 chromium。</p>\n<p>chromium fork 自开源引擎 webkit，却把 WebKit 的代码梳理得可读性提高很多，所以以前可能需要一天进行编译的代码，现在只要两个小时就能搞定。因此 Chromium 引擎和其它基于 WebKit 的引擎所渲染页面的效果也是有出入的。所以有些地方会把 chromium 引擎和 webkit 区分开来单独介绍，而有的文章把 chromium 归入 webkit 引擎中，都是有一定道理的。</p>\n<p>谷歌公司还研发了自己的 Javascript 引擎，V8，极大地提高了 Javascript 的运算速度。</p>\n<p>chromium 问世后，带动了国产浏览器行业的发展。一些基于 chromium 的单核，双核浏览器如雨后春笋般拔地而起，例如 搜狗、360、QQ浏览器等等，无一不是套着不同的外壳用着相同的内核。</p>\n<p>然而 2013 年 4 月 3 日，谷歌在 Chromium Blog 上发表 博客，称将与苹果的开源浏览器核心 Webkit 分道扬镳，在 Chromium 项目中研发 Blink 渲染引擎（即浏览器核心），内置于 Chrome 浏览器之中。</p>\n<p>webkit 用的好好的，为何要投入到一个新的内核中去呢？</p>\n<p>Blink 其实是 WebKit 的分支，如同 WebKit 是 KHTML 的分支。Google 的 Chromium 项目此前一直使用 WebKit(WebCore) 作为渲染引擎，但出于某种原因，并没有将其多进程架构移植入Webkit。</p>\n<p>后来，由于苹果推出的 WebKit2 与 Chromium 的沙箱设计存在冲突，所以 Chromium 一直停留在 WebKit，并使用移植的方式来实现和主线 WebKit2 的对接。这增加了 Chromium 的复杂性，且在一定程度上影响了 Chromium 的架构移植工作。</p>\n<p>基于以上原因，Google 决定从 WebKit 衍生出自己的 Blink 引擎（后由 Google 和 Opera Software 共同研发），将在 WebKit 代码的基础上研发更加快速和简约的渲染引擎，并逐步脱离 WebKit 的影响，创造一个完全独立的 Blink 引擎。这样以来，唯一一条维系 Google 和苹果之间技术关系的纽带就这样被切断了。</p>\n<p>Google 和苹果在多个领域都是竞争对手，而唯独在浏览器引擎上有技术合作，利益一致。但为了各自的利益，谁都不会拿出 100% 的 “诚意” 来做好 WebKit，因为你做出来的成果竞争对手可以直接享用。移动互联网已经崛起，手机和平板设备端必将成为浏览器的另一个战场。这个时候，如果 Google 跟苹果仍然黏在一起，将会严重阻碍双方的进步，也会阻碍 WebKit 的进步。</p>\n<h4 id=\"Presto-‘prestəʊ\"><a href=\"#Presto-‘prestəʊ\" class=\"headerlink\" title=\"Presto ([‘prestəʊ])\"></a>Presto ([‘prestəʊ])</h4><p>Presto 是挪威产浏览器 opera 的 “前任” 内核，为何说是 “前任”，因为最新的 opera 浏览器早已将之抛弃从而投入到了谷歌大本营。</p>\n<p>Opera 的一个里程碑作品是 Opera7.0，因为它使用了 Opera Software 自主开发的 Presto 渲染引擎，取代了旧版 Opera 4 至 6 版本使用的 Elektra 排版引擎。该款引擎的特点就是渲染速度的优化达到了极致，然而代价是牺牲了网页的兼容性。</p>\n<p>Presto 加入了动态功能，例如网页或其部分可随着 DOM 及 Script 语法的事件而重新排版。Presto 在推出后不断有更新版本推出，使不少错误得以修正，以及阅读 Javascript 效能得以最佳化，并成为当时速度最快的引擎。</p>\n<p>然而为了减少研发成本，Opera 在 2013 年 2 月宣布放弃 Presto，转而跟随 Chrome 使用 WebKit 分支的 Chromium 引擎作为自家浏览器核心引擎，Presto 内核的 Opera 浏览器版本永远的停留在了 12.17。在 Chrome 于 2013 年推出 Blink 引擎之后，Opera 也紧跟其脚步表示将转而使用 Blink 作为浏览器核心引擎。</p>\n<p>Presto 与开源的 WebKit 和经过谷歌加持的 Chromium 系列相比毫无推广上的优势，这是 Opera 转投 WebKit 的主要原因，并且使用 WebKit 内核的 Opera 浏览器可以兼容谷歌 Chrome 浏览器海量的插件资源。但是换内核的代价对于 Opera 来说过于惨痛。使用谷歌的 WebKit 内核之后，原本快速，轻量化，稳定的 Opera 浏览器变得异常的卡顿，而且表现不稳定，Opera 原本旧内核浏览器书签同步到新内核上的工作 Opera 花了整整两年时间，期间很多 Opera 的用户纷纷转投谷歌浏览器和其他浏览器，造成了众多的用户流失。时至今日现在还有上千万人在使用老版本的 Opera。</p>\n<p>很多人都认为 Opera 浏览器终止在了 12.17，此后所更新的 Opera 版本号不再是原来那个 Opera。</p>\n<hr>\n<h3 id=\"关于移动端\"><a href=\"#关于移动端\" class=\"headerlink\" title=\"关于移动端\"></a>关于移动端</h3><p>移动端的浏览器内核主要说的是系统内置浏览器的内核。</p>\n<p>目前移动设备浏览器上常用的内核有 Webkit，Blink，Trident，Gecko 等，其中 iPhone 和 iPad 等苹果 iOS 平台主要是 WebKit，Android 4.4 之前的 Android 系统浏览器内核是 WebKit，Android4.4 系统浏览器切换到了Chromium，内核是 Webkit 的分支 Blink，Windows Phone 8 系统浏览器内核是 Trident。</p>\n<hr>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>浏览器内核主要指的是浏览器的渲染引擎，2013 年以前，代表有 Trident（IE），Gecko（firefox），Webkit（Safari chrome 等）以及 Presto（opera)。2013 年，谷歌开始研发 blink 引擎，chrome 28 以后开始使用，而 opera 则放弃了自主研发的 Presto 引擎，投入谷歌怀抱，和谷歌一起研发 blink 引擎，国内各种 chrome系的浏览器（360、UC、QQ、2345 等等）也纷纷放弃 webkit，投入 blink 的怀抱。</p>\n","site":{"data":{}},"thumbnailImageUrl":"https://kisky3.github.io/2018/10/29/常见浏览器及浏览器内核/20181029.png","excerpt":"<p>常见浏览器及浏览器内核</p>","more":"<p>浏览器内核可以分为：渲染引擎(layout engineer)和JS引擎。<br>它负责：</p>\n<ul>\n<li>获取网页的HTML，XML，图像等内容</li>\n<li>整理CSS讯息以及计算机网页的显示方式</li>\n<li>然后会输出至显示器或打印机。</li>\n</ul>\n<h3 id=\"内核是什么\"><a href=\"#内核是什么\" class=\"headerlink\" title=\"内核是什么\"></a>内核是什么</h3><p>浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。<br>所有的网页浏览器，电子邮件客户端以及其他需要编辑显示网络内容的应用程序都需要内核。JS引擎是解析Javascript语言，执行javascript语言来实现网页的动态效果。</p>\n<p>最开始渲染引擎和JS引擎并没有很明确的区分，后来JS引擎越来越独立，内核就只倾向于只指渲染引擎。</p>\n<hr>\n<h3 id=\"内核的种类\"><a href=\"#内核的种类\" class=\"headerlink\" title=\"内核的种类\"></a>内核的种类</h3><p>内核的种类有很多，加上没什么人使用的非商业的免费内核，可能会有10多种，但是常见的浏览器内核可以分为以下四种：</p>\n<span class=\"highlight-text\" style=\"background-color:#FFCCCC;\">Trident，Gecko，Blink，Webkit。</span>\n\n<h4 id=\"Trident-‘traɪd-ə-nt\"><a href=\"#Trident-‘traɪd-ə-nt\" class=\"headerlink\" title=\"Trident ([‘traɪd(ə)nt])\"></a>Trident ([‘traɪd(ə)nt])</h4><p>Trident(IE内核)：该内核程序在 1997 年的 IE4 中首次被采用，是微软在 Mosaic（”马赛克”，这是人类历史上第一个浏览器，从此网页可以在图形界面的窗口浏览） 代码的基础之上修改而来的，并沿用到 IE11，也被普遍称作 “IE内核”。</p>\n<p>Trident实际上是一款开放的内核，其接口内核设计的相当成熟，因此才有许多采用 IE 内核而非 IE 的浏览器(壳浏览器)涌现。由于 IE 本身的 “垄断性”（虽然名义上 IE 并非垄断，但实际上，特别是从 Windows 95 年代一直到 XP 初期，就市场占有率来说 IE 的确借助 Windows 的东风处于 “垄断” 的地位）而使得 Trident 内核的长期一家独大，微软很长时间都并没有更新 Trident 内核，这导致了两个后果——</p>\n<p>一是 Trident 内核曾经几乎与 W3C 标准脱节（2005年），二是 Trident 内核的大量 Bug 等安全性问题没有得到及时解决，然后加上一些致力于开源的开发者和一些学者们公开自己认为 IE 浏览器不安全的观点，也有很多用户转向了其他浏览器，Firefox 和 Opera 就是这个时候兴起的。非 Trident 内核浏览器的市场占有率大幅提高也致使许多网页开发人员开始注意网页标准和非 IE浏览器的浏览效果问题。</p>\n<p>补充：IE 从版本 11 开始，初步支持 WebGL 技术。IE8 的 JavaScript 引擎是 Jscript，IE9 开始用 Chakra，这两个版本区别很大，Chakra 无论是速度和标准化方面都很出色。<br>国内很多的双核浏览器的其中一核便是 Trident，美其名曰 “兼容模式”。<br>Window10 发布后，IE 将其内置浏览器命名为 Edge，Edge 最显著的特点就是新内核 EdgeHTML。<br>关于 Edge 浏览器更多可以参考 如何评价 Microsoft Edge 浏览器</p>\n<h4 id=\"Gecko-‘gekəʊ\"><a href=\"#Gecko-‘gekəʊ\" class=\"headerlink\" title=\"Gecko ([‘gekəʊ])\"></a>Gecko ([‘gekəʊ])</h4><p>Gecko(Firefox 内核)：Netscape6 开始采用的内核，后来的 Mozilla FireFox(火狐浏览器) 也采用了该内核，Gecko 的特点是代码完全公开，因此，其可开发程度很高，全世界的程序员都可以为其编写代码，增加功能。因为这是个开源内核，因此受到许多人的青睐，Gecko 内核的浏览器也很多，这也是 Gecko 内核虽然年轻但市场占有率能够迅速提高的重要原因。</p>\n<p>事实上，Gecko 引擎的由来跟 IE 不无关系，前面说过 IE 没有使用 W3C 的标准，这导致了微软内部一些开发人员的不满；他们与当时已经停止更新了的 Netscape 的一些员工一起创办了 Mozilla，以当时的 Mosaic 内核为基础重新编写内核，于是开发出了 Gecko。不过事实上，Gecko 内核的浏览器仍然还是 Firefox (火狐) 用户最多，所以有时也会被称为 Firefox 内核。此外 Gecko 也是一个跨平台内核，可以在Windows、 BSD、Linux 和 Mac OS X 中使用。</p>\n<h4 id=\"Webkit\"><a href=\"#Webkit\" class=\"headerlink\" title=\"Webkit\"></a>Webkit</h4><p>一提到 webkit，首先想到的便是 chrome，可以说，chrome 将 Webkit内核 深入人心，殊不知，Webkit 的鼻祖其实是 Safari。现在很多人错误地把 webkit 叫做 chrome内核（即使 chrome内核已经是 blink 了），苹果都哭瞎了有木有。</p>\n<p>Safari 是苹果公司开发的浏览器，使用了KDE（Linux桌面系统）的 KHTML 作为浏览器的内核，Safari 所用浏览器内核的名称是大名鼎鼎的 WebKit。 Safari 在 2003 年 1 月 7 日首度发行测试版，并成为 Mac OS X v10.3 与之后版本的默认浏览器，也成为苹果其它系列产品的指定浏览器（也已支持 Windows 平台）。</p>\n<p>如上述可知，WebKit 前身是 KDE 小组的 KHTML 引擎，可以说 WebKit 是 KHTML 的一个开源的分支。当年苹果在比较了 Gecko 和 KHTML 后，选择了后者来做引擎开发，是因为 KHTML 拥有清晰的源码结构和极快的渲染速度。</p>\n<p>Webkit内核 可以说是以硬件盈利为主的苹果公司给软件行业的最大贡献之一。随后，2008 年谷歌公司发布 chrome 浏览器，采用的 chromium 内核便 fork 了 Webkit。</p>\n<h4 id=\"Chromium-Blink\"><a href=\"#Chromium-Blink\" class=\"headerlink\" title=\"Chromium/Blink\"></a>Chromium/Blink</h4><p>2008 年，谷歌公司发布了 chrome 浏览器，浏览器使用的内核被命名为 chromium。</p>\n<p>chromium fork 自开源引擎 webkit，却把 WebKit 的代码梳理得可读性提高很多，所以以前可能需要一天进行编译的代码，现在只要两个小时就能搞定。因此 Chromium 引擎和其它基于 WebKit 的引擎所渲染页面的效果也是有出入的。所以有些地方会把 chromium 引擎和 webkit 区分开来单独介绍，而有的文章把 chromium 归入 webkit 引擎中，都是有一定道理的。</p>\n<p>谷歌公司还研发了自己的 Javascript 引擎，V8，极大地提高了 Javascript 的运算速度。</p>\n<p>chromium 问世后，带动了国产浏览器行业的发展。一些基于 chromium 的单核，双核浏览器如雨后春笋般拔地而起，例如 搜狗、360、QQ浏览器等等，无一不是套着不同的外壳用着相同的内核。</p>\n<p>然而 2013 年 4 月 3 日，谷歌在 Chromium Blog 上发表 博客，称将与苹果的开源浏览器核心 Webkit 分道扬镳，在 Chromium 项目中研发 Blink 渲染引擎（即浏览器核心），内置于 Chrome 浏览器之中。</p>\n<p>webkit 用的好好的，为何要投入到一个新的内核中去呢？</p>\n<p>Blink 其实是 WebKit 的分支，如同 WebKit 是 KHTML 的分支。Google 的 Chromium 项目此前一直使用 WebKit(WebCore) 作为渲染引擎，但出于某种原因，并没有将其多进程架构移植入Webkit。</p>\n<p>后来，由于苹果推出的 WebKit2 与 Chromium 的沙箱设计存在冲突，所以 Chromium 一直停留在 WebKit，并使用移植的方式来实现和主线 WebKit2 的对接。这增加了 Chromium 的复杂性，且在一定程度上影响了 Chromium 的架构移植工作。</p>\n<p>基于以上原因，Google 决定从 WebKit 衍生出自己的 Blink 引擎（后由 Google 和 Opera Software 共同研发），将在 WebKit 代码的基础上研发更加快速和简约的渲染引擎，并逐步脱离 WebKit 的影响，创造一个完全独立的 Blink 引擎。这样以来，唯一一条维系 Google 和苹果之间技术关系的纽带就这样被切断了。</p>\n<p>Google 和苹果在多个领域都是竞争对手，而唯独在浏览器引擎上有技术合作，利益一致。但为了各自的利益，谁都不会拿出 100% 的 “诚意” 来做好 WebKit，因为你做出来的成果竞争对手可以直接享用。移动互联网已经崛起，手机和平板设备端必将成为浏览器的另一个战场。这个时候，如果 Google 跟苹果仍然黏在一起，将会严重阻碍双方的进步，也会阻碍 WebKit 的进步。</p>\n<h4 id=\"Presto-‘prestəʊ\"><a href=\"#Presto-‘prestəʊ\" class=\"headerlink\" title=\"Presto ([‘prestəʊ])\"></a>Presto ([‘prestəʊ])</h4><p>Presto 是挪威产浏览器 opera 的 “前任” 内核，为何说是 “前任”，因为最新的 opera 浏览器早已将之抛弃从而投入到了谷歌大本营。</p>\n<p>Opera 的一个里程碑作品是 Opera7.0，因为它使用了 Opera Software 自主开发的 Presto 渲染引擎，取代了旧版 Opera 4 至 6 版本使用的 Elektra 排版引擎。该款引擎的特点就是渲染速度的优化达到了极致，然而代价是牺牲了网页的兼容性。</p>\n<p>Presto 加入了动态功能，例如网页或其部分可随着 DOM 及 Script 语法的事件而重新排版。Presto 在推出后不断有更新版本推出，使不少错误得以修正，以及阅读 Javascript 效能得以最佳化，并成为当时速度最快的引擎。</p>\n<p>然而为了减少研发成本，Opera 在 2013 年 2 月宣布放弃 Presto，转而跟随 Chrome 使用 WebKit 分支的 Chromium 引擎作为自家浏览器核心引擎，Presto 内核的 Opera 浏览器版本永远的停留在了 12.17。在 Chrome 于 2013 年推出 Blink 引擎之后，Opera 也紧跟其脚步表示将转而使用 Blink 作为浏览器核心引擎。</p>\n<p>Presto 与开源的 WebKit 和经过谷歌加持的 Chromium 系列相比毫无推广上的优势，这是 Opera 转投 WebKit 的主要原因，并且使用 WebKit 内核的 Opera 浏览器可以兼容谷歌 Chrome 浏览器海量的插件资源。但是换内核的代价对于 Opera 来说过于惨痛。使用谷歌的 WebKit 内核之后，原本快速，轻量化，稳定的 Opera 浏览器变得异常的卡顿，而且表现不稳定，Opera 原本旧内核浏览器书签同步到新内核上的工作 Opera 花了整整两年时间，期间很多 Opera 的用户纷纷转投谷歌浏览器和其他浏览器，造成了众多的用户流失。时至今日现在还有上千万人在使用老版本的 Opera。</p>\n<p>很多人都认为 Opera 浏览器终止在了 12.17，此后所更新的 Opera 版本号不再是原来那个 Opera。</p>\n<hr>\n<h3 id=\"关于移动端\"><a href=\"#关于移动端\" class=\"headerlink\" title=\"关于移动端\"></a>关于移动端</h3><p>移动端的浏览器内核主要说的是系统内置浏览器的内核。</p>\n<p>目前移动设备浏览器上常用的内核有 Webkit，Blink，Trident，Gecko 等，其中 iPhone 和 iPad 等苹果 iOS 平台主要是 WebKit，Android 4.4 之前的 Android 系统浏览器内核是 WebKit，Android4.4 系统浏览器切换到了Chromium，内核是 Webkit 的分支 Blink，Windows Phone 8 系统浏览器内核是 Trident。</p>\n<hr>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>浏览器内核主要指的是浏览器的渲染引擎，2013 年以前，代表有 Trident（IE），Gecko（firefox），Webkit（Safari chrome 等）以及 Presto（opera)。2013 年，谷歌开始研发 blink 引擎，chrome 28 以后开始使用，而 opera 则放弃了自主研发的 Presto 引擎，投入谷歌怀抱，和谷歌一起研发 blink 引擎，国内各种 chrome系的浏览器（360、UC、QQ、2345 等等）也纷纷放弃 webkit，投入 blink 的怀抱。</p>"},{"title":"CSS Code Rules","date":"2019-01-22T08:44:59.000Z","clearReading":true,"thumbnailImage":"20190122.png","thumbnailImagePosition":"left","coverImage":"cover.jpg","coverCaption":"Hello World, Hello Programming","coverSize":"partial","comments":0,"_content":"\nCSS编码规范\n<!--more-->\n\n### 1 前言\nCSS作为网页样式的描述语言，在百度一直有着广泛的应用。本文档的目标是使CSS代码风格保持一致，容易被理解和被维护。\n\n虽然本文档是针对CSS设计的，但是在使用各种CSS的预编译器(如less、sass、stylus等)时，适用的部分也应尽量遵循本文档的约定。\n\n### 2 代码风格\n\n#### 2.1 文件\n[建议] CSS 文件使用无 BOM 的 UTF-8 编码。\n解释：\n\nUTF-8 编码具有更广泛的适应性。BOM 在使用程序或工具处理文件时可能造成不必要的干扰。\n\n#### 2.2 缩进\n[强制] 使用 4 个空格做为一个缩进层级，不允许使用 2 个空格 或 tab 字符。\n\n示例：\n```CSS\n.selector {\n    margin: 0;\n    padding: 0;\n}\n```\n\n#### 2.3 空格\n[强制] 选择器 与 { 之间必须包含空格。\n示例：\n\n```CSS\n.selector {\n}\n```\n\n[强制] 属性名 与之后的 : 之间不允许包含空格， : 与 属性值 之间必须包含空格。\n示例：\n\n```CSS\nmargin: 0;\n```\n\n[强制] 列表型属性值 书写在单行时，, 后必须跟一个空格。\n示例：\n\n```CSS\nfont-family: Arial, sans-serif;\n```\n\n#### 2.4 行长度\n\n[强制] 每行不得超过 120 个字符，除非单行不可分割。\n解释：\n\n常见不可分割的场景为URL超长。\n\n[建议] 对于超长的样式，在样式值的 空格 处或 , 后换行，建议按逻辑分组。\n示例：\n```CSS\n/* 不同属性值按逻辑分组 */\nbackground:\n    transparent url(aVeryVeryVeryLongUrlIsPlacedHere)\n    no-repeat 0 0;\n\n/* 可重复多次的属性，每次重复一行 */\nbackground-image:\n    url(aVeryVeryVeryLongUrlIsPlacedHere)\n    url(anotherVeryVeryVeryLongUrlIsPlacedHere);\n\n/* 类似函数的属性值可以根据函数调用的缩进进行 */\nbackground-image: -webkit-gradient(\n    linear,\n    left bottom,\n    left top,\n    color-stop(0.04, rgb(88,94,124)),\n    color-stop(0.52, rgb(115,123,162))\n);\n```\n\n#### 2.5 选择器\n[强制] 当一个 rule 包含多个 selector 时，每个选择器声明必须独占一行。\n示例：\n```CSS\n/* good */\n.post,\n.page,\n.comment {\n    line-height: 1.5;\n}\n\n/* bad */\n.post, .page, .comment {\n    line-height: 1.5;\n}\n```\n[强制] >、+、~ 选择器的两边各保留一个空格。\n示例：\n```CSS\n/* good */\nmain > nav {\n    padding: 10px;\n}\n\nlabel + input {\n    margin-left: 5px;\n}\n\ninput:checked ~ button {\n    background-color: #69C;\n}\n\n/* bad */\nmain>nav {\n    padding: 10px;\n}\n\nlabel+input {\n    margin-left: 5px;\n}\n\ninput:checked~button {\n    background-color: #69C;\n}\n```\n\n[强制] 属性选择器中的值必须用双引号包围。\n解释：\n\n不允许使用单引号，不允许不使用引号。\n\n示例：\n```CSS\n/* good */\narticle[character=\"juliet\"] {\n    voice-family: \"Vivien Leigh\", victoria, female\n}\n\n/* bad */\narticle[character='juliet'] {\n    voice-family: \"Vivien Leigh\", victoria, female\n}\n```\n\n#### 2.6 属性\n[强制] 属性定义必须另起一行。\n\n示例：\n\n```CSS\n/* good */\n.selector {\n    margin: 0;\n    padding: 0;\n}\n\n/* bad */\n.selector { margin: 0; padding: 0; }\n[强制] 属性定义后必须以分号结尾。\n示例：\n```\n\n```CSS\n/* good */\n.selector {\n    margin: 0;\n}\n\n/* bad */\n.selector {\n    margin: 0\n}\n```\n\n### 3 通用\n#### 3.1 选择器\n[强制] 如无必要，不得为 id、class 选择器添加类型选择器进行限定。\n解释：\n\n在性能和维护性上，都有一定的影响。\n\n示例：\n```CSS\n/* good */\n#error,\n.danger-message {\n    font-color: #c00;\n}\n\n/* bad */\ndialog#error,\np.danger-message {\n    font-color: #c00;\n}\n```\n\n[建议] 选择器的嵌套层级应不大于 3 级，位置靠后的限定条件应尽可能精确。\n示例：\n\n```CSS\n/* good */\n#username input {}\n.comment .avatar {}\n\n/* bad */\n.page .header .login #username input {}\n.comment div * {}\n```\n\n#### 3.2 属性缩写\n\n[建议] 在可以使用缩写的情况下，尽量使用属性缩写。\n示例：\n```CSS\n/* good */\n.post {\n    font: 12px/1.5 arial, sans-serif;\n}\n\n/* bad */\n.post {\n    font-family: arial, sans-serif;\n    font-size: 12px;\n    line-height: 1.5;\n}\n```\n\n[建议] 使用 border / margin / padding 等缩写时，应注意隐含值对实际数值的影响，确实需要设置多个方向的值时才使用缩写。\n解释：\n\nborder / margin / padding 等缩写会同时设置多个属性的值，容易覆盖不需要覆盖的设定。如某些方向需要继承其他声明的值，则应该分开设置。\n\n示例：\n```CSS\n/* centering <article class=\"page\"> horizontally and highlight featured ones */\narticle {\n    margin: 5px;\n    border: 1px solid #999;\n}\n\n/* good */\n.page {\n    margin-right: auto;\n    margin-left: auto;\n}\n\n.featured {\n    border-color: #69c;\n}\n\n/* bad */\n.page {\n    margin: 5px auto; /* introducing redundancy */\n}\n\n.featured {\n    border: 1px solid #69c; /* introducing redundancy */\n}\n```\n\n#### 3.3 属性书写顺序\n\n[建议] 同一 rule set 下的属性在书写时，应按功能进行分组，并以 Formatting Model（布局方式、位置） > Box Model（尺寸） > Typographic（文本相关） > Visual（视觉效果） 的顺序书写，以提高代码的可读性。\n解释：\n\nFormatting Model 相关属性包括：position / top / right / bottom / left / float / display / overflow 等\nBox Model 相关属性包括：border / margin / padding / width / height 等\nTypographic 相关属性包括：font / line-height / text-align / word-wrap 等\nVisual 相关属性包括：background / color / transition / list-style 等\n另外，如果包含 content 属性，应放在最前面。\n\n示例：\n```CSS\n.sidebar {\n    /* formatting model: positioning schemes / offsets / z-indexes / display / ...  */\n    position: absolute;\n    top: 50px;\n    left: 0;\n    overflow-x: hidden;\n\n    /* box model: sizes / margins / paddings / borders / ...  */\n    width: 200px;\n    padding: 5px;\n    border: 1px solid #ddd;\n\n    /* typographic: font / aligns / text styles / ... */\n    font-size: 14px;\n    line-height: 20px;\n\n    /* visual: colors / shadows / gradients / ... */\n    background: #f5f5f5;\n    color: #333;\n    -webkit-transition: color 1s;\n       -moz-transition: color 1s;\n            transition: color 1s;\n}\n```\n\n#### 3.4 清除浮动\n\n[建议] 当元素需要撑起高度以包含内部的浮动元素时，通过对伪类设置 clear 或触发 BFC 的方式进行 clearfix。尽量不使用增加空标签的方式。\n解释：\n\n触发 BFC 的方式很多，常见的有：\n\nfloat 非 none\nposition 非 static\noverflow 非 visible\n如希望使用更小副作用的清除浮动方法，参见 A new micro clearfix hack 一文。\n\n另需注意，对已经触发 BFC 的元素不需要再进行 clearfix。\n\n#### 3.5 !important\n[建议] 尽量不使用 !important 声明。\n[建议] 当需要强制指定样式且不允许任何场景覆盖时，通过标签内联和 !important 定义样式。\n解释：\n\n必须注意的是，仅在设计上 确实不允许任何其它场景覆盖样式 时，才使用内联的 !important 样式。通常在第三方环境的应用中使用这种方案。下面的 z-index 章节是其中一个特殊场景的典型样例。\n\n#### 3.6 z-index\n[建议] 将 z-index 进行分层，对文档流外绝对定位元素的视觉层级关系进行管理。\n解释：\n\n同层的多个元素，如多个由用户输入触发的 Dialog，在该层级内使用相同的 z-index 或递增 z-index。\n\n建议每层包含100个 z-index 来容纳足够的元素，如果每层元素较多，可以调整这个数值。\n\n[建议] 在可控环境下，期望显示在最上层的元素，z-index 指定为 999999。\n解释：\n\n可控环境分成两种，一种是自身产品线环境；还有一种是可能会被其他产品线引用，但是不会被外部第三方的产品引用。\n\n不建议取值为 2147483647。以便于自身产品线被其他产品线引用时，当遇到层级覆盖冲突的情况，留出向上调整的空间。\n\n[建议] 在第三方环境下，期望显示在最上层的元素，通过标签内联和 !important，将 z-index 指定为 2147483647。\n解释：\n\n第三方环境对于开发者来说完全不可控。在第三方环境下的元素，为了保证元素不被其页面其他样式定义覆盖，需要采用此做法。\n\n### 4 值与单位\n\n#### 4.1 文本\n\n[强制] 文本内容必须用双引号包围。\n解释：\n\n文本类型的内容可能在选择器、属性值等内容中。\n\n示例：\n```CSS\n/* good */\nhtml[lang|=\"zh\"] q:before {\n    font-family: \"Microsoft YaHei\", sans-serif;\n    content: \"“\";\n}\n\nhtml[lang|=\"zh\"] q:after {\n    font-family: \"Microsoft YaHei\", sans-serif;\n    content: \"”\";\n}\n\n/* bad */\nhtml[lang|=zh] q:before {\n    font-family: 'Microsoft YaHei', sans-serif;\n    content: '“';\n}\n\nhtml[lang|=zh] q:after {\n    font-family: \"Microsoft YaHei\", sans-serif;\n    content: \"”\";\n}\n```\n\n#### 4.2 数值\n\n[强制] 当数值为 0 - 1 之间的小数时，省略整数部分的 0。\n示例：\n```CSS\n/* good */\npanel {\n    opacity: .8\n}\n\n/* bad */\npanel {\n    opacity: 0.8\n}\n```\n\n#### 4.3 url()\n\n[强制] url() 函数中的路径不加引号。\n示例：\n```CSS\nbody {\n    background: url(bg.png);\n}\n```\n\n[建议] url() 函数中的绝对路径可省去协议名。\n示例：\n```CSS\nbody {\n    background: url(//baidu.com/img/bg.png) no-repeat 0 0;\n}\n```\n\n#### 4.4 长度\n\n[强制] 长度为 0 时须省略单位。 (也只有长度单位可省)\n示例：\n```CSS\n/* good */\nbody {\n    padding: 0 5px;\n}\n\n/* bad */\nbody {\n    padding: 0px 5px;\n}\n```\n\n#### 4.5 颜色\n\n[强制] RGB颜色值必须使用十六进制记号形式 #rrggbb。不允许使用 rgb()。\n解释：\n\n带有alpha的颜色信息可以使用 rgba()。使用 rgba() 时每个逗号后必须保留一个空格。\n\n示例：\n```CSS\n/* good */\n.success {\n    box-shadow: 0 0 2px rgba(0, 128, 0, .3);\n    border-color: #008000;\n}\n\n/* bad */\n.success {\n    box-shadow: 0 0 2px rgba(0,128,0,.3);\n    border-color: rgb(0, 128, 0);\n}\n```\n\n[强制] 颜色值可以缩写时，必须使用缩写形式。\n示例：\n```CSS\n/* good */\n.success {\n    background-color: #aca;\n}\n\n/* bad */\n.success {\n    background-color: #aaccaa;\n}\n```\n\n[强制] 颜色值不允许使用命名色值。\n示例：\n```CSS\n/* good */\n.success {\n    color: #90ee90;\n}\n\n/* bad */\n.success {\n    color: lightgreen;\n}\n```\n\n[建议] 颜色值中的英文字符采用小写。如不用小写也需要保证同一项目内保持大小写一致。\n示例：\n```CSS\n/* good */\n.success {\n    background-color: #aca;\n    color: #90ee90;\n}\n\n/* good */\n.success {\n    background-color: #ACA;\n    color: #90EE90;\n}\n\n/* bad */\n.success {\n    background-color: #ACA;\n    color: #90ee90;\n}\n```\n\n#### 4.6 2D 位置\n\n[强制] 必须同时给出水平和垂直方向的位置。\n解释：\n\n2D 位置初始值为 0% 0%，但在只有一个方向的值时，另一个方向的值会被解析为 center。为避免理解上的困扰，应同时给出两个方向的值。background-position属性值的定义\n\n示例：\n```CSS\n/* good */\nbody {\n    background-position: center top; /* 50% 0% */\n}\n\n/* bad */\nbody {\n    background-position: top; /* 50% 0% */\n}\n```\n\n### 5 文本编排\n#### 5.1 字体族\n\n[强制] font-family 属性中的字体族名称应使用字体的英文 Family Name，其中如有空格，须放置在引号中。\n解释：\n\n所谓英文 Family Name，为字体文件的一个元数据，常见名称如下：\n\n字体\t操作系统\tFamily Name\n宋体 (中易宋体)\tWindows\tSimSun\n黑体 (中易黑体)\tWindows\tSimHei\n微软雅黑\tWindows\tMicrosoft YaHei\n微软正黑\tWindows\tMicrosoft JhengHei\n华文黑体\tMac/iOS\tSTHeiti\n冬青黑体\tMac/iOS\tHiragino Sans GB\n文泉驿正黑\tLinux\tWenQuanYi Zen Hei\n文泉驿微米黑\tLinux\tWenQuanYi Micro Hei\n示例：\n\n```CSS\nh1 {\n    font-family: \"Microsoft YaHei\";\n}\n```\n\n[强制] font-family 按「西文字体在前、中文字体在后」、「效果佳 (质量高/更能满足需求) 的字体在前、效果一般的字体在后」的顺序编写，最后必须指定一个通用字体族( serif / sans-serif )。\n解释：\n\n更详细说明可参考本文。\n\n示例：\n```CSS\n/* Display according to platform */\n.article {\n    font-family: Arial, sans-serif;\n}\n\n/* Specific for most platforms */\nh1 {\n    font-family: \"Helvetica Neue\", Arial, \"Hiragino Sans GB\", \"WenQuanYi Micro Hei\", \"Microsoft YaHei\", sans-serif;\n}\n```\n\n[强制] font-family 不区分大小写，但在同一个项目中，同样的 Family Name 大小写必须统一。\n示例：\n```CSS\n/* good */\nbody {\n    font-family: Arial, sans-serif;\n}\n\nh1 {\n    font-family: Arial, \"Microsoft YaHei\", sans-serif;\n}\n\n/* bad */\nbody {\n    font-family: arial, sans-serif;\n}\n\nh1 {\n    font-family: Arial, \"Microsoft YaHei\", sans-serif;\n}\n```\n\n#### 5.2 字号\n[强制] 需要在 Windows 平台显示的中文内容，其字号应不小于 12px。\n解释：\n\n由于 Windows 的字体渲染机制，小于 12px 的文字显示效果极差、难以辨认。\n\n#### 5.3 字体风格\n[建议] 需要在 Windows 平台显示的中文内容，不要使用除 normal 外的 font-style。其他平台也应慎用。\n解释：\n\n由于中文字体没有 italic 风格的实现，所有浏览器下都会 fallback 到 obilique 实现 (自动拟合为斜体)，小字号下 (特别是 Windows 下会在小字号下使用点阵字体的情况下) 显示效果差，造成阅读困难。\n\n#### 5.4 字重\n[强制] font-weight 属性必须使用数值方式描述。\n解释：\n\nCSS 的字重分 100 – 900 共九档，但目前受字体本身质量和浏览器的限制，实际上支持 400 和 700 两档，分别等价于关键词 normal 和 bold。\n\n浏览器本身使用一系列启发式规则来进行匹配，在 <700 时一般匹配字体的=\"\" regular=\"\" 字重，=\"\">=700 时匹配 Bold 字重。\n但已有浏览器开始支持 =600 时匹配 Semibold 字重 (见此表)，故使用数值描述增加了灵活性，也更简短。\n\n示例：\n```CSS\n/* good */\nh1 {\n    font-weight: 700;\n}\n\n/* bad */\nh1 {\n    font-weight: bold;\n}\n```\n\n#### 5.5 行高\n[建议] line-height 在定义文本段落时，应使用数值。\n解释：\n\n将 line-height 设置为数值，浏览器会基于当前元素设置的 font-size 进行再次计算。在不同字号的文本段落组合中，能达到较为舒适的行间间隔效果，避免在每个设置了 font-size 都需要设置 line-height。\n\n当 line-height 用于控制垂直居中时，还是应该设置成与容器高度一致。\n\n示例：\n\n```CSS\n.container {\n    line-height: 1.5;\n}\n```\n\n### 6 变换与动画\n[强制] 使用 transition 时应指定 transition-property。\n示例：\n```CSS\n/* good */\n.box {\n    transition: color 1s, border-color 1s;\n}\n\n/* bad */\n.box {\n    transition: all 1s;\n}\n```\n\n[建议] 尽可能在浏览器能高效实现的属性上添加过渡和动画。\n解释：\n\n见本文，在可能的情况下应选择这样四种变换：\n\ntransform: translate(npx, npx);\ntransform: scale(n);\ntransform: rotate(ndeg);\nopacity: 0..1;\n典型的，可以使用 translate 来代替 left 作为动画属性。\n\n示例：\n```CSS\n/* good */\n.box {\n    transition: transform 1s;\n}\n.box:hover {\n    transform: translate(20px); /* move right for 20px */\n}\n\n/* bad */\n.box {\n    left: 0;\n    transition: left 1s;\n}\n.box:hover {\n    left: 20px; /* move right for 20px */\n}\n```\n\n### 7 响应式\n[强制] Media Query 不得单独编排，必须与相关的规则一起定义。\n示例：\n```CSS\n/* Good */\n/* header styles */\n@media (...) {\n    /* header styles */\n}\n\n/* main styles */\n@media (...) {\n    /* main styles */\n}\n\n/* footer styles */\n@media (...) {\n    /* footer styles */\n}\n\n\n/* Bad */\n/* header styles */\n/* main styles */\n/* footer styles */\n\n@media (...) {\n    /* header styles */\n    /* main styles */\n    /* footer styles */\n}\n```\n\n[强制] Media Query 如果有多个逗号分隔的条件时，应将每个条件放在单独一行中。\n示例：\n```CSS\n@media\n(-webkit-min-device-pixel-ratio: 2), /* Webkit-based browsers */\n(min--moz-device-pixel-ratio: 2),    /* Older Firefox browsers (prior to Firefox 16) */\n(min-resolution: 2dppx),             /* The standard way */\n(min-resolution: 192dpi) {           /* dppx fallback */\n    /* Retina-specific stuff here */\n}\n```\n\n[建议] 尽可能给出在高分辨率设备 (Retina) 下效果更佳的样式。\n\n### 8 兼容性\n\n#### 8.1 属性前缀\n\n[强制] 带私有前缀的属性由长到短排列，按冒号位置对齐。\n解释：\n\n标准属性放在最后，按冒号对齐方便阅读，也便于在编辑器内进行多行编辑。\n\n示例：\n```CSS\n.box {\n    -webkit-box-sizing: border-box;\n       -moz-box-sizing: border-box;\n            box-sizing: border-box;\n}\n```\n\n#### 8.2 Hack\n[建议] 需要添加 hack 时应尽可能考虑是否可以采用其他方式解决。\n解释：\n\n如果能通过合理的 HTML 结构或使用其他的 CSS 定义达到理想的样式，则不应该使用 hack 手段解决问题。通常 hack 会导致维护成本的增加。\n\n[建议] 尽量使用 选择器 hack 处理兼容性，而非 属性 hack。\n解释：\n\n尽量使用符合 CSS 语法的 selector hack，可以避免一些第三方库无法识别 hack 语法的问题。\n\n示例：\n```CSS\n/* IE 7 */\n*:first-child + html #header {\n    margin-top: 3px;\n    padding: 5px;\n}\n\n/* IE 6 */\n* html #header {\n    margin-top: 5px;\n    padding: 4px;\n}\n```\n\n[建议] 尽量使用简单的 属性 hack。\n示例：\n```CSS\n.box {\n    _display: inline; /* fix double margin */\n    float: left;\n    margin-left: 20px;\n}\n\n.container {\n    overflow: hidden;\n    *zoom: 1; /* triggering hasLayout */\n}\n```\n\n#### 8.3 Expression\n[强制] 禁止使用 Expression。\n","source":"_posts/CSS编码规范.md","raw":"---\ntitle: CSS Code Rules\ndate: 2019-01-22 17:44:59\ntags:\n- CSS\nclearReading: true\nthumbnailImage: 20190122.png\nthumbnailImagePosition: left\ncoverImage: cover.jpg\ncoverCaption: \"Hello World, Hello Programming\"\ncoverSize: partial\ncomments: false\ncategories: Front-end Knowledge\n---\n\nCSS编码规范\n<!--more-->\n\n### 1 前言\nCSS作为网页样式的描述语言，在百度一直有着广泛的应用。本文档的目标是使CSS代码风格保持一致，容易被理解和被维护。\n\n虽然本文档是针对CSS设计的，但是在使用各种CSS的预编译器(如less、sass、stylus等)时，适用的部分也应尽量遵循本文档的约定。\n\n### 2 代码风格\n\n#### 2.1 文件\n[建议] CSS 文件使用无 BOM 的 UTF-8 编码。\n解释：\n\nUTF-8 编码具有更广泛的适应性。BOM 在使用程序或工具处理文件时可能造成不必要的干扰。\n\n#### 2.2 缩进\n[强制] 使用 4 个空格做为一个缩进层级，不允许使用 2 个空格 或 tab 字符。\n\n示例：\n```CSS\n.selector {\n    margin: 0;\n    padding: 0;\n}\n```\n\n#### 2.3 空格\n[强制] 选择器 与 { 之间必须包含空格。\n示例：\n\n```CSS\n.selector {\n}\n```\n\n[强制] 属性名 与之后的 : 之间不允许包含空格， : 与 属性值 之间必须包含空格。\n示例：\n\n```CSS\nmargin: 0;\n```\n\n[强制] 列表型属性值 书写在单行时，, 后必须跟一个空格。\n示例：\n\n```CSS\nfont-family: Arial, sans-serif;\n```\n\n#### 2.4 行长度\n\n[强制] 每行不得超过 120 个字符，除非单行不可分割。\n解释：\n\n常见不可分割的场景为URL超长。\n\n[建议] 对于超长的样式，在样式值的 空格 处或 , 后换行，建议按逻辑分组。\n示例：\n```CSS\n/* 不同属性值按逻辑分组 */\nbackground:\n    transparent url(aVeryVeryVeryLongUrlIsPlacedHere)\n    no-repeat 0 0;\n\n/* 可重复多次的属性，每次重复一行 */\nbackground-image:\n    url(aVeryVeryVeryLongUrlIsPlacedHere)\n    url(anotherVeryVeryVeryLongUrlIsPlacedHere);\n\n/* 类似函数的属性值可以根据函数调用的缩进进行 */\nbackground-image: -webkit-gradient(\n    linear,\n    left bottom,\n    left top,\n    color-stop(0.04, rgb(88,94,124)),\n    color-stop(0.52, rgb(115,123,162))\n);\n```\n\n#### 2.5 选择器\n[强制] 当一个 rule 包含多个 selector 时，每个选择器声明必须独占一行。\n示例：\n```CSS\n/* good */\n.post,\n.page,\n.comment {\n    line-height: 1.5;\n}\n\n/* bad */\n.post, .page, .comment {\n    line-height: 1.5;\n}\n```\n[强制] >、+、~ 选择器的两边各保留一个空格。\n示例：\n```CSS\n/* good */\nmain > nav {\n    padding: 10px;\n}\n\nlabel + input {\n    margin-left: 5px;\n}\n\ninput:checked ~ button {\n    background-color: #69C;\n}\n\n/* bad */\nmain>nav {\n    padding: 10px;\n}\n\nlabel+input {\n    margin-left: 5px;\n}\n\ninput:checked~button {\n    background-color: #69C;\n}\n```\n\n[强制] 属性选择器中的值必须用双引号包围。\n解释：\n\n不允许使用单引号，不允许不使用引号。\n\n示例：\n```CSS\n/* good */\narticle[character=\"juliet\"] {\n    voice-family: \"Vivien Leigh\", victoria, female\n}\n\n/* bad */\narticle[character='juliet'] {\n    voice-family: \"Vivien Leigh\", victoria, female\n}\n```\n\n#### 2.6 属性\n[强制] 属性定义必须另起一行。\n\n示例：\n\n```CSS\n/* good */\n.selector {\n    margin: 0;\n    padding: 0;\n}\n\n/* bad */\n.selector { margin: 0; padding: 0; }\n[强制] 属性定义后必须以分号结尾。\n示例：\n```\n\n```CSS\n/* good */\n.selector {\n    margin: 0;\n}\n\n/* bad */\n.selector {\n    margin: 0\n}\n```\n\n### 3 通用\n#### 3.1 选择器\n[强制] 如无必要，不得为 id、class 选择器添加类型选择器进行限定。\n解释：\n\n在性能和维护性上，都有一定的影响。\n\n示例：\n```CSS\n/* good */\n#error,\n.danger-message {\n    font-color: #c00;\n}\n\n/* bad */\ndialog#error,\np.danger-message {\n    font-color: #c00;\n}\n```\n\n[建议] 选择器的嵌套层级应不大于 3 级，位置靠后的限定条件应尽可能精确。\n示例：\n\n```CSS\n/* good */\n#username input {}\n.comment .avatar {}\n\n/* bad */\n.page .header .login #username input {}\n.comment div * {}\n```\n\n#### 3.2 属性缩写\n\n[建议] 在可以使用缩写的情况下，尽量使用属性缩写。\n示例：\n```CSS\n/* good */\n.post {\n    font: 12px/1.5 arial, sans-serif;\n}\n\n/* bad */\n.post {\n    font-family: arial, sans-serif;\n    font-size: 12px;\n    line-height: 1.5;\n}\n```\n\n[建议] 使用 border / margin / padding 等缩写时，应注意隐含值对实际数值的影响，确实需要设置多个方向的值时才使用缩写。\n解释：\n\nborder / margin / padding 等缩写会同时设置多个属性的值，容易覆盖不需要覆盖的设定。如某些方向需要继承其他声明的值，则应该分开设置。\n\n示例：\n```CSS\n/* centering <article class=\"page\"> horizontally and highlight featured ones */\narticle {\n    margin: 5px;\n    border: 1px solid #999;\n}\n\n/* good */\n.page {\n    margin-right: auto;\n    margin-left: auto;\n}\n\n.featured {\n    border-color: #69c;\n}\n\n/* bad */\n.page {\n    margin: 5px auto; /* introducing redundancy */\n}\n\n.featured {\n    border: 1px solid #69c; /* introducing redundancy */\n}\n```\n\n#### 3.3 属性书写顺序\n\n[建议] 同一 rule set 下的属性在书写时，应按功能进行分组，并以 Formatting Model（布局方式、位置） > Box Model（尺寸） > Typographic（文本相关） > Visual（视觉效果） 的顺序书写，以提高代码的可读性。\n解释：\n\nFormatting Model 相关属性包括：position / top / right / bottom / left / float / display / overflow 等\nBox Model 相关属性包括：border / margin / padding / width / height 等\nTypographic 相关属性包括：font / line-height / text-align / word-wrap 等\nVisual 相关属性包括：background / color / transition / list-style 等\n另外，如果包含 content 属性，应放在最前面。\n\n示例：\n```CSS\n.sidebar {\n    /* formatting model: positioning schemes / offsets / z-indexes / display / ...  */\n    position: absolute;\n    top: 50px;\n    left: 0;\n    overflow-x: hidden;\n\n    /* box model: sizes / margins / paddings / borders / ...  */\n    width: 200px;\n    padding: 5px;\n    border: 1px solid #ddd;\n\n    /* typographic: font / aligns / text styles / ... */\n    font-size: 14px;\n    line-height: 20px;\n\n    /* visual: colors / shadows / gradients / ... */\n    background: #f5f5f5;\n    color: #333;\n    -webkit-transition: color 1s;\n       -moz-transition: color 1s;\n            transition: color 1s;\n}\n```\n\n#### 3.4 清除浮动\n\n[建议] 当元素需要撑起高度以包含内部的浮动元素时，通过对伪类设置 clear 或触发 BFC 的方式进行 clearfix。尽量不使用增加空标签的方式。\n解释：\n\n触发 BFC 的方式很多，常见的有：\n\nfloat 非 none\nposition 非 static\noverflow 非 visible\n如希望使用更小副作用的清除浮动方法，参见 A new micro clearfix hack 一文。\n\n另需注意，对已经触发 BFC 的元素不需要再进行 clearfix。\n\n#### 3.5 !important\n[建议] 尽量不使用 !important 声明。\n[建议] 当需要强制指定样式且不允许任何场景覆盖时，通过标签内联和 !important 定义样式。\n解释：\n\n必须注意的是，仅在设计上 确实不允许任何其它场景覆盖样式 时，才使用内联的 !important 样式。通常在第三方环境的应用中使用这种方案。下面的 z-index 章节是其中一个特殊场景的典型样例。\n\n#### 3.6 z-index\n[建议] 将 z-index 进行分层，对文档流外绝对定位元素的视觉层级关系进行管理。\n解释：\n\n同层的多个元素，如多个由用户输入触发的 Dialog，在该层级内使用相同的 z-index 或递增 z-index。\n\n建议每层包含100个 z-index 来容纳足够的元素，如果每层元素较多，可以调整这个数值。\n\n[建议] 在可控环境下，期望显示在最上层的元素，z-index 指定为 999999。\n解释：\n\n可控环境分成两种，一种是自身产品线环境；还有一种是可能会被其他产品线引用，但是不会被外部第三方的产品引用。\n\n不建议取值为 2147483647。以便于自身产品线被其他产品线引用时，当遇到层级覆盖冲突的情况，留出向上调整的空间。\n\n[建议] 在第三方环境下，期望显示在最上层的元素，通过标签内联和 !important，将 z-index 指定为 2147483647。\n解释：\n\n第三方环境对于开发者来说完全不可控。在第三方环境下的元素，为了保证元素不被其页面其他样式定义覆盖，需要采用此做法。\n\n### 4 值与单位\n\n#### 4.1 文本\n\n[强制] 文本内容必须用双引号包围。\n解释：\n\n文本类型的内容可能在选择器、属性值等内容中。\n\n示例：\n```CSS\n/* good */\nhtml[lang|=\"zh\"] q:before {\n    font-family: \"Microsoft YaHei\", sans-serif;\n    content: \"“\";\n}\n\nhtml[lang|=\"zh\"] q:after {\n    font-family: \"Microsoft YaHei\", sans-serif;\n    content: \"”\";\n}\n\n/* bad */\nhtml[lang|=zh] q:before {\n    font-family: 'Microsoft YaHei', sans-serif;\n    content: '“';\n}\n\nhtml[lang|=zh] q:after {\n    font-family: \"Microsoft YaHei\", sans-serif;\n    content: \"”\";\n}\n```\n\n#### 4.2 数值\n\n[强制] 当数值为 0 - 1 之间的小数时，省略整数部分的 0。\n示例：\n```CSS\n/* good */\npanel {\n    opacity: .8\n}\n\n/* bad */\npanel {\n    opacity: 0.8\n}\n```\n\n#### 4.3 url()\n\n[强制] url() 函数中的路径不加引号。\n示例：\n```CSS\nbody {\n    background: url(bg.png);\n}\n```\n\n[建议] url() 函数中的绝对路径可省去协议名。\n示例：\n```CSS\nbody {\n    background: url(//baidu.com/img/bg.png) no-repeat 0 0;\n}\n```\n\n#### 4.4 长度\n\n[强制] 长度为 0 时须省略单位。 (也只有长度单位可省)\n示例：\n```CSS\n/* good */\nbody {\n    padding: 0 5px;\n}\n\n/* bad */\nbody {\n    padding: 0px 5px;\n}\n```\n\n#### 4.5 颜色\n\n[强制] RGB颜色值必须使用十六进制记号形式 #rrggbb。不允许使用 rgb()。\n解释：\n\n带有alpha的颜色信息可以使用 rgba()。使用 rgba() 时每个逗号后必须保留一个空格。\n\n示例：\n```CSS\n/* good */\n.success {\n    box-shadow: 0 0 2px rgba(0, 128, 0, .3);\n    border-color: #008000;\n}\n\n/* bad */\n.success {\n    box-shadow: 0 0 2px rgba(0,128,0,.3);\n    border-color: rgb(0, 128, 0);\n}\n```\n\n[强制] 颜色值可以缩写时，必须使用缩写形式。\n示例：\n```CSS\n/* good */\n.success {\n    background-color: #aca;\n}\n\n/* bad */\n.success {\n    background-color: #aaccaa;\n}\n```\n\n[强制] 颜色值不允许使用命名色值。\n示例：\n```CSS\n/* good */\n.success {\n    color: #90ee90;\n}\n\n/* bad */\n.success {\n    color: lightgreen;\n}\n```\n\n[建议] 颜色值中的英文字符采用小写。如不用小写也需要保证同一项目内保持大小写一致。\n示例：\n```CSS\n/* good */\n.success {\n    background-color: #aca;\n    color: #90ee90;\n}\n\n/* good */\n.success {\n    background-color: #ACA;\n    color: #90EE90;\n}\n\n/* bad */\n.success {\n    background-color: #ACA;\n    color: #90ee90;\n}\n```\n\n#### 4.6 2D 位置\n\n[强制] 必须同时给出水平和垂直方向的位置。\n解释：\n\n2D 位置初始值为 0% 0%，但在只有一个方向的值时，另一个方向的值会被解析为 center。为避免理解上的困扰，应同时给出两个方向的值。background-position属性值的定义\n\n示例：\n```CSS\n/* good */\nbody {\n    background-position: center top; /* 50% 0% */\n}\n\n/* bad */\nbody {\n    background-position: top; /* 50% 0% */\n}\n```\n\n### 5 文本编排\n#### 5.1 字体族\n\n[强制] font-family 属性中的字体族名称应使用字体的英文 Family Name，其中如有空格，须放置在引号中。\n解释：\n\n所谓英文 Family Name，为字体文件的一个元数据，常见名称如下：\n\n字体\t操作系统\tFamily Name\n宋体 (中易宋体)\tWindows\tSimSun\n黑体 (中易黑体)\tWindows\tSimHei\n微软雅黑\tWindows\tMicrosoft YaHei\n微软正黑\tWindows\tMicrosoft JhengHei\n华文黑体\tMac/iOS\tSTHeiti\n冬青黑体\tMac/iOS\tHiragino Sans GB\n文泉驿正黑\tLinux\tWenQuanYi Zen Hei\n文泉驿微米黑\tLinux\tWenQuanYi Micro Hei\n示例：\n\n```CSS\nh1 {\n    font-family: \"Microsoft YaHei\";\n}\n```\n\n[强制] font-family 按「西文字体在前、中文字体在后」、「效果佳 (质量高/更能满足需求) 的字体在前、效果一般的字体在后」的顺序编写，最后必须指定一个通用字体族( serif / sans-serif )。\n解释：\n\n更详细说明可参考本文。\n\n示例：\n```CSS\n/* Display according to platform */\n.article {\n    font-family: Arial, sans-serif;\n}\n\n/* Specific for most platforms */\nh1 {\n    font-family: \"Helvetica Neue\", Arial, \"Hiragino Sans GB\", \"WenQuanYi Micro Hei\", \"Microsoft YaHei\", sans-serif;\n}\n```\n\n[强制] font-family 不区分大小写，但在同一个项目中，同样的 Family Name 大小写必须统一。\n示例：\n```CSS\n/* good */\nbody {\n    font-family: Arial, sans-serif;\n}\n\nh1 {\n    font-family: Arial, \"Microsoft YaHei\", sans-serif;\n}\n\n/* bad */\nbody {\n    font-family: arial, sans-serif;\n}\n\nh1 {\n    font-family: Arial, \"Microsoft YaHei\", sans-serif;\n}\n```\n\n#### 5.2 字号\n[强制] 需要在 Windows 平台显示的中文内容，其字号应不小于 12px。\n解释：\n\n由于 Windows 的字体渲染机制，小于 12px 的文字显示效果极差、难以辨认。\n\n#### 5.3 字体风格\n[建议] 需要在 Windows 平台显示的中文内容，不要使用除 normal 外的 font-style。其他平台也应慎用。\n解释：\n\n由于中文字体没有 italic 风格的实现，所有浏览器下都会 fallback 到 obilique 实现 (自动拟合为斜体)，小字号下 (特别是 Windows 下会在小字号下使用点阵字体的情况下) 显示效果差，造成阅读困难。\n\n#### 5.4 字重\n[强制] font-weight 属性必须使用数值方式描述。\n解释：\n\nCSS 的字重分 100 – 900 共九档，但目前受字体本身质量和浏览器的限制，实际上支持 400 和 700 两档，分别等价于关键词 normal 和 bold。\n\n浏览器本身使用一系列启发式规则来进行匹配，在 <700 时一般匹配字体的=\"\" regular=\"\" 字重，=\"\">=700 时匹配 Bold 字重。\n但已有浏览器开始支持 =600 时匹配 Semibold 字重 (见此表)，故使用数值描述增加了灵活性，也更简短。\n\n示例：\n```CSS\n/* good */\nh1 {\n    font-weight: 700;\n}\n\n/* bad */\nh1 {\n    font-weight: bold;\n}\n```\n\n#### 5.5 行高\n[建议] line-height 在定义文本段落时，应使用数值。\n解释：\n\n将 line-height 设置为数值，浏览器会基于当前元素设置的 font-size 进行再次计算。在不同字号的文本段落组合中，能达到较为舒适的行间间隔效果，避免在每个设置了 font-size 都需要设置 line-height。\n\n当 line-height 用于控制垂直居中时，还是应该设置成与容器高度一致。\n\n示例：\n\n```CSS\n.container {\n    line-height: 1.5;\n}\n```\n\n### 6 变换与动画\n[强制] 使用 transition 时应指定 transition-property。\n示例：\n```CSS\n/* good */\n.box {\n    transition: color 1s, border-color 1s;\n}\n\n/* bad */\n.box {\n    transition: all 1s;\n}\n```\n\n[建议] 尽可能在浏览器能高效实现的属性上添加过渡和动画。\n解释：\n\n见本文，在可能的情况下应选择这样四种变换：\n\ntransform: translate(npx, npx);\ntransform: scale(n);\ntransform: rotate(ndeg);\nopacity: 0..1;\n典型的，可以使用 translate 来代替 left 作为动画属性。\n\n示例：\n```CSS\n/* good */\n.box {\n    transition: transform 1s;\n}\n.box:hover {\n    transform: translate(20px); /* move right for 20px */\n}\n\n/* bad */\n.box {\n    left: 0;\n    transition: left 1s;\n}\n.box:hover {\n    left: 20px; /* move right for 20px */\n}\n```\n\n### 7 响应式\n[强制] Media Query 不得单独编排，必须与相关的规则一起定义。\n示例：\n```CSS\n/* Good */\n/* header styles */\n@media (...) {\n    /* header styles */\n}\n\n/* main styles */\n@media (...) {\n    /* main styles */\n}\n\n/* footer styles */\n@media (...) {\n    /* footer styles */\n}\n\n\n/* Bad */\n/* header styles */\n/* main styles */\n/* footer styles */\n\n@media (...) {\n    /* header styles */\n    /* main styles */\n    /* footer styles */\n}\n```\n\n[强制] Media Query 如果有多个逗号分隔的条件时，应将每个条件放在单独一行中。\n示例：\n```CSS\n@media\n(-webkit-min-device-pixel-ratio: 2), /* Webkit-based browsers */\n(min--moz-device-pixel-ratio: 2),    /* Older Firefox browsers (prior to Firefox 16) */\n(min-resolution: 2dppx),             /* The standard way */\n(min-resolution: 192dpi) {           /* dppx fallback */\n    /* Retina-specific stuff here */\n}\n```\n\n[建议] 尽可能给出在高分辨率设备 (Retina) 下效果更佳的样式。\n\n### 8 兼容性\n\n#### 8.1 属性前缀\n\n[强制] 带私有前缀的属性由长到短排列，按冒号位置对齐。\n解释：\n\n标准属性放在最后，按冒号对齐方便阅读，也便于在编辑器内进行多行编辑。\n\n示例：\n```CSS\n.box {\n    -webkit-box-sizing: border-box;\n       -moz-box-sizing: border-box;\n            box-sizing: border-box;\n}\n```\n\n#### 8.2 Hack\n[建议] 需要添加 hack 时应尽可能考虑是否可以采用其他方式解决。\n解释：\n\n如果能通过合理的 HTML 结构或使用其他的 CSS 定义达到理想的样式，则不应该使用 hack 手段解决问题。通常 hack 会导致维护成本的增加。\n\n[建议] 尽量使用 选择器 hack 处理兼容性，而非 属性 hack。\n解释：\n\n尽量使用符合 CSS 语法的 selector hack，可以避免一些第三方库无法识别 hack 语法的问题。\n\n示例：\n```CSS\n/* IE 7 */\n*:first-child + html #header {\n    margin-top: 3px;\n    padding: 5px;\n}\n\n/* IE 6 */\n* html #header {\n    margin-top: 5px;\n    padding: 4px;\n}\n```\n\n[建议] 尽量使用简单的 属性 hack。\n示例：\n```CSS\n.box {\n    _display: inline; /* fix double margin */\n    float: left;\n    margin-left: 20px;\n}\n\n.container {\n    overflow: hidden;\n    *zoom: 1; /* triggering hasLayout */\n}\n```\n\n#### 8.3 Expression\n[强制] 禁止使用 Expression。\n","slug":"CSS编码规范","published":1,"updated":"2019-11-23T23:54:38.000Z","layout":"post","photos":[],"link":"","_id":"ck3it6kdg007steyi3y6m0j5y","content":"<p>CSS编码规范</p>\n<a id=\"more\"></a>\n\n<h3 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1 前言\"></a>1 前言</h3><p>CSS作为网页样式的描述语言，在百度一直有着广泛的应用。本文档的目标是使CSS代码风格保持一致，容易被理解和被维护。</p>\n<p>虽然本文档是针对CSS设计的，但是在使用各种CSS的预编译器(如less、sass、stylus等)时，适用的部分也应尽量遵循本文档的约定。</p>\n<h3 id=\"2-代码风格\"><a href=\"#2-代码风格\" class=\"headerlink\" title=\"2 代码风格\"></a>2 代码风格</h3><h4 id=\"2-1-文件\"><a href=\"#2-1-文件\" class=\"headerlink\" title=\"2.1 文件\"></a>2.1 文件</h4><p>[建议] CSS 文件使用无 BOM 的 UTF-8 编码。<br>解释：</p>\n<p>UTF-8 编码具有更广泛的适应性。BOM 在使用程序或工具处理文件时可能造成不必要的干扰。</p>\n<h4 id=\"2-2-缩进\"><a href=\"#2-2-缩进\" class=\"headerlink\" title=\"2.2 缩进\"></a>2.2 缩进</h4><p>[强制] 使用 4 个空格做为一个缩进层级，不允许使用 2 个空格 或 tab 字符。</p>\n<p>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.selector</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-空格\"><a href=\"#2-3-空格\" class=\"headerlink\" title=\"2.3 空格\"></a>2.3 空格</h4><p>[强制] 选择器 与 { 之间必须包含空格。<br>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.selector</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>[强制] 属性名 与之后的 : 之间不允许包含空格， : 与 属性值 之间必须包含空格。<br>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">margin</span>: 0;</span><br></pre></td></tr></table></figure>\n\n<p>[强制] 列表型属性值 书写在单行时，, 后必须跟一个空格。<br>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">font-family</span>: <span class=\"selector-tag\">Arial</span>, <span class=\"selector-tag\">sans-serif</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-4-行长度\"><a href=\"#2-4-行长度\" class=\"headerlink\" title=\"2.4 行长度\"></a>2.4 行长度</h4><p>[强制] 每行不得超过 120 个字符，除非单行不可分割。<br>解释：</p>\n<p>常见不可分割的场景为URL超长。</p>\n<p>[建议] 对于超长的样式，在样式值的 空格 处或 , 后换行，建议按逻辑分组。<br>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 不同属性值按逻辑分组 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">background</span>:</span><br><span class=\"line\">    <span class=\"selector-tag\">transparent</span> <span class=\"selector-tag\">url</span>(<span class=\"selector-tag\">aVeryVeryVeryLongUrlIsPlacedHere</span>)</span><br><span class=\"line\">    <span class=\"selector-tag\">no-repeat</span> 0 0;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 可重复多次的属性，每次重复一行 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">background-image</span>:</span><br><span class=\"line\">    <span class=\"selector-tag\">url</span>(<span class=\"selector-tag\">aVeryVeryVeryLongUrlIsPlacedHere</span>)</span><br><span class=\"line\">    <span class=\"selector-tag\">url</span>(<span class=\"selector-tag\">anotherVeryVeryVeryLongUrlIsPlacedHere</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 类似函数的属性值可以根据函数调用的缩进进行 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">background-image</span>: <span class=\"selector-tag\">-webkit-gradient</span>(</span><br><span class=\"line\">    <span class=\"selector-tag\">linear</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">left</span> <span class=\"selector-tag\">bottom</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">left</span> <span class=\"selector-tag\">top</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">color-stop</span>(0<span class=\"selector-class\">.04</span>, <span class=\"selector-tag\">rgb</span>(88,94,124)),</span><br><span class=\"line\">    <span class=\"selector-tag\">color-stop</span>(0<span class=\"selector-class\">.52</span>, <span class=\"selector-tag\">rgb</span>(115,123,162))</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-5-选择器\"><a href=\"#2-5-选择器\" class=\"headerlink\" title=\"2.5 选择器\"></a>2.5 选择器</h4><p>[强制] 当一个 rule 包含多个 selector 时，每个选择器声明必须独占一行。<br>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-class\">.post</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.page</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.comment</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">1.5</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-class\">.post</span>, <span class=\"selector-class\">.page</span>, <span class=\"selector-class\">.comment</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">1.5</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>[强制] &gt;、+、~ 选择器的两边各保留一个空格。<br>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-tag\">main</span> &gt; <span class=\"selector-tag\">nav</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">label</span> + <span class=\"selector-tag\">input</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">:checked</span> ~ <span class=\"selector-tag\">button</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#69C</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-tag\">main</span>&gt;<span class=\"selector-tag\">nav</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">label</span>+<span class=\"selector-tag\">input</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">:checked</span>~<span class=\"selector-tag\">button</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#69C</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>[强制] 属性选择器中的值必须用双引号包围。<br>解释：</p>\n<p>不允许使用单引号，不允许不使用引号。</p>\n<p>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-tag\">article</span><span class=\"selector-attr\">[character=\"juliet\"]</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">voice-family</span>: <span class=\"string\">\"Vivien Leigh\"</span>, victoria, female</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-tag\">article</span><span class=\"selector-attr\">[character='juliet']</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">voice-family</span>: <span class=\"string\">\"Vivien Leigh\"</span>, victoria, female</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-6-属性\"><a href=\"#2-6-属性\" class=\"headerlink\" title=\"2.6 属性\"></a>2.6 属性</h4><p>[强制] 属性定义必须另起一行。</p>\n<p>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-class\">.selector</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-class\">.selector</span> &#123; <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>; <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-attr\">[强制]</span> 属性定义后必须以分号结尾。</span><br><span class=\"line\">示例：</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-class\">.selector</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-class\">.selector</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-通用\"><a href=\"#3-通用\" class=\"headerlink\" title=\"3 通用\"></a>3 通用</h3><h4 id=\"3-1-选择器\"><a href=\"#3-1-选择器\" class=\"headerlink\" title=\"3.1 选择器\"></a>3.1 选择器</h4><p>[强制] 如无必要，不得为 id、class 选择器添加类型选择器进行限定。<br>解释：</p>\n<p>在性能和维护性上，都有一定的影响。</p>\n<p>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-id\">#error</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.danger-message</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-color</span>: <span class=\"number\">#c00</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-tag\">dialog</span><span class=\"selector-id\">#error</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-class\">.danger-message</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-color</span>: <span class=\"number\">#c00</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>[建议] 选择器的嵌套层级应不大于 3 级，位置靠后的限定条件应尽可能精确。<br>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-id\">#username</span> <span class=\"selector-tag\">input</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.comment</span> <span class=\"selector-class\">.avatar</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-class\">.page</span> <span class=\"selector-class\">.header</span> <span class=\"selector-class\">.login</span> <span class=\"selector-id\">#username</span> <span class=\"selector-tag\">input</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.comment</span> <span class=\"selector-tag\">div</span> * &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-2-属性缩写\"><a href=\"#3-2-属性缩写\" class=\"headerlink\" title=\"3.2 属性缩写\"></a>3.2 属性缩写</h4><p>[建议] 在可以使用缩写的情况下，尽量使用属性缩写。<br>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-class\">.post</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font</span>: <span class=\"number\">12px</span>/<span class=\"number\">1.5</span> arial, sans-serif;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-class\">.post</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: arial, sans-serif;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">1.5</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>[建议] 使用 border / margin / padding 等缩写时，应注意隐含值对实际数值的影响，确实需要设置多个方向的值时才使用缩写。<br>解释：</p>\n<p>border / margin / padding 等缩写会同时设置多个属性的值，容易覆盖不需要覆盖的设定。如某些方向需要继承其他声明的值，则应该分开设置。</p>\n<p>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* centering &lt;article class=\"page\"&gt; horizontally and highlight featured ones */</span></span><br><span class=\"line\"><span class=\"selector-tag\">article</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#999</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-class\">.page</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-right</span>: auto;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.featured</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-color</span>: <span class=\"number\">#69c</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-class\">.page</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">5px</span> auto; <span class=\"comment\">/* introducing redundancy */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.featured</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#69c</span>; <span class=\"comment\">/* introducing redundancy */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-属性书写顺序\"><a href=\"#3-3-属性书写顺序\" class=\"headerlink\" title=\"3.3 属性书写顺序\"></a>3.3 属性书写顺序</h4><p>[建议] 同一 rule set 下的属性在书写时，应按功能进行分组，并以 Formatting Model（布局方式、位置） &gt; Box Model（尺寸） &gt; Typographic（文本相关） &gt; Visual（视觉效果） 的顺序书写，以提高代码的可读性。<br>解释：</p>\n<p>Formatting Model 相关属性包括：position / top / right / bottom / left / float / display / overflow 等<br>Box Model 相关属性包括：border / margin / padding / width / height 等<br>Typographic 相关属性包括：font / line-height / text-align / word-wrap 等<br>Visual 相关属性包括：background / color / transition / list-style 等<br>另外，如果包含 content 属性，应放在最前面。</p>\n<p>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.sidebar</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* formatting model: positioning schemes / offsets / z-indexes / display / ...  */</span></span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">overflow-x</span>: hidden;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* box model: sizes / margins / paddings / borders / ...  */</span></span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ddd</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* typographic: font / aligns / text styles / ... */</span></span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* visual: colors / shadows / gradients / ... */</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#f5f5f5</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-transition</span>: color <span class=\"number\">1s</span>;</span><br><span class=\"line\">       <span class=\"attribute\">-moz-transition</span>: color <span class=\"number\">1s</span>;</span><br><span class=\"line\">            <span class=\"attribute\">transition</span>: color <span class=\"number\">1s</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-4-清除浮动\"><a href=\"#3-4-清除浮动\" class=\"headerlink\" title=\"3.4 清除浮动\"></a>3.4 清除浮动</h4><p>[建议] 当元素需要撑起高度以包含内部的浮动元素时，通过对伪类设置 clear 或触发 BFC 的方式进行 clearfix。尽量不使用增加空标签的方式。<br>解释：</p>\n<p>触发 BFC 的方式很多，常见的有：</p>\n<p>float 非 none<br>position 非 static<br>overflow 非 visible<br>如希望使用更小副作用的清除浮动方法，参见 A new micro clearfix hack 一文。</p>\n<p>另需注意，对已经触发 BFC 的元素不需要再进行 clearfix。</p>\n<h4 id=\"3-5-important\"><a href=\"#3-5-important\" class=\"headerlink\" title=\"3.5 !important\"></a>3.5 !important</h4><p>[建议] 尽量不使用 !important 声明。<br>[建议] 当需要强制指定样式且不允许任何场景覆盖时，通过标签内联和 !important 定义样式。<br>解释：</p>\n<p>必须注意的是，仅在设计上 确实不允许任何其它场景覆盖样式 时，才使用内联的 !important 样式。通常在第三方环境的应用中使用这种方案。下面的 z-index 章节是其中一个特殊场景的典型样例。</p>\n<h4 id=\"3-6-z-index\"><a href=\"#3-6-z-index\" class=\"headerlink\" title=\"3.6 z-index\"></a>3.6 z-index</h4><p>[建议] 将 z-index 进行分层，对文档流外绝对定位元素的视觉层级关系进行管理。<br>解释：</p>\n<p>同层的多个元素，如多个由用户输入触发的 Dialog，在该层级内使用相同的 z-index 或递增 z-index。</p>\n<p>建议每层包含100个 z-index 来容纳足够的元素，如果每层元素较多，可以调整这个数值。</p>\n<p>[建议] 在可控环境下，期望显示在最上层的元素，z-index 指定为 999999。<br>解释：</p>\n<p>可控环境分成两种，一种是自身产品线环境；还有一种是可能会被其他产品线引用，但是不会被外部第三方的产品引用。</p>\n<p>不建议取值为 2147483647。以便于自身产品线被其他产品线引用时，当遇到层级覆盖冲突的情况，留出向上调整的空间。</p>\n<p>[建议] 在第三方环境下，期望显示在最上层的元素，通过标签内联和 !important，将 z-index 指定为 2147483647。<br>解释：</p>\n<p>第三方环境对于开发者来说完全不可控。在第三方环境下的元素，为了保证元素不被其页面其他样式定义覆盖，需要采用此做法。</p>\n<h3 id=\"4-值与单位\"><a href=\"#4-值与单位\" class=\"headerlink\" title=\"4 值与单位\"></a>4 值与单位</h3><h4 id=\"4-1-文本\"><a href=\"#4-1-文本\" class=\"headerlink\" title=\"4.1 文本\"></a>4.1 文本</h4><p>[强制] 文本内容必须用双引号包围。<br>解释：</p>\n<p>文本类型的内容可能在选择器、属性值等内容中。</p>\n<p>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-tag\">html</span><span class=\"selector-attr\">[lang|=\"zh\"]</span> <span class=\"selector-tag\">q</span><span class=\"selector-pseudo\">:before</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">\"Microsoft YaHei\"</span>, sans-serif;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\"“\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">html</span><span class=\"selector-attr\">[lang|=\"zh\"]</span> <span class=\"selector-tag\">q</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">\"Microsoft YaHei\"</span>, sans-serif;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\"”\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-tag\">html</span><span class=\"selector-attr\">[lang|=zh]</span> <span class=\"selector-tag\">q</span><span class=\"selector-pseudo\">:before</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">'Microsoft YaHei'</span>, sans-serif;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">'“'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">html</span><span class=\"selector-attr\">[lang|=zh]</span> <span class=\"selector-tag\">q</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">\"Microsoft YaHei\"</span>, sans-serif;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\"”\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-2-数值\"><a href=\"#4-2-数值\" class=\"headerlink\" title=\"4.2 数值\"></a>4.2 数值</h4><p>[强制] 当数值为 0 - 1 之间的小数时，省略整数部分的 0。<br>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-tag\">panel</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">opacity</span>: .<span class=\"number\">8</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-tag\">panel</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">opacity</span>: <span class=\"number\">0.8</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-3-url\"><a href=\"#4-3-url\" class=\"headerlink\" title=\"4.3 url()\"></a>4.3 url()</h4><p>[强制] url() 函数中的路径不加引号。<br>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(bg.png);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>[建议] url() 函数中的绝对路径可省去协议名。<br>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(//baidu.com/img/bg.png) no-repeat <span class=\"number\">0</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-4-长度\"><a href=\"#4-4-长度\" class=\"headerlink\" title=\"4.4 长度\"></a>4.4 长度</h4><p>[强制] 长度为 0 时须省略单位。 (也只有长度单位可省)<br>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0px</span> <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-5-颜色\"><a href=\"#4-5-颜色\" class=\"headerlink\" title=\"4.5 颜色\"></a>4.5 颜色</h4><p>[强制] RGB颜色值必须使用十六进制记号形式 #rrggbb。不允许使用 rgb()。<br>解释：</p>\n<p>带有alpha的颜色信息可以使用 rgba()。使用 rgba() 时每个逗号后必须保留一个空格。</p>\n<p>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-class\">.success</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"built_in\">rgba</span>(0, 128, 0, .3);</span><br><span class=\"line\">    <span class=\"attribute\">border-color</span>: <span class=\"number\">#008000</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-class\">.success</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"built_in\">rgba</span>(0,128,0,.3);</span><br><span class=\"line\">    <span class=\"attribute\">border-color</span>: <span class=\"built_in\">rgb</span>(0, 128, 0);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>[强制] 颜色值可以缩写时，必须使用缩写形式。<br>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-class\">.success</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#aca</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-class\">.success</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#aaccaa</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>[强制] 颜色值不允许使用命名色值。<br>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-class\">.success</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#90ee90</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-class\">.success</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: lightgreen;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>[建议] 颜色值中的英文字符采用小写。如不用小写也需要保证同一项目内保持大小写一致。<br>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-class\">.success</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#aca</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#90ee90</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-class\">.success</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#ACA</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#90EE90</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-class\">.success</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#ACA</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#90ee90</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-6-2D-位置\"><a href=\"#4-6-2D-位置\" class=\"headerlink\" title=\"4.6 2D 位置\"></a>4.6 2D 位置</h4><p>[强制] 必须同时给出水平和垂直方向的位置。<br>解释：</p>\n<p>2D 位置初始值为 0% 0%，但在只有一个方向的值时，另一个方向的值会被解析为 center。为避免理解上的困扰，应同时给出两个方向的值。background-position属性值的定义</p>\n<p>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-position</span>: center top; <span class=\"comment\">/* 50% 0% */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-position</span>: top; <span class=\"comment\">/* 50% 0% */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-文本编排\"><a href=\"#5-文本编排\" class=\"headerlink\" title=\"5 文本编排\"></a>5 文本编排</h3><h4 id=\"5-1-字体族\"><a href=\"#5-1-字体族\" class=\"headerlink\" title=\"5.1 字体族\"></a>5.1 字体族</h4><p>[强制] font-family 属性中的字体族名称应使用字体的英文 Family Name，其中如有空格，须放置在引号中。<br>解释：</p>\n<p>所谓英文 Family Name，为字体文件的一个元数据，常见名称如下：</p>\n<p>字体    操作系统    Family Name<br>宋体 (中易宋体)    Windows    SimSun<br>黑体 (中易黑体)    Windows    SimHei<br>微软雅黑    Windows    Microsoft YaHei<br>微软正黑    Windows    Microsoft JhengHei<br>华文黑体    Mac/iOS    STHeiti<br>冬青黑体    Mac/iOS    Hiragino Sans GB<br>文泉驿正黑    Linux    WenQuanYi Zen Hei<br>文泉驿微米黑    Linux    WenQuanYi Micro Hei<br>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">\"Microsoft YaHei\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>[强制] font-family 按「西文字体在前、中文字体在后」、「效果佳 (质量高/更能满足需求) 的字体在前、效果一般的字体在后」的顺序编写，最后必须指定一个通用字体族( serif / sans-serif )。<br>解释：</p>\n<p>更详细说明可参考本文。</p>\n<p>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Display according to platform */</span></span><br><span class=\"line\"><span class=\"selector-class\">.article</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: Arial, sans-serif;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Specific for most platforms */</span></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">\"Helvetica Neue\"</span>, Arial, <span class=\"string\">\"Hiragino Sans GB\"</span>, <span class=\"string\">\"WenQuanYi Micro Hei\"</span>, <span class=\"string\">\"Microsoft YaHei\"</span>, sans-serif;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>[强制] font-family 不区分大小写，但在同一个项目中，同样的 Family Name 大小写必须统一。<br>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: Arial, sans-serif;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: Arial, <span class=\"string\">\"Microsoft YaHei\"</span>, sans-serif;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: arial, sans-serif;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: Arial, <span class=\"string\">\"Microsoft YaHei\"</span>, sans-serif;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-2-字号\"><a href=\"#5-2-字号\" class=\"headerlink\" title=\"5.2 字号\"></a>5.2 字号</h4><p>[强制] 需要在 Windows 平台显示的中文内容，其字号应不小于 12px。<br>解释：</p>\n<p>由于 Windows 的字体渲染机制，小于 12px 的文字显示效果极差、难以辨认。</p>\n<h4 id=\"5-3-字体风格\"><a href=\"#5-3-字体风格\" class=\"headerlink\" title=\"5.3 字体风格\"></a>5.3 字体风格</h4><p>[建议] 需要在 Windows 平台显示的中文内容，不要使用除 normal 外的 font-style。其他平台也应慎用。<br>解释：</p>\n<p>由于中文字体没有 italic 风格的实现，所有浏览器下都会 fallback 到 obilique 实现 (自动拟合为斜体)，小字号下 (特别是 Windows 下会在小字号下使用点阵字体的情况下) 显示效果差，造成阅读困难。</p>\n<h4 id=\"5-4-字重\"><a href=\"#5-4-字重\" class=\"headerlink\" title=\"5.4 字重\"></a>5.4 字重</h4><p>[强制] font-weight 属性必须使用数值方式描述。<br>解释：</p>\n<p>CSS 的字重分 100 – 900 共九档，但目前受字体本身质量和浏览器的限制，实际上支持 400 和 700 两档，分别等价于关键词 normal 和 bold。</p>\n<p>浏览器本身使用一系列启发式规则来进行匹配，在 &lt;700 时一般匹配字体的=”” regular=”” 字重，=””&gt;=700 时匹配 Bold 字重。<br>但已有浏览器开始支持 =600 时匹配 Semibold 字重 (见此表)，故使用数值描述增加了灵活性，也更简短。</p>\n<p>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">700</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-5-行高\"><a href=\"#5-5-行高\" class=\"headerlink\" title=\"5.5 行高\"></a>5.5 行高</h4><p>[建议] line-height 在定义文本段落时，应使用数值。<br>解释：</p>\n<p>将 line-height 设置为数值，浏览器会基于当前元素设置的 font-size 进行再次计算。在不同字号的文本段落组合中，能达到较为舒适的行间间隔效果，避免在每个设置了 font-size 都需要设置 line-height。</p>\n<p>当 line-height 用于控制垂直居中时，还是应该设置成与容器高度一致。</p>\n<p>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">1.5</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-变换与动画\"><a href=\"#6-变换与动画\" class=\"headerlink\" title=\"6 变换与动画\"></a>6 变换与动画</h3><p>[强制] 使用 transition 时应指定 transition-property。<br>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transition</span>: color <span class=\"number\">1s</span>, border-color <span class=\"number\">1s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transition</span>: all <span class=\"number\">1s</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>[建议] 尽可能在浏览器能高效实现的属性上添加过渡和动画。<br>解释：</p>\n<p>见本文，在可能的情况下应选择这样四种变换：</p>\n<p>transform: translate(npx, npx);<br>transform: scale(n);<br>transform: rotate(ndeg);<br>opacity: 0..1;<br>典型的，可以使用 translate 来代替 left 作为动画属性。</p>\n<p>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transition</span>: transform <span class=\"number\">1s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(20px); <span class=\"comment\">/* move right for 20px */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transition</span>: left <span class=\"number\">1s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">20px</span>; <span class=\"comment\">/* move right for 20px */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-响应式\"><a href=\"#7-响应式\" class=\"headerlink\" title=\"7 响应式\"></a>7 响应式</h3><p>[强制] Media Query 不得单独编排，必须与相关的规则一起定义。<br>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Good */</span></span><br><span class=\"line\"><span class=\"comment\">/* header styles */</span></span><br><span class=\"line\">@<span class=\"keyword\">media</span> (...) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* header styles */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* main styles */</span></span><br><span class=\"line\">@<span class=\"keyword\">media</span> (...) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* main styles */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* footer styles */</span></span><br><span class=\"line\">@<span class=\"keyword\">media</span> (...) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* footer styles */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Bad */</span></span><br><span class=\"line\"><span class=\"comment\">/* header styles */</span></span><br><span class=\"line\"><span class=\"comment\">/* main styles */</span></span><br><span class=\"line\"><span class=\"comment\">/* footer styles */</span></span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"keyword\">media</span> (...) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* header styles */</span></span><br><span class=\"line\">    <span class=\"comment\">/* main styles */</span></span><br><span class=\"line\">    <span class=\"comment\">/* footer styles */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>[强制] Media Query 如果有多个逗号分隔的条件时，应将每个条件放在单独一行中。<br>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span></span><br><span class=\"line\">(-webkit-min-device-pixel-ratio: 2), /* Webkit-based browsers */</span><br><span class=\"line\">(<span class=\"selector-tag\">min--moz-device-pixel-ratio</span>: 2),    <span class=\"comment\">/* Older Firefox browsers (prior to Firefox 16) */</span></span><br><span class=\"line\">(<span class=\"selector-tag\">min-resolution</span>: 2<span class=\"selector-tag\">dppx</span>),             <span class=\"comment\">/* The standard way */</span></span><br><span class=\"line\">(<span class=\"selector-tag\">min-resolution</span>: 192<span class=\"selector-tag\">dpi</span>) &#123;           <span class=\"comment\">/* dppx fallback */</span></span><br><span class=\"line\">    <span class=\"comment\">/* Retina-specific stuff here */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>[建议] 尽可能给出在高分辨率设备 (Retina) 下效果更佳的样式。</p>\n<h3 id=\"8-兼容性\"><a href=\"#8-兼容性\" class=\"headerlink\" title=\"8 兼容性\"></a>8 兼容性</h3><h4 id=\"8-1-属性前缀\"><a href=\"#8-1-属性前缀\" class=\"headerlink\" title=\"8.1 属性前缀\"></a>8.1 属性前缀</h4><p>[强制] 带私有前缀的属性由长到短排列，按冒号位置对齐。<br>解释：</p>\n<p>标准属性放在最后，按冒号对齐方便阅读，也便于在编辑器内进行多行编辑。</p>\n<p>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-box-sizing</span>: border-box;</span><br><span class=\"line\">       <span class=\"attribute\">-moz-box-sizing</span>: border-box;</span><br><span class=\"line\">            <span class=\"attribute\">box-sizing</span>: border-box;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"8-2-Hack\"><a href=\"#8-2-Hack\" class=\"headerlink\" title=\"8.2 Hack\"></a>8.2 Hack</h4><p>[建议] 需要添加 hack 时应尽可能考虑是否可以采用其他方式解决。<br>解释：</p>\n<p>如果能通过合理的 HTML 结构或使用其他的 CSS 定义达到理想的样式，则不应该使用 hack 手段解决问题。通常 hack 会导致维护成本的增加。</p>\n<p>[建议] 尽量使用 选择器 hack 处理兼容性，而非 属性 hack。<br>解释：</p>\n<p>尽量使用符合 CSS 语法的 selector hack，可以避免一些第三方库无法识别 hack 语法的问题。</p>\n<p>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* IE 7 */</span></span><br><span class=\"line\">*<span class=\"selector-pseudo\">:first-child</span> + <span class=\"selector-tag\">html</span> <span class=\"selector-id\">#header</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* IE 6 */</span></span><br><span class=\"line\">* <span class=\"selector-tag\">html</span> <span class=\"selector-id\">#header</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">4px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>[建议] 尽量使用简单的 属性 hack。<br>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">_display</span>: inline; <span class=\"comment\">/* fix double margin */</span></span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">    *zoom: 1; /* triggering hasLayout */</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"8-3-Expression\"><a href=\"#8-3-Expression\" class=\"headerlink\" title=\"8.3 Expression\"></a>8.3 Expression</h4><p>[强制] 禁止使用 Expression。</p>\n","site":{"data":{}},"thumbnailImageUrl":"https://kisky3.github.io/2019/01/22/CSS编码规范/20190122.png","excerpt":"<p>CSS编码规范</p>","more":"<h3 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1 前言\"></a>1 前言</h3><p>CSS作为网页样式的描述语言，在百度一直有着广泛的应用。本文档的目标是使CSS代码风格保持一致，容易被理解和被维护。</p>\n<p>虽然本文档是针对CSS设计的，但是在使用各种CSS的预编译器(如less、sass、stylus等)时，适用的部分也应尽量遵循本文档的约定。</p>\n<h3 id=\"2-代码风格\"><a href=\"#2-代码风格\" class=\"headerlink\" title=\"2 代码风格\"></a>2 代码风格</h3><h4 id=\"2-1-文件\"><a href=\"#2-1-文件\" class=\"headerlink\" title=\"2.1 文件\"></a>2.1 文件</h4><p>[建议] CSS 文件使用无 BOM 的 UTF-8 编码。<br>解释：</p>\n<p>UTF-8 编码具有更广泛的适应性。BOM 在使用程序或工具处理文件时可能造成不必要的干扰。</p>\n<h4 id=\"2-2-缩进\"><a href=\"#2-2-缩进\" class=\"headerlink\" title=\"2.2 缩进\"></a>2.2 缩进</h4><p>[强制] 使用 4 个空格做为一个缩进层级，不允许使用 2 个空格 或 tab 字符。</p>\n<p>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.selector</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-空格\"><a href=\"#2-3-空格\" class=\"headerlink\" title=\"2.3 空格\"></a>2.3 空格</h4><p>[强制] 选择器 与 { 之间必须包含空格。<br>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.selector</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>[强制] 属性名 与之后的 : 之间不允许包含空格， : 与 属性值 之间必须包含空格。<br>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">margin</span>: 0;</span><br></pre></td></tr></table></figure>\n\n<p>[强制] 列表型属性值 书写在单行时，, 后必须跟一个空格。<br>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">font-family</span>: <span class=\"selector-tag\">Arial</span>, <span class=\"selector-tag\">sans-serif</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-4-行长度\"><a href=\"#2-4-行长度\" class=\"headerlink\" title=\"2.4 行长度\"></a>2.4 行长度</h4><p>[强制] 每行不得超过 120 个字符，除非单行不可分割。<br>解释：</p>\n<p>常见不可分割的场景为URL超长。</p>\n<p>[建议] 对于超长的样式，在样式值的 空格 处或 , 后换行，建议按逻辑分组。<br>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 不同属性值按逻辑分组 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">background</span>:</span><br><span class=\"line\">    <span class=\"selector-tag\">transparent</span> <span class=\"selector-tag\">url</span>(<span class=\"selector-tag\">aVeryVeryVeryLongUrlIsPlacedHere</span>)</span><br><span class=\"line\">    <span class=\"selector-tag\">no-repeat</span> 0 0;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 可重复多次的属性，每次重复一行 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">background-image</span>:</span><br><span class=\"line\">    <span class=\"selector-tag\">url</span>(<span class=\"selector-tag\">aVeryVeryVeryLongUrlIsPlacedHere</span>)</span><br><span class=\"line\">    <span class=\"selector-tag\">url</span>(<span class=\"selector-tag\">anotherVeryVeryVeryLongUrlIsPlacedHere</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 类似函数的属性值可以根据函数调用的缩进进行 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">background-image</span>: <span class=\"selector-tag\">-webkit-gradient</span>(</span><br><span class=\"line\">    <span class=\"selector-tag\">linear</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">left</span> <span class=\"selector-tag\">bottom</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">left</span> <span class=\"selector-tag\">top</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">color-stop</span>(0<span class=\"selector-class\">.04</span>, <span class=\"selector-tag\">rgb</span>(88,94,124)),</span><br><span class=\"line\">    <span class=\"selector-tag\">color-stop</span>(0<span class=\"selector-class\">.52</span>, <span class=\"selector-tag\">rgb</span>(115,123,162))</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-5-选择器\"><a href=\"#2-5-选择器\" class=\"headerlink\" title=\"2.5 选择器\"></a>2.5 选择器</h4><p>[强制] 当一个 rule 包含多个 selector 时，每个选择器声明必须独占一行。<br>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-class\">.post</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.page</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.comment</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">1.5</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-class\">.post</span>, <span class=\"selector-class\">.page</span>, <span class=\"selector-class\">.comment</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">1.5</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>[强制] &gt;、+、~ 选择器的两边各保留一个空格。<br>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-tag\">main</span> &gt; <span class=\"selector-tag\">nav</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">label</span> + <span class=\"selector-tag\">input</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">:checked</span> ~ <span class=\"selector-tag\">button</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#69C</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-tag\">main</span>&gt;<span class=\"selector-tag\">nav</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">label</span>+<span class=\"selector-tag\">input</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">:checked</span>~<span class=\"selector-tag\">button</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#69C</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>[强制] 属性选择器中的值必须用双引号包围。<br>解释：</p>\n<p>不允许使用单引号，不允许不使用引号。</p>\n<p>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-tag\">article</span><span class=\"selector-attr\">[character=\"juliet\"]</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">voice-family</span>: <span class=\"string\">\"Vivien Leigh\"</span>, victoria, female</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-tag\">article</span><span class=\"selector-attr\">[character='juliet']</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">voice-family</span>: <span class=\"string\">\"Vivien Leigh\"</span>, victoria, female</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-6-属性\"><a href=\"#2-6-属性\" class=\"headerlink\" title=\"2.6 属性\"></a>2.6 属性</h4><p>[强制] 属性定义必须另起一行。</p>\n<p>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-class\">.selector</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-class\">.selector</span> &#123; <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>; <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-attr\">[强制]</span> 属性定义后必须以分号结尾。</span><br><span class=\"line\">示例：</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-class\">.selector</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-class\">.selector</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-通用\"><a href=\"#3-通用\" class=\"headerlink\" title=\"3 通用\"></a>3 通用</h3><h4 id=\"3-1-选择器\"><a href=\"#3-1-选择器\" class=\"headerlink\" title=\"3.1 选择器\"></a>3.1 选择器</h4><p>[强制] 如无必要，不得为 id、class 选择器添加类型选择器进行限定。<br>解释：</p>\n<p>在性能和维护性上，都有一定的影响。</p>\n<p>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-id\">#error</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.danger-message</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-color</span>: <span class=\"number\">#c00</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-tag\">dialog</span><span class=\"selector-id\">#error</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-class\">.danger-message</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-color</span>: <span class=\"number\">#c00</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>[建议] 选择器的嵌套层级应不大于 3 级，位置靠后的限定条件应尽可能精确。<br>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-id\">#username</span> <span class=\"selector-tag\">input</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.comment</span> <span class=\"selector-class\">.avatar</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-class\">.page</span> <span class=\"selector-class\">.header</span> <span class=\"selector-class\">.login</span> <span class=\"selector-id\">#username</span> <span class=\"selector-tag\">input</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.comment</span> <span class=\"selector-tag\">div</span> * &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-2-属性缩写\"><a href=\"#3-2-属性缩写\" class=\"headerlink\" title=\"3.2 属性缩写\"></a>3.2 属性缩写</h4><p>[建议] 在可以使用缩写的情况下，尽量使用属性缩写。<br>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-class\">.post</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font</span>: <span class=\"number\">12px</span>/<span class=\"number\">1.5</span> arial, sans-serif;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-class\">.post</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: arial, sans-serif;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">1.5</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>[建议] 使用 border / margin / padding 等缩写时，应注意隐含值对实际数值的影响，确实需要设置多个方向的值时才使用缩写。<br>解释：</p>\n<p>border / margin / padding 等缩写会同时设置多个属性的值，容易覆盖不需要覆盖的设定。如某些方向需要继承其他声明的值，则应该分开设置。</p>\n<p>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* centering &lt;article class=\"page\"&gt; horizontally and highlight featured ones */</span></span><br><span class=\"line\"><span class=\"selector-tag\">article</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#999</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-class\">.page</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-right</span>: auto;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.featured</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-color</span>: <span class=\"number\">#69c</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-class\">.page</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">5px</span> auto; <span class=\"comment\">/* introducing redundancy */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.featured</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#69c</span>; <span class=\"comment\">/* introducing redundancy */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-属性书写顺序\"><a href=\"#3-3-属性书写顺序\" class=\"headerlink\" title=\"3.3 属性书写顺序\"></a>3.3 属性书写顺序</h4><p>[建议] 同一 rule set 下的属性在书写时，应按功能进行分组，并以 Formatting Model（布局方式、位置） &gt; Box Model（尺寸） &gt; Typographic（文本相关） &gt; Visual（视觉效果） 的顺序书写，以提高代码的可读性。<br>解释：</p>\n<p>Formatting Model 相关属性包括：position / top / right / bottom / left / float / display / overflow 等<br>Box Model 相关属性包括：border / margin / padding / width / height 等<br>Typographic 相关属性包括：font / line-height / text-align / word-wrap 等<br>Visual 相关属性包括：background / color / transition / list-style 等<br>另外，如果包含 content 属性，应放在最前面。</p>\n<p>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.sidebar</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* formatting model: positioning schemes / offsets / z-indexes / display / ...  */</span></span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">overflow-x</span>: hidden;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* box model: sizes / margins / paddings / borders / ...  */</span></span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ddd</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* typographic: font / aligns / text styles / ... */</span></span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* visual: colors / shadows / gradients / ... */</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#f5f5f5</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-transition</span>: color <span class=\"number\">1s</span>;</span><br><span class=\"line\">       <span class=\"attribute\">-moz-transition</span>: color <span class=\"number\">1s</span>;</span><br><span class=\"line\">            <span class=\"attribute\">transition</span>: color <span class=\"number\">1s</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-4-清除浮动\"><a href=\"#3-4-清除浮动\" class=\"headerlink\" title=\"3.4 清除浮动\"></a>3.4 清除浮动</h4><p>[建议] 当元素需要撑起高度以包含内部的浮动元素时，通过对伪类设置 clear 或触发 BFC 的方式进行 clearfix。尽量不使用增加空标签的方式。<br>解释：</p>\n<p>触发 BFC 的方式很多，常见的有：</p>\n<p>float 非 none<br>position 非 static<br>overflow 非 visible<br>如希望使用更小副作用的清除浮动方法，参见 A new micro clearfix hack 一文。</p>\n<p>另需注意，对已经触发 BFC 的元素不需要再进行 clearfix。</p>\n<h4 id=\"3-5-important\"><a href=\"#3-5-important\" class=\"headerlink\" title=\"3.5 !important\"></a>3.5 !important</h4><p>[建议] 尽量不使用 !important 声明。<br>[建议] 当需要强制指定样式且不允许任何场景覆盖时，通过标签内联和 !important 定义样式。<br>解释：</p>\n<p>必须注意的是，仅在设计上 确实不允许任何其它场景覆盖样式 时，才使用内联的 !important 样式。通常在第三方环境的应用中使用这种方案。下面的 z-index 章节是其中一个特殊场景的典型样例。</p>\n<h4 id=\"3-6-z-index\"><a href=\"#3-6-z-index\" class=\"headerlink\" title=\"3.6 z-index\"></a>3.6 z-index</h4><p>[建议] 将 z-index 进行分层，对文档流外绝对定位元素的视觉层级关系进行管理。<br>解释：</p>\n<p>同层的多个元素，如多个由用户输入触发的 Dialog，在该层级内使用相同的 z-index 或递增 z-index。</p>\n<p>建议每层包含100个 z-index 来容纳足够的元素，如果每层元素较多，可以调整这个数值。</p>\n<p>[建议] 在可控环境下，期望显示在最上层的元素，z-index 指定为 999999。<br>解释：</p>\n<p>可控环境分成两种，一种是自身产品线环境；还有一种是可能会被其他产品线引用，但是不会被外部第三方的产品引用。</p>\n<p>不建议取值为 2147483647。以便于自身产品线被其他产品线引用时，当遇到层级覆盖冲突的情况，留出向上调整的空间。</p>\n<p>[建议] 在第三方环境下，期望显示在最上层的元素，通过标签内联和 !important，将 z-index 指定为 2147483647。<br>解释：</p>\n<p>第三方环境对于开发者来说完全不可控。在第三方环境下的元素，为了保证元素不被其页面其他样式定义覆盖，需要采用此做法。</p>\n<h3 id=\"4-值与单位\"><a href=\"#4-值与单位\" class=\"headerlink\" title=\"4 值与单位\"></a>4 值与单位</h3><h4 id=\"4-1-文本\"><a href=\"#4-1-文本\" class=\"headerlink\" title=\"4.1 文本\"></a>4.1 文本</h4><p>[强制] 文本内容必须用双引号包围。<br>解释：</p>\n<p>文本类型的内容可能在选择器、属性值等内容中。</p>\n<p>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-tag\">html</span><span class=\"selector-attr\">[lang|=\"zh\"]</span> <span class=\"selector-tag\">q</span><span class=\"selector-pseudo\">:before</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">\"Microsoft YaHei\"</span>, sans-serif;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\"“\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">html</span><span class=\"selector-attr\">[lang|=\"zh\"]</span> <span class=\"selector-tag\">q</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">\"Microsoft YaHei\"</span>, sans-serif;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\"”\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-tag\">html</span><span class=\"selector-attr\">[lang|=zh]</span> <span class=\"selector-tag\">q</span><span class=\"selector-pseudo\">:before</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">'Microsoft YaHei'</span>, sans-serif;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">'“'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">html</span><span class=\"selector-attr\">[lang|=zh]</span> <span class=\"selector-tag\">q</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">\"Microsoft YaHei\"</span>, sans-serif;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\"”\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-2-数值\"><a href=\"#4-2-数值\" class=\"headerlink\" title=\"4.2 数值\"></a>4.2 数值</h4><p>[强制] 当数值为 0 - 1 之间的小数时，省略整数部分的 0。<br>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-tag\">panel</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">opacity</span>: .<span class=\"number\">8</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-tag\">panel</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">opacity</span>: <span class=\"number\">0.8</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-3-url\"><a href=\"#4-3-url\" class=\"headerlink\" title=\"4.3 url()\"></a>4.3 url()</h4><p>[强制] url() 函数中的路径不加引号。<br>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(bg.png);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>[建议] url() 函数中的绝对路径可省去协议名。<br>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(//baidu.com/img/bg.png) no-repeat <span class=\"number\">0</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-4-长度\"><a href=\"#4-4-长度\" class=\"headerlink\" title=\"4.4 长度\"></a>4.4 长度</h4><p>[强制] 长度为 0 时须省略单位。 (也只有长度单位可省)<br>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0px</span> <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-5-颜色\"><a href=\"#4-5-颜色\" class=\"headerlink\" title=\"4.5 颜色\"></a>4.5 颜色</h4><p>[强制] RGB颜色值必须使用十六进制记号形式 #rrggbb。不允许使用 rgb()。<br>解释：</p>\n<p>带有alpha的颜色信息可以使用 rgba()。使用 rgba() 时每个逗号后必须保留一个空格。</p>\n<p>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-class\">.success</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"built_in\">rgba</span>(0, 128, 0, .3);</span><br><span class=\"line\">    <span class=\"attribute\">border-color</span>: <span class=\"number\">#008000</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-class\">.success</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"built_in\">rgba</span>(0,128,0,.3);</span><br><span class=\"line\">    <span class=\"attribute\">border-color</span>: <span class=\"built_in\">rgb</span>(0, 128, 0);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>[强制] 颜色值可以缩写时，必须使用缩写形式。<br>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-class\">.success</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#aca</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-class\">.success</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#aaccaa</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>[强制] 颜色值不允许使用命名色值。<br>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-class\">.success</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#90ee90</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-class\">.success</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: lightgreen;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>[建议] 颜色值中的英文字符采用小写。如不用小写也需要保证同一项目内保持大小写一致。<br>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-class\">.success</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#aca</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#90ee90</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-class\">.success</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#ACA</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#90EE90</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-class\">.success</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#ACA</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#90ee90</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-6-2D-位置\"><a href=\"#4-6-2D-位置\" class=\"headerlink\" title=\"4.6 2D 位置\"></a>4.6 2D 位置</h4><p>[强制] 必须同时给出水平和垂直方向的位置。<br>解释：</p>\n<p>2D 位置初始值为 0% 0%，但在只有一个方向的值时，另一个方向的值会被解析为 center。为避免理解上的困扰，应同时给出两个方向的值。background-position属性值的定义</p>\n<p>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-position</span>: center top; <span class=\"comment\">/* 50% 0% */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-position</span>: top; <span class=\"comment\">/* 50% 0% */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-文本编排\"><a href=\"#5-文本编排\" class=\"headerlink\" title=\"5 文本编排\"></a>5 文本编排</h3><h4 id=\"5-1-字体族\"><a href=\"#5-1-字体族\" class=\"headerlink\" title=\"5.1 字体族\"></a>5.1 字体族</h4><p>[强制] font-family 属性中的字体族名称应使用字体的英文 Family Name，其中如有空格，须放置在引号中。<br>解释：</p>\n<p>所谓英文 Family Name，为字体文件的一个元数据，常见名称如下：</p>\n<p>字体    操作系统    Family Name<br>宋体 (中易宋体)    Windows    SimSun<br>黑体 (中易黑体)    Windows    SimHei<br>微软雅黑    Windows    Microsoft YaHei<br>微软正黑    Windows    Microsoft JhengHei<br>华文黑体    Mac/iOS    STHeiti<br>冬青黑体    Mac/iOS    Hiragino Sans GB<br>文泉驿正黑    Linux    WenQuanYi Zen Hei<br>文泉驿微米黑    Linux    WenQuanYi Micro Hei<br>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">\"Microsoft YaHei\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>[强制] font-family 按「西文字体在前、中文字体在后」、「效果佳 (质量高/更能满足需求) 的字体在前、效果一般的字体在后」的顺序编写，最后必须指定一个通用字体族( serif / sans-serif )。<br>解释：</p>\n<p>更详细说明可参考本文。</p>\n<p>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Display according to platform */</span></span><br><span class=\"line\"><span class=\"selector-class\">.article</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: Arial, sans-serif;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Specific for most platforms */</span></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">\"Helvetica Neue\"</span>, Arial, <span class=\"string\">\"Hiragino Sans GB\"</span>, <span class=\"string\">\"WenQuanYi Micro Hei\"</span>, <span class=\"string\">\"Microsoft YaHei\"</span>, sans-serif;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>[强制] font-family 不区分大小写，但在同一个项目中，同样的 Family Name 大小写必须统一。<br>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: Arial, sans-serif;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: Arial, <span class=\"string\">\"Microsoft YaHei\"</span>, sans-serif;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: arial, sans-serif;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: Arial, <span class=\"string\">\"Microsoft YaHei\"</span>, sans-serif;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-2-字号\"><a href=\"#5-2-字号\" class=\"headerlink\" title=\"5.2 字号\"></a>5.2 字号</h4><p>[强制] 需要在 Windows 平台显示的中文内容，其字号应不小于 12px。<br>解释：</p>\n<p>由于 Windows 的字体渲染机制，小于 12px 的文字显示效果极差、难以辨认。</p>\n<h4 id=\"5-3-字体风格\"><a href=\"#5-3-字体风格\" class=\"headerlink\" title=\"5.3 字体风格\"></a>5.3 字体风格</h4><p>[建议] 需要在 Windows 平台显示的中文内容，不要使用除 normal 外的 font-style。其他平台也应慎用。<br>解释：</p>\n<p>由于中文字体没有 italic 风格的实现，所有浏览器下都会 fallback 到 obilique 实现 (自动拟合为斜体)，小字号下 (特别是 Windows 下会在小字号下使用点阵字体的情况下) 显示效果差，造成阅读困难。</p>\n<h4 id=\"5-4-字重\"><a href=\"#5-4-字重\" class=\"headerlink\" title=\"5.4 字重\"></a>5.4 字重</h4><p>[强制] font-weight 属性必须使用数值方式描述。<br>解释：</p>\n<p>CSS 的字重分 100 – 900 共九档，但目前受字体本身质量和浏览器的限制，实际上支持 400 和 700 两档，分别等价于关键词 normal 和 bold。</p>\n<p>浏览器本身使用一系列启发式规则来进行匹配，在 &lt;700 时一般匹配字体的=”” regular=”” 字重，=””&gt;=700 时匹配 Bold 字重。<br>但已有浏览器开始支持 =600 时匹配 Semibold 字重 (见此表)，故使用数值描述增加了灵活性，也更简短。</p>\n<p>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">700</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-5-行高\"><a href=\"#5-5-行高\" class=\"headerlink\" title=\"5.5 行高\"></a>5.5 行高</h4><p>[建议] line-height 在定义文本段落时，应使用数值。<br>解释：</p>\n<p>将 line-height 设置为数值，浏览器会基于当前元素设置的 font-size 进行再次计算。在不同字号的文本段落组合中，能达到较为舒适的行间间隔效果，避免在每个设置了 font-size 都需要设置 line-height。</p>\n<p>当 line-height 用于控制垂直居中时，还是应该设置成与容器高度一致。</p>\n<p>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">1.5</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-变换与动画\"><a href=\"#6-变换与动画\" class=\"headerlink\" title=\"6 变换与动画\"></a>6 变换与动画</h3><p>[强制] 使用 transition 时应指定 transition-property。<br>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transition</span>: color <span class=\"number\">1s</span>, border-color <span class=\"number\">1s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transition</span>: all <span class=\"number\">1s</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>[建议] 尽可能在浏览器能高效实现的属性上添加过渡和动画。<br>解释：</p>\n<p>见本文，在可能的情况下应选择这样四种变换：</p>\n<p>transform: translate(npx, npx);<br>transform: scale(n);<br>transform: rotate(ndeg);<br>opacity: 0..1;<br>典型的，可以使用 translate 来代替 left 作为动画属性。</p>\n<p>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transition</span>: transform <span class=\"number\">1s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(20px); <span class=\"comment\">/* move right for 20px */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transition</span>: left <span class=\"number\">1s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">20px</span>; <span class=\"comment\">/* move right for 20px */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-响应式\"><a href=\"#7-响应式\" class=\"headerlink\" title=\"7 响应式\"></a>7 响应式</h3><p>[强制] Media Query 不得单独编排，必须与相关的规则一起定义。<br>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Good */</span></span><br><span class=\"line\"><span class=\"comment\">/* header styles */</span></span><br><span class=\"line\">@<span class=\"keyword\">media</span> (...) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* header styles */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* main styles */</span></span><br><span class=\"line\">@<span class=\"keyword\">media</span> (...) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* main styles */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* footer styles */</span></span><br><span class=\"line\">@<span class=\"keyword\">media</span> (...) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* footer styles */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Bad */</span></span><br><span class=\"line\"><span class=\"comment\">/* header styles */</span></span><br><span class=\"line\"><span class=\"comment\">/* main styles */</span></span><br><span class=\"line\"><span class=\"comment\">/* footer styles */</span></span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"keyword\">media</span> (...) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* header styles */</span></span><br><span class=\"line\">    <span class=\"comment\">/* main styles */</span></span><br><span class=\"line\">    <span class=\"comment\">/* footer styles */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>[强制] Media Query 如果有多个逗号分隔的条件时，应将每个条件放在单独一行中。<br>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span></span><br><span class=\"line\">(-webkit-min-device-pixel-ratio: 2), /* Webkit-based browsers */</span><br><span class=\"line\">(<span class=\"selector-tag\">min--moz-device-pixel-ratio</span>: 2),    <span class=\"comment\">/* Older Firefox browsers (prior to Firefox 16) */</span></span><br><span class=\"line\">(<span class=\"selector-tag\">min-resolution</span>: 2<span class=\"selector-tag\">dppx</span>),             <span class=\"comment\">/* The standard way */</span></span><br><span class=\"line\">(<span class=\"selector-tag\">min-resolution</span>: 192<span class=\"selector-tag\">dpi</span>) &#123;           <span class=\"comment\">/* dppx fallback */</span></span><br><span class=\"line\">    <span class=\"comment\">/* Retina-specific stuff here */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>[建议] 尽可能给出在高分辨率设备 (Retina) 下效果更佳的样式。</p>\n<h3 id=\"8-兼容性\"><a href=\"#8-兼容性\" class=\"headerlink\" title=\"8 兼容性\"></a>8 兼容性</h3><h4 id=\"8-1-属性前缀\"><a href=\"#8-1-属性前缀\" class=\"headerlink\" title=\"8.1 属性前缀\"></a>8.1 属性前缀</h4><p>[强制] 带私有前缀的属性由长到短排列，按冒号位置对齐。<br>解释：</p>\n<p>标准属性放在最后，按冒号对齐方便阅读，也便于在编辑器内进行多行编辑。</p>\n<p>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-box-sizing</span>: border-box;</span><br><span class=\"line\">       <span class=\"attribute\">-moz-box-sizing</span>: border-box;</span><br><span class=\"line\">            <span class=\"attribute\">box-sizing</span>: border-box;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"8-2-Hack\"><a href=\"#8-2-Hack\" class=\"headerlink\" title=\"8.2 Hack\"></a>8.2 Hack</h4><p>[建议] 需要添加 hack 时应尽可能考虑是否可以采用其他方式解决。<br>解释：</p>\n<p>如果能通过合理的 HTML 结构或使用其他的 CSS 定义达到理想的样式，则不应该使用 hack 手段解决问题。通常 hack 会导致维护成本的增加。</p>\n<p>[建议] 尽量使用 选择器 hack 处理兼容性，而非 属性 hack。<br>解释：</p>\n<p>尽量使用符合 CSS 语法的 selector hack，可以避免一些第三方库无法识别 hack 语法的问题。</p>\n<p>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* IE 7 */</span></span><br><span class=\"line\">*<span class=\"selector-pseudo\">:first-child</span> + <span class=\"selector-tag\">html</span> <span class=\"selector-id\">#header</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* IE 6 */</span></span><br><span class=\"line\">* <span class=\"selector-tag\">html</span> <span class=\"selector-id\">#header</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">4px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>[建议] 尽量使用简单的 属性 hack。<br>示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">_display</span>: inline; <span class=\"comment\">/* fix double margin */</span></span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">    *zoom: 1; /* triggering hasLayout */</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"8-3-Expression\"><a href=\"#8-3-Expression\" class=\"headerlink\" title=\"8.3 Expression\"></a>8.3 Expression</h4><p>[强制] 禁止使用 Expression。</p>"}],"PostAsset":[{"_id":"source/_posts/Pages/1.png","slug":"1.png","post":"ck3it6k2b001lteyim6n3qzx3","modified":0,"renderable":0},{"_id":"source/_posts/React-Virtual-Dom/3.png","slug":"3.png","post":"ck3it6k2b001oteyiknakn1w4","modified":0,"renderable":0},{"_id":"source/_posts/React-Virtual-Dom/1.png","slug":"1.png","post":"ck3it6k2b001oteyiknakn1w4","modified":0,"renderable":0},{"_id":"source/_posts/React-Virtual-Dom/2.png","slug":"2.png","post":"ck3it6k2b001oteyiknakn1w4","modified":0,"renderable":0},{"_id":"source/_posts/createDockerModx/3.jpg","slug":"3.jpg","post":"ck3it6k2f0021teyiwk2v6di4","modified":0,"renderable":0},{"_id":"source/_posts/使用Docker进行Cakephp3开发环境搭建/6.png","slug":"6.png","post":"ck3it6k2m002steyilltbrfow","modified":0,"renderable":0},{"_id":"source/_posts/关于LocalStorage-cookie和session/2.png","slug":"2.png","post":"ck3it6k2r0037teyilhtkmmt6","modified":0,"renderable":0},{"_id":"source/_posts/系统式样统一页面的制作/2.png","slug":"2.png","post":"ck3it6k2x003qteyisuz3lfyu","modified":0,"renderable":0},{"_id":"source/_posts/系统式样统一页面的制作/4.png","slug":"4.png","post":"ck3it6k2x003qteyisuz3lfyu","modified":0,"renderable":0},{"_id":"source/_posts/IconFont/4.png","slug":"4.png","post":"ck3it6k220013teyiaks7g039","modified":0,"renderable":0},{"_id":"source/_posts/createDockerModx/5.png","slug":"5.png","post":"ck3it6k2f0021teyiwk2v6di4","modified":0,"renderable":0},{"_id":"source/_posts/jQuery/4.png","slug":"4.png","post":"ck3it6k2i002bteyi3gtykuvm","modified":0,"renderable":0},{"_id":"source/_posts/使用Docker进行Cakephp3开发环境搭建/2.png","slug":"2.png","post":"ck3it6k2m002steyilltbrfow","modified":0,"renderable":0},{"_id":"source/_posts/使用Docker进行Cakephp3开发环境搭建/8.png","slug":"8.png","post":"ck3it6k2m002steyilltbrfow","modified":0,"renderable":0},{"_id":"source/_posts/超简单用hexo和github搭建个人博客/2.png","slug":"2.png","post":"ck3it6k2y003tteyioz2e22ds","modified":0,"renderable":0},{"_id":"source/_posts/AboutCMS/20191102.png","slug":"20191102.png","post":"ck3it6k0s0000teyirt7mz96n","modified":0,"renderable":0},{"_id":"source/_posts/Ajax/20190830.png","slug":"20190830.png","post":"ck3it6k0y0002teyijv1g1ay2","modified":0,"renderable":0},{"_id":"source/_posts/Animation/20190830.png","slug":"20190830.png","post":"ck3it6k1c0009teyit1hqb43w","modified":0,"renderable":0},{"_id":"source/_posts/Get和Post提交数据有什么区别/20181025.png","slug":"20181025.png","post":"ck3it6k1u000steyijpkjlhrm","modified":0,"renderable":0},{"_id":"source/_posts/Homebrew/20190929.png","slug":"20190929.png","post":"ck3it6k1z000zteyievxyior3","modified":0,"renderable":0},{"_id":"source/_posts/JS函数关于if-xx-和-a-b/20190226.png","slug":"20190226.png","post":"ck3it6k24001ateyisktuocs6","modified":0,"renderable":0},{"_id":"source/_posts/JS发展简史/20190210.png","slug":"20190210.png","post":"ck3it6k28001dteyi2wrdfvb8","modified":0,"renderable":0},{"_id":"source/_posts/JS立即执行函数表达式/20190302.jpg","slug":"20190302.jpg","post":"ck3it6k29001gteyibwg3vfl7","modified":0,"renderable":0},{"_id":"source/_posts/JS正则表达式/20190316.png","slug":"20190316.png","post":"ck3it6k2a001jteyiutow0ptc","modified":0,"renderable":0},{"_id":"source/_posts/Started/20190914.png","slug":"20190914.png","post":"ck3it6k2c001qteyi4cqbh8zo","modified":0,"renderable":0},{"_id":"source/_posts/jQuery绑定事件/20190827.jpg","slug":"20190827.jpg","post":"ck3it6k2j002eteyi190ukd7t","modified":0,"renderable":0},{"_id":"source/_posts/什么是ajax/20190605.png","slug":"20190605.png","post":"ck3it6k2l002lteyis64wphar","modified":0,"renderable":0},{"_id":"source/_posts/关于BOM对象/20190425.png","slug":"20190425.png","post":"ck3it6k2n002wteyi0pxvpry6","modified":0,"renderable":0},{"_id":"source/_posts/关于CSS继承/20181125.png","slug":"20181125.png","post":"ck3it6k2p0033teyiem55cn48","modified":0,"renderable":0},{"_id":"source/_posts/关于js跨域及解决方法/20190610.png","slug":"20190610.png","post":"ck3it6k2t003hteyivra9f7it","modified":0,"renderable":0},{"_id":"source/_posts/关于闭包/20190623.jpg","slug":"20190623.jpg","post":"ck3it6k2w003oteyisspq064m","modified":0,"renderable":0},{"_id":"source/_posts/JS-DOM元素以及DOM元素操作常用API/1.png","slug":"1.png","post":"ck3it6k230016teyig29zxi45","modified":0,"renderable":0},{"_id":"source/_posts/JS-DOM元素以及DOM元素操作常用API/20190322.png","slug":"20190322.png","post":"ck3it6k230016teyig29zxi45","modified":0,"renderable":0},{"_id":"source/_posts/dockercommand/1.png","slug":"1.png","post":"ck3it6k2g0024teyiexohw5hh","modified":0,"renderable":0},{"_id":"source/_posts/dockercommand/20191107.png","slug":"20191107.png","post":"ck3it6k2g0024teyiexohw5hh","modified":0,"renderable":0},{"_id":"source/_posts/CSS选择器类型与用法/1.png","slug":"1.png","post":"ck3it6k1f000dteyij8ui1j6v","modified":0,"renderable":0},{"_id":"source/_posts/CSS选择器类型与用法/2.png","slug":"2.png","post":"ck3it6k1f000dteyij8ui1j6v","modified":0,"renderable":0},{"_id":"source/_posts/CSS选择器类型与用法/20181115.png","slug":"20181115.png","post":"ck3it6k1f000dteyij8ui1j6v","modified":0,"renderable":0},{"_id":"source/_posts/CreatePhpEnvironmentInDocker/1.png","slug":"1.png","post":"ck3it6k1j000eteyi9tsmbw9t","modified":0,"renderable":0},{"_id":"source/_posts/CreatePhpEnvironmentInDocker/2.png","slug":"2.png","post":"ck3it6k1j000eteyi9tsmbw9t","modified":0,"renderable":0},{"_id":"source/_posts/CreatePhpEnvironmentInDocker/20191111.png","slug":"20191111.png","post":"ck3it6k1j000eteyi9tsmbw9t","modified":0,"renderable":0},{"_id":"source/_posts/CSRF攻击及防范措施/1.png","slug":"1.png","post":"ck3it6k180008teyi2btp4bxh","modified":0,"renderable":0},{"_id":"source/_posts/CSRF攻击及防范措施/2.png","slug":"2.png","post":"ck3it6k180008teyi2btp4bxh","modified":0,"renderable":0},{"_id":"source/_posts/CSRF攻击及防范措施/20181014.png","slug":"20181014.png","post":"ck3it6k180008teyi2btp4bxh","modified":0,"renderable":0},{"_id":"source/_posts/CSRF攻击及防范措施/3.png","slug":"3.png","post":"ck3it6k180008teyi2btp4bxh","modified":0,"renderable":0},{"_id":"source/_posts/Pages/2.png","slug":"2.png","post":"ck3it6k2b001lteyim6n3qzx3","modified":0,"renderable":0},{"_id":"source/_posts/Pages/20190930.png","slug":"20190930.png","post":"ck3it6k2b001lteyim6n3qzx3","modified":0,"renderable":0},{"_id":"source/_posts/Pages/3.png","slug":"3.png","post":"ck3it6k2b001lteyim6n3qzx3","modified":0,"renderable":0},{"_id":"source/_posts/React-Virtual-Dom/20190704.png","slug":"20190704.png","post":"ck3it6k2b001oteyiknakn1w4","modified":0,"renderable":0},{"_id":"source/_posts/TheCove/1.jpg","slug":"1.jpg","post":"ck3it6k2d001tteyifu20ebum","modified":0,"renderable":0},{"_id":"source/_posts/TheCove/2.jpg","slug":"2.jpg","post":"ck3it6k2d001tteyifu20ebum","modified":0,"renderable":0},{"_id":"source/_posts/TheCove/3.jpg","slug":"3.jpg","post":"ck3it6k2d001tteyifu20ebum","modified":0,"renderable":0},{"_id":"source/_posts/TheCove/4.jpg","slug":"4.jpg","post":"ck3it6k2d001tteyifu20ebum","modified":0,"renderable":0},{"_id":"source/_posts/UNIVERSE/1.jpg","slug":"1.jpg","post":"ck3it6k2e001vteyi8i2qkrbe","modified":0,"renderable":0},{"_id":"source/_posts/UNIVERSE/2.jpg","slug":"2.jpg","post":"ck3it6k2e001vteyi8i2qkrbe","modified":0,"renderable":0},{"_id":"source/_posts/UNIVERSE/3.jpg","slug":"3.jpg","post":"ck3it6k2e001vteyi8i2qkrbe","modified":0,"renderable":0},{"_id":"source/_posts/UNIVERSE/4.jpg","slug":"4.jpg","post":"ck3it6k2e001vteyi8i2qkrbe","modified":0,"renderable":0},{"_id":"source/_posts/从URL到页面展现/1.png","slug":"1.png","post":"ck3it6k2l002oteyii4kwuemb","modified":0,"renderable":0},{"_id":"source/_posts/从URL到页面展现/2.png","slug":"2.png","post":"ck3it6k2l002oteyii4kwuemb","modified":0,"renderable":0},{"_id":"source/_posts/从URL到页面展现/20181110.png","slug":"20181110.png","post":"ck3it6k2l002oteyii4kwuemb","modified":0,"renderable":0},{"_id":"source/_posts/从URL到页面展现/3.png","slug":"3.png","post":"ck3it6k2l002oteyii4kwuemb","modified":0,"renderable":0},{"_id":"source/_posts/关于前端mock数据/1.png","slug":"1.png","post":"ck3it6k2s003eteyi9f47bneb","modified":0,"renderable":0},{"_id":"source/_posts/关于前端mock数据/2.png","slug":"2.png","post":"ck3it6k2s003eteyi9f47bneb","modified":0,"renderable":0},{"_id":"source/_posts/关于前端mock数据/20190521.png","slug":"20190521.png","post":"ck3it6k2s003eteyi9f47bneb","modified":0,"renderable":0},{"_id":"source/_posts/关于前端mock数据/3.png","slug":"3.png","post":"ck3it6k2s003eteyi9f47bneb","modified":0,"renderable":0},{"_id":"source/_posts/关于浏览器渲染机制/1.png","slug":"1.png","post":"ck3it6k2v003lteyizyappznm","modified":0,"renderable":0},{"_id":"source/_posts/关于浏览器渲染机制/2.png","slug":"2.png","post":"ck3it6k2v003lteyizyappznm","modified":0,"renderable":0},{"_id":"source/_posts/关于浏览器渲染机制/20190223.jpg","slug":"20190223.jpg","post":"ck3it6k2v003lteyizyappznm","modified":0,"renderable":0},{"_id":"source/_posts/关于浏览器渲染机制/3.png","slug":"3.png","post":"ck3it6k2v003lteyizyappznm","modified":0,"renderable":0},{"_id":"source/_posts/关于事件传播机制/1.png","slug":"1.png","post":"ck3it6k2r003ateyih85k0loh","modified":0,"renderable":0},{"_id":"source/_posts/关于事件传播机制/2.png","slug":"2.png","post":"ck3it6k2r003ateyih85k0loh","modified":0,"renderable":0},{"_id":"source/_posts/关于事件传播机制/20190520.jpg","slug":"20190520.jpg","post":"ck3it6k2r003ateyih85k0loh","modified":0,"renderable":0},{"_id":"source/_posts/关于事件传播机制/3.png","slug":"3.png","post":"ck3it6k2r003ateyih85k0loh","modified":0,"renderable":0},{"_id":"source/_posts/关于事件传播机制/4.png","slug":"4.png","post":"ck3it6k2r003ateyih85k0loh","modified":0,"renderable":0},{"_id":"source/_posts/FirstBlog/cat1.jpg","slug":"cat1.jpg","post":"ck3it6k1o000lteyieelvj9sf","modified":0,"renderable":0},{"_id":"source/_posts/FirstBlog/cat2.jpg","slug":"cat2.jpg","post":"ck3it6k1o000lteyieelvj9sf","modified":0,"renderable":0},{"_id":"source/_posts/FirstBlog/cat3.jpg","slug":"cat3.jpg","post":"ck3it6k1o000lteyieelvj9sf","modified":0,"renderable":0},{"_id":"source/_posts/FirstBlog/cat4.jpg","slug":"cat4.jpg","post":"ck3it6k1o000lteyieelvj9sf","modified":0,"renderable":0},{"_id":"source/_posts/FirstBlog/cat5.jpg","slug":"cat5.jpg","post":"ck3it6k1o000lteyieelvj9sf","modified":0,"renderable":0},{"_id":"source/_posts/FirstBlog/tokyo.jpg","slug":"tokyo.jpg","post":"ck3it6k1o000lteyieelvj9sf","modified":0,"renderable":0},{"_id":"source/_posts/IconFont/1.png","slug":"1.png","post":"ck3it6k220013teyiaks7g039","modified":0,"renderable":0},{"_id":"source/_posts/IconFont/2.png","slug":"2.png","post":"ck3it6k220013teyiaks7g039","modified":0,"renderable":0},{"_id":"source/_posts/IconFont/20181228.jpg","slug":"20181228.jpg","post":"ck3it6k220013teyiaks7g039","modified":0,"renderable":0},{"_id":"source/_posts/IconFont/3.png","slug":"3.png","post":"ck3it6k220013teyiaks7g039","modified":0,"renderable":0},{"_id":"source/_posts/IconFont/5.png","slug":"5.png","post":"ck3it6k220013teyiaks7g039","modified":0,"renderable":0},{"_id":"source/_posts/aboutnpm/1.png","slug":"1.png","post":"ck3it6k2e001yteyi0p63xg0n","modified":0,"renderable":0},{"_id":"source/_posts/aboutnpm/2.png","slug":"2.png","post":"ck3it6k2e001yteyi0p63xg0n","modified":0,"renderable":0},{"_id":"source/_posts/aboutnpm/20191124.png","slug":"20191124.png","post":"ck3it6k2e001yteyi0p63xg0n","modified":0,"renderable":0},{"_id":"source/_posts/aboutnpm/3.png","slug":"3.png","post":"ck3it6k2e001yteyi0p63xg0n","modified":0,"renderable":0},{"_id":"source/_posts/aboutnpm/4.png","slug":"4.png","post":"ck3it6k2e001yteyi0p63xg0n","modified":0,"renderable":0},{"_id":"source/_posts/aboutnpm/5.png","slug":"5.png","post":"ck3it6k2e001yteyi0p63xg0n","modified":0,"renderable":0},{"_id":"source/_posts/关于CSS浮动/1.png","slug":"1.png","post":"ck3it6k2o0030teyiuzc6ilym","modified":0,"renderable":0},{"_id":"source/_posts/关于CSS浮动/2.png","slug":"2.png","post":"ck3it6k2o0030teyiuzc6ilym","modified":0,"renderable":0},{"_id":"source/_posts/关于CSS浮动/20181230.png","slug":"20181230.png","post":"ck3it6k2o0030teyiuzc6ilym","modified":0,"renderable":0},{"_id":"source/_posts/关于CSS浮动/3.png","slug":"3.png","post":"ck3it6k2o0030teyiuzc6ilym","modified":0,"renderable":0},{"_id":"source/_posts/关于CSS浮动/4.png","slug":"4.png","post":"ck3it6k2o0030teyiuzc6ilym","modified":0,"renderable":0},{"_id":"source/_posts/关于CSS浮动/5.png","slug":"5.png","post":"ck3it6k2o0030teyiuzc6ilym","modified":0,"renderable":0},{"_id":"source/_posts/超简单用hexo和github搭建个人博客/1.png","slug":"1.png","post":"ck3it6k2y003tteyioz2e22ds","modified":0,"renderable":0},{"_id":"source/_posts/超简单用hexo和github搭建个人博客/20190528.jpg","slug":"20190528.jpg","post":"ck3it6k2y003tteyioz2e22ds","modified":0,"renderable":0},{"_id":"source/_posts/超简单用hexo和github搭建个人博客/3.png","slug":"3.png","post":"ck3it6k2y003tteyioz2e22ds","modified":0,"renderable":0},{"_id":"source/_posts/超简单用hexo和github搭建个人博客/4.png","slug":"4.png","post":"ck3it6k2y003tteyioz2e22ds","modified":0,"renderable":0},{"_id":"source/_posts/超简单用hexo和github搭建个人博客/5.png","slug":"5.png","post":"ck3it6k2y003tteyioz2e22ds","modified":0,"renderable":0},{"_id":"source/_posts/关于BFC及外边距合并/1.png","slug":"1.png","post":"ck3it6k2n002uteyiz58awn3g","modified":0,"renderable":0},{"_id":"source/_posts/关于BFC及外边距合并/2.png","slug":"2.png","post":"ck3it6k2n002uteyiz58awn3g","modified":0,"renderable":0},{"_id":"source/_posts/关于BFC及外边距合并/20190116.png","slug":"20190116.png","post":"ck3it6k2n002uteyiz58awn3g","modified":0,"renderable":0},{"_id":"source/_posts/关于BFC及外边距合并/3.png","slug":"3.png","post":"ck3it6k2n002uteyiz58awn3g","modified":0,"renderable":0},{"_id":"source/_posts/关于BFC及外边距合并/4.png","slug":"4.png","post":"ck3it6k2n002uteyiz58awn3g","modified":0,"renderable":0},{"_id":"source/_posts/关于BFC及外边距合并/5.png","slug":"5.png","post":"ck3it6k2n002uteyiz58awn3g","modified":0,"renderable":0},{"_id":"source/_posts/关于BFC及外边距合并/6.png","slug":"6.png","post":"ck3it6k2n002uteyiz58awn3g","modified":0,"renderable":0},{"_id":"source/_posts/系统式样统一页面的制作/1.png","slug":"1.png","post":"ck3it6k2x003qteyisuz3lfyu","modified":0,"renderable":0},{"_id":"source/_posts/系统式样统一页面的制作/20190620.jpg","slug":"20190620.jpg","post":"ck3it6k2x003qteyisuz3lfyu","modified":0,"renderable":0},{"_id":"source/_posts/系统式样统一页面的制作/3.png","slug":"3.png","post":"ck3it6k2x003qteyisuz3lfyu","modified":0,"renderable":0},{"_id":"source/_posts/系统式样统一页面的制作/5.png","slug":"5.png","post":"ck3it6k2x003qteyisuz3lfyu","modified":0,"renderable":0},{"_id":"source/_posts/系统式样统一页面的制作/6.png","slug":"6.png","post":"ck3it6k2x003qteyisuz3lfyu","modified":0,"renderable":0},{"_id":"source/_posts/ssh/1.png","slug":"1.png","post":"ck3it6k2k002hteyinzy5jc9n","modified":0,"renderable":0},{"_id":"source/_posts/ssh/2.png","slug":"2.png","post":"ck3it6k2k002hteyinzy5jc9n","modified":0,"renderable":0},{"_id":"source/_posts/ssh/20191111.png","slug":"20191111.png","post":"ck3it6k2k002hteyinzy5jc9n","modified":0,"renderable":0},{"_id":"source/_posts/ssh/3.png","slug":"3.png","post":"ck3it6k2k002hteyinzy5jc9n","modified":0,"renderable":0},{"_id":"source/_posts/ssh/4.png","slug":"4.png","post":"ck3it6k2k002hteyinzy5jc9n","modified":0,"renderable":0},{"_id":"source/_posts/ssh/5.png","slug":"5.png","post":"ck3it6k2k002hteyinzy5jc9n","modified":0,"renderable":0},{"_id":"source/_posts/ssh/6.png","slug":"6.png","post":"ck3it6k2k002hteyinzy5jc9n","modified":0,"renderable":0},{"_id":"source/_posts/ssh/7.png","slug":"7.png","post":"ck3it6k2k002hteyinzy5jc9n","modified":0,"renderable":0},{"_id":"source/_posts/关于LocalStorage-cookie和session/1.png","slug":"1.png","post":"ck3it6k2r0037teyilhtkmmt6","modified":0,"renderable":0},{"_id":"source/_posts/关于LocalStorage-cookie和session/20190510.png","slug":"20190510.png","post":"ck3it6k2r0037teyilhtkmmt6","modified":0,"renderable":0},{"_id":"source/_posts/关于LocalStorage-cookie和session/3.png","slug":"3.png","post":"ck3it6k2r0037teyilhtkmmt6","modified":0,"renderable":0},{"_id":"source/_posts/关于LocalStorage-cookie和session/4.png","slug":"4.png","post":"ck3it6k2r0037teyilhtkmmt6","modified":0,"renderable":0},{"_id":"source/_posts/关于LocalStorage-cookie和session/5.png","slug":"5.png","post":"ck3it6k2r0037teyilhtkmmt6","modified":0,"renderable":0},{"_id":"source/_posts/关于LocalStorage-cookie和session/6.png","slug":"6.png","post":"ck3it6k2r0037teyilhtkmmt6","modified":0,"renderable":0},{"_id":"source/_posts/关于LocalStorage-cookie和session/7.png","slug":"7.png","post":"ck3it6k2r0037teyilhtkmmt6","modified":0,"renderable":0},{"_id":"source/_posts/Extension/1.gif","slug":"1.gif","post":"ck3it6k1q000pteyid4ygf7bd","modified":0,"renderable":0},{"_id":"source/_posts/Extension/2.gif","slug":"2.gif","post":"ck3it6k1q000pteyid4ygf7bd","modified":0,"renderable":0},{"_id":"source/_posts/Extension/20191005.png","slug":"20191005.png","post":"ck3it6k1q000pteyid4ygf7bd","modified":0,"renderable":0},{"_id":"source/_posts/Extension/3.jpg","slug":"3.jpg","post":"ck3it6k1q000pteyid4ygf7bd","modified":0,"renderable":0},{"_id":"source/_posts/Extension/4.gif","slug":"4.gif","post":"ck3it6k1q000pteyid4ygf7bd","modified":0,"renderable":0},{"_id":"source/_posts/Extension/5.jpg","slug":"5.jpg","post":"ck3it6k1q000pteyid4ygf7bd","modified":0,"renderable":0},{"_id":"source/_posts/Extension/6.png","slug":"6.png","post":"ck3it6k1q000pteyid4ygf7bd","modified":0,"renderable":0},{"_id":"source/_posts/Extension/7.gif","slug":"7.gif","post":"ck3it6k1q000pteyid4ygf7bd","modified":0,"renderable":0},{"_id":"source/_posts/Extension/8.jpg","slug":"8.jpg","post":"ck3it6k1q000pteyid4ygf7bd","modified":0,"renderable":0},{"_id":"source/_posts/Extension/9.png","slug":"9.png","post":"ck3it6k1q000pteyid4ygf7bd","modified":0,"renderable":0},{"_id":"source/_posts/iTerm2/1.png","slug":"1.png","post":"ck3it6k2h0028teyiyras3goj","modified":0,"renderable":0},{"_id":"source/_posts/iTerm2/2.png","slug":"2.png","post":"ck3it6k2h0028teyiyras3goj","modified":0,"renderable":0},{"_id":"source/_posts/iTerm2/20191006.png","slug":"20191006.png","post":"ck3it6k2h0028teyiyras3goj","modified":0,"renderable":0},{"_id":"source/_posts/iTerm2/3.png","slug":"3.png","post":"ck3it6k2h0028teyiyras3goj","modified":0,"renderable":0},{"_id":"source/_posts/iTerm2/4.png","slug":"4.png","post":"ck3it6k2h0028teyiyras3goj","modified":0,"renderable":0},{"_id":"source/_posts/iTerm2/5.png","slug":"5.png","post":"ck3it6k2h0028teyiyras3goj","modified":0,"renderable":0},{"_id":"source/_posts/iTerm2/6.png","slug":"6.png","post":"ck3it6k2h0028teyiyras3goj","modified":0,"renderable":0},{"_id":"source/_posts/iTerm2/7.png","slug":"7.png","post":"ck3it6k2h0028teyiyras3goj","modified":0,"renderable":0},{"_id":"source/_posts/iTerm2/8.png","slug":"8.png","post":"ck3it6k2h0028teyiyras3goj","modified":0,"renderable":0},{"_id":"source/_posts/iTerm2/9.png","slug":"9.png","post":"ck3it6k2h0028teyiyras3goj","modified":0,"renderable":0},{"_id":"source/_posts/使用Docker进行Cakephp3开发环境搭建/1.png","slug":"1.png","post":"ck3it6k2m002steyilltbrfow","modified":0,"renderable":0},{"_id":"source/_posts/使用Docker进行Cakephp3开发环境搭建/10.png","slug":"10.png","post":"ck3it6k2m002steyilltbrfow","modified":0,"renderable":0},{"_id":"source/_posts/使用Docker进行Cakephp3开发环境搭建/11.png","slug":"11.png","post":"ck3it6k2m002steyilltbrfow","modified":0,"renderable":0},{"_id":"source/_posts/使用Docker进行Cakephp3开发环境搭建/20190403.png","slug":"20190403.png","post":"ck3it6k2m002steyilltbrfow","modified":0,"renderable":0},{"_id":"source/_posts/使用Docker进行Cakephp3开发环境搭建/3.png","slug":"3.png","post":"ck3it6k2m002steyilltbrfow","modified":0,"renderable":0},{"_id":"source/_posts/使用Docker进行Cakephp3开发环境搭建/4.png","slug":"4.png","post":"ck3it6k2m002steyilltbrfow","modified":0,"renderable":0},{"_id":"source/_posts/使用Docker进行Cakephp3开发环境搭建/5.png","slug":"5.png","post":"ck3it6k2m002steyilltbrfow","modified":0,"renderable":0},{"_id":"source/_posts/使用Docker进行Cakephp3开发环境搭建/7.png","slug":"7.png","post":"ck3it6k2m002steyilltbrfow","modified":0,"renderable":0},{"_id":"source/_posts/使用Docker进行Cakephp3开发环境搭建/9.png","slug":"9.png","post":"ck3it6k2m002steyilltbrfow","modified":0,"renderable":0},{"_id":"source/_posts/Elisabeth/1.jpg","slug":"1.jpg","post":"ck3it6k1m000iteyi1tacr0kl","modified":0,"renderable":0},{"_id":"source/_posts/Elisabeth/10.jpg","slug":"10.jpg","post":"ck3it6k1m000iteyi1tacr0kl","modified":0,"renderable":0},{"_id":"source/_posts/Elisabeth/11.jpg","slug":"11.jpg","post":"ck3it6k1m000iteyi1tacr0kl","modified":0,"renderable":0},{"_id":"source/_posts/Elisabeth/12.jpg","slug":"12.jpg","post":"ck3it6k1m000iteyi1tacr0kl","modified":0,"renderable":0},{"_id":"source/_posts/Elisabeth/2.jpg","slug":"2.jpg","post":"ck3it6k1m000iteyi1tacr0kl","modified":0,"renderable":0},{"_id":"source/_posts/Elisabeth/20190926.jpg","slug":"20190926.jpg","post":"ck3it6k1m000iteyi1tacr0kl","modified":0,"renderable":0},{"_id":"source/_posts/Elisabeth/3.jpg","slug":"3.jpg","post":"ck3it6k1m000iteyi1tacr0kl","modified":0,"renderable":0},{"_id":"source/_posts/Elisabeth/4.jpg","slug":"4.jpg","post":"ck3it6k1m000iteyi1tacr0kl","modified":0,"renderable":0},{"_id":"source/_posts/Elisabeth/5.jpg","slug":"5.jpg","post":"ck3it6k1m000iteyi1tacr0kl","modified":0,"renderable":0},{"_id":"source/_posts/Elisabeth/6.jpg","slug":"6.jpg","post":"ck3it6k1m000iteyi1tacr0kl","modified":0,"renderable":0},{"_id":"source/_posts/Elisabeth/7.jpg","slug":"7.jpg","post":"ck3it6k1m000iteyi1tacr0kl","modified":0,"renderable":0},{"_id":"source/_posts/Elisabeth/8.jpg","slug":"8.jpg","post":"ck3it6k1m000iteyi1tacr0kl","modified":0,"renderable":0},{"_id":"source/_posts/Elisabeth/9.jpg","slug":"9.jpg","post":"ck3it6k1m000iteyi1tacr0kl","modified":0,"renderable":0},{"_id":"source/_posts/jQuery/1.png","slug":"1.png","post":"ck3it6k2i002bteyi3gtykuvm","modified":0,"renderable":0},{"_id":"source/_posts/jQuery/10.png","slug":"10.png","post":"ck3it6k2i002bteyi3gtykuvm","modified":0,"renderable":0},{"_id":"source/_posts/jQuery/11.png","slug":"11.png","post":"ck3it6k2i002bteyi3gtykuvm","modified":0,"renderable":0},{"_id":"source/_posts/jQuery/12.png","slug":"12.png","post":"ck3it6k2i002bteyi3gtykuvm","modified":0,"renderable":0},{"_id":"source/_posts/jQuery/13.png","slug":"13.png","post":"ck3it6k2i002bteyi3gtykuvm","modified":0,"renderable":0},{"_id":"source/_posts/jQuery/2.png","slug":"2.png","post":"ck3it6k2i002bteyi3gtykuvm","modified":0,"renderable":0},{"_id":"source/_posts/jQuery/20190712.png","slug":"20190712.png","post":"ck3it6k2i002bteyi3gtykuvm","modified":0,"renderable":0},{"_id":"source/_posts/jQuery/3.png","slug":"3.png","post":"ck3it6k2i002bteyi3gtykuvm","modified":0,"renderable":0},{"_id":"source/_posts/jQuery/5.png","slug":"5.png","post":"ck3it6k2i002bteyi3gtykuvm","modified":0,"renderable":0},{"_id":"source/_posts/jQuery/6.png","slug":"6.png","post":"ck3it6k2i002bteyi3gtykuvm","modified":0,"renderable":0},{"_id":"source/_posts/jQuery/7.png","slug":"7.png","post":"ck3it6k2i002bteyi3gtykuvm","modified":0,"renderable":0},{"_id":"source/_posts/jQuery/8.png","slug":"8.png","post":"ck3it6k2i002bteyi3gtykuvm","modified":0,"renderable":0},{"_id":"source/_posts/jQuery/9.png","slug":"9.png","post":"ck3it6k2i002bteyi3gtykuvm","modified":0,"renderable":0},{"_id":"source/_posts/createDockerModx/1.png","slug":"1.png","post":"ck3it6k2f0021teyiwk2v6di4","modified":0,"renderable":0},{"_id":"source/_posts/createDockerModx/10.png","slug":"10.png","post":"ck3it6k2f0021teyiwk2v6di4","modified":0,"renderable":0},{"_id":"source/_posts/createDockerModx/11.png","slug":"11.png","post":"ck3it6k2f0021teyiwk2v6di4","modified":0,"renderable":0},{"_id":"source/_posts/createDockerModx/12.png","slug":"12.png","post":"ck3it6k2f0021teyiwk2v6di4","modified":0,"renderable":0},{"_id":"source/_posts/createDockerModx/2.png","slug":"2.png","post":"ck3it6k2f0021teyiwk2v6di4","modified":0,"renderable":0},{"_id":"source/_posts/createDockerModx/20191031.png","slug":"20191031.png","post":"ck3it6k2f0021teyiwk2v6di4","modified":0,"renderable":0},{"_id":"source/_posts/createDockerModx/3.png","slug":"3.png","post":"ck3it6k2f0021teyiwk2v6di4","modified":0,"renderable":0},{"_id":"source/_posts/createDockerModx/4.jpg","slug":"4.jpg","post":"ck3it6k2f0021teyiwk2v6di4","modified":0,"renderable":0},{"_id":"source/_posts/createDockerModx/4.png","slug":"4.png","post":"ck3it6k2f0021teyiwk2v6di4","modified":0,"renderable":0},{"_id":"source/_posts/createDockerModx/5.jpg","slug":"5.jpg","post":"ck3it6k2f0021teyiwk2v6di4","modified":0,"renderable":0},{"_id":"source/_posts/createDockerModx/6.jpg","slug":"6.jpg","post":"ck3it6k2f0021teyiwk2v6di4","modified":0,"renderable":0},{"_id":"source/_posts/createDockerModx/6.png","slug":"6.png","post":"ck3it6k2f0021teyiwk2v6di4","modified":0,"renderable":0},{"_id":"source/_posts/createDockerModx/7.png","slug":"7.png","post":"ck3it6k2f0021teyiwk2v6di4","modified":0,"renderable":0},{"_id":"source/_posts/createDockerModx/8.png","slug":"8.png","post":"ck3it6k2f0021teyiwk2v6di4","modified":0,"renderable":0},{"_id":"source/_posts/createDockerModx/9.png","slug":"9.png","post":"ck3it6k2f0021teyiwk2v6di4","modified":0,"renderable":0},{"_id":"source/_posts/API/20190716.png","slug":"20190716.png","post":"ck3it6k6e007bteyipcwjevjm","modified":0,"renderable":0},{"_id":"source/_posts/常见浏览器及浏览器内核/20181029.png","slug":"20181029.png","post":"ck3it6k7z007jteyic3z8ul06","modified":0,"renderable":0},{"_id":"source/_posts/Docker环境下使用bake自动生成页面/1.png","slug":"1.png","post":"ck3it6k6g007cteyil3qxqa8d","modified":0,"renderable":0},{"_id":"source/_posts/Docker环境下使用bake自动生成页面/20190406.png","slug":"20190406.png","post":"ck3it6k6g007cteyil3qxqa8d","modified":0,"renderable":0},{"_id":"source/_posts/实现一个翻转注册登陆页面/1.png","slug":"1.png","post":"ck3it6k7f007gteyixpc5996a","modified":0,"renderable":0},{"_id":"source/_posts/实现一个翻转注册登陆页面/20190420.png","slug":"20190420.png","post":"ck3it6k7f007gteyixpc5996a","modified":0,"renderable":0},{"_id":"source/_posts/MissSaigon/1.jpg","slug":"1.jpg","post":"ck3it6k6k007eteyigcsht7hf","modified":0,"renderable":0},{"_id":"source/_posts/MissSaigon/10.jpg","slug":"10.jpg","post":"ck3it6k6k007eteyigcsht7hf","modified":0,"renderable":0},{"_id":"source/_posts/MissSaigon/11.jpg","slug":"11.jpg","post":"ck3it6k6k007eteyigcsht7hf","modified":0,"renderable":0},{"_id":"source/_posts/MissSaigon/12.jpg","slug":"12.jpg","post":"ck3it6k6k007eteyigcsht7hf","modified":0,"renderable":0},{"_id":"source/_posts/MissSaigon/13.jpg","slug":"13.jpg","post":"ck3it6k6k007eteyigcsht7hf","modified":0,"renderable":0},{"_id":"source/_posts/MissSaigon/14.jpg","slug":"14.jpg","post":"ck3it6k6k007eteyigcsht7hf","modified":0,"renderable":0},{"_id":"source/_posts/MissSaigon/15.jpg","slug":"15.jpg","post":"ck3it6k6k007eteyigcsht7hf","modified":0,"renderable":0},{"_id":"source/_posts/MissSaigon/16.jpg","slug":"16.jpg","post":"ck3it6k6k007eteyigcsht7hf","modified":0,"renderable":0},{"_id":"source/_posts/MissSaigon/17.jpg","slug":"17.jpg","post":"ck3it6k6k007eteyigcsht7hf","modified":0,"renderable":0},{"_id":"source/_posts/MissSaigon/18.jpg","slug":"18.jpg","post":"ck3it6k6k007eteyigcsht7hf","modified":0,"renderable":0},{"_id":"source/_posts/MissSaigon/2.jpg","slug":"2.jpg","post":"ck3it6k6k007eteyigcsht7hf","modified":0,"renderable":0},{"_id":"source/_posts/MissSaigon/20191020.jpg","slug":"20191020.jpg","post":"ck3it6k6k007eteyigcsht7hf","modified":0,"renderable":0},{"_id":"source/_posts/MissSaigon/3.jpg","slug":"3.jpg","post":"ck3it6k6k007eteyigcsht7hf","modified":0,"renderable":0},{"_id":"source/_posts/MissSaigon/4.jpg","slug":"4.jpg","post":"ck3it6k6k007eteyigcsht7hf","modified":0,"renderable":0},{"_id":"source/_posts/MissSaigon/5.jpg","slug":"5.jpg","post":"ck3it6k6k007eteyigcsht7hf","modified":0,"renderable":0},{"_id":"source/_posts/MissSaigon/6.jpg","slug":"6.jpg","post":"ck3it6k6k007eteyigcsht7hf","modified":0,"renderable":0},{"_id":"source/_posts/MissSaigon/7.jpg","slug":"7.jpg","post":"ck3it6k6k007eteyigcsht7hf","modified":0,"renderable":0},{"_id":"source/_posts/MissSaigon/8.jpg","slug":"8.jpg","post":"ck3it6k6k007eteyigcsht7hf","modified":0,"renderable":0},{"_id":"source/_posts/MissSaigon/9.jpg","slug":"9.jpg","post":"ck3it6k6k007eteyigcsht7hf","modified":0,"renderable":0},{"_id":"source/_posts/CSS编码规范/20190122.png","slug":"20190122.png","post":"ck3it6kdg007steyi3y6m0j5y","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ck3it6k180008teyi2btp4bxh","category_id":"ck3it6k110004teyiji1hdnt6","_id":"ck3it6k1j000fteyi23ifi0at"},{"post_id":"ck3it6k0s0000teyirt7mz96n","category_id":"ck3it6k110004teyiji1hdnt6","_id":"ck3it6k1m000jteyi7vkfnu8w"},{"post_id":"ck3it6k1f000dteyij8ui1j6v","category_id":"ck3it6k1d000ateyi6irj5m3h","_id":"ck3it6k1o000mteyi368xgxsw"},{"post_id":"ck3it6k0y0002teyijv1g1ay2","category_id":"ck3it6k1d000ateyi6irj5m3h","_id":"ck3it6k1r000qteyi546i6es9"},{"post_id":"ck3it6k1j000eteyi9tsmbw9t","category_id":"ck3it6k110004teyiji1hdnt6","_id":"ck3it6k1u000tteyi2737e566"},{"post_id":"ck3it6k140006teyih20glrf9","category_id":"ck3it6k1d000ateyi6irj5m3h","_id":"ck3it6k1x000xteyiluewkp3w"},{"post_id":"ck3it6k1c0009teyit1hqb43w","category_id":"ck3it6k1d000ateyi6irj5m3h","_id":"ck3it6k200010teyi6rde3ucq"},{"post_id":"ck3it6k1u000steyijpkjlhrm","category_id":"ck3it6k1d000ateyi6irj5m3h","_id":"ck3it6k230014teyi8m2fqnno"},{"post_id":"ck3it6k1w000wteyisklho8gf","category_id":"ck3it6k1d000ateyi6irj5m3h","_id":"ck3it6k240017teyizkk9hj83"},{"post_id":"ck3it6k1m000iteyi1tacr0kl","category_id":"ck3it6k1v000uteyixj18ihdq","_id":"ck3it6k27001bteyidxikxujc"},{"post_id":"ck3it6k220013teyiaks7g039","category_id":"ck3it6k1d000ateyi6irj5m3h","_id":"ck3it6k28001eteyi32nrc0e4"},{"post_id":"ck3it6k1o000lteyieelvj9sf","category_id":"ck3it6k1v000uteyixj18ihdq","_id":"ck3it6k2a001iteyimoh2jtry"},{"post_id":"ck3it6k230016teyig29zxi45","category_id":"ck3it6k1d000ateyi6irj5m3h","_id":"ck3it6k2a001kteyiy4pmhvys"},{"post_id":"ck3it6k24001ateyisktuocs6","category_id":"ck3it6k1d000ateyi6irj5m3h","_id":"ck3it6k2b001mteyivlpj72ep"},{"post_id":"ck3it6k1q000pteyid4ygf7bd","category_id":"ck3it6k240018teyicsx68p1f","_id":"ck3it6k2c001pteyi1agfk9yl"},{"post_id":"ck3it6k28001dteyi2wrdfvb8","category_id":"ck3it6k1d000ateyi6irj5m3h","_id":"ck3it6k2d001rteyi276uc5wu"},{"post_id":"ck3it6k29001gteyibwg3vfl7","category_id":"ck3it6k1d000ateyi6irj5m3h","_id":"ck3it6k2d001uteyi0jfqvauu"},{"post_id":"ck3it6k1z000zteyievxyior3","category_id":"ck3it6k240018teyicsx68p1f","_id":"ck3it6k2e001wteyiyc5gql7y"},{"post_id":"ck3it6k2a001jteyiutow0ptc","category_id":"ck3it6k1d000ateyi6irj5m3h","_id":"ck3it6k2f001zteyigg8cm7s5"},{"post_id":"ck3it6k2b001lteyim6n3qzx3","category_id":"ck3it6k1d000ateyi6irj5m3h","_id":"ck3it6k2g0022teyi3gho5jze"},{"post_id":"ck3it6k2b001oteyiknakn1w4","category_id":"ck3it6k1d000ateyi6irj5m3h","_id":"ck3it6k2h0026teyipht3q9uh"},{"post_id":"ck3it6k2c001qteyi4cqbh8zo","category_id":"ck3it6k240018teyicsx68p1f","_id":"ck3it6k2i0029teyieqh2yytm"},{"post_id":"ck3it6k2d001tteyifu20ebum","category_id":"ck3it6k1v000uteyixj18ihdq","_id":"ck3it6k2j002cteyio28zhxfv"},{"post_id":"ck3it6k2e001vteyi8i2qkrbe","category_id":"ck3it6k1v000uteyixj18ihdq","_id":"ck3it6k2k002gteyiodk4u6eh"},{"post_id":"ck3it6k2e001yteyi0p63xg0n","category_id":"ck3it6k240018teyicsx68p1f","_id":"ck3it6k2k002jteyicm3v0q0y"},{"post_id":"ck3it6k2f0021teyiwk2v6di4","category_id":"ck3it6k110004teyiji1hdnt6","_id":"ck3it6k2l002nteyiq5pejat5"},{"post_id":"ck3it6k2g0024teyiexohw5hh","category_id":"ck3it6k110004teyiji1hdnt6","_id":"ck3it6k2m002qteyixnfly56e"},{"post_id":"ck3it6k2h0028teyiyras3goj","category_id":"ck3it6k240018teyicsx68p1f","_id":"ck3it6k2n002tteyivspyzfwd"},{"post_id":"ck3it6k2i002bteyi3gtykuvm","category_id":"ck3it6k1d000ateyi6irj5m3h","_id":"ck3it6k2n002vteyin6t1vl27"},{"post_id":"ck3it6k2j002eteyi190ukd7t","category_id":"ck3it6k1d000ateyi6irj5m3h","_id":"ck3it6k2o002yteyi363p7fct"},{"post_id":"ck3it6k2k002hteyinzy5jc9n","category_id":"ck3it6k110004teyiji1hdnt6","_id":"ck3it6k2p0031teyixm60yvot"},{"post_id":"ck3it6k2l002lteyis64wphar","category_id":"ck3it6k1d000ateyi6irj5m3h","_id":"ck3it6k2q0034teyix95haa1r"},{"post_id":"ck3it6k2l002oteyii4kwuemb","category_id":"ck3it6k1d000ateyi6irj5m3h","_id":"ck3it6k2r0038teyit2mwu1kn"},{"post_id":"ck3it6k2m002steyilltbrfow","category_id":"ck3it6k110004teyiji1hdnt6","_id":"ck3it6k2s003bteyiapn7v4kx"},{"post_id":"ck3it6k2n002uteyiz58awn3g","category_id":"ck3it6k1d000ateyi6irj5m3h","_id":"ck3it6k2t003fteyii69uxhs8"},{"post_id":"ck3it6k2n002wteyi0pxvpry6","category_id":"ck3it6k1d000ateyi6irj5m3h","_id":"ck3it6k2u003iteyi35hrgxqr"},{"post_id":"ck3it6k2o0030teyiuzc6ilym","category_id":"ck3it6k1d000ateyi6irj5m3h","_id":"ck3it6k2v003mteyi4rir1578"},{"post_id":"ck3it6k2p0033teyiem55cn48","category_id":"ck3it6k1d000ateyi6irj5m3h","_id":"ck3it6k2x003pteyi5vt3lutw"},{"post_id":"ck3it6k2r0037teyilhtkmmt6","category_id":"ck3it6k1d000ateyi6irj5m3h","_id":"ck3it6k2y003steyitm8wclea"},{"post_id":"ck3it6k2r003ateyih85k0loh","category_id":"ck3it6k1d000ateyi6irj5m3h","_id":"ck3it6k2y003uteyid77032jf"},{"post_id":"ck3it6k2s003eteyi9f47bneb","category_id":"ck3it6k1d000ateyi6irj5m3h","_id":"ck3it6k2z003vteyi77qmjq4x"},{"post_id":"ck3it6k2t003hteyivra9f7it","category_id":"ck3it6k1d000ateyi6irj5m3h","_id":"ck3it6k2z003yteyi2tmyhmgn"},{"post_id":"ck3it6k2v003lteyizyappznm","category_id":"ck3it6k1d000ateyi6irj5m3h","_id":"ck3it6k2z0040teyipori9m7j"},{"post_id":"ck3it6k2w003oteyisspq064m","category_id":"ck3it6k1d000ateyi6irj5m3h","_id":"ck3it6k2z0042teyioel10imh"},{"post_id":"ck3it6k2x003qteyisuz3lfyu","category_id":"ck3it6k1d000ateyi6irj5m3h","_id":"ck3it6k2z0044teyisa8nz5ub"},{"post_id":"ck3it6k2y003tteyioz2e22ds","category_id":"ck3it6k1d000ateyi6irj5m3h","_id":"ck3it6k300047teyiwql7fwgj"},{"post_id":"ck3it6k6e007bteyipcwjevjm","category_id":"ck3it6k1d000ateyi6irj5m3h","_id":"ck3it6k7g007hteyitvqdzd35"},{"post_id":"ck3it6k6g007cteyil3qxqa8d","category_id":"ck3it6k110004teyiji1hdnt6","_id":"ck3it6k80007kteyi2fxytl1y"},{"post_id":"ck3it6k6k007eteyigcsht7hf","category_id":"ck3it6k1v000uteyixj18ihdq","_id":"ck3it6k8p007mteyiq45d9o1w"},{"post_id":"ck3it6k7f007gteyixpc5996a","category_id":"ck3it6k1d000ateyi6irj5m3h","_id":"ck3it6k92007oteyi1le2z5rl"},{"post_id":"ck3it6k7z007jteyic3z8ul06","category_id":"ck3it6k1d000ateyi6irj5m3h","_id":"ck3it6k9h007qteyipdl0m05c"},{"post_id":"ck3it6kdg007steyi3y6m0j5y","category_id":"ck3it6k1d000ateyi6irj5m3h","_id":"ck3it6ke6007uteyiffx2zgjk"}],"PostTag":[{"post_id":"ck3it6k0s0000teyirt7mz96n","tag_id":"ck3it6k130005teyisx1s2ulz","_id":"ck3it6k1f000cteyivqtyrjmw"},{"post_id":"ck3it6k0y0002teyijv1g1ay2","tag_id":"ck3it6k1d000bteyiclkb5x5o","_id":"ck3it6k1m000kteyimvofpcc4"},{"post_id":"ck3it6k140006teyih20glrf9","tag_id":"ck3it6k1k000hteyiuiw57qqr","_id":"ck3it6k1r000rteyinzir01rh"},{"post_id":"ck3it6k180008teyi2btp4bxh","tag_id":"ck3it6k1q000oteyi769o82us","_id":"ck3it6k1z000yteyi8assywue"},{"post_id":"ck3it6k1c0009teyit1hqb43w","tag_id":"ck3it6k1d000bteyiclkb5x5o","_id":"ck3it6k230015teyi1x37hbgs"},{"post_id":"ck3it6k1f000dteyij8ui1j6v","tag_id":"ck3it6k1k000hteyiuiw57qqr","_id":"ck3it6k28001cteyibtvd3s2z"},{"post_id":"ck3it6k1j000eteyi9tsmbw9t","tag_id":"ck3it6k240019teyi0havp74j","_id":"ck3it6k2f0020teyioeqhcp9f"},{"post_id":"ck3it6k1j000eteyi9tsmbw9t","tag_id":"ck3it6k2a001hteyify8oep2u","_id":"ck3it6k2g0023teyijvfka6b4"},{"post_id":"ck3it6k1j000eteyi9tsmbw9t","tag_id":"ck3it6k2b001nteyimckyt2wk","_id":"ck3it6k2h0027teyiyqncrcd8"},{"post_id":"ck3it6k1j000eteyi9tsmbw9t","tag_id":"ck3it6k2d001steyixa2o42fn","_id":"ck3it6k2i002ateyiemhvgdnr"},{"post_id":"ck3it6k1m000iteyi1tacr0kl","tag_id":"ck3it6k2e001xteyiptj6clk6","_id":"ck3it6k2k002fteyiv965us54"},{"post_id":"ck3it6k1m000iteyi1tacr0kl","tag_id":"ck3it6k2h0025teyirunobf75","_id":"ck3it6k2k002iteyit4bq25sd"},{"post_id":"ck3it6k2i002bteyi3gtykuvm","tag_id":"ck3it6k1d000bteyiclkb5x5o","_id":"ck3it6k2l002mteyikifl0lrl"},{"post_id":"ck3it6k2j002eteyi190ukd7t","tag_id":"ck3it6k1d000bteyiclkb5x5o","_id":"ck3it6k2m002pteyipp85jk5x"},{"post_id":"ck3it6k1q000pteyid4ygf7bd","tag_id":"ck3it6k2j002dteyiqupg99p0","_id":"ck3it6k2o002zteyi0xrw2mzo"},{"post_id":"ck3it6k1q000pteyid4ygf7bd","tag_id":"ck3it6k2l002kteyi9pr17inb","_id":"ck3it6k2p0032teyiylw9vqcf"},{"post_id":"ck3it6k1q000pteyid4ygf7bd","tag_id":"ck3it6k2m002rteyiz05lc2bj","_id":"ck3it6k2r0036teyixcc8j04p"},{"post_id":"ck3it6k2o0030teyiuzc6ilym","tag_id":"ck3it6k1k000hteyiuiw57qqr","_id":"ck3it6k2r0039teyiaec00svu"},{"post_id":"ck3it6k2p0033teyiem55cn48","tag_id":"ck3it6k1k000hteyiuiw57qqr","_id":"ck3it6k2s003dteyiqjfkdusz"},{"post_id":"ck3it6k1u000steyijpkjlhrm","tag_id":"ck3it6k2o002xteyi4flhgduf","_id":"ck3it6k2t003gteyifc0c4bfq"},{"post_id":"ck3it6k1u000steyijpkjlhrm","tag_id":"ck3it6k2q0035teyi7f2ogoot","_id":"ck3it6k2v003kteyinz8ad4t9"},{"post_id":"ck3it6k1w000wteyisklho8gf","tag_id":"ck3it6k2s003cteyi7mk10j0c","_id":"ck3it6k2w003nteyijwi3k5f6"},{"post_id":"ck3it6k1z000zteyievxyior3","tag_id":"ck3it6k2u003jteyivjzqdkpv","_id":"ck3it6k2z003xteyijval9a7r"},{"post_id":"ck3it6k1z000zteyievxyior3","tag_id":"ck3it6k2y003rteyiq9cu8ket","_id":"ck3it6k2z003zteyimyqrlgg5"},{"post_id":"ck3it6k220013teyiaks7g039","tag_id":"ck3it6k2z003wteyibv9e93cx","_id":"ck3it6k2z0043teyidvej02ou"},{"post_id":"ck3it6k220013teyiaks7g039","tag_id":"ck3it6k1k000hteyiuiw57qqr","_id":"ck3it6k2z0045teyicnjnco6h"},{"post_id":"ck3it6k230016teyig29zxi45","tag_id":"ck3it6k2z0041teyivy95n8x9","_id":"ck3it6k300048teyi64ycg1qb"},{"post_id":"ck3it6k24001ateyisktuocs6","tag_id":"ck3it6k2z0041teyivy95n8x9","_id":"ck3it6k30004ateyiv0gwx8v6"},{"post_id":"ck3it6k28001dteyi2wrdfvb8","tag_id":"ck3it6k2z0041teyivy95n8x9","_id":"ck3it6k31004cteyi0idkav0l"},{"post_id":"ck3it6k29001gteyibwg3vfl7","tag_id":"ck3it6k2z0041teyivy95n8x9","_id":"ck3it6k34004eteyijmrx7fbp"},{"post_id":"ck3it6k2a001jteyiutow0ptc","tag_id":"ck3it6k2z0041teyivy95n8x9","_id":"ck3it6k35004gteyibws6suv8"},{"post_id":"ck3it6k2b001lteyim6n3qzx3","tag_id":"ck3it6k34004fteyihy62exu4","_id":"ck3it6k36004jteyi6aa5l8sf"},{"post_id":"ck3it6k2b001lteyim6n3qzx3","tag_id":"ck3it6k35004hteyiscu3xjzg","_id":"ck3it6k37004kteyiqejv77vt"},{"post_id":"ck3it6k2b001oteyiknakn1w4","tag_id":"ck3it6k36004iteyim4y69a2e","_id":"ck3it6k3b004oteyi3taxh8xz"},{"post_id":"ck3it6k2b001oteyiknakn1w4","tag_id":"ck3it6k37004lteyibi7mk4rj","_id":"ck3it6k3b004pteyiivm43duf"},{"post_id":"ck3it6k2b001oteyiknakn1w4","tag_id":"ck3it6k38004mteyi75ms2v60","_id":"ck3it6k3c004rteyips3thoin"},{"post_id":"ck3it6k2c001qteyi4cqbh8zo","tag_id":"ck3it6k3a004nteyio6a7bmla","_id":"ck3it6k3f004tteyio0dfziee"},{"post_id":"ck3it6k2c001qteyi4cqbh8zo","tag_id":"ck3it6k3b004qteyipup2ij12","_id":"ck3it6k3g004uteyipd1d4d5a"},{"post_id":"ck3it6k2d001tteyifu20ebum","tag_id":"ck3it6k3d004steyip8e6dy5v","_id":"ck3it6k3j004yteyi9ys5a9mh"},{"post_id":"ck3it6k2d001tteyifu20ebum","tag_id":"ck3it6k3g004vteyis8sfmsn0","_id":"ck3it6k3j004zteyizlraecpd"},{"post_id":"ck3it6k2d001tteyifu20ebum","tag_id":"ck3it6k3h004wteyii4ugqzur","_id":"ck3it6k3k0051teyird9wb7o1"},{"post_id":"ck3it6k2e001vteyi8i2qkrbe","tag_id":"ck3it6k3i004xteyiild5l7aw","_id":"ck3it6k3k0053teyi8ecdxnxe"},{"post_id":"ck3it6k2e001vteyi8i2qkrbe","tag_id":"ck3it6k3j0050teyibat146po","_id":"ck3it6k3k0054teyiwb6bb0zb"},{"post_id":"ck3it6k2e001yteyi0p63xg0n","tag_id":"ck3it6k3k0052teyikiu349c4","_id":"ck3it6k3l0057teyiq2kmvbn0"},{"post_id":"ck3it6k2e001yteyi0p63xg0n","tag_id":"ck3it6k3l0055teyinh6g0qfp","_id":"ck3it6k3l0058teyi9s1x601q"},{"post_id":"ck3it6k2f0021teyiwk2v6di4","tag_id":"ck3it6k3l0056teyilx4nz32o","_id":"ck3it6k3n005cteyiktooh7qe"},{"post_id":"ck3it6k2f0021teyiwk2v6di4","tag_id":"ck3it6k3m0059teyijxzjjcf6","_id":"ck3it6k3n005dteyiyuc7qlhm"},{"post_id":"ck3it6k2f0021teyiwk2v6di4","tag_id":"ck3it6k3m005ateyi4vdl2x9v","_id":"ck3it6k3o005fteyitnlbi7i2"},{"post_id":"ck3it6k2g0024teyiexohw5hh","tag_id":"ck3it6k3l0056teyilx4nz32o","_id":"ck3it6k3o005hteyi4gvv0vm5"},{"post_id":"ck3it6k2g0024teyiexohw5hh","tag_id":"ck3it6k3n005eteyitndaek0p","_id":"ck3it6k3p005iteyiozxhd5b4"},{"post_id":"ck3it6k2h0028teyiyras3goj","tag_id":"ck3it6k2j002dteyiqupg99p0","_id":"ck3it6k3t005mteyignlv30h7"},{"post_id":"ck3it6k2h0028teyiyras3goj","tag_id":"ck3it6k3p005jteyicu6ea7nz","_id":"ck3it6k3t005nteyi8y70t4ox"},{"post_id":"ck3it6k2h0028teyiyras3goj","tag_id":"ck3it6k3p005kteyij0u3pi69","_id":"ck3it6k3u005pteyi83zmm620"},{"post_id":"ck3it6k2k002hteyinzy5jc9n","tag_id":"ck3it6k3p005lteyi0qudxnuj","_id":"ck3it6k3x005tteyi91so70sd"},{"post_id":"ck3it6k2k002hteyinzy5jc9n","tag_id":"ck3it6k3u005oteyi94wkvkua","_id":"ck3it6k3x005uteyisztdlrw9"},{"post_id":"ck3it6k2k002hteyinzy5jc9n","tag_id":"ck3it6k3u005qteyihm4ala7p","_id":"ck3it6k3y005wteyitrghzcwh"},{"post_id":"ck3it6k2k002hteyinzy5jc9n","tag_id":"ck3it6k3v005rteyi5m0gizlf","_id":"ck3it6k3y005xteyi1wepepil"},{"post_id":"ck3it6k2l002lteyis64wphar","tag_id":"ck3it6k2z0041teyivy95n8x9","_id":"ck3it6k3z005zteyi3dbz34hx"},{"post_id":"ck3it6k2l002lteyis64wphar","tag_id":"ck3it6k3x005vteyi8rpxzs7g","_id":"ck3it6k3z0060teyidy8lreyq"},{"post_id":"ck3it6k2l002oteyii4kwuemb","tag_id":"ck3it6k3y005yteyiua1291es","_id":"ck3it6k400062teyi37j6cczb"},{"post_id":"ck3it6k2m002steyilltbrfow","tag_id":"ck3it6k3l0056teyilx4nz32o","_id":"ck3it6k410064teyiofee20ff"},{"post_id":"ck3it6k2n002uteyiz58awn3g","tag_id":"ck3it6k1k000hteyiuiw57qqr","_id":"ck3it6k420066teyiinb4fmhc"},{"post_id":"ck3it6k2n002uteyiz58awn3g","tag_id":"ck3it6k410063teyis30gmbml","_id":"ck3it6k430067teyi4xxuu9f9"},{"post_id":"ck3it6k2n002wteyi0pxvpry6","tag_id":"ck3it6k420065teyid9e381i4","_id":"ck3it6k430069teyiq2adceb7"},{"post_id":"ck3it6k2r0037teyilhtkmmt6","tag_id":"ck3it6k430068teyisejuoxg1","_id":"ck3it6k47006dteyisoc7nxoe"},{"post_id":"ck3it6k2r0037teyilhtkmmt6","tag_id":"ck3it6k43006ateyiz0hgzm8r","_id":"ck3it6k48006eteyi325hqt9t"},{"post_id":"ck3it6k2r0037teyilhtkmmt6","tag_id":"ck3it6k44006bteyikae2xkxf","_id":"ck3it6k48006gteyipem9brqq"},{"post_id":"ck3it6k2r003ateyih85k0loh","tag_id":"ck3it6k2z0041teyivy95n8x9","_id":"ck3it6k4c006kteyixocurydc"},{"post_id":"ck3it6k2r003ateyih85k0loh","tag_id":"ck3it6k48006fteyijddzlim1","_id":"ck3it6k4e006lteyiwpwoi1nc"},{"post_id":"ck3it6k2r003ateyih85k0loh","tag_id":"ck3it6k49006hteyic0ladbou","_id":"ck3it6k4g006nteyib2clkhmj"},{"post_id":"ck3it6k2r003ateyih85k0loh","tag_id":"ck3it6k4a006iteyieq8glba8","_id":"ck3it6k4g006oteyifkcqjnin"},{"post_id":"ck3it6k2s003eteyi9f47bneb","tag_id":"ck3it6k4a006jteyic53xjjvj","_id":"ck3it6k4h006qteyiwa8wmi7r"},{"post_id":"ck3it6k2t003hteyivra9f7it","tag_id":"ck3it6k2z0041teyivy95n8x9","_id":"ck3it6k4h006steyi9syjjj3t"},{"post_id":"ck3it6k2t003hteyivra9f7it","tag_id":"ck3it6k4g006pteyij8qewffa","_id":"ck3it6k4h006tteyizgwrt39u"},{"post_id":"ck3it6k2v003lteyizyappznm","tag_id":"ck3it6k4h006rteyi5xlfedsw","_id":"ck3it6k4j006vteyiioq940ip"},{"post_id":"ck3it6k2w003oteyisspq064m","tag_id":"ck3it6k2z0041teyivy95n8x9","_id":"ck3it6k4l006yteyic15re8xt"},{"post_id":"ck3it6k2w003oteyisspq064m","tag_id":"ck3it6k4j006wteyigwhek032","_id":"ck3it6k4l006zteyix9symw0u"},{"post_id":"ck3it6k2x003qteyisuz3lfyu","tag_id":"ck3it6k2z0041teyivy95n8x9","_id":"ck3it6k4o0073teyiwjl6cde9"},{"post_id":"ck3it6k2x003qteyisuz3lfyu","tag_id":"ck3it6k36004iteyim4y69a2e","_id":"ck3it6k4o0074teyi1701sooi"},{"post_id":"ck3it6k2x003qteyisuz3lfyu","tag_id":"ck3it6k4m0071teyi1vws6zxj","_id":"ck3it6k4p0076teyiqr565jyv"},{"post_id":"ck3it6k2y003tteyioz2e22ds","tag_id":"ck3it6k4n0072teyiexog63st","_id":"ck3it6k4q0078teyiev5t26u0"},{"post_id":"ck3it6k2y003tteyioz2e22ds","tag_id":"ck3it6k4o0075teyipasdke43","_id":"ck3it6k4q0079teyilkba71hc"},{"post_id":"ck3it6k2y003tteyioz2e22ds","tag_id":"ck3it6k4p0077teyiyqecy27a","_id":"ck3it6k4r007ateyixkbsjqmr"},{"post_id":"ck3it6k6e007bteyipcwjevjm","tag_id":"ck3it6k1d000bteyiclkb5x5o","_id":"ck3it6k6j007dteyiqumhky9i"},{"post_id":"ck3it6k6g007cteyil3qxqa8d","tag_id":"ck3it6k3l0056teyilx4nz32o","_id":"ck3it6k7c007fteyix6s9didu"},{"post_id":"ck3it6k7f007gteyixpc5996a","tag_id":"ck3it6k1k000hteyiuiw57qqr","_id":"ck3it6k8n007lteyivbeqk13o"},{"post_id":"ck3it6k7z007jteyic3z8ul06","tag_id":"ck3it6k4h006rteyi5xlfedsw","_id":"ck3it6k91007nteyivoo9f3dx"},{"post_id":"ck3it6k6k007eteyigcsht7hf","tag_id":"ck3it6k2e001xteyiptj6clk6","_id":"ck3it6k9g007pteyit0i9hfi6"},{"post_id":"ck3it6k6k007eteyigcsht7hf","tag_id":"ck3it6k7x007iteyielwl8cdq","_id":"ck3it6k9r007rteyiy20iyx81"},{"post_id":"ck3it6kdg007steyi3y6m0j5y","tag_id":"ck3it6k1k000hteyiuiw57qqr","_id":"ck3it6kdr007tteyiptuo7mli"}],"Tag":[{"name":"CMS","_id":"ck3it6k130005teyisx1s2ulz"},{"name":"jQuery","_id":"ck3it6k1d000bteyiclkb5x5o"},{"name":"CSS","_id":"ck3it6k1k000hteyiuiw57qqr"},{"name":"CSRF","_id":"ck3it6k1q000oteyi769o82us"},{"name":"docker","_id":"ck3it6k240019teyi0havp74j"},{"name":"php","_id":"ck3it6k2a001hteyify8oep2u"},{"name":"mysql","_id":"ck3it6k2b001nteyimckyt2wk"},{"name":"nginx","_id":"ck3it6k2d001steyixa2o42fn"},{"name":"musical","_id":"ck3it6k2e001xteyiptj6clk6"},{"name":"Elisabeth","_id":"ck3it6k2h0025teyirunobf75"},{"name":"setting","_id":"ck3it6k2j002dteyiqupg99p0"},{"name":"extension","_id":"ck3it6k2l002kteyi9pr17inb"},{"name":"VSCode","_id":"ck3it6k2m002rteyiz05lc2bj"},{"name":"Get","_id":"ck3it6k2o002xteyi4flhgduf"},{"name":"Post","_id":"ck3it6k2q0035teyi7f2ogoot"},{"name":"Git","_id":"ck3it6k2s003cteyi7mk10j0c"},{"name":"tip","_id":"ck3it6k2u003jteyivjzqdkpv"},{"name":"homebrew","_id":"ck3it6k2y003rteyiq9cu8ket"},{"name":"IconFont","_id":"ck3it6k2z003wteyibv9e93cx"},{"name":"JS","_id":"ck3it6k2z0041teyivy95n8x9"},{"name":"react","_id":"ck3it6k34004fteyihy62exu4"},{"name":"github pages","_id":"ck3it6k35004hteyiscu3xjzg"},{"name":"React","_id":"ck3it6k36004iteyim4y69a2e"},{"name":"Virtual Dom","_id":"ck3it6k37004lteyibi7mk4rj"},{"name":"JSX","_id":"ck3it6k38004mteyi75ms2v60"},{"name":"webpack","_id":"ck3it6k3a004nteyio6a7bmla"},{"name":"getting started","_id":"ck3it6k3b004qteyipup2ij12"},{"name":"Documentary film","_id":"ck3it6k3d004steyip8e6dy5v"},{"name":"Dolphin hunting","_id":"ck3it6k3g004vteyis8sfmsn0"},{"name":"Taiji","_id":"ck3it6k3h004wteyii4ugqzur"},{"name":"movie","_id":"ck3it6k3i004xteyiild5l7aw"},{"name":"universe","_id":"ck3it6k3j0050teyibat146po"},{"name":"Npm","_id":"ck3it6k3k0052teyikiu349c4"},{"name":"Yarn","_id":"ck3it6k3l0055teyinh6g0qfp"},{"name":"Docker","_id":"ck3it6k3l0056teyilx4nz32o"},{"name":"Modx","_id":"ck3it6k3m0059teyijxzjjcf6"},{"name":"Modx-docker","_id":"ck3it6k3m005ateyi4vdl2x9v"},{"name":"Command","_id":"ck3it6k3n005eteyitndaek0p"},{"name":"iTerm2","_id":"ck3it6k3p005jteyicu6ea7nz"},{"name":"powerlevel9k","_id":"ck3it6k3p005kteyij0u3pi69"},{"name":"SSH","_id":"ck3it6k3p005lteyi0qudxnuj"},{"name":"Cyberduck","_id":"ck3it6k3u005oteyi94wkvkua"},{"name":"FTP","_id":"ck3it6k3u005qteyihm4ala7p"},{"name":"SFTP","_id":"ck3it6k3v005rteyi5m0gizlf"},{"name":"ajax","_id":"ck3it6k3x005vteyi8rpxzs7g"},{"name":"URL","_id":"ck3it6k3y005yteyiua1291es"},{"name":"BFC","_id":"ck3it6k410063teyis30gmbml"},{"name":"BOM","_id":"ck3it6k420065teyid9e381i4"},{"name":"Session","_id":"ck3it6k430068teyisejuoxg1"},{"name":"LocalStorage","_id":"ck3it6k43006ateyiz0hgzm8r"},{"name":"Cookie","_id":"ck3it6k44006bteyikae2xkxf"},{"name":"Event Flow","_id":"ck3it6k48006fteyijddzlim1"},{"name":"Event  Capturing","_id":"ck3it6k49006hteyic0ladbou"},{"name":"Dubbed Bubbling","_id":"ck3it6k4a006iteyieq8glba8"},{"name":"Mock","_id":"ck3it6k4a006jteyic53xjjvj"},{"name":"CORS","_id":"ck3it6k4g006pteyij8qewffa"},{"name":"Browser","_id":"ck3it6k4h006rteyi5xlfedsw"},{"name":"Closure","_id":"ck3it6k4j006wteyigwhek032"},{"name":"Redux","_id":"ck3it6k4m0071teyi1vws6zxj"},{"name":"hexo","_id":"ck3it6k4n0072teyiexog63st"},{"name":"blog","_id":"ck3it6k4o0075teyipasdke43"},{"name":"github","_id":"ck3it6k4p0077teyiyqecy27a"},{"name":"Miss Saigon","_id":"ck3it6k7x007iteyielwl8cdq"}]}}