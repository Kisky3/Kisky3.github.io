<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xiang Yu&#39;s Blog</title>
  
  <subtitle>Hello World, Hello Programming!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://kisky3.github.io/"/>
  <updated>2019-08-03T07:16:46.046Z</updated>
  <id>https://kisky3.github.io/</id>
  
  <author>
    <name>Xiang Yu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>About React Virtual Dom And JSX</title>
    <link href="https://kisky3.github.io/2019/07/04/React-Virtual-Dom/"/>
    <id>https://kisky3.github.io/2019/07/04/React-Virtual-Dom/</id>
    <published>2019-07-04T13:47:44.000Z</published>
    <updated>2019-08-03T07:16:46.046Z</updated>
    
    <content type="html"><![CDATA[<p>关于React的虚拟Dom和JSX</p><a id="more"></a><h3 id="React的实行理念"><a href="#React的实行理念" class="headerlink" title="React的实行理念"></a>React的实行理念</h3><p>首先JS的DOM操作一般经历了从页面获取已存在的元素，进行修改操作，再渲染回页面这三个过程。<br>比如页面里有一个span标签，JS想要编辑的时候需要先从页面获取标签(利用id等),进行操作(数字加1),再将编辑后的数据返回页面（innerText等）。<br><img src="./1.png" style="width:600px;margin:40px 0"></p><p>而react有一种更先进的理念，也就相当于不从Dom获取数据，而是只是向页面更新数据。<br>比如一开始页面里什么都没有，react里有一个number变量，并且在JSX里生成一个span的对象（虚拟Dom),再将对象生同步成到页面中，JSX里进行span内容的修改操作，然后再一次自动更新到页面的span里。<br><img src="./2.png" style="width:600px;margin:40px 0"></p><p>react在生成新的虚拟Dom之后，会与旧的虚拟Dom的内容进行比较，再将有变化的那一部分，同步到页面中。<br>而进行内部对象span的更新速度远比JS直接更新Dom的速度要快很多，并且少了从页面获取元素的这一过程，导致react的效率和性能都高于普通JS。</p><h3 id="关于JSX"><a href="#关于JSX" class="headerlink" title="关于JSX"></a>关于JSX</h3><p>JSX不是html,而是相当于利用Html的形式来更简便地写JS。</p><p>JSX就是将下面的语法2翻译成上面的JS语法1，这相当于以简便的Html的形式来写JS，这里包含了几个虚拟Dom，也就是表示DOM节点的对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JS语法1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> h = React.createElement;</span><br><span class="line">  <span class="keyword">let</span> div = </span><br><span class="line">  h(<span class="string">'div'</span>,&#123;<span class="attr">className</span>:<span class="string">'parent'</span>&#125;,</span><br><span class="line">    h(<span class="string">'span'</span>,&#123;<span class="attr">className</span>:<span class="string">'red'</span>&#125;,number),</span><br><span class="line">    h(<span class="string">'button'</span>,&#123;<span class="attr">onClick</span>:onClickButton&#125;,<span class="string">'+'</span>),</span><br><span class="line">    h(<span class="string">'button'</span>,&#123;onClickButton&#125;,<span class="string">'-'</span>)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 语法2</span></span><br><span class="line">&lt;div className=<span class="string">"parent"</span>&gt;</span><br><span class="line">  &lt;span className=<span class="string">"red"</span>&gt;&#123;number&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">  &lt;button onClick = &#123;onClickButton&#125;&gt;+&lt;/</span>button&gt;</span><br><span class="line">  &lt;button onClick = &#123;onClickButton2&#125;&gt;-&lt;/button&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p>不同的是将对象和函数用括号括起来{},然后JS就会从当前作用域往上找相应的变量。</p><ul><li>class要写作className（有时两种写法都可以）。</li><li>在onClick = {onClickButton}时要向react传递一个对象而不是返回值，相当于React.createElement(‘button’,{onClick:onClickButton}),所以不加括号。</li></ul><p>完整代码例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> onClickButton = <span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">  number +=<span class="number">1</span></span><br><span class="line">  render();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> onClickButton2 = <span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">  number -= <span class="number">1</span></span><br><span class="line">  render();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// JS语法1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> h = React.createElement;</span><br><span class="line">  <span class="keyword">let</span> div = </span><br><span class="line">  h(<span class="string">'div'</span>,&#123;<span class="attr">className</span>:<span class="string">'parent'</span>&#125;,</span><br><span class="line">    h(<span class="string">'span'</span>,&#123;<span class="attr">className</span>:<span class="string">'red'</span>&#125;,number),</span><br><span class="line">    h(<span class="string">'button'</span>,&#123;<span class="attr">onClick</span>:onClickButton&#125;,<span class="string">'+'</span>),</span><br><span class="line">    h(<span class="string">'button'</span>,&#123;onClickButton&#125;,<span class="string">'-'</span>)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 语法2</span></span><br><span class="line">&lt;div className=<span class="string">"parent"</span>&gt;</span><br><span class="line">  &lt;span className=<span class="string">"red"</span>&gt;&#123;number&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">  &lt;button onClick = &#123;onClickButton&#125;&gt;+&lt;/</span>button&gt;</span><br><span class="line">  &lt;button onClick = &#123;onClickButton2&#125;&gt;-&lt;/button&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(div,document.querySelector('#root'));</span></span><br></pre></td></tr></table></figure><p>JSX的翻译机制<br>下面的左右代码是等价的。<br><img src="./3.png" style="width:800px;margin:40px 0"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于React的虚拟Dom和JSX&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="React" scheme="https://kisky3.github.io/tags/React/"/>
    
      <category term="Virtual Dom" scheme="https://kisky3.github.io/tags/Virtual-Dom/"/>
    
      <category term="JSX" scheme="https://kisky3.github.io/tags/JSX/"/>
    
  </entry>
  
  <entry>
    <title>About Closure</title>
    <link href="https://kisky3.github.io/2019/06/23/%E5%85%B3%E4%BA%8E%E9%97%AD%E5%8C%85/"/>
    <id>https://kisky3.github.io/2019/06/23/关于闭包/</id>
    <published>2019-06-23T10:14:57.000Z</published>
    <updated>2019-07-19T14:49:14.293Z</updated>
    
    <content type="html"><![CDATA[<p>关于闭包</p><a id="more"></a><h3 id="词法作用域（lexical-environment）"><a href="#词法作用域（lexical-environment）" class="headerlink" title="词法作用域（lexical environment）"></a>词法作用域（lexical environment）</h3><p>作用域链</p><ul><li>函数在执行的过程中，先从自己内部找变量</li><li>如果找不到，再从创造当前函数所在的作用域（词法作用域）去找，以此往上</li><li>注意找的是变量的当前状态</li></ul><p>函数连同它作用域链上的要找的这个变量，共同构成闭包<br>一般情况下使用闭包住要是为了</p><ol><li>封装数据</li><li>暂存数据</li></ol><p>例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fnArr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)&#123;</span><br><span class="line">  fnArr[i] = (<span class="function"><span class="keyword">function</span>(<span class="params">j</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> j</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;)(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fnArr[<span class="number">1</span>]() <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>这个例子里有两个闭包，<br>相当于可以将for循环拆开，等效于以下代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">fnArr[<span class="number">0</span>] = (<span class="function"><span class="keyword">function</span>(<span class="params">j</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">fnArr[<span class="number">1</span>] = (<span class="function"><span class="keyword">function</span>(<span class="params">j</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fnArr[<span class="number">1</span>]();</span><br></pre></td></tr></table></figure><p>再简化一下，写成a,b 函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = (<span class="function"><span class="keyword">function</span>(<span class="params">j</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = (<span class="function"><span class="keyword">function</span>(<span class="params">j</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">b();</span><br></pre></td></tr></table></figure><p>再同步一下，将var b里的立即执行函数单独拆出来，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = (<span class="function"><span class="keyword">function</span>(<span class="params">j</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params">j</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> j = <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = fn2(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">b();</span><br></pre></td></tr></table></figure><h3 id="其他的等效方法"><a href="#其他的等效方法" class="headerlink" title="其他的等效方法"></a>其他的等效方法</h3><p>方法1:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fnArr = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)&#123;</span><br><span class="line">  fnArr[i] = (<span class="function"><span class="keyword">function</span>(<span class="params">j</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">  &#125;)(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法2:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fnArr = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="number">2</span>; i++)&#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">    fnArr[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法3:（使用ES6）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fnArr = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">  fnArr[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> i;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="闭包例题"><a href="#闭包例题" class="headerlink" title="闭包例题"></a>闭包例题</h3><h4 id="封装一个Car对象"><a href="#封装一个Car对象" class="headerlink" title="封装一个Car对象"></a>封装一个Car对象</h4><p>可以将其封装成一个对象返回，由于形成闭包，当调用方法时，不会对原有的参数speed进行影响。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Car = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> speed = <span class="number">0</span>;</span><br><span class="line">   </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setSpeed</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">    speed = s;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getSpeed</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> speed</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">speedUp</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    speed++</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">speedDown</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    speed --;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">      setSpeed: setSpeed,</span><br><span class="line">      getSpeed: getSpeed,</span><br><span class="line">      speedUp: speedUp,</span><br><span class="line">      speedDown: speedDown</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于闭包&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="JS" scheme="https://kisky3.github.io/tags/JS/"/>
    
      <category term="Closure" scheme="https://kisky3.github.io/tags/Closure/"/>
    
  </entry>
  
  <entry>
    <title>Created A StyleGuide For SPACE CLOUD Servive</title>
    <link href="https://kisky3.github.io/2019/06/20/%E7%B3%BB%E7%BB%9F%E5%BC%8F%E6%A0%B7%E7%BB%9F%E4%B8%80%E9%A1%B5%E9%9D%A2%E7%9A%84%E5%88%B6%E4%BD%9C/"/>
    <id>https://kisky3.github.io/2019/06/20/系统式样统一页面的制作/</id>
    <published>2019-06-20T01:18:50.000Z</published>
    <updated>2019-07-24T16:04:12.647Z</updated>
    
    <content type="html"><![CDATA[<h3 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h3><a id="more"></a><p>みなさん、こんにちは！!</p><p>フロントエンドエンジニアの向宇(こう　う)と申します。 開発経験はまだ浅いですが、毎日楽しんで開発をチャレンジしています。</p><p>今回はSPACE CLOUDのスタイルガイドの開発について、お話しさせていただきますね。</p><h3 id="開発目的"><a href="#開発目的" class="headerlink" title="開発目的"></a>開発目的</h3><p>まずはSPACE CLOUDを説明致します。</p><p>SPACE CLOUDは不動産会社の質を高めるブランディングサービスです。 国内最大の不動産ポータルサイト「民泊物件.com」、「収益物件.com」に物件を掲載するための機能を提供します。</p><p>私が入社してから触ったのはほぼSPACE CLOUDのフロント開発です。</p><p>その時点で気づいた問題点は、フロントの書き方と全体スタイルの統一性はよくないと感じました。</p><p>例えば、入力ボックスを実装する時に、 Reactを利用してComponentを作る人もいるし、 CakePHPのテンプレートで直接実装する人もいます。</p><p>書き方を統一して、コピペだけですぐ実装できるスタイルガイドがあると統一感を持たせることができると考え、 SPACE CLOUD専用のスタイルガイドを作成始めました。</p><h3 id="開発流れ"><a href="#開発流れ" class="headerlink" title="開発流れ"></a>開発流れ</h3><h4 id="スタイルガイドのトップページについて"><a href="#スタイルガイドのトップページについて" class="headerlink" title="スタイルガイドのトップページについて"></a>スタイルガイドのトップページについて</h4><p>まずはHTMLとCSSを利用して、トップページをオシャレにしました〜</p><p>出来上がったものはこんな感じです！ ちょっとだけアニメーションも追加しました。</p><img src="./1.png" style="width:600px"><hr><h4 id="スタイルガイドの各ページについて"><a href="#スタイルガイドの各ページについて" class="headerlink" title="スタイルガイドの各ページについて"></a>スタイルガイドの各ページについて</h4><p>まずReactを利用して、各ページの枠を作ります。 ソース構造と主なフォルダー説明は下記でございます〜</p><div class="alert danger no-icon"><p>Atomic: SPACE CLOUD専用のReactコンポーネントのベースです</p></div><div class="alert danger no-icon"><p>Component: スタイルガイドの各ページ用のコンポーネントです</p></div><div class="alert danger no-icon"><p>Component/Pages: 最後各コンポーネントをまとめて表示するためのコンポーネント</p></div><br><img src="./2.png" style="width:600px"><hr><h4 id="アップロードのForm部品の例"><a href="#アップロードのForm部品の例" class="headerlink" title="アップロードのForm部品の例"></a>アップロードのForm部品の例</h4><p>Formの画像アップロードを例として説明しますね〜 </p><p>下記はForm ImgUploadのReactコンポーネントの一部です。利用しているのはReactのライブラリ<span class="highlight-text" style="background-color:#FFCCCC;">react-dropzone</span>です。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;div</span><br><span class="line">  onMouseEnter=&#123;() =&gt; <span class="keyword">this</span>.onMouseEnter(<span class="keyword">this</span>.state.uploadStatus)&#125;</span><br><span class="line">  onMouseLeave=&#123;() =&gt; <span class="keyword">this</span>.onMouseLeave(<span class="keyword">this</span>.state.uploadStatus)&#125;</span><br><span class="line">&gt;</span><br><span class="line">  &lt;Dropzone</span><br><span class="line">    type=&#123;<span class="string">"field"</span>&#125;</span><br><span class="line">    accept=&#123;<span class="string">"image/jpeg,image/png,image/jpg"</span>&#125;</span><br><span class="line">    onDrop=&#123;<span class="keyword">this</span>.onDrop&#125;</span><br><span class="line">    multiple=&#123;<span class="literal">false</span>&#125; <span class="comment">// 個別アップロード</span></span><br><span class="line">    style=&#123;&#123; <span class="attr">border</span>: <span class="number">0</span> &#125;&#125;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;div&gt;&#123;<span class="keyword">this</span>.getContent()&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>Dropzone&gt;</span><br><span class="line">  &lt;div&gt;&#123;<span class="keyword">this</span>.getModifyModal()&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p>マウスホバーする時に画像変更と削除処理ができるように、onMouseEnterとonMouseLeaveを作りました。 プラス画像アップロードの進捗を表示するために下記の処理も追加しました。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ファイルの読み込み進捗を取得</span></span><br><span class="line">reader.onprogress = <span class="function"><span class="params">files</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.setState(&#123; <span class="attr">loadPercentage</span>: files.loaded / files.total * <span class="number">100</span> &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>プレビュー状態を表示する時に、ProgressBarコンポーネントに渡します。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// プレビュー状態を表示</span></span><br><span class="line"><span class="keyword">if</span> (</span><br><span class="line">  <span class="keyword">this</span>.state &amp;&amp;</span><br><span class="line">  <span class="keyword">this</span>.state.file &amp;&amp;</span><br><span class="line">  <span class="keyword">this</span>.state.file.image.preview !== <span class="string">""</span> &amp;&amp;</span><br><span class="line">  <span class="keyword">this</span>.state.file.image.dataURL !== <span class="string">""</span> &amp;&amp;</span><br><span class="line">  <span class="keyword">this</span>.state.error === <span class="string">""</span></span><br><span class="line">) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div</span><br><span class="line">      className=&#123;imageWrapper + imageActive&#125;</span><br><span class="line">      style=&#123;&#123; <span class="attr">backgroundImage</span>: <span class="string">`url(<span class="subst">$&#123;<span class="keyword">this</span>.state.file.image.dataURL&#125;</span>)`</span> &#125;&#125;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;ProgressBar percentage=&#123;<span class="keyword">this</span>.state.loadPercentage&#125;&gt;</span><br><span class="line">        アップロード中・・・</span><br><span class="line">      &lt;<span class="regexp">/ProgressBar&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後はImgUploadDefaultの中でImgUploadコンポーネントを呼び出します。 実用性を考え、コピー機能のコンポーネントも作りました〜</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=&#123;<span class="string">"c-item__container"</span>&#125;&gt;</span><br><span class="line">&lt;h2&gt;Image Upload 【画像アップロード】&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">&lt;div</span></span><br><span class="line"><span class="regexp">  className=&#123;"c-click-box"&#125;</span></span><br><span class="line"><span class="regexp">  role="button"</span></span><br><span class="line"><span class="regexp">  onClick=&#123;() =&gt; this.onChangeState(FormText.ImgUploadText)&#125;</span></span><br><span class="line"><span class="regexp">&gt;</span></span><br><span class="line"><span class="regexp">&lt;div className=&#123;"c-item-line"&#125;&gt;</span></span><br><span class="line"><span class="regexp">    &lt;ImgUpload showUploadImage=&#123;true&#125; /</span>&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;div id=<span class="string">"button-item-text"</span> className=&#123;<span class="string">"c-button-item-text"</span>&#125;&gt;</span><br><span class="line">  &lt;CopyButton text=&#123;<span class="keyword">this</span>.state.text&#125; /&gt;</span><br><span class="line">  &lt;pre&gt;&#123;<span class="keyword">this</span>.state.text&#125;&lt;<span class="regexp">/pre&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p>出来上がったものはこんな感じです。<br><img src="./3.png" style="width:600px"></p><hr><h4 id="その他のコンポーネント"><a href="#その他のコンポーネント" class="headerlink" title="その他のコンポーネント"></a>その他のコンポーネント</h4><p>他の要素とページも上記と同じ感じで実装しました。 最後、一部のイメージ図を載せておきますね〜</p><ul><li>ボタン<img src="./4.png" style="width:600px"></li></ul><hr><ul><li>フォーム<img src="./5.png" style="width:600px"></li></ul><hr><ul><li>カラー<img src="./6.png" style="width:600px"></li></ul><hr><h3 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h3><p>SPACE CLOUDは多くのコンポーネントが必要で、統一感のある実装が困難な状況でしたが、 スタイルガイドによって今後は統一することができるようになったと思います。</p><p>スタイルガイドの実装を通じて、本当に色々勉強になりました〜 やっとReactコンポーネントの基本とライブラリの使い方とかの基礎知識が分かってきましたと気がします。</p><p>今後の開発によって、スタイルガイドを変更したり、追加したりする可能性もありますが、 その時にまた記事を更新しますね〜</p><p>最後まで読んでいただきまして、誠にありがとうございました！！</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h3&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="JS" scheme="https://kisky3.github.io/tags/JS/"/>
    
      <category term="React" scheme="https://kisky3.github.io/tags/React/"/>
    
      <category term="Redux" scheme="https://kisky3.github.io/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>About Same Origin Policy And How To Deal With It</title>
    <link href="https://kisky3.github.io/2019/06/10/%E5%85%B3%E4%BA%8Ejs%E8%B7%A8%E5%9F%9F%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>https://kisky3.github.io/2019/06/10/关于js跨域及解决方法/</id>
    <published>2019-06-10T08:23:16.000Z</published>
    <updated>2019-07-16T10:08:04.100Z</updated>
    
    <content type="html"><![CDATA[<p>关于跨域</p><a id="more"></a><h3 id="同源策略（Same-origin-Policy）和跨域"><a href="#同源策略（Same-origin-Policy）和跨域" class="headerlink" title="同源策略（Same origin Policy）和跨域"></a>同源策略（Same origin Policy）和跨域</h3><p>浏览器处于安全方面的考虑，只允许与本域下的接口进行交互。<br>不同源的客户端脚本在没有明确授权的情况下。不能读写对方的资源。</p><p>简而言之就是你当前网页的协议名，域名和端口名与你请求的接口地址的各项是否相同，如果不相同则浏览器将会对返回的数据进行拦截。<br>这是隔离潜在恶意文件的关键安全机制。</p><p>本域指的是：</p><ul><li>同协议： 比如都是http或者https</li><li>同域名： 比如都是<a href="http://kisky3.com/a" target="_blank" rel="noopener">http://kisky3.com/a</a> 和 <a href="http://kisky3.com/b" target="_blank" rel="noopener">http://kisky3.com/b</a></li><li>同端口： 比如都是80端口</li></ul><p>注意：对于当前页面来说页面存放的JS文件的域不重要，而是指当前页面的URL，也就是加载JS页面所在的域。</p><p>而跨域就是绕过浏览器的同源策略，让前端能够获取到数据。</p><h3 id="跨域的几种方法"><a href="#跨域的几种方法" class="headerlink" title="跨域的几种方法"></a>跨域的几种方法</h3><h4 id="JSONP（JSON-with-padding）"><a href="#JSONP（JSON-with-padding）" class="headerlink" title="JSONP（JSON with padding）"></a>JSONP（JSON with padding）</h4><p>JSONP就是通过script标签加载数据的方式去获取数据当作JS代码来执行。<br>提前在页面上声明一个函数。函数名通过接口传参的方式传给候梯，后台解析道函数名后在原始数据上包裹这个函数名，发送给前端。<br>换句话说，JSONP需要对应接口的后端的配合才能实现。</p><p>例如</p><p>后端服务器server.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/getNews'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> news = [</span><br><span class="line"><span class="string">"this is a test message 1"</span>,</span><br><span class="line"><span class="string">"this is a test message 2"</span>,</span><br><span class="line"><span class="string">"this is a test message 3"</span>,</span><br><span class="line"><span class="string">"this is a test message 4"</span>,</span><br><span class="line"><span class="string">"this is a test message 5"</span>,</span><br><span class="line"><span class="string">"this is a test message 6"</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)&#123;</span><br><span class="line"><span class="keyword">var</span> index = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random()*news.length);</span><br><span class="line">data.push(news[index]);</span><br><span class="line">news.splice(index, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This is the point!! Backend has to check whether front request ask for a callback date or not</span></span><br><span class="line">    <span class="comment">// If so retuen a callback object contains JSON data =&gt; cb + '('+ JSON.stringify(data) + ')'</span></span><br><span class="line"><span class="keyword">var</span> cb = req.query.callback;</span><br><span class="line"><span class="keyword">if</span>(cb)&#123;</span><br><span class="line">res.send(cb + <span class="string">'('</span>+ <span class="built_in">JSON</span>.stringify(data) + <span class="string">')'</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">res.send(data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>前端页面 index.html</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Front created a script with callback object and require date to backend server.js </span></span><br><span class="line"> $(<span class="string">'.change'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">    script.src = <span class="string">'http://127.0.0.1/getNews?callback=appendHtml'</span>;</span><br><span class="line">    <span class="built_in">document</span>.head.appendChild(script);</span><br><span class="line">    <span class="built_in">document</span>.head.removeChild(script);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>JSONP的特性：</p><ul><li>它不像XMLHttpRequest对象实现的Ajax请求那样受到同源策略的限制；它的兼容性更好，在更加古老的浏览器中都可以运行。</li><li>它只支持 GET 请求，而不支持 POST 请求等其他类型的 HTTP 请求。</li></ul><h4 id="CORS-Cross-Origin-Resource-Sharing"><a href="#CORS-Cross-Origin-Resource-Sharing" class="headerlink" title="CORS(Cross-Origin Resource Sharing)"></a>CORS(Cross-Origin Resource Sharing)</h4><p>CORS全称是跨域资源共享,是一种ajax跨域请求资源的方式，支持现代浏览器，IE支持10以上。<br>实现方法很简单，当你从XMLHttpRequest发送请求时，浏览器发现该请求不符合同源策略，会给改请求加一个请求头：Origin，<br>后台进行一系列处理，如果确定接受请求则在返回结果中加入一个响应头：Access-Control-Origin;<br>浏览器判断相应头中事都包含Origin的值，如果有则浏览器会处理响应，我们就可以拿到响应数据，如果不包含则浏览器直接驳回，这时我们无法拿到响应数据。所以CORS的表象是让你觉得它与同源的ajax请求没啥区别，代码完全一样。</p><p>前端和平常一样，利用ajax发送数据。<br>后端服务器 server.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/getNews'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> news = [</span><br><span class="line"><span class="string">"this is a test message 1"</span>,</span><br><span class="line"><span class="string">"this is a test message 2"</span>,</span><br><span class="line"><span class="string">"this is a test message 3"</span>,</span><br><span class="line"><span class="string">"this is a test message 4"</span>,</span><br><span class="line"><span class="string">"this is a test message 5"</span>,</span><br><span class="line"><span class="string">"this is a test message 6"</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)&#123;</span><br><span class="line"><span class="keyword">var</span> index = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random()*news.length);</span><br><span class="line">data.push(news[index]);</span><br><span class="line">news.splice(index, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This is the point!! Backend has to add this to response header. So that front can get data</span></span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Allow-Origin'</span>,<span class="string">'http://localhost:8080'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This is the point!! Allow anybody to get date</span></span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Allow-Origin'</span>,<span class="string">'*'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>CORS的特性：</p><ul><li>JSONP 只能实现 GET 请求，而 CORS 支持所有类型的 HTTP 请求</li><li>使用 CORS ，开发者可以是使用普通的 XMLHttpRequest 发起请求和获取数据，比起 JSONP 有更好的错误处理</li><li>虽然绝大多数现代的浏览器都已经支持 CORS，但是 CORS 的兼容性比不上 JSONP，IE10以下的浏览器不支持CORS</li></ul><h3 id="服务端中转跨域"><a href="#服务端中转跨域" class="headerlink" title="服务端中转跨域"></a>服务端中转跨域</h3><p>JSONP、CORS 这两种跨域请求方式都需要对方服务器支持。假设对方服务器不提供支持怎么办？还有一个必杀技，自己搭建 server 中请求中转。</p><p>假设 我们的页面为 <a href="https://jirengu.github.io/weather/weather.html，" target="_blank" rel="noopener">https://jirengu.github.io/weather/weather.html，</a> 需要向 <a href="https://weather.com/now" target="_blank" rel="noopener">https://weather.com/now</a> 这个接口发送请求获取数据，但此接口不支持JSONP 和 CORS跨域。</p><p>我们可以这样做</p><ul><li>搭建服务器，创建接口，如 <a href="https://api.jirengu.com/weather" target="_blank" rel="noopener">https://api.jirengu.com/weather</a></li><li>设置这个接口允许 CORS 跨域</li><li>我们的页面向自己的这个接口发请求</li><li>接口收到请求后，在服务器端向<a href="https://weather.com/now" target="_blank" rel="noopener">https://weather.com/now</a> 这个接口要数据（在服务端不存在同源策略限制），拿到数据后，返回给前端页面。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于跨域&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="JS" scheme="https://kisky3.github.io/tags/JS/"/>
    
      <category term="CORS" scheme="https://kisky3.github.io/tags/CORS/"/>
    
  </entry>
  
  <entry>
    <title>What is Ajax</title>
    <link href="https://kisky3.github.io/2019/06/05/%E4%BB%80%E4%B9%88%E6%98%AFajax/"/>
    <id>https://kisky3.github.io/2019/06/05/什么是ajax/</id>
    <published>2019-06-05T08:04:23.000Z</published>
    <updated>2019-07-05T13:16:49.329Z</updated>
    
    <content type="html"><![CDATA[<p>什么是Ajax</p><a id="more"></a><h3 id="什么是ajax"><a href="#什么是ajax" class="headerlink" title="什么是ajax"></a>什么是ajax</h3><p>ajax是一种技术方案，但并不是一种新技术。</p><p>它依赖的是现有的CSS/HTML/Javascript，而其中最核心的依赖是浏览器提供的XMLHttpRequest对象，是这个对象使得浏览器可以发出HTTP请求与接收HTTP响应。<br>实现在页面不刷新的情况下和服务端进行数据交互。</p><p>ajax可以理解就是，以前向服务器请求资源，必须对这个页面资源进行请求以获得这个信息资源（以这个页面资源为载体来携带信息资源），这必然会对页面进行刷新（因为是请求服务器后会同步返回一个页面进行刷新）。<br>现在页面可以通过浏览器脚本编程语言调用一个隐藏请求装置（也就是XMLHttpRequest），由这个请求向服务器请求资源，然后返回一个资源载体（可能是一个页面，也可能是一个xml或json文段），然后由编程语言去处理这个信息。与此同时，页面是不会发生刷新行为的（也就是没有向服务器请求这个页面资源）。这就是异步原理了。“AJA”就是异步JavaScript的缩写，其基础就是浏览器脚本编程语言JavaScript和XMLHttpRequest对象，X就是作为信息载体的XML，不过现在多数用JSON代替。</p><p>作用就是可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</p><h3 id="ajax范例"><a href="#ajax范例" class="headerlink" title="ajax范例"></a>ajax范例</h3><p>GET</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'http://api.jirengu.com/weather.php'</span>, <span class="literal">true</span>)</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status == <span class="number">304</span>)&#123;</span><br><span class="line">            <span class="comment">//成功了</span></span><br><span class="line">            <span class="built_in">console</span>.log(xhr.responseText)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'服务器异常'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'服务器异常'</span>)</span><br><span class="line">&#125;</span><br><span class="line">xhr.send()</span><br></pre></td></tr></table></figure><p>POST</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">  xhr.timeout = <span class="number">3000</span>        <span class="comment">//可选，设置xhr请求的超时时间</span></span><br><span class="line">  xhr.open(<span class="string">'POST'</span>, <span class="string">'/register'</span>, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">  xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status == <span class="number">304</span>)&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.responseText)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="comment">//可选</span></span><br><span class="line">  xhr.ontimeout = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'请求超时'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//可选</span></span><br><span class="line">  xhr.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'连接失败'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//可选</span></span><br><span class="line">  xhr.upload.onprogress = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="comment">//如果是上传文件，可以获取上传进度</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  xhr.send(<span class="string">'username=jirengu&amp;password=123456'</span>)</span><br></pre></td></tr></table></figure><p>封装一个ajax</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">opts</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> url = opts.url</span><br><span class="line">    <span class="keyword">var</span> type = opts.type || <span class="string">'GET'</span></span><br><span class="line">    <span class="keyword">var</span> dataType = opts.dataType || <span class="string">'json'</span></span><br><span class="line">    <span class="keyword">var</span> onsuccess = opts.onsuccess || <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">var</span> onerror = opts.onerror || <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">var</span> data = opts.data || &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> dataStr = []</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> data)&#123;</span><br><span class="line">        dataStr.push(key + <span class="string">'='</span> + data[key])</span><br><span class="line">    &#125;</span><br><span class="line">    dataStr = dataStr.join(<span class="string">'&amp;'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(type === <span class="string">'GET'</span>)&#123;</span><br><span class="line">        url += <span class="string">'?'</span> + dataStr</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">    xhr.open(type, url, <span class="literal">true</span>)</span><br><span class="line">    xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status == <span class="number">304</span>)&#123;</span><br><span class="line">            <span class="comment">//成功了</span></span><br><span class="line">            <span class="keyword">if</span>(dataType === <span class="string">'json'</span>)&#123;</span><br><span class="line">                onsuccess( <span class="built_in">JSON</span>.parse(xhr.responseText))</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                onsuccess( xhr.responseText)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            onerror()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    xhr.onerror = onerror</span><br><span class="line">    <span class="keyword">if</span>(type === <span class="string">'POST'</span>)&#123;</span><br><span class="line">        xhr.send(dataStr)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        xhr.send()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ajax(&#123;</span><br><span class="line">    url: <span class="string">'http://api.jirengu.com/weather.php'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        city: <span class="string">'北京'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    onsuccess: <span class="function"><span class="keyword">function</span>(<span class="params">ret</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(ret)</span><br><span class="line">    &#125;,</span><br><span class="line">    onerror: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'服务器异常'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;什么是Ajax&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="JS" scheme="https://kisky3.github.io/tags/JS/"/>
    
      <category term="ajax" scheme="https://kisky3.github.io/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>So Easy! Let&#39;s Start Your Blog With Hexo And Github From Zero</title>
    <link href="https://kisky3.github.io/2019/05/28/%E8%B6%85%E7%AE%80%E5%8D%95%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://kisky3.github.io/2019/05/28/超简单用hexo和github搭建个人博客/</id>
    <published>2019-05-28T11:30:05.000Z</published>
    <updated>2019-07-05T13:21:16.589Z</updated>
    
    <content type="html"><![CDATA[<p>超简单! 教你从零用Hexo和Github搭建个人博客 </p><a id="more"></a><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Hexo是高效的静态站点生成框架，它基于Node.js搭建博客，并可以托管于github服务器上。<br>之后便可以用markdown语法进行你的博客记录了。<br>生成上传命令行简便快捷，值得推荐！</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="1-下载node-js"><a href="#1-下载node-js" class="headerlink" title="1. 下载node.js"></a>1. 下载node.js</h4><p> <a href="https://nodejs.org/ja/download/" target="_blank" rel="noopener">点击下载安装Node.js</a></p><p> 无特殊要求可以一路默认点击Next直到安装完成。</p><hr><h4 id="2-安装Git"><a href="#2-安装Git" class="headerlink" title="2. 安装Git"></a>2. 安装Git</h4><p><a href="https://git-scm.com/download/win" target="_blank" rel="noopener">点击下载Git</a></p><p>以上两步完成后可以在命令行输入以下命令来确认node.js和git安装是否成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br><span class="line">git --version</span><br></pre></td></tr></table></figure><hr><h4 id="3-在github上新建项目"><a href="#3-在github上新建项目" class="headerlink" title="3. 在github上新建项目"></a>3. 在github上新建项目</h4><img src="./1.png" style="width:600px"><p>输入你的Github用户名+.github.io，例子：Kisky3.github.io</p><p>注意勾选下面的生成README选项</p><img src="./2.png" style="width:600px"><p>在新项目的setting里，添加生成可视化page</p><img src="./3.png" style="width:600px"><hr><h4 id="4-安装Hexo"><a href="#4-安装Hexo" class="headerlink" title="4. 安装Hexo"></a>4. 安装Hexo</h4><p>新建文件夹用来存放博客文章。比如MyBlog</p><p>然后在该文件夹下执行一下命令行安装Hexo<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g  </span><br><span class="line">$ hexo init </span><br><span class="line">$ npm install  </span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></p><p> 当启动hexo server后，打开 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 就可以看到生成的默认页面了！</p> <img src="./5.png" style="width:600px"><h4 id="5-推送至Github"><a href="#5-推送至Github" class="headerlink" title="5.推送至Github"></a>5.推送至Github</h4><p>在博客文件夹MyBlog下的_config.yml配置文件的url换成你的项目主URL¥，否则后续图片的显示会出问题</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span><br><span class="line">url: https://kisky3.github.io/</span><br></pre></td></tr></table></figure><p>之后在deploy里修改type为git,并且写入你在Github生成的项目地址</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/Kisky3/Kisky3.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>并在MyBlog文件夹下运行以下命令行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git –save //下载hexo-deployer-git，否则deploy会出现error</span><br><span class="line">hexo g // 生成本地静态文件</span><br><span class="line">hexo d // 将本地文件deploy到Github上</span><br></pre></td></tr></table></figure><p>此时访问项目的主页http://你的Github名.github.io，就可以看到初始页面了</p><hr><h4 id="6-更新博文"><a href="#6-更新博文" class="headerlink" title="6. 更新博文"></a>6. 更新博文</h4><p>并在MyBlog文件夹下运行以下命令行来写博文</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new 你的博文题目 // 生成博文</span><br></pre></td></tr></table></figure><p>用markdown语法完成博客记录后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g // 生成本地静态文件</span><br><span class="line">hexo d // 将本地文件deploy到Github上</span><br></pre></td></tr></table></figure><h4 id="7-更换主题"><a href="#7-更换主题" class="headerlink" title="7. 更换主题"></a>7. 更换主题</h4><p>默认主题太没个性了，可以在网上下载自己喜欢的主题</p><p>例：<br><img src="./4.png" style="width:600px"></p><ul><li><a href="https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak" target="_blank" rel="noopener">下载地址</a></li><li><a href="https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak/blob/master/DOCUMENTATION.md" target="_blank" rel="noopener">参考文档</a></li></ul><h4 id="8-部分翻译"><a href="#8-部分翻译" class="headerlink" title="8. 部分翻译"></a>8. 部分翻译</h4><h5 id="主题安装"><a href="#主题安装" class="headerlink" title="主题安装"></a>主题安装</h5><ol><li>下载最新版本</li><li>重命名下载文件夹为 tranquilpeak,并将其放置于你MyBlog/theme文件夹下</li><li>修改_config.yml文件夹的theme为tranquilpeak</li><li>执行hexo clean删除public文件夹、并再次执行hexo generate重新生成。</li></ol><h5 id="博文内配置解释"><a href="#博文内配置解释" class="headerlink" title="博文内配置解释"></a>博文内配置解释</h5><p>例子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 超简单! 用Hexo和Github搭建个人博客</span><br><span class="line">date: 2019-05-28 20:30:05</span><br><span class="line">tags:</span><br><span class="line">- hexo</span><br><span class="line">- blog</span><br><span class="line">- github</span><br><span class="line">clearReading: true</span><br><span class="line">thumbnailImage: 20190528.jpg</span><br><span class="line">thumbnailImagePosition: left</span><br><span class="line">coverImage: 20190528.jpg</span><br><span class="line">coverCaption: "Hello World, Hello Programming"</span><br><span class="line">coverSize: partial</span><br><span class="line">comments: false</span><br><span class="line">categories: Front-end Knowledge</span><br><span class="line">---</span><br><span class="line">这里是文章的概览，显示在主页缩略内容上面</span><br><span class="line"><span class="comment">&lt;!-- more --&gt;</span></span><br><span class="line"></span><br><span class="line">这里是自动生成的文章目录</span><br><span class="line"><span class="comment">&lt;!-- toc --&gt;</span></span><br><span class="line"></span><br><span class="line"># 这是大标题</span><br><span class="line"></span><br><span class="line">## 这是二级标题</span><br><span class="line"></span><br><span class="line">## 这里有个本地图片</span><br><span class="line"><span class="comment">&lt;!-- 图片需要放置于你生成博文名字的文件夹里面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./1.png"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>博文内常用配置设定说明:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">・ tags: </span><br><span class="line">   定义该文章的标签，定义之后可以在分类里面查看自动建立的索引</span><br><span class="line"></span><br><span class="line">・ thumbnailImage:</span><br><span class="line">   首页的文章标题旁边图片</span><br><span class="line"></span><br><span class="line">・ thumbnailImagePosition:</span><br><span class="line">   首页的文章图片位置</span><br><span class="line"></span><br><span class="line">・ coverImage:</span><br><span class="line">   文章打开时顶部的封面图片</span><br><span class="line"></span><br><span class="line">・ &lt;!-- more --&gt;</span><br><span class="line">   这个标志之前的内容将会自动生成首页的概览,如果不写thumbnailImagePosition的设置将不起作用</span><br><span class="line"></span><br><span class="line">・ &lt;!-- toc --&gt;</span><br><span class="line">   这个标志的位置将会自动生成文章目录</span><br></pre></td></tr></table></figure><hr><h5 id="文章置顶"><a href="#文章置顶" class="headerlink" title="文章置顶"></a>文章置顶</h5><p>修改node_modules/hexo-generator-index/lib/generator.js</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> 'use strict';</span><br><span class="line">var pagination = require('hexo-pagination');</span><br><span class="line">module.exports = function(locals)&#123;</span><br><span class="line">  var config = this.config;</span><br><span class="line">  var posts = locals.posts;</span><br><span class="line">    posts.data = posts.data.sort(function(a, b) &#123;</span><br><span class="line">        if(a.top &amp;&amp; b.top) &#123; // 两篇文章top都有定义</span><br><span class="line">            if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排</span><br><span class="line">            else return b.top - a.top; // 否则按照top值降序排</span><br><span class="line">        &#125;</span><br><span class="line">        else if(a.top &amp;&amp; !b.top) &#123; // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span><br><span class="line">            return -1;</span><br><span class="line">        &#125;</span><br><span class="line">        else if(!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">            return 1;</span><br><span class="line">        &#125;</span><br><span class="line">        else return b.date - a.date; // 都没定义按照文章日期降序排</span><br><span class="line">    &#125;);</span><br><span class="line">  var paginationDir = config.pagination_dir || 'page';</span><br><span class="line">  return pagination('', posts, &#123;</span><br><span class="line">    perPage: config.index_generator.per_page,</span><br><span class="line">    layout: ['index', 'archive'],</span><br><span class="line">    format: paginationDir + '/%d/',</span><br><span class="line">    data: &#123;</span><br><span class="line">      __index: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在文章Front-matter中添加top值，数值越大文章越靠前，如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo </span><br><span class="line">date: 2019-05-28 21:49:33</span><br><span class="line">tags:</span><br><span class="line">- Hexo</span><br><span class="line">categories: Front-end Knowledge</span><br><span class="line">top: 10</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>注意:</p><p>这里的github推送地址和当前Hexo项目地址是分开的，也就是说，github.io的地址上面是没有hexo源码的，只有生成的静态页面。</p><p>所以最好将源文件夹做一个备份，以防更换机子或者文件丢失时无法维护博客</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;超简单! 教你从零用Hexo和Github搭建个人博客 &lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="hexo" scheme="https://kisky3.github.io/tags/hexo/"/>
    
      <category term="blog" scheme="https://kisky3.github.io/tags/blog/"/>
    
      <category term="github" scheme="https://kisky3.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Data Mocking – Ways To Fake A Backend</title>
    <link href="https://kisky3.github.io/2019/05/21/%E5%85%B3%E4%BA%8E%E5%89%8D%E7%AB%AFmock%E6%95%B0%E6%8D%AE/"/>
    <id>https://kisky3.github.io/2019/05/21/关于前端mock数据/</id>
    <published>2019-05-21T10:52:09.000Z</published>
    <updated>2019-07-05T13:23:54.087Z</updated>
    
    <content type="html"><![CDATA[<p>关于mock数据 - 怎样模拟后端数据</p><a id="more"></a><h3 id="1-搭建一个静态服务器"><a href="#1-搭建一个静态服务器" class="headerlink" title="1. 搭建一个静态服务器"></a>1. 搭建一个静态服务器</h3><h4 id="http-server"><a href="#http-server" class="headerlink" title="http-server"></a>http-server</h4><p>比如在本地写一个http-server，可以在本地将需要的数据，做成一个文件，然后将该数据返回。</p><p>也可以在github上建立一个项目，创建首页，之后再创建一个json文件，将我们需要的数据写入此文件</p><p>例：</p><img src="./1.png" style="width:500px"><br><img src="./2.png" style="width:500px"><p>之后打开页面就可以看到我们所取得的json数据了</p><img src="./3.png" style="width:500px"><h3 id="2-线上mock数据"><a href="#2-线上mock数据" class="headerlink" title="2. 线上mock数据"></a>2. 线上mock数据</h3><p>在下面的网站里添加接口和数据，再将生成的数据URL写入ajax即可取得在线模拟的数据</p><p>1.使用<a href="http://easy-mock.com" target="_blank" rel="noopener">http://easy-mock.com</a></p><p>2.使用<a href="http://rapapi.org/org/index.do" target="_blank" rel="noopener">http://rapapi.org/org/index.do</a></p><p>3.使用server-mock</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于mock数据 - 怎样模拟后端数据&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="Mock" scheme="https://kisky3.github.io/tags/Mock/"/>
    
  </entry>
  
  <entry>
    <title>About DOM Event Flow</title>
    <link href="https://kisky3.github.io/2019/05/20/%E5%85%B3%E4%BA%8E%E4%BA%8B%E4%BB%B6%E4%BC%A0%E6%92%AD%E6%9C%BA%E5%88%B6/"/>
    <id>https://kisky3.github.io/2019/05/20/关于事件传播机制/</id>
    <published>2019-05-20T12:41:07.000Z</published>
    <updated>2019-07-05T13:27:46.899Z</updated>
    
    <content type="html"><![CDATA[<p>关于事件传播机制</p><a id="more"></a><h3 id="事件："><a href="#事件：" class="headerlink" title="事件："></a>事件：</h3><p>JavaScript 和 HTML的交互是通过事件实现的。</p><h4 id="事件是某个行为或触发，比如点击，鼠标移动："><a href="#事件是某个行为或触发，比如点击，鼠标移动：" class="headerlink" title="事件是某个行为或触发，比如点击，鼠标移动："></a>事件是某个行为或触发，比如点击，鼠标移动：</h4><ul><li>当用户点击鼠标时</li><li>当网页已加载时</li><li>当图像已经加载时</li><li>当鼠标移动到元素上时</li><li>当用户触发按键时</li></ul><hr><h4 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h4><h5 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h5><p>点击div区域时，从下往上往父元素传播</p><img src="./1.png" style="width:500px"><h5 id="事件捕获"><a href="#事件捕获" class="headerlink" title="事件捕获"></a>事件捕获</h5><p>点击div时先从树根Document开始捕获，再一层层传给子元素</p><img src="./2.png" style="width:500px"><h5 id="DOM事件流"><a href="#DOM事件流" class="headerlink" title="DOM事件流"></a>DOM事件流</h5><p>DOM2级事件规定事件流包括3个阶段，事件捕获阶段，处于目标阶段，时间冒泡阶段，首先发生的是事件捕获，为截取事件提供机会，然后是世纪目标接受事件，最后是冒泡阶段。<br>相当于先进行一次捕获阶段，再到冒泡阶段</p><img src="./3.png" style="width:500px"><h5 id="阻止传播"><a href="#阻止传播" class="headerlink" title="阻止传播"></a>阻止传播</h5><p>阻止传播一般使用stopPropagation取消事件的进一步冒泡或者捕获 也就是取消进一步的事件捕获或冒泡，防止再触发定义在别的节点上的监听函数，但不包括再当前节点上新定义的事件监听函数。 例： 我们可以在button的事件处理程序中调用stopPropagation()从而避免注册在body上的事件发生。 若是注释掉e.stopPropagation()；在点击button的时候，由于事件冒泡，body的click事件也会触发，但是调用后这句后，事件会停止传播。 undefined ##### 取消默认行为 preventDefault方法取消浏览器对当前事件的默认行为，<br>比如点击链接后，浏览器跳转到指定页面，或者按一下空格键，页面向下滚动一段距离。<br>该方法生效的前提是，事件的cancleable属性为true， 如果为false，则该方法没有效果。<br>该方法不会阻止事件的进一步传播，只是该事件的默认方法不会执行。</p><p>例：<br>可以为文本框设置校验条件。如果用户的输入不符合条件，就无法将字符输入文本框。<br>keypress监听函数，只能输入小写字母，否则输入事件的默认事件（写入文本框）将本取消。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkName</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(e.charCode &lt; <span class="number">97</span> || e.charCode &gt; <span class="number">122</span>)&#123;</span><br><span class="line">        e.preventDafault();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="事件代理"><a href="#事件代理" class="headerlink" title="事件代理"></a>事件代理</h5><p>事件代理就是利用事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件。(delegation)。<br>我们知道当一个元素上的事件被触发时，比如说点击了一个按钮，同样的事件将会在那个元素的所有祖先元素中被触发。（事件冒泡）<br>因此我们可以给父元素田间事件监听器，子元素添加事件，事件触发冒泡上来，可以把多个子元素的事件进行统一处理。<br>这叫做事件的代理。</p><p>例：<br>上面代码的click事件的监听函数定义在ul节点，但是实际上，它处理的是子节点li的click事件。这样的好处是，只要定义一个监听函数，就能处理多个子节点的事件，且以后再添加子节点，监听函数依然有效。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">'ul'</span>);</span><br><span class="line">ul.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(event.target.tagName.toLowerCase() === <span class="string">'li'</span>)&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="事件传播过程的DEMO，演示阻止传播的效果"><a href="#事件传播过程的DEMO，演示阻止传播的效果" class="headerlink" title="事件传播过程的DEMO，演示阻止传播的效果"></a>事件传播过程的DEMO，演示阻止传播的效果</h5><img src="./4.png" style="width:500px"><p><a href="http://js.jirengu.com/foban/2/edit" target="_blank" rel="noopener">演示地址</a></p><p>HTML</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span> = <span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>Homework<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">      container</span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        box</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"target"</span>&gt;</span></span><br><span class="line">          target</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>,</span><br><span class="line"><span class="selector-class">.box</span>,</span><br><span class="line"><span class="selector-class">.target</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="attribute">border</span>: <span class="number">2px</span> solid pink;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JS</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">'#btn'</span>);</span><br><span class="line"></span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>,</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// EVENT CAPTURING</span></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'.container'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'container click.. in 捕获阶段'</span>);</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'.box'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'box click.. in 捕获阶段'</span>);</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'.target'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'target click.. in 捕获阶段'</span>);</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// DUBBED BUBBLING</span></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'.container'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'container click.. in 冒泡阶段'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'.box'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// STOP EVENT HERE</span></span><br><span class="line">  e.stopPropagation();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'box click.. in 冒泡阶段'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'.target'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'target click.. in 冒泡阶段'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于事件传播机制&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="JS" scheme="https://kisky3.github.io/tags/JS/"/>
    
      <category term="Event Flow" scheme="https://kisky3.github.io/tags/Event-Flow/"/>
    
      <category term="Event  Capturing" scheme="https://kisky3.github.io/tags/Event-Capturing/"/>
    
      <category term="Dubbed Bubbling" scheme="https://kisky3.github.io/tags/Dubbed-Bubbling/"/>
    
  </entry>
  
  <entry>
    <title>About LocalStorage,Cookie And Session</title>
    <link href="https://kisky3.github.io/2019/05/10/%E5%85%B3%E4%BA%8ELocalStorage-cookie%E5%92%8Csession/"/>
    <id>https://kisky3.github.io/2019/05/10/关于LocalStorage-cookie和session/</id>
    <published>2019-05-10T12:30:55.000Z</published>
    <updated>2019-07-05T13:29:05.003Z</updated>
    
    <content type="html"><![CDATA[<p>关于LocalStorage,Cookie和Session </p><a id="more"></a><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p>网页的application下的Storage里的Cookie里可以看到Cookie的信息。网站只要设计登陆功能就一定会用到Cookie。</p><p>Cookie可以把一些需要存储的信息存储在当前的页面下。</p><img src="./1.png" style="width:500px"><p>包括Name和Value等。Domain表示在哪个域下是生效的。Path表示是否有下级的Path。Expries表示生效时间。设置Cookie时会设置生效时间，过了该时间之后则会失效。</p><p>当输入URL时，服务器会发送响应头，里面包含Set-Cookie，便可以设定Cookie。</p><img src="./3.png" style="width:500px"><p>当Cookie被保存在浏览器之后，再次刷新网页时，因为Cookie已经存在，所以响应头上就不会再带有同样的Set-Cookie了。</p><p>当浏览器被种下Cookie时，之后浏览器向该域名发送请求，比如请求图片等时，请求头都会带上Cookie。</p><img src="./4.png" style="width:500px"><p>关于Cookie，综上：</p><img src="./5.png" style="width:500px"><hr><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><p>当一个用户打开淘宝登陆后，刷新浏览器仍然显示登陆状态。服务器如何分辨这次发起请求的用户是刚才登陆过的用户呢。<br>用户没有登陆时，在地址栏输入URL向服务器发送请求时，服务器看到该URL发送的请求头并没有带上Cookie，便可以知道用户没有登陆，于是便在自己服务器里创建了一个对象（一串数据），这个对象里有一个随机id，这个对象就是session。在服务器向浏览器发送响应头的时候，加上了Set-Cookie，把id给set上，当用户再次打开该网站的时候，就有了这个Cookie。<br>当用户再次刷新页面的时候，请求头带上了这个Coolie，服务器通过接收到的id和当时存在的对象进行对比，得出是该用户再次访问了该页面。<br>可以认为session是结合Cookie实行的一种机制，用于识别用户的身份。<br>session对象可以存在服务器内存中，也可以保存在数据库中。</p><img src="./6.png" style="width:500px"><hr><h3 id="LocalStorage"><a href="#LocalStorage" class="headerlink" title="LocalStorage"></a>LocalStorage</h3><p>localStorage就是一个存数据的地方，将数据存到浏览器里。<br>特点是存储数据量大，并且不会失效。</p><img src="./2.png" style="width:500px"><p>LocalStorage对应一个key和value，可以存储很多的内容，并且没有过期的时效。</p><img src="./7.png" style="width:500px">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于LocalStorage,Cookie和Session &lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="Session" scheme="https://kisky3.github.io/tags/Session/"/>
    
      <category term="LocalStorage" scheme="https://kisky3.github.io/tags/LocalStorage/"/>
    
      <category term="Cookie" scheme="https://kisky3.github.io/tags/Cookie/"/>
    
  </entry>
  
  <entry>
    <title>About Brower Object Model</title>
    <link href="https://kisky3.github.io/2019/04/25/%E5%85%B3%E4%BA%8EBOM%E5%AF%B9%E8%B1%A1/"/>
    <id>https://kisky3.github.io/2019/04/25/关于BOM对象/</id>
    <published>2019-04-25T12:22:10.000Z</published>
    <updated>2019-08-06T13:49:27.886Z</updated>
    
    <content type="html"><![CDATA[<p>关于BOM对象 </p><a id="more"></a><h3 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h3><p>BOM(Brower Object Model)是指浏览器对象模型，是用于描述这种对象与对象之间层次关系的模型,</p><p>浏览器对象模型提供了独立于内容的，可以与浏览器窗口进行互动的对象结构。BOM由多个对象组成，<br>其中代表浏览器窗口的window对象是BOM的顶层对象，其他对象都是该对象的子对象。</p><hr><h3 id="window"><a href="#window" class="headerlink" title="window"></a>window</h3><p>BOM的核心是window对象，它表示浏览器的一个实例。在浏览器中，即是javascript访问浏览器窗口的一个接口，<br>又是ECMAscript规定的Global对象，这就意味着在网页中定义的任意变量，函数，对象都是以window作为Global对象。</p><p>所有在全局作用域中声明的变量，函数，对象都会作为window的属性和方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">24</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printNamr</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.age);</span><br><span class="line"><span class="built_in">window</span>.printName();</span><br></pre></td></tr></table></figure><hr><h3 id="window对象属性"><a href="#window对象属性" class="headerlink" title="window对象属性"></a>window对象属性</h3><h4 id="window-innerHeight属性，window-innerWidth属性"><a href="#window-innerHeight属性，window-innerWidth属性" class="headerlink" title="window.innerHeight属性，window.innerWidth属性"></a>window.innerHeight属性，window.innerWidth属性</h4><p>这两个属性返回网页的CSS布局占据的浏览器窗口的高度和宽度，单位为像素。<br>很显然，当用户放大网页的时候（比如将网页从100%的大小放大为200%），这两个属性会变小。</p><p>注意，这两个属性值包括滚动条的高度和宽度。</p><hr><h4 id="scrollX，scrollY"><a href="#scrollX，scrollY" class="headerlink" title="scrollX，scrollY"></a>scrollX，scrollY</h4><ol><li>scrollX: 滚动条横向偏移</li><li>scrollY: 滚动条纵向偏移</li></ol><hr><h4 id="scrollTo，scrollBy-scroll"><a href="#scrollTo，scrollBy-scroll" class="headerlink" title="scrollTo，scrollBy,scroll"></a>scrollTo，scrollBy,scroll</h4><p>我们也可以通过方法scrollTo或者scroll方法改变滚动条位置到指定坐标</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.scrollTo(<span class="number">0</span>,<span class="number">300</span>);<span class="comment">// 滚动条移动到300px处</span></span><br></pre></td></tr></table></figure><p>两个参数分别是水平，垂直方向偏移</p><p>scrollBy可以相对当前位置移动滚动条，而不是移动到绝对位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrollBy(<span class="number">0</span>,<span class="number">100</span>); <span class="comment">//滚动条下移100px</span></span><br></pre></td></tr></table></figure><hr><h4 id="navigator"><a href="#navigator" class="headerlink" title="navigator"></a>navigator</h4><p>Window对象的navigator属性，指向一个包含浏览器相关信息的对象。<br>navigator.userAgent属性返回浏览器的User-Agent字符串，用来标示浏览器的种类。<br>下面是Chrome浏览器的User-Agent。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">navigator.userAgent</span><br></pre></td></tr></table></figure><p>通过userAgent属性识别浏览器，不是一个好办法。因为必须考虑所有的情况（不同的浏览器不同的版本）<br>非常麻烦，而且步伐保证未来的适用性，更何况各种上网设备层出不穷。<br>所以，现在一般不再识别浏览器了，而是使用“功能识别”方法，即逐一测试当前浏览器是否支持要用到的JavaScript功能。</p><hr><h4 id="screen"><a href="#screen" class="headerlink" title="screen"></a>screen</h4><p>screen对象包含了显示设备的信息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 显示设备的高度，单位为像素</span></span><br><span class="line">screen.height</span><br><span class="line"><span class="comment">// 1920</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示设备的宽度，单位为像素</span></span><br><span class="line">screen.width</span><br><span class="line"><span class="comment">// 1080</span></span><br></pre></td></tr></table></figure><hr><h4 id="URL的编码-解码方法"><a href="#URL的编码-解码方法" class="headerlink" title="URL的编码/解码方法"></a>URL的编码/解码方法</h4><p>Javascript提供四个URL的编码/解码方法</p><ol><li>decodeURI（）</li><li>decodeURIComponent（）</li><li>encodeURI（）</li><li>encodeURIComponent（）</li></ol><p>区别</p><p>encodeURI方法不会对下列字符编码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. ASCII字母</span><br><span class="line">2. 数字</span><br><span class="line">3. 字符号</span><br></pre></td></tr></table></figure><p>encodeURIComponent方法不会对下列字符编码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. ASCII字母</span><br><span class="line">2. 数字</span><br><span class="line">3. ~!*()&apos;</span><br></pre></td></tr></table></figure><p>encodeURIComponent会把所以http://编码成http:%3A%2F%2F<br>而encodeURI不会。<br>encodeURIComponent比encodeURI编码的范围更大。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于BOM对象 &lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="BOM" scheme="https://kisky3.github.io/tags/BOM/"/>
    
  </entry>
  
  <entry>
    <title>Create A Login&amp;Register Modal With Rotation Animation</title>
    <link href="https://kisky3.github.io/2019/04/20/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%BF%BB%E8%BD%AC%E6%B3%A8%E5%86%8C%E7%99%BB%E9%99%86%E9%A1%B5%E9%9D%A2/"/>
    <id>https://kisky3.github.io/2019/04/20/实现一个翻转注册登陆页面/</id>
    <published>2019-04-20T11:09:27.000Z</published>
    <updated>2019-07-05T13:35:03.261Z</updated>
    
    <content type="html"><![CDATA[<p>实现一个翻转注册登陆页面</p><a id="more"></a><h3 id="使用语言为CSS和原生JS"><a href="#使用语言为CSS和原生JS" class="headerlink" title="使用语言为CSS和原生JS"></a>使用语言为CSS和原生JS</h3><p>大致思路如下：</p><p>1.创造两个模态框，一个为login，一个为register.</p><span class="highlight-text" style="background-color:#FFCCCC;">HTML</span><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"flip-modal login"</span>&gt;</span></span><br><span class="line">    /* 登陆模态框 */</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal modal-login"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    /* 注册模态框 */</span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal modal-login"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p>2.并使用JS来控制flip-modal下的class为login或者register.</p><span class="highlight-text" style="background-color:#FFCCCC;">JS</span><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$('.flip-modal').addEventListener('click', function(e)&#123;</span><br><span class="line">  e.stopPropagation();</span><br><span class="line">  if(e.target.classList.contains('login'))&#123;</span><br><span class="line">    $('.flip-modal').classList.remove('register');</span><br><span class="line">    $('.flip-modal').classList.add('login');</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  if(e.target.classList.contains('register'))&#123;</span><br><span class="line">    $('.flip-modal').classList.add('register');</span><br><span class="line">    $('.flip-modal').classList.remove('login');</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  if(e.target.classList.contains('close'))&#123;</span><br><span class="line">    $('.flip-modal').style.display = 'none';</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><p>3.CSS控制模态框翻转时,根据flip-modal下的class类型进行两个模态框的水平Y轴翻转，并隐藏翻转后的背面.<br>加上transition的过渡效果使翻转更自然。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.flip-modal.login .modal-login,</span><br><span class="line">.flip-modal.register .modal-register &#123;</span><br><span class="line">  transform: translate(<span class="number">-50</span>%,<span class="number">-50</span>%) rotateY(<span class="number">0</span>deg);</span><br><span class="line">  backface-visibility: hidden;</span><br><span class="line">  transition: all <span class="number">1</span>s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.flip-modal.login .modal-register,</span><br><span class="line">.flip-modal.register .modal-login &#123;</span><br><span class="line">  transform: translate(<span class="number">-50</span>%,<span class="number">-50</span>%) rotateY(<span class="number">180</span>deg);</span><br><span class="line">  backface-visibility: hidden;</span><br><span class="line">  transition: all <span class="number">1</span>s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="效果图如下"><a href="#效果图如下" class="headerlink" title="效果图如下"></a>效果图如下</h3><img src="./1.png" style="width:500px"><p><a href="http://js.jirengu.com/xukec/43/edit?html,css,js]" target="_blank" rel="noopener">代码预览地址</a></p><hr><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><span class="highlight-text" style="background-color:#FFCCCC;">HTML</span><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Login|Regist<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://unpkg.com/font-awesome@4.7.0/css/font-awesome.min.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"login"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-user-circle"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"flip-modal login"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal modal-login"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"close fa fa-close"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tabs"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"login active"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"register"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"errormsg"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/login"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-field"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-user-o"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"用户名"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-field"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-lock"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"密码"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-field"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登录"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal modal-register"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"close fa fa-close"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tabs"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"login"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"register active"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"errormsg"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/login"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-field"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-user-o"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"用户名"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-field"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-lock"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"密码"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-field"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-lock"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"password2"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"再次输入密码"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-field"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注册"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><span class="highlight-text" style="background-color:#FFCCCC;">JS</span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">selector</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">document</span>.querySelector(selector);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$$</span>(<span class="params">selector</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">document</span>.querySelectorAll(selector);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$(<span class="string">'header .login'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  e.stopPropagation();</span><br><span class="line">  $(<span class="string">'.flip-modal'</span>).style.display = <span class="string">'block'</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$(<span class="string">'.flip-modal'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  e.stopPropagation();</span><br><span class="line">  <span class="keyword">if</span>(e.target.classList.contains(<span class="string">'login'</span>))&#123;</span><br><span class="line">    $(<span class="string">'.flip-modal'</span>).classList.remove(<span class="string">'register'</span>);</span><br><span class="line">    $(<span class="string">'.flip-modal'</span>).classList.add(<span class="string">'login'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(e.target.classList.contains(<span class="string">'register'</span>))&#123;</span><br><span class="line">    $(<span class="string">'.flip-modal'</span>).classList.add(<span class="string">'register'</span>);</span><br><span class="line">    $(<span class="string">'.flip-modal'</span>).classList.remove(<span class="string">'login'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(e.target.classList.contains(<span class="string">'close'</span>))&#123;</span><br><span class="line">    $(<span class="string">'.flip-modal'</span>).style.display = <span class="string">'none'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.addEventListener (<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">'.flip-modal'</span>).style.display = <span class="string">'none'</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">'.modal-login form'</span>).addEventListener(<span class="string">'submit'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  e.preventDefault();</span><br><span class="line">  <span class="keyword">if</span>(!<span class="regexp">/^\w&#123;3,8&#125;$/</span>.test($(<span class="string">'.modal-login input[name=username]'</span>).value))&#123;</span><br><span class="line">    $(<span class="string">'.modal-login .errormsg'</span>).innerText = <span class="string">'用户名需要输入3-8个字符，包括字母数字和下划线'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(!<span class="regexp">/^\w&#123;6,10&#125;$/</span>.test($(<span class="string">'.modal-login input[name=password]'</span>).value))&#123;</span><br><span class="line">    $(<span class="string">'.modal-login .errormsg'</span>).innerText = <span class="string">'密码需要输入6-10个字符，包括字母数字和下划线'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.submit();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">'.modal-register form'</span>).addEventListener(<span class="string">'submit'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  e.preventDefault();</span><br><span class="line">  <span class="keyword">if</span>(!<span class="regexp">/^\w&#123;3,8&#125;$/</span>.test($(<span class="string">'.modal-register input[name=username]'</span>).value))&#123;</span><br><span class="line">    $(<span class="string">'.modal-register .errormsg'</span>).innerText = <span class="string">'用户名需要输入3-8个字符，包括字母数字和下划线'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(!<span class="regexp">/^\w&#123;6,10&#125;$/</span>.test($(<span class="string">'.modal-register input[name=password]'</span>).value))&#123;</span><br><span class="line">    $(<span class="string">'.modal-register .errormsg'</span>).innerText = <span class="string">'密码需要输入6-10个字符，包括字母数字和下划线'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>($(<span class="string">'.modal-register input[name = password]'</span>).value != $(<span class="string">'.modal-register input[name = password2]'</span>).value)&#123;</span><br><span class="line">    $(<span class="string">'.modal-register .errormsg'</span>).innerText = <span class="string">'两次密码输入不一致'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.submit();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><span class="highlight-text" style="background-color:#FFCCCC;">CSS</span><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-tag">main</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: <span class="number">14px</span>/<span class="number">1.5</span> Arial;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#444</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">main</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right top, rgba(38,50,105,0.78), <span class="built_in">rgba</span>(255,152,0,0.45)), <span class="built_in">url</span>(<span class="string">"http://n.sinaimg.cn/sinacn20111/348/w690h458/20190317/95f8-hukwxnu7092764.jpg"</span>) center center no-repeat;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">herder</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">header</span> <span class="selector-class">.login</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.flip-modal</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.show-modal</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block<span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.modal</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%);</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">3px</span> <span class="number">4px</span> <span class="number">5px</span> <span class="built_in">rgba</span>(0,0,0,0.2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.modal</span> <span class="selector-class">.close</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.modal</span> <span class="selector-class">.tabs</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.modal</span> <span class="selector-class">.tabs</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.modal</span> <span class="selector-class">.tabs</span> <span class="selector-tag">a</span><span class="selector-class">.active</span> &#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">2px</span> solid <span class="number">#444</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#444</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.modal</span> <span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.modal</span> <span class="selector-class">.errormsg</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ff9800</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.modal</span> <span class="selector-class">.content</span> <span class="selector-class">.input-field</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.modal</span> <span class="selector-class">.content</span> <span class="selector-class">.input-field</span> <span class="selector-class">.fa</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">13px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">13px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.modal</span> <span class="selector-class">.content</span> <span class="selector-tag">input</span><span class="selector-attr">[type=text]</span>,</span><br><span class="line"><span class="selector-class">.modal</span> <span class="selector-class">.content</span> <span class="selector-tag">input</span><span class="selector-attr">[type=password]</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">10px</span> <span class="number">28px</span>;</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.modal</span> <span class="selector-class">.content</span> <span class="selector-tag">input</span><span class="selector-attr">[type=submit]</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">6px</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> <span class="built_in">rgba</span>(0,0,0,0.4);</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.flip-modal</span><span class="selector-class">.login</span> <span class="selector-class">.modal-login</span>,</span><br><span class="line"><span class="selector-class">.flip-modal</span><span class="selector-class">.register</span> <span class="selector-class">.modal-register</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%,-50%) <span class="built_in">rotateY</span>(0deg);</span><br><span class="line">  <span class="attribute">backface-visibility</span>: hidden;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.flip-modal</span><span class="selector-class">.login</span> <span class="selector-class">.modal-register</span>,</span><br><span class="line"><span class="selector-class">.flip-modal</span><span class="selector-class">.register</span> <span class="selector-class">.modal-login</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%,-50%) <span class="built_in">rotateY</span>(180deg);</span><br><span class="line">  <span class="attribute">backface-visibility</span>: hidden;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实现一个翻转注册登陆页面&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="CSS" scheme="https://kisky3.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Create A Temple Page With Docker Bake</title>
    <link href="https://kisky3.github.io/2019/04/06/Docker%E7%8E%AF%E5%A2%83%E4%B8%8B%E4%BD%BF%E7%94%A8bake%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E9%A1%B5%E9%9D%A2/"/>
    <id>https://kisky3.github.io/2019/04/06/Docker环境下使用bake自动生成页面/</id>
    <published>2019-04-06T11:00:52.000Z</published>
    <updated>2019-07-05T13:48:23.117Z</updated>
    
    <content type="html"><![CDATA[<p>Docker环境下使用bake自动生成页面</p><a id="more"></a><h3 id="上节回顾"><a href="#上节回顾" class="headerlink" title="上节回顾"></a>上节回顾</h3><p>使用Docker配置Cakephp3开发环境</p><p>上节做到了用Docker构建环境并连接好了数据库，这节使用bake进行自动化页面的生成。</p><hr><h3 id="执行bake"><a href="#执行bake" class="headerlink" title="执行bake"></a>执行bake</h3><p>执行bake时要注意，执行commend的场所在bin路径下。执行前确保数据库里存在相应的表。</p><p>1.创建User表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// User Table</span><br><span class="line">CREATE TABLE `users` (</span><br><span class="line">    `id` int(11) unsigned NOT NULL AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">    `email` varchar(255) NOT NULL,</span><br><span class="line">    `password` varchar(255) NOT NULL,</span><br><span class="line">    `status` char(1) DEFAULT 0,</span><br><span class="line">    `created` DATETIME DEFAULT NULL,</span><br><span class="line">    `modified` DATETIME DEFAULT NULL</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;</span><br></pre></td></tr></table></figure><p>2.使用bake进行users全页面自动生成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"># bin/cake bake all users</span><br><span class="line">Bake All</span><br><span class="line">---------------------------------------------------------------</span><br><span class="line">One moment while associations are detected.</span><br><span class="line"> </span><br><span class="line">Baking table class for Users...</span><br><span class="line"> </span><br><span class="line">Creating file /var/www/html/cakephp3.com/src/Model/Table/UsersTable.php</span><br><span class="line">Wrote `/var/www/html/cakephp3.com/src/Model/Table/UsersTable.php`</span><br><span class="line">Deleted `/var/www/html/cakephp3.com/src/Model/Table/empty`</span><br><span class="line"> </span><br><span class="line">Baking entity class for User...</span><br><span class="line"> </span><br><span class="line">Creating file /var/www/html/cakephp3.com/src/Model/Entity/User.php</span><br><span class="line">Wrote `/var/www/html/cakephp3.com/src/Model/Entity/User.php`</span><br><span class="line">Deleted `/var/www/html/cakephp3.com/src/Model/Entity/empty`</span><br><span class="line"> </span><br><span class="line">Baking test fixture for Users...</span><br><span class="line"> </span><br><span class="line">Creating file /var/www/html/cakephp3.com/tests/Fixture/UsersFixture.php</span><br><span class="line">Wrote `/var/www/html/cakephp3.com/tests/Fixture/UsersFixture.php`</span><br><span class="line">Deleted `/var/www/html/cakephp3.com/tests/Fixture/empty`</span><br><span class="line">Bake is detecting possible fixtures...</span><br><span class="line"> </span><br><span class="line">Baking test case for App\Model\Table\UsersTable ...</span><br><span class="line"> </span><br><span class="line">Creating file /var/www/html/cakephp3.com/tests/TestCase/Model/Table/UsersTableTest.php</span><br><span class="line">Wrote `/var/www/html/cakephp3.com/tests/TestCase/Model/Table/UsersTableTest.php`</span><br><span class="line"> </span><br><span class="line">Baking controller class for Users...</span><br><span class="line"> </span><br><span class="line">Creating file /var/www/html/cakephp3.com/src/Controller/UsersController.php</span><br><span class="line">Wrote `/var/www/html/cakephp3.com/src/Controller/UsersController.php`</span><br><span class="line">Bake is detecting possible fixtures...</span><br><span class="line"> </span><br><span class="line">Baking test case for App\Controller\UsersController ...</span><br><span class="line"> </span><br><span class="line">Creating file /var/www/html/cakephp3.com/tests/TestCase/Controller/UsersControllerTest.php</span><br><span class="line">Wrote `/var/www/html/cakephp3.com/tests/TestCase/Controller/UsersControllerTest.php`</span><br><span class="line"> </span><br><span class="line">Baking `index` view template file...</span><br><span class="line"> </span><br><span class="line">Creating file /var/www/html/cakephp3.com/src/Template/Users/index.ctp</span><br><span class="line">Wrote `/var/www/html/cakephp3.com/src/Template/Users/index.ctp`</span><br><span class="line"> </span><br><span class="line">Baking `view` view template file...</span><br><span class="line"> </span><br><span class="line">Creating file /var/www/html/cakephp3.com/src/Template/Users/view.ctp</span><br><span class="line">Wrote `/var/www/html/cakephp3.com/src/Template/Users/view.ctp`</span><br><span class="line"> </span><br><span class="line">Baking `add` view template file...</span><br><span class="line"> </span><br><span class="line">Creating file /var/www/html/cakephp3.com/src/Template/Users/add.ctp</span><br><span class="line">Wrote `/var/www/html/cakephp3.com/src/Template/Users/add.ctp`</span><br><span class="line"> </span><br><span class="line">Baking `edit` view template file...</span><br><span class="line"> </span><br><span class="line">Creating file /var/www/html/cakephp3.com/src/Template/Users/edit.ctp</span><br><span class="line">Wrote `/var/www/html/cakephp3.com/src/Template/Users/edit.ctp`</span><br><span class="line">Bake All complete.</span><br></pre></td></tr></table></figure><p>3.bake自动生成的页面确认</p><p>此时user表为基准，生成了一系列users信息表（预览，添加，修改，删除）<br>user添加页面： https://开发环境的URL/users/add<br><br><br><img src="./1.png" style="width:500px"></p><hr><h3 id="自动生成的文件"><a href="#自动生成的文件" class="headerlink" title="自动生成的文件"></a>自动生成的文件</h3><p>1.Model/Table/UsersTable.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat src/Model/Table/UsersTable.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Model</span>\<span class="title">Table</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">use</span> <span class="title">Cake</span>\<span class="title">ORM</span>\<span class="title">Query</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Cake</span>\<span class="title">ORM</span>\<span class="title">RulesChecker</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Cake</span>\<span class="title">ORM</span>\<span class="title">Table</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Cake</span>\<span class="title">Validation</span>\<span class="title">Validator</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Users Model</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> \App\Model\Entity\User get($primaryKey, $options = [])</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> \App\Model\Entity\User newEntity($data = null, array $options = [])</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> \App\Model\Entity\User[] newEntities(array $data, array $options = [])</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> \App\Model\Entity\User|bool save(\Cake\Datasource\EntityInterface $entity, $options = [])</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> \App\Model\Entity\User patchEntity(\Cake\Datasource\EntityInterface $entity, array $data, array $options = [])</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> \App\Model\Entity\User[] patchEntities($entities, array $data, array $options = [])</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> \App\Model\Entity\User findOrCreate($search, callable $callback = null, $options = [])</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@mixin</span> \Cake\ORM\Behavior\TimestampBehavior</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UsersTable</span> <span class="keyword">extends</span> <span class="title">Table</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Initialize method</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $config The configuration for the Table.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">initialize</span><span class="params">(array $config)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::initialize($config);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">$this</span>-&gt;setTable(<span class="string">'users'</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;setDisplayField(<span class="string">'id'</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;setPrimaryKey(<span class="string">'id'</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">$this</span>-&gt;addBehavior(<span class="string">'Timestamp'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Default validation rules.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> \Cake\Validation\Validator $validator Validator instance.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> \Cake\Validation\Validator</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">validationDefault</span><span class="params">(Validator $validator)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $validator</span><br><span class="line">            -&gt;integer(<span class="string">'id'</span>)</span><br><span class="line">            -&gt;allowEmpty(<span class="string">'id'</span>, <span class="string">'create'</span>);</span><br><span class="line"> </span><br><span class="line">        $validator</span><br><span class="line">            -&gt;email(<span class="string">'email'</span>)</span><br><span class="line">            -&gt;requirePresence(<span class="string">'email'</span>, <span class="string">'create'</span>)</span><br><span class="line">            -&gt;notEmpty(<span class="string">'email'</span>);</span><br><span class="line"> </span><br><span class="line">        $validator</span><br><span class="line">            -&gt;scalar(<span class="string">'password'</span>)</span><br><span class="line">            -&gt;requirePresence(<span class="string">'password'</span>, <span class="string">'create'</span>)</span><br><span class="line">            -&gt;notEmpty(<span class="string">'password'</span>);</span><br><span class="line"> </span><br><span class="line">        $validator</span><br><span class="line">            -&gt;scalar(<span class="string">'status'</span>)</span><br><span class="line">            -&gt;allowEmpty(<span class="string">'status'</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> $validator;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a rules checker object that will be used for validating</span></span><br><span class="line"><span class="comment">     * application integrity.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> \Cake\ORM\RulesChecker $rules The rules object to be modified.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> \Cake\ORM\RulesChecker</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">buildRules</span><span class="params">(RulesChecker $rules)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $rules-&gt;add($rules-&gt;isUnique([<span class="string">'email'</span>]));</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> $rules;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>2.Model/Entity/User.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat src/Model/Entity/User.php </span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Model</span>\<span class="title">Entity</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">use</span> <span class="title">Cake</span>\<span class="title">ORM</span>\<span class="title">Entity</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * User Entity</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@property</span> int $id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@property</span> string $email</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@property</span> string $password</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@property</span> string $status</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@property</span> \Cake\I18n\FrozenTime $created</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@property</span> \Cake\I18n\FrozenTime $modified</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Entity</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Fields that can be mass assigned using newEntity() or patchEntity().</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Note that when '*' is set to true, this allows all unspecified fields to</span></span><br><span class="line"><span class="comment">     * be mass assigned. For security purposes, it is advised to set '*' to false</span></span><br><span class="line"><span class="comment">     * (or remove it), and explicitly make individual fields accessible as needed.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> $_accessible = [</span><br><span class="line">        <span class="string">'email'</span> =&gt; <span class="keyword">true</span>,</span><br><span class="line">        <span class="string">'password'</span> =&gt; <span class="keyword">true</span>,</span><br><span class="line">        <span class="string">'status'</span> =&gt; <span class="keyword">true</span>,</span><br><span class="line">        <span class="string">'created'</span> =&gt; <span class="keyword">true</span>,</span><br><span class="line">        <span class="string">'modified'</span> =&gt; <span class="keyword">true</span></span><br><span class="line">    ];</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Fields that are excluded from JSON versions of the entity.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> $_hidden = [</span><br><span class="line">        <span class="string">'password'</span></span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>3.Template/Users/index.ctp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat src/Template/Users/index.ctp </span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@var</span> \App\View\AppView $this</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@var</span> \App\Model\Entity\User[]|\Cake\Collection\CollectionInterface $users</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;nav class="large-3 medium-4 columns" id="actions-sidebar"&gt;</span><br><span class="line">    &lt;ul class="side-nav"&gt;</span><br><span class="line">        &lt;li class="heading"&gt;&lt;?= __('Actions') ?&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;<span class="meta">&lt;?</span>= <span class="keyword">$this</span>-&gt;Html-&gt;link(__(<span class="string">'New User'</span>), [<span class="string">'action'</span> =&gt; <span class="string">'add'</span>]) <span class="meta">?&gt;</span>&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/nav&gt;</span><br><span class="line">&lt;div class="users index large-9 medium-8 columns content"&gt;</span><br><span class="line">    &lt;h3&gt;<span class="meta">&lt;?</span>= __(<span class="string">'Users'</span>) <span class="meta">?&gt;</span>&lt;/h3&gt;</span><br><span class="line">    &lt;table cellpadding=<span class="string">"0"</span> cellspacing=<span class="string">"0"</span>&gt;</span><br><span class="line">        &lt;thead&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;th scope=<span class="string">"col"</span>&gt;<span class="meta">&lt;?</span>= <span class="keyword">$this</span>-&gt;Paginator-&gt;sort(<span class="string">'id'</span>) <span class="meta">?&gt;</span>&lt;/th&gt;</span><br><span class="line">                &lt;th scope=<span class="string">"col"</span>&gt;<span class="meta">&lt;?</span>= <span class="keyword">$this</span>-&gt;Paginator-&gt;sort(<span class="string">'email'</span>) <span class="meta">?&gt;</span>&lt;/th&gt;</span><br><span class="line">                &lt;th scope=<span class="string">"col"</span>&gt;<span class="meta">&lt;?</span>= <span class="keyword">$this</span>-&gt;Paginator-&gt;sort(<span class="string">'password'</span>) <span class="meta">?&gt;</span>&lt;/th&gt;</span><br><span class="line">                &lt;th scope=<span class="string">"col"</span>&gt;<span class="meta">&lt;?</span>= <span class="keyword">$this</span>-&gt;Paginator-&gt;sort(<span class="string">'status'</span>) <span class="meta">?&gt;</span>&lt;/th&gt;</span><br><span class="line">                &lt;th scope=<span class="string">"col"</span>&gt;<span class="meta">&lt;?</span>= <span class="keyword">$this</span>-&gt;Paginator-&gt;sort(<span class="string">'created'</span>) <span class="meta">?&gt;</span>&lt;/th&gt;</span><br><span class="line">                &lt;th scope=<span class="string">"col"</span>&gt;<span class="meta">&lt;?</span>= <span class="keyword">$this</span>-&gt;Paginator-&gt;sort(<span class="string">'modified'</span>) <span class="meta">?&gt;</span>&lt;/th&gt;</span><br><span class="line">                &lt;th scope="col" class="actions"&gt;&lt;?= __('Actions') ?&gt;&lt;/th&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/thead&gt;</span><br><span class="line">        &lt;tbody&gt;</span><br><span class="line">            <span class="meta">&lt;?php</span> <span class="keyword">foreach</span> ($users <span class="keyword">as</span> $user): <span class="meta">?&gt;</span></span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;<span class="meta">&lt;?</span>= <span class="keyword">$this</span>-&gt;Number-&gt;format($user-&gt;id) <span class="meta">?&gt;</span>&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;<span class="meta">&lt;?</span>= h($user-&gt;email) <span class="meta">?&gt;</span>&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;<span class="meta">&lt;?</span>= h($user-&gt;password) <span class="meta">?&gt;</span>&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;<span class="meta">&lt;?</span>= h($user-&gt;status) <span class="meta">?&gt;</span>&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;<span class="meta">&lt;?</span>= h($user-&gt;created) <span class="meta">?&gt;</span>&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;<span class="meta">&lt;?</span>= h($user-&gt;modified) <span class="meta">?&gt;</span>&lt;/td&gt;</span><br><span class="line">                &lt;td class="actions"&gt;</span><br><span class="line">                    <span class="meta">&lt;?</span>= <span class="keyword">$this</span>-&gt;Html-&gt;link(__(<span class="string">'View'</span>), [<span class="string">'action'</span> =&gt; <span class="string">'view'</span>, $user-&gt;id]) <span class="meta">?&gt;</span></span><br><span class="line">                    <span class="meta">&lt;?</span>= <span class="keyword">$this</span>-&gt;Html-&gt;link(__(<span class="string">'Edit'</span>), [<span class="string">'action'</span> =&gt; <span class="string">'edit'</span>, $user-&gt;id]) <span class="meta">?&gt;</span></span><br><span class="line">                    <span class="meta">&lt;?</span>= <span class="keyword">$this</span>-&gt;Form-&gt;postLink(__(<span class="string">'Delete'</span>), [<span class="string">'action'</span> =&gt; <span class="string">'delete'</span>, $user-&gt;id], [<span class="string">'confirm'</span> =&gt; __(<span class="string">'Are you sure you want to delete # &#123;0&#125;?'</span>, $user-&gt;id)]) <span class="meta">?&gt;</span></span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            <span class="meta">&lt;?php</span> <span class="keyword">endforeach</span>; <span class="meta">?&gt;</span></span><br><span class="line">        &lt;/tbody&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">    &lt;div class="paginator"&gt;</span><br><span class="line">        &lt;ul class="pagination"&gt;</span><br><span class="line">            <span class="meta">&lt;?</span>= <span class="keyword">$this</span>-&gt;Paginator-&gt;first(<span class="string">'&lt;&lt; '</span> . __(<span class="string">'first'</span>)) <span class="meta">?&gt;</span></span><br><span class="line">            <span class="meta">&lt;?</span>= <span class="keyword">$this</span>-&gt;Paginator-&gt;prev(<span class="string">'&lt; '</span> . __(<span class="string">'previous'</span>)) <span class="meta">?&gt;</span></span><br><span class="line">            <span class="meta">&lt;?</span>= <span class="keyword">$this</span>-&gt;Paginator-&gt;numbers() <span class="meta">?&gt;</span></span><br><span class="line">            <span class="meta">&lt;?</span>= <span class="keyword">$this</span>-&gt;Paginator-&gt;next(__(<span class="string">'next'</span>) . <span class="string">' &gt;'</span>) <span class="meta">?&gt;</span></span><br><span class="line">            <span class="meta">&lt;?</span>= <span class="keyword">$this</span>-&gt;Paginator-&gt;last(__(<span class="string">'last'</span>) . <span class="string">' &gt;&gt;'</span>) <span class="meta">?&gt;</span></span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        &lt;p&gt;<span class="meta">&lt;?</span>= <span class="keyword">$this</span>-&gt;Paginator-&gt;counter([<span class="string">'format'</span> =&gt; __(<span class="string">'Page &#123;&#123;page&#125;&#125; of &#123;&#123;pages&#125;&#125;, showing &#123;&#123;current&#125;&#125; record(s) out of &#123;&#123;count&#125;&#125; total'</span>)]) <span class="meta">?&gt;</span>&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><hr><p>4.Controller/UsersController.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat src/Controller/UsersController.php </span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Controller</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Controller</span>\<span class="title">AppController</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Users Controller</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@property</span> \App\Model\Table\UsersTable $Users</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> \App\Model\Entity\User[] paginate($object = null, array $settings = [])</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UsersController</span> <span class="keyword">extends</span> <span class="title">AppController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Index method</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> \Cake\Http\Response|void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $users = <span class="keyword">$this</span>-&gt;paginate(<span class="keyword">$this</span>-&gt;Users);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">$this</span>-&gt;set(compact(<span class="string">'users'</span>));</span><br><span class="line">        <span class="keyword">$this</span>-&gt;set(<span class="string">'_serialize'</span>, [<span class="string">'users'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * View method</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string|null $id User id.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> \Cake\Http\Response|void</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> \Cake\Datasource\Exception\RecordNotFoundException When record not found.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">view</span><span class="params">($id = null)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $user = <span class="keyword">$this</span>-&gt;Users-&gt;get($id, [</span><br><span class="line">            <span class="string">'contain'</span> =&gt; []</span><br><span class="line">        ]);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">$this</span>-&gt;set(<span class="string">'user'</span>, $user);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;set(<span class="string">'_serialize'</span>, [<span class="string">'user'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Add method</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> \Cake\Http\Response|null Redirects on successful add, renders view otherwise.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $user = <span class="keyword">$this</span>-&gt;Users-&gt;newEntity();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;request-&gt;is(<span class="string">'post'</span>)) &#123;</span><br><span class="line">            $user = <span class="keyword">$this</span>-&gt;Users-&gt;patchEntity($user, <span class="keyword">$this</span>-&gt;request-&gt;getData());</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;Users-&gt;save($user)) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;Flash-&gt;success(__(<span class="string">'The user has been saved.'</span>));</span><br><span class="line"> </span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;redirect([<span class="string">'action'</span> =&gt; <span class="string">'index'</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;Flash-&gt;error(__(<span class="string">'The user could not be saved. Please, try again.'</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;set(compact(<span class="string">'user'</span>));</span><br><span class="line">        <span class="keyword">$this</span>-&gt;set(<span class="string">'_serialize'</span>, [<span class="string">'user'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Edit method</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string|null $id User id.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> \Cake\Network\Exception\NotFoundException When record not found.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">edit</span><span class="params">($id = null)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $user = <span class="keyword">$this</span>-&gt;Users-&gt;get($id, [</span><br><span class="line">            <span class="string">'contain'</span> =&gt; []</span><br><span class="line">        ]);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;request-&gt;is([<span class="string">'patch'</span>, <span class="string">'post'</span>, <span class="string">'put'</span>])) &#123;</span><br><span class="line">            $user = <span class="keyword">$this</span>-&gt;Users-&gt;patchEntity($user, <span class="keyword">$this</span>-&gt;request-&gt;getData());</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;Users-&gt;save($user)) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;Flash-&gt;success(__(<span class="string">'The user has been saved.'</span>));</span><br><span class="line"> </span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;redirect([<span class="string">'action'</span> =&gt; <span class="string">'index'</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;Flash-&gt;error(__(<span class="string">'The user could not be saved. Please, try again.'</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;set(compact(<span class="string">'user'</span>));</span><br><span class="line">        <span class="keyword">$this</span>-&gt;set(<span class="string">'_serialize'</span>, [<span class="string">'user'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Delete method</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string|null $id User id.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> \Cake\Http\Response|null Redirects to index.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> \Cake\Datasource\Exception\RecordNotFoundException When record not found.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">delete</span><span class="params">($id = null)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;request-&gt;allowMethod([<span class="string">'post'</span>, <span class="string">'delete'</span>]);</span><br><span class="line">        $user = <span class="keyword">$this</span>-&gt;Users-&gt;get($id);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;Users-&gt;delete($user)) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;Flash-&gt;success(__(<span class="string">'The user has been deleted.'</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;Flash-&gt;error(__(<span class="string">'The user could not be deleted. Please, try again.'</span>));</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;redirect([<span class="string">'action'</span> =&gt; <span class="string">'index'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker环境下使用bake自动生成页面&lt;/p&gt;
    
    </summary>
    
      <category term="Back-end Knowledge" scheme="https://kisky3.github.io/categories/Back-end-Knowledge/"/>
    
    
      <category term="Docker" scheme="https://kisky3.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Create Development Environment(Docker &amp; Cakephp3)</title>
    <link href="https://kisky3.github.io/2019/04/03/%E4%BD%BF%E7%94%A8Docker%E8%BF%9B%E8%A1%8CCakephp3%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://kisky3.github.io/2019/04/03/使用Docker进行Cakephp3开发环境搭建/</id>
    <published>2019-04-03T10:45:29.000Z</published>
    <updated>2019-07-05T13:50:09.791Z</updated>
    
    <content type="html"><![CDATA[<p>使用Docker进行Cakephp3开发环境搭建</p><a id="more"></a><h3 id="使用Docker构建"><a href="#使用Docker构建" class="headerlink" title="使用Docker构建"></a>使用Docker构建</h3><p>本次使用Github公开的Dockerfile，利用docker-compose建立container.</p><p>使用的image是php:7-fpm-alpine</p><p><a href="https://github.com/matayoshi/docker_cakephp3_tutorial" target="_blank" rel="noopener">参照连接</a></p><p>1.首先将上面的克隆到本地home</p><img src="./1.png" style="width:500px"><p>2.然后使用docker-compose命令进行构建</p><img src="./2.png" style="width:500px">build的时候如果nginx存在的话会被跳过，需要确认的是这三个mysql、phpfpm、nginx有没有build成功。<p>3.然后创建Container</p><img src="./3.png" style="width:500px"><p>4.确认是否创建成功</p><img src="./4.png" style="width:500px"><p>5.启动Container，同时启动nginx服务器</p><img src="./5.png" style="width:500px"><p>注意：如果之前有创建过Container，并存在nginx container的时候，端口号重复所以会出现错误。此时应该停止Container然后再重复以上步骤。</p><p>6.然后Cakephp的composer装入phpfpm Container并安装。同时完成项目的创建。</p><img src="./6.png" style="width:500px"><p>7.安装和项目构建完成后，退出Container</p><p>8.启动服务器，就能看到确认画面了！</p><img src="./7.png" style="width:500px"><p>如果服务器版本不对则可能出现错误。此时需要brew在本地进行安装。</p><img src="./9.png" style="width:500px"><p>因为版本不同安装的东西也不同所以要进入Container里对php的版本进行确认。</p><img src="./10.png" style="width:500px"><p>版本为7.18，所以要安装php71-intl。</p><img src="./11.png" style="width:500px"><p>再启动服务器就能看到启动画面了。</p><p>通过此链接确认画面 <a href="http://localhost:8765/" target="_blank" rel="noopener">http://localhost:8765/</a></p><img src="./8.png" style="width:500px"><hr><h3 id="数据库连接"><a href="#数据库连接" class="headerlink" title="数据库连接"></a>数据库连接</h3><p>有时数据库无法连接上，则采用下面的方法进行确认：</p><h4 id="本地数据库连接方法："><a href="#本地数据库连接方法：" class="headerlink" title="本地数据库连接方法："></a>本地数据库连接方法：</h4><p>1.确认启动中的Container</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps</span><br></pre></td></tr></table></figure><p> 2.找到启动中的mysql Container<br>确认到host为127.0.0.1,port为3306</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">259d8b05f8ec  mysql:5.6  ... 127.0.0.1:3306-&gt;3306/tcp</span><br></pre></td></tr></table></figure><p>3.修改参数</p><p>cakephp的app.php的database改成「localhost」-&gt; 「127.0.0.1」<br>docker-compose.yml里的database的port改成相应的3306</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">services:</span><br><span class="line">  mysql:</span><br><span class="line">    restart: always</span><br><span class="line">    build: ./data/mysql/</span><br><span class="line">    volumes:</span><br><span class="line">      - <span class="string">"./data/mysql/db:/var/lib/mysql"</span></span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_ROOT_PASSWORD: password</span><br><span class="line">      MYSQL_USER: my_app</span><br><span class="line">      MYSQL_PASSWORD: secret</span><br><span class="line">      MYSQL_DATABASE: my_app</span><br><span class="line">      TZ: <span class="string">"Asia/Tokyo"</span></span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">"3306:3306"</span> </span><br><span class="line">  nginx:</span><br><span class="line">    restart: always</span><br><span class="line"></span><br><span class="line">    ~~~~~~~~~~~~~~~</span><br></pre></td></tr></table></figure><p>4.重新启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose down</span><br><span class="line">$ docker-compose up -d</span><br></pre></td></tr></table></figure><hr><h4 id="已存在数据库连接方法："><a href="#已存在数据库连接方法：" class="headerlink" title="已存在数据库连接方法："></a>已存在数据库连接方法：</h4><p>1.修改以下文件</p><p>app.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;host&apos; =&gt; &apos;xxxxx&apos;(你的数据库host),</span><br></pre></td></tr></table></figure><p>docker-compose.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">environment:</span><br><span class="line">      MYSQL_ROOT_PASSWORD: xxxx(你的数据库的密码)</span><br><span class="line">      MYSQL_USER: xxxx（你的登陆用户名）</span><br><span class="line">      MYSQL_PASSWORD: xxxx(你的数据库的密码)</span><br><span class="line">      MYSQL_DATABASE: xxxx（你的数据库名字）</span><br><span class="line">      TZ: &quot;Asia/Tokyo&quot;</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;3306:3306&quot;</span><br></pre></td></tr></table></figure><p>2.进入mysql Container，确认是否已经连接上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mysqlコンテナ名 sh</span><br></pre></td></tr></table></figure><p>3.重新启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose down</span><br><span class="line">$ docker-compose up -d</span><br></pre></td></tr></table></figure><hr><h4 id="途中可能会出现下面的问题"><a href="#途中可能会出现下面的问题" class="headerlink" title="途中可能会出现下面的问题"></a>途中可能会出现下面的问题</h4><h5 id="问题1"><a href="#问题1" class="headerlink" title="问题1:"></a>问题1:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ brew install homebrew/php/php71-intl</span><br><span class="line">Updating Homebrew...</span><br><span class="line">Error: homebrew/php was deprecated. This tap is now empty as all its formulae were migrated.</span><br></pre></td></tr></table></figure><p>解决方法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># Save all old configurations, so the new packaes can recreate their versions -- eases the migration</span><br><span class="line">mv /usr/local/etc/php $HOME/old-brew-php</span><br><span class="line"># Uninstall ALL php related Packages (most of them homebrew/php related)</span><br><span class="line">brew list | grep php | xargs brew uninstall --force</span><br><span class="line"># Remove deprecated tap</span><br><span class="line">brew untap homebrew/php</span><br><span class="line"># Clean cache</span><br><span class="line">brew cleanup</span><br><span class="line"># Ensure latest brew repo HEAD</span><br><span class="line">brew update</span><br><span class="line"># Install latest php (php 7.2)</span><br><span class="line">brew install php</span><br><span class="line">pecl install xdebug</span><br><span class="line"># Now copy &amp; paste specific conf.d from your old-brew-php version if needed</span><br><span class="line"># after that you may dispose of the old-brew-php folder</span><br></pre></td></tr></table></figure><p>使用下面进行确认</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">brew list | grep php:</span><br><span class="line"></span><br><span class="line">php php71</span><br><span class="line"></span><br><span class="line">brew tap:</span><br><span class="line"></span><br><span class="line">homebrew/bundle homebrew/core homebrew/dupes homebrew/php homebrew/services homebrew/versions</span><br></pre></td></tr></table></figure><p>然后再安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install php@7.1</span><br></pre></td></tr></table></figure><p>最后composer install再启动服务器就好了</p><h5 id="问题2"><a href="#问题2" class="headerlink" title="问题2:"></a>问题2:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E: Failed to fetch http://deb.debian.org/debian/dists/stretch/main/binary-amd64/Packages  Error writing to output file - write (28: No space left on device) Error writing to file - write (28: No space left on device)</span><br></pre></td></tr></table></figure><p>解决方法：<br>空间不足无法启动的情况，可以将所有的Container和Image都删除，再启动</p><p>删除所有的Container</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f $(docker ps -aq)</span><br></pre></td></tr></table></figure><p>删除所有的Images</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi -f $(docker images -q)</span><br></pre></td></tr></table></figure><p>删除所有的docker volume</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume rm -f $(docker volume ls -q)</span><br></pre></td></tr></table></figure><p>重新启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose down</span><br><span class="line">$ docker-compose up -d</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用Docker进行Cakephp3开发环境搭建&lt;/p&gt;
    
    </summary>
    
      <category term="Back-end Knowledge" scheme="https://kisky3.github.io/categories/Back-end-Knowledge/"/>
    
    
      <category term="Docker" scheme="https://kisky3.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>About JS-DOM Elements And Common API</title>
    <link href="https://kisky3.github.io/2019/03/22/JS-DOM%E5%85%83%E7%B4%A0%E4%BB%A5%E5%8F%8ADOM%E5%85%83%E7%B4%A0%E6%93%8D%E4%BD%9C%E5%B8%B8%E7%94%A8API/"/>
    <id>https://kisky3.github.io/2019/03/22/JS-DOM元素以及DOM元素操作常用API/</id>
    <published>2019-03-22T10:36:45.000Z</published>
    <updated>2019-07-05T13:51:18.003Z</updated>
    
    <content type="html"><![CDATA[<p>JS-DOM元素以及DOM元素操作常用API</p><a id="more"></a><h3 id="什么是DOM"><a href="#什么是DOM" class="headerlink" title="什么是DOM"></a>什么是DOM</h3><p>文档对象模型（DOM）是HTML和XML文档的编程借口。</p><p>在HTML里我们可以看到很多可折叠的标签。Js可以选择这些页面上对应的文档元素然后进行操作它，这些文档是对象，有相应的属性和方法。<br>所以称为文档对象模型。相当于把文档对象化，之后可以用Js进行对象的操作。<br>要改变页面的某个东西，Js就需要获得对HTML文档中所有元素进行访问的入口。<br>这个入口连同对HTML元素进行添加，移动，改变或移除的方法和属性，都是通过DOM来获得的。</p><img src="./1.png" style="500px"><hr><h3 id="DOM获取元素的方式"><a href="#DOM获取元素的方式" class="headerlink" title="DOM获取元素的方式"></a>DOM获取元素的方式</h3><ul><li><p>document 对象<br>每个载入浏览器的HTML文档都会成为document对象。<br>document对象包含了文档的基本信息，我们可以通过JavaScript对HTML页面中的所有元素进行访问、修改。</p></li><li><p>Element<br>除了document对象，在DOM中最常用的就是Element对象了，Element对象表示HTML元素。</p></li></ul><p>Element 对象可以拥有类型为元素节点、文本节点、注释节点的子节点，DOM提供了一系列的方法可以进行元素的增、删、改、查操作</p><hr><h3 id="DOM元素选取常用API"><a href="#DOM元素选取常用API" class="headerlink" title="DOM元素选取常用API"></a>DOM元素选取常用API</h3><p>1.getElementById()</p><p>2.getElementsByClassName()</p><p>3.getElementsByTagName()</p><p>4.getElementsByName()</p><p>5.querySelector()</p><p>querySelector方法返回匹配指定的CSS选择器的元素节点。如果有多个节点满足匹配条件，则返回第一个匹配的节点。如果没有发现匹配的节点，则返回null。<br>可以完成getElementById和getElementsByTagName的工作</p><p>6.querySelectorAll()</p><p>querySelectorAll方法返回匹配指定的CSS选择器的所有节点，返回的是NodeList类型的对象。NodeList对象不是动态集合，所以元素节点的变化无法实时反映在返回结果中。<br>str = document.querySelectorAll(selectors);<br>querySelectorAll方法的参数，可以是逗号分隔的多个CSS选择器，返回所有匹配其中一个选择器的元素。</p><hr><h3 id="创建和添加DOM元素"><a href="#创建和添加DOM元素" class="headerlink" title="创建和添加DOM元素"></a>创建和添加DOM元素</h3><h4 id="创建元素"><a href="#创建元素" class="headerlink" title="创建元素:"></a>创建元素:</h4><p>用createElement()来创建元素节点，如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>)</span><br></pre></td></tr></table></figure><p>用creatTextNode()来创建文本节点，如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> text = <span class="built_in">document</span>.createTextNode(<span class="string">"hello"</span>)</span><br></pre></td></tr></table></figure><p>用createDocumentFragment()生成一个Dom片段，不属在文档流中,如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> docFragment = <span class="built_in">document</span>.createDocumentFragment();</span><br></pre></td></tr></table></figure><h4 id="添加元素："><a href="#添加元素：" class="headerlink" title="添加元素："></a>添加元素：</h4><p>用appendChild()，在元素末尾添加子元素，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>)</span><br><span class="line"><span class="keyword">var</span> text = <span class="built_in">document</span>.createTextNode(<span class="string">"hello"</span>)</span><br><span class="line">div.appendChild(text)</span><br></pre></td></tr></table></figure><p>如需向 HTML DOM 添加新元素，必须首先创建该元素（元素节点），然后向一个已存在的元素追加该元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p1"</span>&gt;</span>这是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p2"</span>&gt;</span>这是另一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 这段代码创建新的 &lt;p&gt; 元素：</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> para=<span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">// 如需向 &lt;p&gt; 元素添加文本，您必须首先创建文本节点。这段代码创建了一个文本节点：</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> node=<span class="built_in">document</span>.createTextNode(<span class="string">"这是新段落。"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">// 然后向 &lt;p&gt; 元素追加这个文本节点：</span></span></span><br><span class="line">para.appendChild(node);</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">// 最后您必须向一个已有的元素追加这个新元素。这段代码找到一个已有的元素：</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> element=<span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">// 这段代码向这个已有的元素追加新元素：</span></span></span><br><span class="line">element.appendChild(para);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JS-DOM元素以及DOM元素操作常用API&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="JS" scheme="https://kisky3.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS Regular Expression</title>
    <link href="https://kisky3.github.io/2019/03/16/JS%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://kisky3.github.io/2019/03/16/JS正则表达式/</id>
    <published>2019-03-16T10:23:28.000Z</published>
    <updated>2019-07-05T13:52:07.852Z</updated>
    
    <content type="html"><![CDATA[<p>JS正则表达式</p><a id="more"></a><h3 id="什么是JS正则表达式"><a href="#什么是JS正则表达式" class="headerlink" title="什么是JS正则表达式"></a>什么是JS正则表达式</h3><p>正则表达式是计算机科学的一个概念，正则表达式使用单个字符串来描述，匹配一系列符合某个句法规则的字符串。</p><p>在很多文本编辑器里，正则表达式常被用来检索替换某些符合某个模式的文本。</p><h3 id="正则表达式的创建"><a href="#正则表达式的创建" class="headerlink" title="正则表达式的创建"></a>正则表达式的创建</h3><p>1.构造函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var reg = new RegExp(&apos;&lt;%[^%]+%&gt;&apos;,&apos;g&apos;);</span><br></pre></td></tr></table></figure><p>2.字面量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var reg =/&lt;%[^%]%&gt;/g;</span><br></pre></td></tr></table></figure><p>最后的g代表全局搜索，不添加的画搜索到第一个结果停止搜索</p><hr><h3 id="预定义类"><a href="#预定义类" class="headerlink" title="预定义类"></a>预定义类</h3><table><thead><tr><th>字符</th><th>等价类</th><th>含义</th></tr></thead><tbody><tr><td>.</td><td>[^\r\n]</td><td>除了回车符和换行符之外的所有字符</td></tr><tr><td>\d</td><td>[0-9]</td><td>数字字符</td></tr><tr><td>\D</td><td>[^0-9]</td><td>非数字字符</td></tr><tr><td>\s</td><td>[\t\n\x0B\f\r]</td><td>空白符</td></tr><tr><td>\S</td><td>[^\t\n\x0B\f\r]</td><td>非空白符</td></tr><tr><td>\w</td><td>[a-zA-Z_0-9]</td><td>单词字符，字母，数字下划线</td></tr><tr><td>\W</td><td>[^a-zA-Z_0-9]</td><td>非单词字符</td></tr></tbody></table><hr><h3 id="边界"><a href="#边界" class="headerlink" title="边界"></a>边界</h3><p>正则表达式还提供里几个常用的边界匹配字符串</p><table><thead><tr><th>字符</th><th>含义</th></tr></thead><tbody><tr><td>^</td><td>以xxx开头</td></tr><tr><td>$</td><td>以xxx结尾</td></tr><tr><td>\b</td><td>单词边界</td></tr><tr><td>\B</td><td>非单词边界</td></tr></tbody></table><hr><h3 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h3><p>正则表达式还提供里几个常用的边界匹配字符串</p><table><thead><tr><th>字符</th><th>含义</th></tr></thead><tbody><tr><td>?</td><td>出现零次或一次（最多出现一次）</td></tr><tr><td>+</td><td>出现一次或多次（至少出现一次）</td></tr><tr><td>*</td><td>出现零次或多次（任意次）</td></tr><tr><td>{n}</td><td>出现n次</td></tr><tr><td>{n，m}</td><td>出现n到m次</td></tr><tr><td>{n，}</td><td>至少出现n次</td></tr></tbody></table><hr><h3 id="前瞻"><a href="#前瞻" class="headerlink" title="前瞻"></a>前瞻</h3><table><thead><tr><th>字符</th><th>含义</th></tr></thead><tbody><tr><td>exp1(?=exp2)</td><td>匹配后面是exp2的exp1</td></tr><tr><td>exp1(?！=exp2)</td><td>匹配后面不是exp2的exp1</td></tr></tbody></table><hr><h3 id="贪婪模式与非贪婪模式"><a href="#贪婪模式与非贪婪模式" class="headerlink" title="贪婪模式与非贪婪模式"></a>贪婪模式与非贪婪模式</h3><h4 id="贪婪模式"><a href="#贪婪模式" class="headerlink" title="贪婪模式"></a>贪婪模式</h4><p>在贪婪模式下（一般为默认模式），正则引擎尽可能多的重复匹配字符<br>也就是匹配时先忽略下一个条件，优先以当前条件进行匹配，完成当前条件之后才开始回溯以下一条件进行匹配</p><h4 id="非贪婪模式"><a href="#非贪婪模式" class="headerlink" title="非贪婪模式"></a>非贪婪模式</h4><p>非贪婪模式和贪婪模式相反，可通过在代表适量的表示符后放置？来开启非贪婪模式<br>如？，+？甚至是？？？，<br>非贪婪模式是不只看当前条件还看下一条件进行检索，正则引擎尝试用最小可能的重复次数来进行匹配</p><p>例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'a "witch" and her "broom" is one'</span>;</span><br><span class="line"> str.match( <span class="regexp">/".*"/g</span>);</span><br></pre></td></tr></table></figure><p>在贪婪模式下，匹配到 “witch” and her “broom” 一个字符串</p><p>而在非贪婪模式下匹配到的是”witch”和”broom”</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JS正则表达式&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="JS" scheme="https://kisky3.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS Immediately Invoked Function Expression</title>
    <link href="https://kisky3.github.io/2019/03/02/JS%E7%AB%8B%E5%8D%B3%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://kisky3.github.io/2019/03/02/JS立即执行函数表达式/</id>
    <published>2019-03-02T10:13:39.000Z</published>
    <updated>2019-07-05T13:53:19.004Z</updated>
    
    <content type="html"><![CDATA[<p>JS立即执行函数表达式</p><a id="more"></a><h3 id="什么是JS作用域"><a href="#什么是JS作用域" class="headerlink" title="什么是JS作用域"></a>什么是JS作用域</h3><p>JS作用域表示变量或函数起作用的区域，指代了它们在什么样的上下文中执行，亦即上下文执行环境。</p><p>Javascript 的作用域只有两种：全局作用域和本地作用域，本地作用域是按照函数来区分的。</p><h4 id="全局变量："><a href="#全局变量：" class="headerlink" title="全局变量："></a>全局变量：</h4><p>声明在函数外部的变量，在代码中任何地方都能访问到的对象拥有全局作用域（所有没有var直接赋值的变量都属于全局变量）</p><p>1.最外层函数和在最外层函数外面定义的变量拥有全局作用域</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> authorName=<span class="string">"Dream"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> blogName=<span class="string">"blogName"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">innerSay</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(blogName);</span><br><span class="line">    &#125;</span><br><span class="line">    innerSay();</span><br><span class="line">&#125;</span><br><span class="line">alert(authorName); <span class="comment">//Dream</span></span><br><span class="line">alert(blogName); <span class="comment">//脚本错误</span></span><br><span class="line">doSomething(); <span class="comment">//blogName</span></span><br><span class="line">innerSay() <span class="comment">//脚本错误</span></span><br></pre></td></tr></table></figure><p>2.所有末定义直接赋值的变量自动声明为拥有全局作用域<br>例：变量blogName拥有全局作用域，而authorName在函数外部无法访问到。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> authorName=<span class="string">"Dream"</span>;</span><br><span class="line">    blogName=<span class="string">"blogName"</span>;</span><br><span class="line">    alert(authorName);</span><br><span class="line">&#125;</span><br><span class="line">doSomething(); <span class="comment">//Dream</span></span><br><span class="line">alert(blogName); <span class="comment">//blogName</span></span><br><span class="line">alert(authorName); <span class="comment">//脚本错误</span></span><br></pre></td></tr></table></figure><h4 id="局部变量（函数作用域）："><a href="#局部变量（函数作用域）：" class="headerlink" title="局部变量（函数作用域）："></a>局部变量（函数作用域）：</h4><p>声明在函数内部的变量，和全局作用域相反，局部作用域一般只在固定的代码片段内可访问到。<br>例：代码中的blogName和函数innerSay都只拥有局部作用域。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> blogName=<span class="string">"Dream"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">innerSay</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(blogName);</span><br><span class="line">    &#125;</span><br><span class="line">    innerSay();</span><br><span class="line">&#125;</span><br><span class="line">alert(blogName); <span class="comment">//脚本错误</span></span><br><span class="line">innerSay(); <span class="comment">//脚本错误</span></span><br></pre></td></tr></table></figure><hr><h3 id="什么是JS作用域链"><a href="#什么是JS作用域链" class="headerlink" title="什么是JS作用域链"></a>什么是JS作用域链</h3><p>每当执行一个函数就会进入一个新的作用域下，当使用一个变量时首先从自己的作用域找，如果找到就输出，如果没有再从自己的上层作用域找，也就是该函数声明的作用域。<br>这就是js的作用域链。</p><p>例：执行下面fn（）时输出结果为 2</p><ul><li>因为return fn3，所以执行fn3内的fn2，</li><li>首先从fn2的作用域内找变量a，</li><li>而fn2内没有声明变量a，所以从fn2的上层作用域，也就是声明fn2的fn1下找变量a，</li><li>在fn1下找到 var a = 2</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">4</span></span><br><span class="line">    fn2()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span></span><br><span class="line">  <span class="keyword">return</span> fn3</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fn = fn1()</span><br><span class="line">fn() <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><hr><h3 id="什么是JS立即执行函数"><a href="#什么是JS立即执行函数" class="headerlink" title="什么是JS立即执行函数"></a>什么是JS立即执行函数</h3><p>首先声明一个匿名函数 function(){alert(‘我是匿名函数’)}。然后在匿名函数后面接一对括号 ()，调用这个匿名函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="string">'我是匿名函数'</span>)&#125;)()</span><br></pre></td></tr></table></figure><p>用括号把函数包起来其实是为了兼容 JS 的语法。如果我们不加另一对括号，直接写成下面这样浏览器会报语法错误。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="string">'我是匿名函数'</span>)&#125;()</span><br></pre></td></tr></table></figure><p>立即执行函数只有一个作用：创建一个独立的作用域。<br>这个作用域里面的变量，外面访问不到（即避免「变量污染」）。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JS立即执行函数表达式&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="JS" scheme="https://kisky3.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS About if-xx- And -a-b</title>
    <link href="https://kisky3.github.io/2019/02/26/JS%E5%87%BD%E6%95%B0%E5%85%B3%E4%BA%8Eif-xx-%E5%92%8C-a-b/"/>
    <id>https://kisky3.github.io/2019/02/26/JS函数关于if-xx-和-a-b/</id>
    <published>2019-02-26T09:35:02.000Z</published>
    <updated>2019-07-05T13:54:15.517Z</updated>
    
    <content type="html"><![CDATA[<p>JS函数关于if-xx-和-a-b</p><a id="more"></a><h3 id="JS函数-f-xx"><a href="#JS函数-f-xx" class="headerlink" title="JS函数:f(xx)"></a>JS函数:f(xx)</h3><p>JS对于括号里的表达式，会被强制转换成布尔类型</p><p>基本原理如下表：</p><table><thead><tr><th>type</th><th>result</th></tr></thead><tbody><tr><td>Undefined</td><td>false</td></tr><tr><td>Null</td><td>false</td></tr><tr><td>Boolean</td><td>直接判断</td></tr><tr><td>Number</td><td>+0，-0，或者NaN为false，其他为true</td></tr><tr><td>String</td><td>空字符串为false，其他都为true</td></tr><tr><td>Object</td><td>true</td></tr></tbody></table><hr><h3 id="JS函数：a-b"><a href="#JS函数：a-b" class="headerlink" title="JS函数：a==b"></a>JS函数：a==b</h3><p>JS对于a==b类型会进行变形比较，原理如下表：<br>基本上遇到数字以外的类型可以先考虑往数字上转型</p><table><thead><tr><th>x</th><th>y</th><th>结果</th></tr></thead><tbody><tr><td>null</td><td>undefined</td><td>true</td></tr><tr><td>Number</td><td>String</td><td>x == toNumber(y)</td></tr><tr><td>Boolean</td><td>(any)</td><td>toNumber(x) == y</td></tr><tr><td>Object</td><td>String or Number</td><td>toPrimitive(x) == y</td></tr><tr><td>otherwise</td><td>otherwise</td><td>false</td></tr></tbody></table><hr><h3 id="toNumber"><a href="#toNumber" class="headerlink" title="toNumber"></a>toNumber</h3><p>其他类型转换成数字用toNumber：</p><table><thead><tr><th>type</th><th>result</th></tr></thead><tbody><tr><td>Undefined</td><td>NaN</td></tr><tr><td>Null</td><td>0</td></tr><tr><td>Boolean</td><td>true -&gt; 1, false -&gt; 0</td></tr><tr><td>String</td><td>“abc” -&gt; NaN, “123” -&gt; 123</td></tr></tbody></table><hr><h3 id="toPrimitive"><a href="#toPrimitive" class="headerlink" title="toPrimitive"></a>toPrimitive</h3><p>对于Object类型，先尝试调用.v3alueOf方法获取结果。如果没定义，再尝试调用.toString方法获取结果。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JS函数关于if-xx-和-a-b&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="JS" scheme="https://kisky3.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>About Webpage Rendering</title>
    <link href="https://kisky3.github.io/2019/02/23/%E5%85%B3%E4%BA%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E6%9C%BA%E5%88%B6/"/>
    <id>https://kisky3.github.io/2019/02/23/关于浏览器渲染机制/</id>
    <published>2019-02-23T09:03:58.000Z</published>
    <updated>2019-07-05T13:55:40.476Z</updated>
    
    <content type="html"><![CDATA[<p>关于浏览器渲染机制</p><a id="more"></a><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>浏览器的内核是指支持浏览器运行的最核心的程序，分为两个部分的，一是渲染引擎，另一个是JS引擎。</p><p>渲染引擎在不同的浏览器中也不是都相同的。比如在 Firefox 中叫做 Gecko，在 Chrome 和 Safari 中都是基于 WebKit 开发的。</p><hr><h3 id="浏览器渲染步骤"><a href="#浏览器渲染步骤" class="headerlink" title="浏览器渲染步骤"></a>浏览器渲染步骤</h3><img src="./1.png" style="width:500px"><h4 id="1-解析HTML标签，构建DOM树"><a href="#1-解析HTML标签，构建DOM树" class="headerlink" title="1.解析HTML标签，构建DOM树"></a>1.解析HTML标签，构建DOM树</h4><p>浏览器会遵守一套步骤将HTML 文件转换为 DOM 树。宏观上，可以分为几个步骤：<br>字节数据 =&gt; 字符串 =&gt; Token =&gt; Node =&gt; DOM</p><p>比如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Web page parsing<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Web page parsing<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is an example Web page.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面这段HTML会解析成这样：<br><img src="./2.png" style="width:500px"></p><h4 id="2-解析CSS标签，构建CSSOM树"><a href="#2-解析CSS标签，构建CSSOM树" class="headerlink" title="2.解析CSS标签，构建CSSOM树"></a>2.解析CSS标签，构建CSSOM树</h4><p>DOM会捕获页面的内容，但浏览器还需要知道页面如何展示，所以需要构建CSSOM。<br>构建CSSOM的过程与构建DOM的过程非常相似，当浏览器接收到一段CSS，浏览器首先要做的是识别出Token，然后构建节点并生成CSSOM。<br>字节数据 =&gt; 字符串 =&gt; Token =&gt; Node =&gt; CSSOM</p><h4 id="3-把DOM和CSSOM组合成渲染树（reder-tree）"><a href="#3-把DOM和CSSOM组合成渲染树（reder-tree）" class="headerlink" title="3.把DOM和CSSOM组合成渲染树（reder tree）"></a>3.把DOM和CSSOM组合成渲染树（reder tree）</h4><p>当我们生成 DOM 树和 CSSOM 树以后，就需要将这两棵树组合为渲染树。然后在渲染树的基础上进行布局，计算每个节点的几何结构</p><img src="./3.png" style="width:500px"><h4 id="4-把每个节点绘制到屏幕上（painting）"><a href="#4-把每个节点绘制到屏幕上（painting）" class="headerlink" title="4. 把每个节点绘制到屏幕上（painting）"></a>4. 把每个节点绘制到屏幕上（painting）</h4><p>当浏览器生成渲染树以后，就会根据渲染树来进行布局（也可以叫做回流）。</p><p>这一阶段浏览器要做的事情是要弄清楚各个节点在页面中的确切位置和大小。通常这一行为也被称为“自动重排”。<br>布局流程的输出是一个“盒模型”，它会精确地捕获每个元素在视口内的确切位置和尺寸，所有相对测量值都将转换为屏幕上的绝对像素。<br>布局完成后，浏览器会立即发出“Paint Setup”和“Paint”事件，将渲染树转换成屏幕上的像素。</p><hr><h3 id="关于JS渲染"><a href="#关于JS渲染" class="headerlink" title="关于JS渲染"></a>关于JS渲染</h3><p>JavaScript的加载、解析与执行会阻塞DOM的构建，也就是说，在构建DOM时，HTML解析器若遇到了JavaScript，那么它会暂停构建DOM，将控制权移交给JavaScript引擎，等JavaScript引擎运行完毕，浏览器再从中断的地方恢复DOM构建。</p><p>也就是说，如果你想首屏渲染的越快，就越不应该在首屏就加载 JS 文件，这也是都建议将 script 标签放在 body 标签底部的原因。当然在当下，并不是说 script 标签必须放在底部，因为你可以给 script 标签添加 defer 或者 async 属性</p><p>JS文件不只是阻塞DOM的构建，它会导致CSSOM也阻塞DOM的构建。<br>因为JavaScript不只是可以改DOM，它还可以更改样式，也就是它可以更改CSSOM<br>原本DOM和CSSOM的构建是互不影响，井水不犯河水，但是一旦引入了JavaScript，CSSOM也开始阻塞DOM的构建，只有CSSOM构建完毕后，DOM再恢复DOM构建。</p><hr><h3 id="关于回流和重绘"><a href="#关于回流和重绘" class="headerlink" title="关于回流和重绘"></a>关于回流和重绘</h3><p>我们知道，当网页生成的时候，至少会渲染一次。在用户访问的过程中，还会不断重新渲染。重新渲染会重复上图中的第四步(回流)+第五步(重绘)或者只有第五个步(重绘)。</p><h4 id="repaint：重绘"><a href="#repaint：重绘" class="headerlink" title="repaint：重绘"></a>repaint：重绘</h4><p>页面元素不发生位置的变化，不需要重新计算所有元素的位置。比如说改变DOM的颜色等</p><h4 id="reflow：-回流"><a href="#reflow：-回流" class="headerlink" title="reflow： 回流"></a>reflow： 回流</h4><p>当我们增加，删除更新DOM元素的时候，元素自身位置发生变化，导致其余的元素位置也发生变化，导致页面必须重新计算的现象称为回流<br>比如</p><ul><li>添加或者删除可见的DOM元素；</li><li>元素尺寸改变——边距、填充、边框、宽度和高度</li><li>内容变化，比如用户在input框中输入文字</li><li>浏览器窗口尺寸改变——resize事件发生时</li><li>计算 offsetWidth 和 offsetHeight 属性</li><li>设置 style 属性的值</li><li>回流必定会发生重绘，重绘不一定会引发回流。</li><li>重绘和回流会在我们设置节点样式时频繁出现，同时也会很大程度上影响性能。回流所需的成本比重绘高的多，改变父节点里的子节点很可能会导致父节点的一系列回流。</li></ul><hr><h3 id="async和defer的作用是什么"><a href="#async和defer的作用是什么" class="headerlink" title="async和defer的作用是什么"></a>async和defer的作用是什么</h3><p>没有 defer 或 async，浏览器会立即加载并执行指定的脚本，也就是说不等待后续载入的文档元素，读到就加载并执行。</p><h4 id="异步下载"><a href="#异步下载" class="headerlink" title="(异步下载)"></a>(异步下载)</h4><p>async 属性表示异步执行引入的 JavaScript，与 defer 的区别在于，如果已经加载好，就会开始执行——无论此刻是 HTML 解析阶段还是 DOMContentLoaded 触发之后。</p><h4 id="延迟执行"><a href="#延迟执行" class="headerlink" title="(延迟执行)"></a>(延迟执行)</h4><p>defer 属性表示延迟执行引入的 JavaScript，即这段 JavaScript 加载时 HTML 并未停止解析，这两个过程是并行的。整个 document 解析完毕且 defer-script 也加载完成之后（这两件事情的顺序无关），会执行所有由 defer-script 加载的 JavaScript 代码，然后触发 DOMContentLoaded 事件。</p><p>defer 与相比普通 script，有两点区别：载入 JavaScript 文件时不阻塞 HTML 的解析，执行阶段被放到 HTML 标签解析完成之后。在加载多个JS脚本的时候，async是无顺序的加载，而defer是有顺序的加载。</p><hr><h3 id="关于白屏和-FOUC"><a href="#关于白屏和-FOUC" class="headerlink" title="关于白屏和 FOUC"></a>关于白屏和 FOUC</h3><p>由于浏览器的渲染机制不同，在渲染页面时会出现两种常见的不良现象—-白屏问题和FOUS（无样式内容闪烁）</p><h4 id="FOUC："><a href="#FOUC：" class="headerlink" title="FOUC："></a>FOUC：</h4><p>由于浏览器渲染机制（比如firefox），再CSS加载之前，先呈现了HTML，就会导致展示出无样式内容，然后样式突然呈现的现象；</p><h4 id="白屏："><a href="#白屏：" class="headerlink" title="白屏："></a>白屏：</h4><p>有些浏览器渲染机制（比如chrome）要先构建DOM树和CSSOM树，构建完成后再进行渲染，如果CSS部分放在HTML尾部，由于CSS未加载完成，浏览器迟迟未渲染，从而导致白屏；也可能是把js文件放在头部，脚本会阻塞后面内容的呈现，脚本会阻塞其后组件的下载，出现白屏问题。</p><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>浏览器工作流程：构建DOM -&gt; 构建CSSOM -&gt; 构建渲染树 -&gt; 布局 -&gt; 绘制。</p><p>CSSOM会阻塞渲染，只有当CSSOM构建完毕后才会进入下一个阶段构建渲染树。</p><p>通常情况下DOM和CSSOM是并行构建的，但是当浏览器遇到一个script标签时，DOM构建将暂停，直至脚本完成执行。但由于JavaScript可以修改CSSOM，所以需要等CSSOM构建完毕后再执行JS。</p><p>如果你想首屏渲染的越快，就越不应该在首屏就加载 JS 文件，建议将 script 标签放在 body 标签底部。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于浏览器渲染机制&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="Browser" scheme="https://kisky3.github.io/tags/Browser/"/>
    
  </entry>
  
  <entry>
    <title>JS Developing History And New Characteristics Of ES6</title>
    <link href="https://kisky3.github.io/2019/02/10/JS%E5%8F%91%E5%B1%95%E7%AE%80%E5%8F%B2/"/>
    <id>https://kisky3.github.io/2019/02/10/JS发展简史/</id>
    <published>2019-02-10T08:59:27.000Z</published>
    <updated>2019-07-05T13:57:35.555Z</updated>
    
    <content type="html"><![CDATA[<p>JS发展简史及ES6新特性</p><a id="more"></a><h3 id="JS标准制定简史"><a href="#JS标准制定简史" class="headerlink" title="JS标准制定简史"></a>JS标准制定简史</h3><p>1995年，只花了10天时间 Brendan 就开发完成了当时被称作Mocha的初版 JavaScript 原型。</p><p>那时候的JS比较简陋，没有数组和字面量的对象的概念，所有的报错都只能通过丑陋的alert展示，缺乏异常处理机制，出错时很多运算的结果会是NaN或undefined。不过 Brendan 对 DOM 0 的描述及初版的JavaScript还是成为了最初的标准。</p><p>1995年9月，JavaScript也被包装为LiveScript一同面世。1995年12月，Netscape Navigator 2.0 beta3发布，LiveScript在这时被改名为JavaScript(当时这个商标为Sun公司所有，现在属甲骨文公司)。之后不久,网景推出了LiveWire，一种在其服务器（Netscape Enterprise Server）上的JavaScript实现1。</p><p>1996年，微软推出了JScript，同ie3捆绑发行,JScript在微软的IIS服务器上同样可用。</p><p>1996年开始,JS语言开始走上规范之路，由于当时Sun公司不愿意转让JavaScript这一商标，虽然微软愿意转让JScript这一商标,但却遭到其它公司成员的反对，因此这一语言的名字就成了我们熟悉的ECMAScript。</p><p>1997年6月ECMA-262的第一版发布，之后一年中，规范依据ISO / IEC 16262国际标准进行了改进，并由ISO认证机构大量审查，1997年6月ECMAScript规范正式发布第二版。</p><p>1999年12月，ES3也发布了，这一版的规范带来了正则表达式，switch，do/while,try/catch，Object#hasOwnProperty以及其它的一些改变，同时新增的大部分规范在网景的新版浏览器SpiderMonkey中也得以实现。<br>ES4标准的草案在之后不久就被TC39提出，这一草案直接影响了2000年中期的JScript,.NET等的开发，2006年Flash推出了ActionScript 3也深受其影响。</p><p>但是关于JavaScript语言该如何发展，当时的意见非常矛盾，这使规范制定的工作停滞不前。这在Web标准指定史上是一个非常尴尬且奇妙的时刻，当时微软掌握着主动权，但是它对规范的改进却没太大的兴趣。</p><p>两年后，随着火狐浏览器市场占有率不断增高，就职于 Mozilla 的 Brendan 迫使微软回到标准指定的议程中。2005年中期开始，TC39委员会又开始了例会。重新开始讨论起ES4，他们计划在ES4中引入模块系统，类，迭代器，生成器，解构，类型注释，适当的尾调用，新的数据类型和各种其他功能,由于这个工程的野心太大，ES4的制定因而被一而再的延期。</p><p>2007年，TC39委员会被迫分为两部分，一部分负责ES3的渐进加强版ES3.1标准的制定，另一部分则负责重新设计改动巨大的ES4标准。<br>2008年8月，ES3.1被认为是正确的选择，随后其更名为ES5， ES4也随之被废弃，不过值得庆幸的是 ES4 提出的很多新功能被融入到了 ES6 ，也有一些功能仍然在考虑之中，另一些则已被放弃，拒绝或撤回。兼容ES3.1 成为 ES4 标准提出的功能可能被采纳的前提。 2009年12月，ES3发布10周年后，第五版ECMAScript才得以发布。这个版本把十年来各浏览器中已有的普遍实践标准化了，新增了get<code>set</code>，改进了数组原型的函数式特征，原生支持了JSON的解析，提出了严格模式。 2011年6月，ES5标准再次修改并改进为 ISO/IEC 16262:2011标准 的第三版，并以ES5.1的名义正式发布。 2015年6月，也就是ES5.1发布的四年后，TC39公布了JS语言有史以来最大的更新 ES6， 其中包含了很多ES4中提出草案。</p><p>ES6的发布是JS标准制定历史上的一个重要里程碑。除了数十种引入注目的新功能，ES6 的发布也标志着 ECMAScript 标准将持续更新。</p><hr><h3 id="ES6中的新特性"><a href="#ES6中的新特性" class="headerlink" title="ES6中的新特性"></a>ES6中的新特性</h3><p>ES6改动非常大，这从规范的页数就可以看出，ES5.1 258页，ES6 566页。总的来说新增的规范可以划分为以下不同类别：</p><ul><li><p>语法糖</p></li><li><p>新机制</p></li><li><p>更好的语义化</p></li><li><p>更多内置的方法</p></li></ul><p>现存局限方法的非破坏性解决方案</p><p>语法糖是ES6所有改变中最重要的一块，class语法可简洁的构建对象实例，支持使用箭头函数，简写的对象属性方法，解构，剩余值，和拓展，等提供语义良好的编写程序的方法。</p><p>ES6为我们提供了几种控制异步代码流的机制：包括可靠的promises，表征一系列值的iterators，特殊的iterators–&gt; generators。基于这些新概念,ES2017还有了了async/await语法，让我们以同步的方式来书写异步代码。</p><p>ES6提供了一些新的内置类型来管理set和map,这些新类型不具有仅使用字符串键的限制</p><p>Proxy对象重新定义了我们通过JavaScript reflection可以做什么，Proxy对象类似于其它上下文中的代理。可以用以修改与JavaScript对象的任何交互，如定义、删除或访问属性。考虑到代理对象的工作机制，他们不能彻底通过ployfill实现，事实上相关的ployfill也是存在的，但是由于存在局限性使得他们在某些方面与规范有所不一致。</p><p>除此之外，ES6还在语言层面上为我们提供了模块系统,ES6对Number,Math,Array和string等都进行了更新，提供了新的api。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JS发展简史及ES6新特性&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="JS" scheme="https://kisky3.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>CSS Code Rules</title>
    <link href="https://kisky3.github.io/2019/01/22/CSS%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    <id>https://kisky3.github.io/2019/01/22/CSS编码规范/</id>
    <published>2019-01-22T08:44:59.000Z</published>
    <updated>2019-07-05T13:59:07.896Z</updated>
    
    <content type="html"><![CDATA[<p>CSS编码规范</p><a id="more"></a><h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h3><p>CSS作为网页样式的描述语言，在百度一直有着广泛的应用。本文档的目标是使CSS代码风格保持一致，容易被理解和被维护。</p><p>虽然本文档是针对CSS设计的，但是在使用各种CSS的预编译器(如less、sass、stylus等)时，适用的部分也应尽量遵循本文档的约定。</p><h3 id="2-代码风格"><a href="#2-代码风格" class="headerlink" title="2 代码风格"></a>2 代码风格</h3><h4 id="2-1-文件"><a href="#2-1-文件" class="headerlink" title="2.1 文件"></a>2.1 文件</h4><p>[建议] CSS 文件使用无 BOM 的 UTF-8 编码。<br>解释：</p><p>UTF-8 编码具有更广泛的适应性。BOM 在使用程序或工具处理文件时可能造成不必要的干扰。</p><h4 id="2-2-缩进"><a href="#2-2-缩进" class="headerlink" title="2.2 缩进"></a>2.2 缩进</h4><p>[强制] 使用 4 个空格做为一个缩进层级，不允许使用 2 个空格 或 tab 字符。</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.selector</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-空格"><a href="#2-3-空格" class="headerlink" title="2.3 空格"></a>2.3 空格</h4><p>[强制] 选择器 与 { 之间必须包含空格。<br>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.selector</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[强制] 属性名 与之后的 : 之间不允许包含空格， : 与 属性值 之间必须包含空格。<br>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">margin</span>: 0;</span><br></pre></td></tr></table></figure><p>[强制] 列表型属性值 书写在单行时，, 后必须跟一个空格。<br>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">font-family</span>: <span class="selector-tag">Arial</span>, <span class="selector-tag">sans-serif</span>;</span><br></pre></td></tr></table></figure><h4 id="2-4-行长度"><a href="#2-4-行长度" class="headerlink" title="2.4 行长度"></a>2.4 行长度</h4><p>[强制] 每行不得超过 120 个字符，除非单行不可分割。<br>解释：</p><p>常见不可分割的场景为URL超长。</p><p>[建议] 对于超长的样式，在样式值的 空格 处或 , 后换行，建议按逻辑分组。<br>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 不同属性值按逻辑分组 */</span></span><br><span class="line"><span class="selector-tag">background</span>:</span><br><span class="line">    <span class="selector-tag">transparent</span> <span class="selector-tag">url</span>(<span class="selector-tag">aVeryVeryVeryLongUrlIsPlacedHere</span>)</span><br><span class="line">    <span class="selector-tag">no-repeat</span> 0 0;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 可重复多次的属性，每次重复一行 */</span></span><br><span class="line"><span class="selector-tag">background-image</span>:</span><br><span class="line">    <span class="selector-tag">url</span>(<span class="selector-tag">aVeryVeryVeryLongUrlIsPlacedHere</span>)</span><br><span class="line">    <span class="selector-tag">url</span>(<span class="selector-tag">anotherVeryVeryVeryLongUrlIsPlacedHere</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 类似函数的属性值可以根据函数调用的缩进进行 */</span></span><br><span class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">-webkit-gradient</span>(</span><br><span class="line">    <span class="selector-tag">linear</span>,</span><br><span class="line">    <span class="selector-tag">left</span> <span class="selector-tag">bottom</span>,</span><br><span class="line">    <span class="selector-tag">left</span> <span class="selector-tag">top</span>,</span><br><span class="line">    <span class="selector-tag">color-stop</span>(0<span class="selector-class">.04</span>, <span class="selector-tag">rgb</span>(88,94,124)),</span><br><span class="line">    <span class="selector-tag">color-stop</span>(0<span class="selector-class">.52</span>, <span class="selector-tag">rgb</span>(115,123,162))</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="2-5-选择器"><a href="#2-5-选择器" class="headerlink" title="2.5 选择器"></a>2.5 选择器</h4><p>[强制] 当一个 rule 包含多个 selector 时，每个选择器声明必须独占一行。<br>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.post</span>,</span><br><span class="line"><span class="selector-class">.page</span>,</span><br><span class="line"><span class="selector-class">.comment</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.post</span>, <span class="selector-class">.page</span>, <span class="selector-class">.comment</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[强制] &gt;、+、~ 选择器的两边各保留一个空格。<br>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-tag">main</span> &gt; <span class="selector-tag">nav</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">label</span> + <span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#69C</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-tag">main</span>&gt;<span class="selector-tag">nav</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">label</span>+<span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:checked</span>~<span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#69C</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[强制] 属性选择器中的值必须用双引号包围。<br>解释：</p><p>不允许使用单引号，不允许不使用引号。</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-tag">article</span><span class="selector-attr">[character="juliet"]</span> &#123;</span><br><span class="line">    <span class="attribute">voice-family</span>: <span class="string">"Vivien Leigh"</span>, victoria, female</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-tag">article</span><span class="selector-attr">[character='juliet']</span> &#123;</span><br><span class="line">    <span class="attribute">voice-family</span>: <span class="string">"Vivien Leigh"</span>, victoria, female</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-6-属性"><a href="#2-6-属性" class="headerlink" title="2.6 属性"></a>2.6 属性</h4><p>[强制] 属性定义必须另起一行。</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.selector</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.selector</span> &#123; <span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">0</span>; &#125;</span><br><span class="line"><span class="selector-attr">[强制]</span> 属性定义后必须以分号结尾。</span><br><span class="line">示例：</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.selector</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.selector</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-通用"><a href="#3-通用" class="headerlink" title="3 通用"></a>3 通用</h3><h4 id="3-1-选择器"><a href="#3-1-选择器" class="headerlink" title="3.1 选择器"></a>3.1 选择器</h4><p>[强制] 如无必要，不得为 id、class 选择器添加类型选择器进行限定。<br>解释：</p><p>在性能和维护性上，都有一定的影响。</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-id">#error</span>,</span><br><span class="line"><span class="selector-class">.danger-message</span> &#123;</span><br><span class="line">    <span class="attribute">font-color</span>: <span class="number">#c00</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-tag">dialog</span><span class="selector-id">#error</span>,</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.danger-message</span> &#123;</span><br><span class="line">    <span class="attribute">font-color</span>: <span class="number">#c00</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[建议] 选择器的嵌套层级应不大于 3 级，位置靠后的限定条件应尽可能精确。<br>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-id">#username</span> <span class="selector-tag">input</span> &#123;&#125;</span><br><span class="line"><span class="selector-class">.comment</span> <span class="selector-class">.avatar</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.page</span> <span class="selector-class">.header</span> <span class="selector-class">.login</span> <span class="selector-id">#username</span> <span class="selector-tag">input</span> &#123;&#125;</span><br><span class="line"><span class="selector-class">.comment</span> <span class="selector-tag">div</span> * &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-属性缩写"><a href="#3-2-属性缩写" class="headerlink" title="3.2 属性缩写"></a>3.2 属性缩写</h4><p>[建议] 在可以使用缩写的情况下，尽量使用属性缩写。<br>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.post</span> &#123;</span><br><span class="line">    <span class="attribute">font</span>: <span class="number">12px</span>/<span class="number">1.5</span> arial, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.post</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: arial, sans-serif;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[建议] 使用 border / margin / padding 等缩写时，应注意隐含值对实际数值的影响，确实需要设置多个方向的值时才使用缩写。<br>解释：</p><p>border / margin / padding 等缩写会同时设置多个属性的值，容易覆盖不需要覆盖的设定。如某些方向需要继承其他声明的值，则应该分开设置。</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* centering &lt;article class="page"&gt; horizontally and highlight featured ones */</span></span><br><span class="line"><span class="selector-tag">article</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#999</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.page</span> &#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: auto;</span><br><span class="line">    <span class="attribute">margin-left</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.featured</span> &#123;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#69c</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.page</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">5px</span> auto; <span class="comment">/* introducing redundancy */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.featured</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#69c</span>; <span class="comment">/* introducing redundancy */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-属性书写顺序"><a href="#3-3-属性书写顺序" class="headerlink" title="3.3 属性书写顺序"></a>3.3 属性书写顺序</h4><p>[建议] 同一 rule set 下的属性在书写时，应按功能进行分组，并以 Formatting Model（布局方式、位置） &gt; Box Model（尺寸） &gt; Typographic（文本相关） &gt; Visual（视觉效果） 的顺序书写，以提高代码的可读性。<br>解释：</p><p>Formatting Model 相关属性包括：position / top / right / bottom / left / float / display / overflow 等<br>Box Model 相关属性包括：border / margin / padding / width / height 等<br>Typographic 相关属性包括：font / line-height / text-align / word-wrap 等<br>Visual 相关属性包括：background / color / transition / list-style 等<br>另外，如果包含 content 属性，应放在最前面。</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">    <span class="comment">/* formatting model: positioning schemes / offsets / z-indexes / display / ...  */</span></span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">overflow-x</span>: hidden;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* box model: sizes / margins / paddings / borders / ...  */</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* typographic: font / aligns / text styles / ... */</span></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* visual: colors / shadows / gradients / ... */</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#f5f5f5</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">-webkit-transition</span>: color <span class="number">1s</span>;</span><br><span class="line">       <span class="attribute">-moz-transition</span>: color <span class="number">1s</span>;</span><br><span class="line">            <span class="attribute">transition</span>: color <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-4-清除浮动"><a href="#3-4-清除浮动" class="headerlink" title="3.4 清除浮动"></a>3.4 清除浮动</h4><p>[建议] 当元素需要撑起高度以包含内部的浮动元素时，通过对伪类设置 clear 或触发 BFC 的方式进行 clearfix。尽量不使用增加空标签的方式。<br>解释：</p><p>触发 BFC 的方式很多，常见的有：</p><p>float 非 none<br>position 非 static<br>overflow 非 visible<br>如希望使用更小副作用的清除浮动方法，参见 A new micro clearfix hack 一文。</p><p>另需注意，对已经触发 BFC 的元素不需要再进行 clearfix。</p><h4 id="3-5-important"><a href="#3-5-important" class="headerlink" title="3.5 !important"></a>3.5 !important</h4><p>[建议] 尽量不使用 !important 声明。<br>[建议] 当需要强制指定样式且不允许任何场景覆盖时，通过标签内联和 !important 定义样式。<br>解释：</p><p>必须注意的是，仅在设计上 确实不允许任何其它场景覆盖样式 时，才使用内联的 !important 样式。通常在第三方环境的应用中使用这种方案。下面的 z-index 章节是其中一个特殊场景的典型样例。</p><h4 id="3-6-z-index"><a href="#3-6-z-index" class="headerlink" title="3.6 z-index"></a>3.6 z-index</h4><p>[建议] 将 z-index 进行分层，对文档流外绝对定位元素的视觉层级关系进行管理。<br>解释：</p><p>同层的多个元素，如多个由用户输入触发的 Dialog，在该层级内使用相同的 z-index 或递增 z-index。</p><p>建议每层包含100个 z-index 来容纳足够的元素，如果每层元素较多，可以调整这个数值。</p><p>[建议] 在可控环境下，期望显示在最上层的元素，z-index 指定为 999999。<br>解释：</p><p>可控环境分成两种，一种是自身产品线环境；还有一种是可能会被其他产品线引用，但是不会被外部第三方的产品引用。</p><p>不建议取值为 2147483647。以便于自身产品线被其他产品线引用时，当遇到层级覆盖冲突的情况，留出向上调整的空间。</p><p>[建议] 在第三方环境下，期望显示在最上层的元素，通过标签内联和 !important，将 z-index 指定为 2147483647。<br>解释：</p><p>第三方环境对于开发者来说完全不可控。在第三方环境下的元素，为了保证元素不被其页面其他样式定义覆盖，需要采用此做法。</p><h3 id="4-值与单位"><a href="#4-值与单位" class="headerlink" title="4 值与单位"></a>4 值与单位</h3><h4 id="4-1-文本"><a href="#4-1-文本" class="headerlink" title="4.1 文本"></a>4.1 文本</h4><p>[强制] 文本内容必须用双引号包围。<br>解释：</p><p>文本类型的内容可能在选择器、属性值等内容中。</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-tag">html</span><span class="selector-attr">[lang|="zh"]</span> <span class="selector-tag">q</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"Microsoft YaHei"</span>, sans-serif;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">"“"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span><span class="selector-attr">[lang|="zh"]</span> <span class="selector-tag">q</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"Microsoft YaHei"</span>, sans-serif;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">"”"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-tag">html</span><span class="selector-attr">[lang|=zh]</span> <span class="selector-tag">q</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">'Microsoft YaHei'</span>, sans-serif;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">'“'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span><span class="selector-attr">[lang|=zh]</span> <span class="selector-tag">q</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"Microsoft YaHei"</span>, sans-serif;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">"”"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-数值"><a href="#4-2-数值" class="headerlink" title="4.2 数值"></a>4.2 数值</h4><p>[强制] 当数值为 0 - 1 之间的小数时，省略整数部分的 0。<br>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-tag">panel</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: .<span class="number">8</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-tag">panel</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.8</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-url"><a href="#4-3-url" class="headerlink" title="4.3 url()"></a>4.3 url()</h4><p>[强制] url() 函数中的路径不加引号。<br>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(bg.png);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[建议] url() 函数中的绝对路径可省去协议名。<br>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(//baidu.com/img/bg.png) no-repeat <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4-长度"><a href="#4-4-长度" class="headerlink" title="4.4 长度"></a>4.4 长度</h4><p>[强制] 长度为 0 时须省略单位。 (也只有长度单位可省)<br>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0px</span> <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-5-颜色"><a href="#4-5-颜色" class="headerlink" title="4.5 颜色"></a>4.5 颜色</h4><p>[强制] RGB颜色值必须使用十六进制记号形式 #rrggbb。不允许使用 rgb()。<br>解释：</p><p>带有alpha的颜色信息可以使用 rgba()。使用 rgba() 时每个逗号后必须保留一个空格。</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> <span class="built_in">rgba</span>(0, 128, 0, .3);</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#008000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> <span class="built_in">rgba</span>(0,128,0,.3);</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="built_in">rgb</span>(0, 128, 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[强制] 颜色值可以缩写时，必须使用缩写形式。<br>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#aca</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#aaccaa</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[强制] 颜色值不允许使用命名色值。<br>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#90ee90</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: lightgreen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[建议] 颜色值中的英文字符采用小写。如不用小写也需要保证同一项目内保持大小写一致。<br>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#aca</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#90ee90</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ACA</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#90EE90</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ACA</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#90ee90</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-6-2D-位置"><a href="#4-6-2D-位置" class="headerlink" title="4.6 2D 位置"></a>4.6 2D 位置</h4><p>[强制] 必须同时给出水平和垂直方向的位置。<br>解释：</p><p>2D 位置初始值为 0% 0%，但在只有一个方向的值时，另一个方向的值会被解析为 center。为避免理解上的困扰，应同时给出两个方向的值。background-position属性值的定义</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: center top; <span class="comment">/* 50% 0% */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: top; <span class="comment">/* 50% 0% */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-文本编排"><a href="#5-文本编排" class="headerlink" title="5 文本编排"></a>5 文本编排</h3><h4 id="5-1-字体族"><a href="#5-1-字体族" class="headerlink" title="5.1 字体族"></a>5.1 字体族</h4><p>[强制] font-family 属性中的字体族名称应使用字体的英文 Family Name，其中如有空格，须放置在引号中。<br>解释：</p><p>所谓英文 Family Name，为字体文件的一个元数据，常见名称如下：</p><p>字体    操作系统    Family Name<br>宋体 (中易宋体)    Windows    SimSun<br>黑体 (中易黑体)    Windows    SimHei<br>微软雅黑    Windows    Microsoft YaHei<br>微软正黑    Windows    Microsoft JhengHei<br>华文黑体    Mac/iOS    STHeiti<br>冬青黑体    Mac/iOS    Hiragino Sans GB<br>文泉驿正黑    Linux    WenQuanYi Zen Hei<br>文泉驿微米黑    Linux    WenQuanYi Micro Hei<br>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"Microsoft YaHei"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[强制] font-family 按「西文字体在前、中文字体在后」、「效果佳 (质量高/更能满足需求) 的字体在前、效果一般的字体在后」的顺序编写，最后必须指定一个通用字体族( serif / sans-serif )。<br>解释：</p><p>更详细说明可参考本文。</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Display according to platform */</span></span><br><span class="line"><span class="selector-class">.article</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: Arial, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Specific for most platforms */</span></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"Helvetica Neue"</span>, Arial, <span class="string">"Hiragino Sans GB"</span>, <span class="string">"WenQuanYi Micro Hei"</span>, <span class="string">"Microsoft YaHei"</span>, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[强制] font-family 不区分大小写，但在同一个项目中，同样的 Family Name 大小写必须统一。<br>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: Arial, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: Arial, <span class="string">"Microsoft YaHei"</span>, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: arial, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: Arial, <span class="string">"Microsoft YaHei"</span>, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-字号"><a href="#5-2-字号" class="headerlink" title="5.2 字号"></a>5.2 字号</h4><p>[强制] 需要在 Windows 平台显示的中文内容，其字号应不小于 12px。<br>解释：</p><p>由于 Windows 的字体渲染机制，小于 12px 的文字显示效果极差、难以辨认。</p><h4 id="5-3-字体风格"><a href="#5-3-字体风格" class="headerlink" title="5.3 字体风格"></a>5.3 字体风格</h4><p>[建议] 需要在 Windows 平台显示的中文内容，不要使用除 normal 外的 font-style。其他平台也应慎用。<br>解释：</p><p>由于中文字体没有 italic 风格的实现，所有浏览器下都会 fallback 到 obilique 实现 (自动拟合为斜体)，小字号下 (特别是 Windows 下会在小字号下使用点阵字体的情况下) 显示效果差，造成阅读困难。</p><h4 id="5-4-字重"><a href="#5-4-字重" class="headerlink" title="5.4 字重"></a>5.4 字重</h4><p>[强制] font-weight 属性必须使用数值方式描述。<br>解释：</p><p>CSS 的字重分 100 – 900 共九档，但目前受字体本身质量和浏览器的限制，实际上支持 400 和 700 两档，分别等价于关键词 normal 和 bold。</p><p>浏览器本身使用一系列启发式规则来进行匹配，在 &lt;700 时一般匹配字体的=”” regular=”” 字重，=””&gt;=700 时匹配 Bold 字重。<br>但已有浏览器开始支持 =600 时匹配 Semibold 字重 (见此表)，故使用数值描述增加了灵活性，也更简短。</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-5-行高"><a href="#5-5-行高" class="headerlink" title="5.5 行高"></a>5.5 行高</h4><p>[建议] line-height 在定义文本段落时，应使用数值。<br>解释：</p><p>将 line-height 设置为数值，浏览器会基于当前元素设置的 font-size 进行再次计算。在不同字号的文本段落组合中，能达到较为舒适的行间间隔效果，避免在每个设置了 font-size 都需要设置 line-height。</p><p>当 line-height 用于控制垂直居中时，还是应该设置成与容器高度一致。</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-变换与动画"><a href="#6-变换与动画" class="headerlink" title="6 变换与动画"></a>6 变换与动画</h3><p>[强制] 使用 transition 时应指定 transition-property。<br>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: color <span class="number">1s</span>, border-color <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[建议] 尽可能在浏览器能高效实现的属性上添加过渡和动画。<br>解释：</p><p>见本文，在可能的情况下应选择这样四种变换：</p><p>transform: translate(npx, npx);<br>transform: scale(n);<br>transform: rotate(ndeg);<br>opacity: 0..1;<br>典型的，可以使用 translate 来代替 left 作为动画属性。</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: transform <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(20px); <span class="comment">/* move right for 20px */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transition</span>: left <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">20px</span>; <span class="comment">/* move right for 20px */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-响应式"><a href="#7-响应式" class="headerlink" title="7 响应式"></a>7 响应式</h3><p>[强制] Media Query 不得单独编排，必须与相关的规则一起定义。<br>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Good */</span></span><br><span class="line"><span class="comment">/* header styles */</span></span><br><span class="line">@<span class="keyword">media</span> (...) &#123;</span><br><span class="line">    <span class="comment">/* header styles */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* main styles */</span></span><br><span class="line">@<span class="keyword">media</span> (...) &#123;</span><br><span class="line">    <span class="comment">/* main styles */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* footer styles */</span></span><br><span class="line">@<span class="keyword">media</span> (...) &#123;</span><br><span class="line">    <span class="comment">/* footer styles */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Bad */</span></span><br><span class="line"><span class="comment">/* header styles */</span></span><br><span class="line"><span class="comment">/* main styles */</span></span><br><span class="line"><span class="comment">/* footer styles */</span></span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> (...) &#123;</span><br><span class="line">    <span class="comment">/* header styles */</span></span><br><span class="line">    <span class="comment">/* main styles */</span></span><br><span class="line">    <span class="comment">/* footer styles */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[强制] Media Query 如果有多个逗号分隔的条件时，应将每个条件放在单独一行中。<br>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span></span><br><span class="line">(-webkit-min-device-pixel-ratio: 2), /* Webkit-based browsers */</span><br><span class="line">(<span class="selector-tag">min--moz-device-pixel-ratio</span>: 2),    <span class="comment">/* Older Firefox browsers (prior to Firefox 16) */</span></span><br><span class="line">(<span class="selector-tag">min-resolution</span>: 2<span class="selector-tag">dppx</span>),             <span class="comment">/* The standard way */</span></span><br><span class="line">(<span class="selector-tag">min-resolution</span>: 192<span class="selector-tag">dpi</span>) &#123;           <span class="comment">/* dppx fallback */</span></span><br><span class="line">    <span class="comment">/* Retina-specific stuff here */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[建议] 尽可能给出在高分辨率设备 (Retina) 下效果更佳的样式。</p><h3 id="8-兼容性"><a href="#8-兼容性" class="headerlink" title="8 兼容性"></a>8 兼容性</h3><h4 id="8-1-属性前缀"><a href="#8-1-属性前缀" class="headerlink" title="8.1 属性前缀"></a>8.1 属性前缀</h4><p>[强制] 带私有前缀的属性由长到短排列，按冒号位置对齐。<br>解释：</p><p>标准属性放在最后，按冒号对齐方便阅读，也便于在编辑器内进行多行编辑。</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">-webkit-box-sizing</span>: border-box;</span><br><span class="line">       <span class="attribute">-moz-box-sizing</span>: border-box;</span><br><span class="line">            <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-2-Hack"><a href="#8-2-Hack" class="headerlink" title="8.2 Hack"></a>8.2 Hack</h4><p>[建议] 需要添加 hack 时应尽可能考虑是否可以采用其他方式解决。<br>解释：</p><p>如果能通过合理的 HTML 结构或使用其他的 CSS 定义达到理想的样式，则不应该使用 hack 手段解决问题。通常 hack 会导致维护成本的增加。</p><p>[建议] 尽量使用 选择器 hack 处理兼容性，而非 属性 hack。<br>解释：</p><p>尽量使用符合 CSS 语法的 selector hack，可以避免一些第三方库无法识别 hack 语法的问题。</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* IE 7 */</span></span><br><span class="line">*<span class="selector-pseudo">:first-child</span> + <span class="selector-tag">html</span> <span class="selector-id">#header</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* IE 6 */</span></span><br><span class="line">* <span class="selector-tag">html</span> <span class="selector-id">#header</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[建议] 尽量使用简单的 属性 hack。<br>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">_display</span>: inline; <span class="comment">/* fix double margin */</span></span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    *zoom: 1; /* triggering hasLayout */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-3-Expression"><a href="#8-3-Expression" class="headerlink" title="8.3 Expression"></a>8.3 Expression</h4><p>[强制] 禁止使用 Expression。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CSS编码规范&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="CSS" scheme="https://kisky3.github.io/tags/CSS/"/>
    
  </entry>
  
</feed>
