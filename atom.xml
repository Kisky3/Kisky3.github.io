<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xiang Yu&#39;s Blog</title>
  
  <subtitle>Hello World, Hello Programming!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://kisky3.github.io/"/>
  <updated>2019-12-30T11:36:43.045Z</updated>
  <id>https://kisky3.github.io/</id>
  
  <author>
    <name>Xiang Yu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Easy Slack bot from Google Apps Script</title>
    <link href="https://kisky3.github.io/2019/12/25/SlackBot/"/>
    <id>https://kisky3.github.io/2019/12/25/SlackBot/</id>
    <published>2019-12-25T14:50:23.000Z</published>
    <updated>2019-12-30T11:36:43.045Z</updated>
    
    <content type="html"><![CDATA[<p>如何利用GAS做一个简单的机器人</p><a id="more"></a><p>如何利用GAS(Google Apps Script)来做一个可以定时提醒的bot呢.<br>首先功能是这样，每天早上（除了周末和节假日）的8:59分和下午17:59的时候，会自动发消息圈到当天应该做值日的人，并提醒他做值日。<br><img src="./1.png" style="width: 400px"></p><hr><h3 id="创建频道"><a href="#创建频道" class="headerlink" title="创建频道"></a>创建频道</h3><p>在slack上创建一个用于发送和管理消息的频道。名字和说明任意即可。<br>如果要往已存在的频道发送消息则可以忽略这一步。<br><img src="./2.png" style="width: 400px"></p><hr><h3 id="制作Bot"><a href="#制作Bot" class="headerlink" title="制作Bot"></a>制作Bot</h3><p>点击<a href="https://api.slack.com/start/overview" target="_blank" rel="noopener">https://api.slack.com/start/overview</a>,　然后在跳转页面点击「Create a Slack App」</p><p>输入你的bot名字和workplace,然后点击「Create App」。<br><img src="./3.png" style="width: 400px"></p><hr><h3 id="设置Incoming-Webhooks"><a href="#设置Incoming-Webhooks" class="headerlink" title="设置Incoming Webhooks"></a>设置Incoming Webhooks</h3><p>在bot设定的左侧介面点击features&gt;Incoming Webhooks、将「Activate Incoming Webhooks」 设置为On。<br>然后在页面下部会出现「Add New Webhook to WorkSpace 」的选项，点击并许可。<br><img src="./4.png" style="width: 400px"><br><img src="./5.png" style="width: 400px"></p><p>在页面的下方会显示「Webhook URL」，记得要将它复制下来。<br>之后GAS里的Script代码需要用它来进行连接并取得你在GAS里创建的数据。</p><hr><h3 id="制作保存数据的GAS"><a href="#制作保存数据的GAS" class="headerlink" title="制作保存数据的GAS"></a>制作保存数据的GAS</h3><p>这里需要三列，一是用于显示的值日生名字，一个是对应值日日期，第三列是slack上该用户的对应用户名（这里建议用用户ID，因为当用户名中间有空格时，有时不能很好地圈到slack用户）<br><img src="./6.png" style="width: 400px"></p><hr><h3 id="制作GAS的script"><a href="#制作GAS的script" class="headerlink" title="制作GAS的script"></a>制作GAS的script</h3><p>从菜单点击「ツール」「スクリプトエディタ」，然后在里面输入你的script代码。<br><img src="./7.png" style="width: 400px"><br><img src="./8.png" style="width: 400px"></p><p>这次使用的代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// set timer 08:59</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setTrigger08</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> triggerDay = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  triggerDay.setHours(<span class="number">08</span>);</span><br><span class="line">  triggerDay.setMinutes(<span class="number">59</span>);</span><br><span class="line">  ScriptApp.newTrigger(<span class="string">"main"</span>).timeBased().at(triggerDay).create();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// set timer 17:59</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setTrigger17</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> triggerDay = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  triggerDay.setHours(<span class="number">17</span>);</span><br><span class="line">  triggerDay.setMinutes(<span class="number">59</span>);</span><br><span class="line">  ScriptApp.newTrigger(<span class="string">"main"</span>).timeBased().at(triggerDay).create();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// delete Trigger</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deleteTrigger</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> triggers = ScriptApp.getProjectTriggers();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; triggers.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (triggers[i].getHandlerFunction() == <span class="string">"main"</span>) &#123;</span><br><span class="line">      ScriptApp.deleteTrigger(triggers[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main method</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  deleteTrigger();</span><br><span class="line">  core_function();</span><br><span class="line">  Logger.log(<span class="string">'main'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">core_function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Get script sheet URL</span></span><br><span class="line">    <span class="keyword">var</span> spreadSheet = SpreadsheetApp.openByUrl(<span class="string">'https://docs.google.com/spreadsheets/xxxxxx'</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Get the first sheet</span></span><br><span class="line">    <span class="keyword">var</span> sheet = spreadSheet.getSheets()[<span class="number">0</span>];</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Get Rows</span></span><br><span class="line">    <span class="keyword">var</span> lastrow = sheet.getLastRow();</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Get current date</span></span><br><span class="line">    <span class="keyword">var</span> currentDay = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// To determine if a current date is a workday or not</span></span><br><span class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">isWeekDay</span>(<span class="params">currentDate</span>) </span>&#123;</span><br><span class="line">  　　<span class="keyword">var</span> weekday = currentDate.getDay();</span><br><span class="line">  　　<span class="keyword">if</span> (weekday == <span class="number">0</span> || weekday == <span class="number">6</span>) &#123;</span><br><span class="line">    　　<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  　　&#125;</span><br><span class="line">  　　<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">　　&#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// To determine if a current date is a holiday or not</span></span><br><span class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">isEventsForDay</span>(<span class="params">currentDate</span>) </span>&#123;</span><br><span class="line">  　　<span class="keyword">var</span> calendar = CalendarApp.getCalendarById(<span class="string">'ja.japanese#holiday@group.v.calendar.google.com'</span>);</span><br><span class="line">  　　<span class="keyword">if</span> (calendar.getEventsForDay(currentDate, &#123;<span class="attr">max</span>: <span class="number">1</span>&#125;).length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    　　<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  　　&#125;</span><br><span class="line">  　　<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">　　&#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Get name ,date and metion name array</span></span><br><span class="line">    <span class="keyword">var</span> name_array = sheet.getSheetValues(<span class="number">2</span>, <span class="number">1</span>, lastrow, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> date_array = sheet.getSheetValues(<span class="number">2</span>, <span class="number">2</span>, lastrow, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> mention_array = sheet.getSheetValues(<span class="number">2</span>, <span class="number">3</span>, lastrow, <span class="number">1</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Set date format for today</span></span><br><span class="line">    <span class="keyword">var</span> today = Utilities.formatDate(<span class="keyword">new</span> <span class="built_in">Date</span>(), <span class="string">"Asia/Tokyo"</span>, <span class="string">"yyyy/MM/dd"</span>);</span><br><span class="line">    <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Roop to get date_number</span></span><br><span class="line">    <span class="keyword">var</span> date_num = date_array.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; date_num - <span class="number">1</span>; i++) &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Set date format for date</span></span><br><span class="line">        date.push(Utilities.formatDate(<span class="keyword">new</span> <span class="built_in">Date</span>(date_array[i]), <span class="string">"Asia/Tokyo"</span>, <span class="string">"yyyy/MM/dd"</span>));</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Get index if today = date</span></span><br><span class="line">        <span class="keyword">var</span> num = date.indexOf(today);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Get name through index we got</span></span><br><span class="line">    <span class="keyword">var</span> member = name_array[num];</span><br><span class="line">    <span class="keyword">var</span> mention = mention_array[num];</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// if it is workday and not holiday then set message</span></span><br><span class="line">    <span class="keyword">var</span> message;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(member &amp;&amp; isWeekDay(currentDay) &amp;&amp; !isEventsForDay(currentDay)) &#123;</span><br><span class="line"> </span><br><span class="line">        message = <span class="string">'Hey〜！:sunny:\n 今日の当番は　*'</span> + member + <span class="string">'* です！ &lt;@'</span> + mention + <span class="string">'&gt;: \n 本日「加湿器ON/OFF」、「終礼」、「ゴミ捨て」をあなたに任せるよ ！！ \n ※都合が悪い時にみんなに言ってくださいね'</span>;</span><br><span class="line">       </span><br><span class="line">       <span class="comment">// Send message to slack</span></span><br><span class="line">       Logger.log(message);</span><br><span class="line">       postSlack(message)</span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">postSlack</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Webhook URL you copied when you created a app</span></span><br><span class="line">    <span class="keyword">var</span> url = <span class="string">"https://hooks.slack.com/xxxxxxxx"</span>;</span><br><span class="line">    <span class="keyword">var</span> options = &#123;</span><br><span class="line">      <span class="string">"method"</span> : <span class="string">"POST"</span>,</span><br><span class="line">      <span class="string">"headers"</span>: &#123;<span class="string">"Content-type"</span>: <span class="string">"application/json"</span>&#125;,</span><br><span class="line">      <span class="string">"payload"</span> : <span class="string">'&#123;"text":"'</span> + message + <span class="string">'"&#125;'</span></span><br><span class="line">    &#125;;</span><br><span class="line">     <span class="comment">// Run here</span></span><br><span class="line">     UrlFetchApp.fetch(url, options);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="将GAS-Script设置为公开Application"><a href="#将GAS-Script设置为公开Application" class="headerlink" title="将GAS　Script设置为公开Application"></a>将GAS　Script设置为公开Application</h3><p>从菜单的「公開」点击「ウェブアプリケーションとして導入」<br><img src="./9.png" style="width: 400px"></p><img src="./10.png" style="width: 400px"><p>点击更新按钮后Web　Application的URL就会被更新，然后同样将它copy下来。</p><hr><h3 id="设置SlackApi的Outgoing-Webhooks"><a href="#设置SlackApi的Outgoing-Webhooks" class="headerlink" title="设置SlackApi的Outgoing Webhooks"></a>设置SlackApi的Outgoing Webhooks</h3><p>连接下面的URL</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://(your workplace name).slack.com/apps/manage</span><br></pre></td></tr></table></figure><p>OutgoingWebhooks为关键词搜索，并点击出现的Popup,跳转之后点击设定。<br><img src="./11.png" style="width: 400px"></p><p>在Outgoing Webhooks的Integration Settings里设定你的频道名，并将刚刚复制的GAS的URL粘贴并保存。<br><img src="./12.png" style="width: 400px"></p><hr><h3 id="Slack里发送消息的设定"><a href="#Slack里发送消息的设定" class="headerlink" title="Slack里发送消息的设定"></a>Slack里发送消息的设定</h3><p>在GAS的编辑页面，点击菜单「編集」「現在のプロジェクトのトリガー」。</p><p>在GAS管理页面打开后点击右下的「トリガーを追加」。<br><img src="./15.png" style="width: 400px"><br><img src="./14.png" style="width: 400px"></p><p>完成！</p><hr><h3 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h3><p>1.GAS只能在一个小时内进行执行，如何尽量准确地指定时间呢。可以在scirpt里写入下面的代码，<br>然后トリガー的执行时间设定选择为08~09点，这样就可以在08:59的准确时间进行Slack的消息发送了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// set timer 08:59</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setTrigger08</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> triggerDay = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  triggerDay.setHours(<span class="number">08</span>);</span><br><span class="line">  triggerDay.setMinutes(<span class="number">59</span>);</span><br><span class="line">  ScriptApp.newTrigger(<span class="string">"main"</span>).timeBased().at(triggerDay).create();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：<br><a href="https://qiita.com/sumi-engraphia/items/465dd027e17f44da4d6a" target="_blank" rel="noopener">Google Apps Scriptの日毎のトリガーで時間をもっと細かく設定する</a></p><hr><p>2.在Slack想圈出用户时，如果用户名中间有空格则会失效。<br>这时不使用&lt;@username&gt;而是使用&lt;@userID&gt;，就可以解决这个问题了。<br>类似这样的<br><img src="./16.png" style="width: 400px"></p><p>参考：<br><a href="https://qiita.com/tomoeine/items/ee7bae955efec9db1a96" target="_blank" rel="noopener">Slack APIでユーザー宛のメンションができなくなったので対策した</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如何利用GAS做一个简单的机器人&lt;/p&gt;
    
    </summary>
    
      <category term="System Setting" scheme="https://kisky3.github.io/categories/System-Setting/"/>
    
    
      <category term="setting" scheme="https://kisky3.github.io/tags/setting/"/>
    
      <category term="slack bot" scheme="https://kisky3.github.io/tags/slack-bot/"/>
    
      <category term="slack" scheme="https://kisky3.github.io/tags/slack/"/>
    
      <category term="Google Apps Script" scheme="https://kisky3.github.io/tags/Google-Apps-Script/"/>
    
  </entry>
  
  <entry>
    <title>Create a Git Commit Template</title>
    <link href="https://kisky3.github.io/2019/12/21/GitCommitTemplate/"/>
    <id>https://kisky3.github.io/2019/12/21/GitCommitTemplate/</id>
    <published>2019-12-21T14:27:00.000Z</published>
    <updated>2019-12-22T10:19:17.613Z</updated>
    
    <content type="html"><![CDATA[<p>创建Git Commit的Template</p><a id="more"></a><p>我们可以在commit的时候进行commit内容的统一。</p><h3 id="生成commit-message-template"><a href="#生成commit-message-template" class="headerlink" title="生成commit message template"></a>生成commit message template</h3><p>commit message template 本身可以指定路径并且让Git读取，可以在任意路径进行。</p><p>今天我们在my-cheatsheet的project的根目录进行配置。<br>并且设定只针对这个project有效。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 任意的文件名都可以</span><br><span class="line">$ vi .gitmessage</span><br></pre></td></tr></table></figure><p>然后可以自行设置commit内容，包括颜文字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[branchname]</span><br><span class="line"># ==== Emojis ====</span><br><span class="line"># ✏️  :pencil2: Writing docs</span><br><span class="line"># 🐛  :bug: Fix bugs</span><br><span class="line"># 👍  :+1: Feature improvements</span><br><span class="line"># ✨  :sparkles: Additional partial feature</span><br><span class="line"># 🎉  :tada: Grand major features added to celebrate</span><br><span class="line"># ♻️  :recycle :Refactoring</span><br><span class="line"># 🚿  :shower: Removal of obsolete functions or features.</span><br><span class="line"># 💚  :green_heart: Modification and improvement of testing and CI</span><br><span class="line"># 👕  :shirt: Fixing of errors found by Lint.</span><br><span class="line"># 🚀  :rocket: Performance improvement</span><br><span class="line"># 🆙  :up: Updates, such as dependent package</span><br><span class="line"># 🔒  :lock: Limit of the range of new features</span><br><span class="line"># 👮  :cop: Security-related improvements</span><br><span class="line"># ==== Format ====</span><br><span class="line"># :emoji: Subject #issue No.</span><br><span class="line">#</span><br><span class="line"># Commit body...</span><br><span class="line"># ==== The Seven Rules ====</span><br><span class="line"># 1. Separate subject from body with a blank line</span><br><span class="line"># 2. Limit the subject line to 50 characters</span><br><span class="line"># 3. Capitalize the subject line</span><br><span class="line"># 4. Do not end the subject line with a period</span><br><span class="line"># 5. Use the imperative mood in the subject line</span><br><span class="line"># 6. Wrap the body at 72 characters</span><br><span class="line"># 7. Use the body to explain what and why vs. how</span><br></pre></td></tr></table></figure><hr><h3 id="注册你的commit-message-template"><a href="#注册你的commit-message-template" class="headerlink" title="注册你的commit message template"></a>注册你的commit message template</h3><p>在git config里注册你生成的Template。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config commit.template .gitmessage</span><br></pre></td></tr></table></figure><p>如果你想电脑里存在所有Git管理的项目都使用这个Template的话。要加上global option。<br>这个例子没有加option，说明只是针对当前的项目使用这个Template。</p><hr><h3 id="使用Template"><a href="#使用Template" class="headerlink" title="使用Template"></a>使用Template</h3><p>设置完成后在你commit的时候Template就会自动显示了，在commit的时候输入相应的emoji的编码就可以显示了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:bug: correct a bug</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[branchname]</span><br><span class="line"># ==== Emojis ====</span><br><span class="line"># ✏️  :pencil2: Writing docs</span><br><span class="line"># 🐛  :bug: Fix bugs</span><br><span class="line"># 👍  :+1: Feature improvements</span><br><span class="line">//　省略</span><br></pre></td></tr></table></figure><p>以上！！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;创建Git Commit的Template&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="Git" scheme="https://kisky3.github.io/tags/Git/"/>
    
      <category term="Template" scheme="https://kisky3.github.io/tags/Template/"/>
    
  </entry>
  
  <entry>
    <title>node.js Error:Listen EADDRINUSE</title>
    <link href="https://kisky3.github.io/2019/12/21/EADDRINUSE/"/>
    <id>https://kisky3.github.io/2019/12/21/EADDRINUSE/</id>
    <published>2019-12-21T14:07:45.000Z</published>
    <updated>2019-12-28T14:36:46.164Z</updated>
    
    <content type="html"><![CDATA[<p>node.js启动错误: Error: listen EADDRINUSE</p><a id="more"></a><p>在启动node app.js的时候出现了下面的错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">events.js:72</span><br><span class="line">        throw er; // Unhandled &apos;error&apos; event</span><br><span class="line">              ^</span><br><span class="line">Error: listen EADDRINUSE</span><br><span class="line">    at errnoException (net.js:904:11)</span><br><span class="line">    at Server._listen2 (net.js:1042:14)</span><br><span class="line">    at listen (net.js:1064:10)</span><br><span class="line">    at Server.listen (net.js:1138:5)</span><br><span class="line">    at Function.app.listen (/vagrant/girly/girly-batch/node_modules/express/lib/application.js:532:24)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/vagrant/girly/girly-batch/bin/www:7:18)</span><br><span class="line">    at Module._compile (module.js:456:26)</span><br><span class="line">    at Object.Module._extensions..js (module.js:474:10)</span><br><span class="line">    at Module.load (module.js:356:32)</span><br><span class="line">    at Function.Module._load (module.js:312:12)</span><br></pre></td></tr></table></figure><p>原因是因为端口号被占用了。关闭占用该端口号的进程然后再次启动就好。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ps aux | grep node</span><br><span class="line">vagrant  14761  0.0  2.0 704016 38520 pts/0    Sl+  01:22   0:01 node app.js</span><br><span class="line">vagrant  15069  0.0  0.0 107456   908 pts/2    S+   01:59   0:00 grep --color=auto node</span><br><span class="line"></span><br><span class="line">$ sudo kill -9 14761</span><br><span class="line">$ node app.js</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;node.js启动错误: Error: listen EADDRINUSE&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="node.js" scheme="https://kisky3.github.io/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>Connecting to GitHub with SSH</title>
    <link href="https://kisky3.github.io/2019/12/21/AboutGithubssh/"/>
    <id>https://kisky3.github.io/2019/12/21/AboutGithubssh/</id>
    <published>2019-12-21T08:40:36.000Z</published>
    <updated>2019-12-21T14:25:38.858Z</updated>
    
    <content type="html"><![CDATA[<p>利用ssh连接Github</p><a id="more"></a><p>虽然已经用ssh连接Github好几次了，但是一直以来对公钥和密钥的加密过程不清不楚，所以在这里总结以下</p><h3 id="什么是公钥和私钥"><a href="#什么是公钥和私钥" class="headerlink" title="什么是公钥和私钥"></a>什么是公钥和私钥</h3><p>公钥（Public Key）与私钥（Private Key）是通过一种算法得到的一个密钥对。<br>公钥是密钥对中公开的部分。</p><p>公钥加密法的步骤如下：</p><ol><li>首先接受方生成一对密钥，即私钥和公钥。</li><li>然后接收方将公钥法送给发送方。</li><li>发送方用收到的公钥对数据加密,再发送给接收方。</li><li>接收方收到数据后，使用自己的私钥解密。</li></ol><p>由于再非对称算法中，公钥加密的数据必须使用对应的私钥才能解密，而私钥又只有接受方自己知道，<br>这样就保证了数据传输的安全性。</p><hr><h3 id="公钥和密钥的生成"><a href="#公钥和密钥的生成" class="headerlink" title="公钥和密钥的生成"></a>公钥和密钥的生成</h3><p>连接Github的时候，需要再本地生成公钥和密钥，密钥自己保存而公钥需要发送给Github。</p><p>首先移动到保存钥的文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$cd ~/.ssh</span><br></pre></td></tr></table></figure><p>第一次生成钥匙的时候这个文件夹里应该是空的啥都没有。<br>不管有没有先生成钥,也可以自行加上option，但是一般情况下这样就可以了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>一般来说不用在意问题，连续三次按下回车键就可以看到生成了id_rsa(私钥)和id_rsa.pub(公钥)公钥对。<br>如果你已经生成过私钥(id_rsa)的话在这里会被覆盖。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/Users/(username)/.ssh/id_rsa):</span><br><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br></pre></td></tr></table></figure><img src="./1.png" style="width: 500px"><br>当你想修改钥名的时候，在第一个问题里输入你想要生成的钥名。比如在这里就指定了id_git_rsa,然后持续按下回车键就可以生成id_git_rsa和id_git_rsa.pub两个公钥对了。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/Users/(username)/.ssh/id_rsa):id_git_rsa</span><br><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br></pre></td></tr></table></figure><hr><h3 id="将公钥上传到Github"><a href="#将公钥上传到Github" class="headerlink" title="将公钥上传到Github"></a>将公钥上传到Github</h3><p>点击下面的网页进行公钥的设置：（前提是你已经拥有了自己的Github账号）<br><a href="https://github.com/settings/ssh" target="_blank" rel="noopener">https://github.com/settings/ssh</a></p><p>在画面上点击「Add SSH key」,然后在title的地方输入公钥名（任意），「key」里输入你生成公钥的内容。</p><img src="./2.png" style="width: 500px"><p>利用下面的命令行进行公钥内容的copy</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pbcopy &lt; ~/.ssh/id_rsa.pub (Mac)</span><br><span class="line">$ clip &lt; ~/.ssh/id_rsa.pub (Windows)</span><br></pre></td></tr></table></figure><ul><li>钥名为你自己生成的钥名，默认为id_rsa.pub</li></ul><hr><h3 id="确认连接"><a href="#确认连接" class="headerlink" title="确认连接"></a>确认连接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>如果返回以下的文字则说明已经连接成功了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi (account名)! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><p>但是注意如果生成钥的时候你指定了自己的钥名，有可能会连接不成功。<br>这是因为ssh连接的时候自动默认参照的是「<del>/.ssh/id_rsa」、「</del>/.ssh/id_dsa」、「<del>/.ssh/identity」的钥名文件。<br>你需要自己在</del>/.ssh/config中进行定义。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host github github.com</span><br><span class="line">  HostName github.com</span><br><span class="line">  IdentityFile ~/.ssh/id_git_rsa # 在这里写下自己设置的私匙文件名</span><br><span class="line">  User git</span><br></pre></td></tr></table></figure><p>然后再连接一次应该就能连接上了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T github</span><br></pre></td></tr></table></figure><hr><h3 id="与GitHub的互动"><a href="#与GitHub的互动" class="headerlink" title="与GitHub的互动"></a>与GitHub的互动</h3><p>实际上在与Github互动的时候,比如pull或push的时候还需要确认用户名和密码，那就说明SSH并没有很好地运作。<br>在~/.gitconfig文件里进行设定后就可以解决了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[url &quot;github:&quot;]</span><br><span class="line">    InsteadOf = https://github.com/</span><br><span class="line">    InsteadOf = git@github.com:</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;利用ssh连接Github&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="Git" scheme="https://kisky3.github.io/tags/Git/"/>
    
      <category term="SSH" scheme="https://kisky3.github.io/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>The Basic Annals of Xiang Yu</title>
    <link href="https://kisky3.github.io/2019/12/14/XiangyuBenJi/"/>
    <id>https://kisky3.github.io/2019/12/14/XiangyuBenJi/</id>
    <published>2019-12-14T14:06:37.000Z</published>
    <updated>2019-12-28T14:37:39.934Z</updated>
    
    <content type="html"><![CDATA[<p>史记・项羽本纪</p><a id="more"></a><p>前两天刷了项羽本纪（顺带把相关纪录片和秦始皇本纪也看完了）</p><p>乱世出英雄，令我惊奇的是2000多年前的他，透过文字依然能给我传达了很鲜明的个人特色和画面感。<br>有如神助末路英雄的设定真的是完爆一切网络爽文。</p><p>巨鹿之战，在所有诸侯作壁上观之时，孤立无援，还受到怀王排挤之时，项羽能够当机立断一举斩杀宋义，在节骨眼夺回兵权。<br>然后破釜沉舟再一举灭了大秦。他的对手是章邯和王离啊，两个都是顶级的战神大佬，可惜项羽是灭霸一样的存在。</p><p>5万零散的楚军敌王离和章邯的40万大军，一战成名，从那天起巨鹿之战也成为了以少胜多的名战争的代表。<br>灭秦之后，各诸侯见他都是犹如见神，一路跪着前行参拜。几乎一己之力灭掉了第一强国大秦的项羽，在彼时人们眼中毫无疑问就是神一般的存在。而那时他才24岁啊。</p><p>之后的彭城之战也是以少胜多，仅仅3万人马，日夜兼程赶回，连夜进攻，半天就将刘邦的56万汉军打得溃不成军。这一战更是奠定了他灭霸的地位。</p><img src="./1.jpg" style="width: 500px"><p>个人觉得项羽有一种贵族出生的少年气，意气风发,雷厉风行，喜欢光明磊落少一点城府和厚重感。</p><p>他不计较樊哙的鲁莽，反而赏赐酒肉，大度地微笑着欣赏他。<br>他担忧战乱频繁生灵涂炭，三番两次请战刘邦要求单独决斗。<br>他在四面楚歌之时的绝望，作出垓下之歌表达对跟随自己多年的美人和名驹的不舍。<br>他在说出天要亡我决定放弃一切决死一战之际，还把名驹赠与了乌江亭长。<br>在他最后下马步战，单人斩杀汉军三百余骑之后，还亲手斩下自己的头颅赠与了旧相识用于换赏。</p><p>这样的一代枭雄，最后连个全尸都没留下来。<br>胜者为王败者为寇，后世写的史书还有刻意抹黑项羽的成分。（比如硬说阿房宫是他烧的，还说他挖了秦始皇的陵墓）</p><p>想想甚是难过。</p><p>最后跑个题，发现古人的名字都好有意味<br>项羽，刘邦，宋义，熊心，樊哙，项庄，萧何，韩信，章邯，王翦，王离，虞姬，蒙恬，赢政，李斯等等…<br>简单又大气，喜欢!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;史记・项羽本纪&lt;/p&gt;
    
    </summary>
    
      <category term="About Me" scheme="https://kisky3.github.io/categories/About-Me/"/>
    
    
      <category term="Xiang Yu" scheme="https://kisky3.github.io/tags/Xiang-Yu/"/>
    
      <category term="Hegemon-King of Western Chu" scheme="https://kisky3.github.io/tags/Hegemon-King-of-Western-Chu/"/>
    
      <category term="Xiang Ji" scheme="https://kisky3.github.io/tags/Xiang-Ji/"/>
    
      <category term="Records of the Grand Historian" scheme="https://kisky3.github.io/tags/Records-of-the-Grand-Historian/"/>
    
  </entry>
  
  <entry>
    <title>SSR VS CSR</title>
    <link href="https://kisky3.github.io/2019/12/09/SSRAndCSR/"/>
    <id>https://kisky3.github.io/2019/12/09/SSRAndCSR/</id>
    <published>2019-12-09T01:59:42.000Z</published>
    <updated>2019-12-13T13:27:03.631Z</updated>
    
    <content type="html"><![CDATA[<p>SSR和CSR</p><a id="more"></a><p>本文分别从两者的概念，主要的不同，优劣势列举等等去分析CSR和SSR。</p><h3 id="SSR和CSR的概念"><a href="#SSR和CSR的概念" class="headerlink" title="SSR和CSR的概念"></a>SSR和CSR的概念</h3><ul><li>SSR(Server Side Rendering) ：<br>传统的渲染方式，由服务端把渲染的完整的页面吐给客户端。这样减少了一次客户端到服务端的一次http请求，加快相应速度，一般用于首屏的性能优化。<img src="./1.png" style="width: 500px"><br></li><li>CSR(Client Side Rendering)：<br>是一种目前流行的渲染方式，它依赖的是运行在客户端的JS，用户首次发送请求只能得到小部分的指引性HTML代码。第二次请求将会请求更多包含HTML字符串的JS文件。<img src="./2.png" style="width: 500px"></li></ul><hr><h3 id="两者有何不同"><a href="#两者有何不同" class="headerlink" title="两者有何不同"></a>两者有何不同</h3><p>服务器端渲染的优势在于首屏渲染速度块，简单来讲它不需要来回多次往返于客户端和服务端。但是其性能等众多因素会影响用户体验，比如说：网速，在线活跃人数，服务器的物理位置等等。而客户端渲染则和服务端渲染相反，因为多次和服务器的交互导致首屏加载速度慢。但一旦这些请求完成之后，用户和页面之间的交互时用户体验就会好很多。</p><p>用一个现实生活的例子来看：假如从超市买东西吃，以SSR的角度来看，你每次在超市买完随即吃完再走，每次饿了都需要出发去超市。而从CSR的角度来看，就是你从超市购买许多原材料再拿回家去自己煮，多了能放冰箱，这样每次肚子饿了就不需要每次都往超市跑，唯一麻烦一点在于你得花时间挑选食材。</p><p style="font-weight:bold;background:rgb(255, 0, 0,0.1);padding:5px">简而言之，SSR强在首屏渲染。而CSR强在用户和页面多交互的场景。</p><hr><h3 id="服务端渲染如何工作"><a href="#服务端渲染如何工作" class="headerlink" title="服务端渲染如何工作"></a>服务端渲染如何工作</h3><p>服务器渲染简单说来就是将一个完整的HTML发送给客户端，客户端只负责HTML的解析。<br>不过由于网速等影响有可能造成用户体验不佳的情况。<br>如果面临客户端和服务器多次交互的情况就更为明显了。因为即使是在页面只有稍加改动的地方都需要重新请求服务器发送一个完整页面给浏览器，然后浏览器再次进行重新渲染。<br>这对服务器的消耗是非常大的。</p><p>实例：<br>假如你需要访问的域名叫： example.testsite.com<br> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Example Website<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>My Website<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is an example of my new website<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://example.testsite.com/other.html."</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p> 当我们点击Link的时候，就会跳转到下面这个页面:<br> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Example Website<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>My Website<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is an example of my new website<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is some more content from the other.html<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p> 效果是当你点击Link的时候，<br> 可以看出来这两个页面的差异非常小，但是渲染的时候要将整个页面进行重新渲染，而不是只渲染不同的那一行。<br> 如果复杂的页面代码量大的情况下，这是不合适的。</p> <p style="font-weight:bold;background:rgb(255, 0, 0,0.1);padding:5px">从上面的页面特征来看，使用服务器端渲染的返回的页面是完整的HTML页面。</p><hr><h3 id="客户端是如何工作的"><a href="#客户端是如何工作的" class="headerlink" title="客户端是如何工作的"></a>客户端是如何工作的</h3><p> 客户端代表渲染内容部分转嫁到JS身上。客户端只是从服务器得到相对简单的HTML文档，然后使用JS文件对页面的显示内容进行控制。就像Vue.js 用的就是这种方式，还是用刚才那个例子，看看用客户端渲染是怎么做的。</p><p> 假设你想要访问的域名还是<a href="http://example.testsite.com" target="_blank" rel="noopener">http://example.testsite.com</a><br> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Example Website<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">app</span>&gt;</span><span class="tag">&lt;/<span class="name">app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--下面两个js文件控制HTML的显示内容 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://vuejs.org"</span><span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"location/of/app.js"</span><span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p> 可以通过上面的html页面看到，你只能识别到自定义组件名id为root的div的标签。<br> 而所有的逻辑处理你看不到，全部被写在了app.js里面。<br>如果需要看到完整的页面的模样，就必须要下载app.js到本地才能运作，否则直接访问你是什么都看不到的。</p><p>OK，假如现在你把app.js下载到本地了，那我们来看看app.js的内容: </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// this is app.js</span><br><span class="line">var data = &#123;</span><br><span class="line">        title:"My Website",</span><br><span class="line">        message:"This is an example of my new website"</span><br><span class="line">      &#125;</span><br><span class="line">  Vue.component('app', &#123;</span><br><span class="line">    template:</span><br><span class="line">    `</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"moreContent"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">'newContent'</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    `,</span><br><span class="line">    data: function() &#123;</span><br><span class="line">      return data;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      newContent: function()&#123;</span><br><span class="line">        var node = document.createElement('p');</span><br><span class="line">        var textNode = document.createTextNode('This is some more content from the other.html');</span><br><span class="line">        node.appendChild(textNode);</span><br><span class="line">        document.getElementById('moreContent').appendChild(node);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    el: '#root',</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>在这里，当你点击了Link的时候，Vue的js起了效果，通过操作DOM给p添加了需要展示的那一行内容。<br>这里不需要页面和服务器的交互，只是对所需要添加的内容进行了修改，而不是像SSR一样做了整个页面的重新渲染。</p><p>当然这里也暴露了一个问题:<br>就是控制页面的所有js文件如果没有完全加载的话，真个页面是渲染不出来的。<br>这是导致了客户端渲染弱于服务端渲染的原因。</p><p style="font-weight:bold;background:rgb(255, 0, 0,0.1);padding:5px">从这个例子来看，可以看出客户端渲染的页面特征是包含有js链接的script标签。</p><h3 id="总结SSR和CSR的优劣势"><a href="#总结SSR和CSR的优劣势" class="headerlink" title="总结SSR和CSR的优劣势"></a>总结SSR和CSR的优劣势</h3><table><thead><tr><th></th><th>优势</th><th>劣势</th></tr></thead><tbody><tr><td>SSR</td><td>1.搜索引擎可以抓取网站以获得更好的SEO <br> 2.初始页面加载速度更快 <br> 3.非常适合静态网站</td><td>1.频繁的服务器请求 <br> 2.真题缓慢的页面渲染 <br> 3.整个页面重新加载 <br> 4.不擅长于网站交互</td></tr><tr><td>CSR</td><td>1.擅于网站交互 <br> 2.初始加载后网站的渲染速度很快 <br> 3.非常适合Web应用程序 <br>4.可以运用强大的JavaScript处理和选择</td><td>1.不利于SEO <br> 2.初始加载可能需要花费更多时间</td></tr></tbody></table><hr><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><p><a href="https://www.freecodecamp.org/news/what-exactly-is-client-side-rendering-and-hows-it-different-from-server-side-rendering-bd5c786b340d/" target="_blank" rel="noopener">Client-side vs. server-side rendering: why it’s not all black and white</a></p></li><li><p><a href="https://link.zhihu.com/?target=https%3A//medium.com/%40benjburkholder/javascript-seo-server-side-rendering-vs-client-side-rendering-bc06b8ca2383" target="_blank" rel="noopener">JavaScript SEO: Server Side Rendering vs. Client Side Rendering</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SSR和CSR&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="SSR" scheme="https://kisky3.github.io/tags/SSR/"/>
    
      <category term="CSR" scheme="https://kisky3.github.io/tags/CSR/"/>
    
  </entry>
  
  <entry>
    <title>About Gulp</title>
    <link href="https://kisky3.github.io/2019/12/08/gulp/"/>
    <id>https://kisky3.github.io/2019/12/08/gulp/</id>
    <published>2019-12-08T13:17:02.000Z</published>
    <updated>2019-12-08T13:39:15.136Z</updated>
    
    <content type="html"><![CDATA[<p>关于Gulp</p><a id="more"></a><h3 id="gulp是什么？"><a href="#gulp是什么？" class="headerlink" title="gulp是什么？"></a>gulp是什么？</h3><p>gulp是一个基于流的构建工具，可以自动执行指定的任务，简洁且高效。</p><hr><h3 id="gulp能做什么"><a href="#gulp能做什么" class="headerlink" title="gulp能做什么"></a>gulp能做什么</h3><p>1.开发环境下，想要能够按模块组织代码，监听实时变化<br>2.css/js预编译，postcss等方案，浏览器前缀自动补全等<br>3.条件输出不同的网页，比如app页面和mobile页面<br>4.线上环境下，我想要合并、压缩 html/css/javascritp/图片，减少网络请求，同时降低网络负担</p><hr><h3 id="安装gulp"><a href="#安装gulp" class="headerlink" title="安装gulp"></a>安装gulp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g gulp     //全局安装</span><br><span class="line">npm install --save-dev gulp //安装到当前项目并在package.json中添加依赖</span><br></pre></td></tr></table></figure><hr><h3 id="核心API"><a href="#核心API" class="headerlink" title="核心API"></a>核心API</h3><h5 id="・gulp-task-task-name-deps-fn"><a href="#・gulp-task-task-name-deps-fn" class="headerlink" title="・gulp.task task(name[, deps], fn)"></a>・gulp.task task(name[, deps], fn)</h5><p>task()方法用于定义任务，传入名字、依赖任务数组、函数即可，gulp会先执行任务数组，结束后调用定义的函数，可以通过此手段控制任务的执行顺利。</p><p>例子：要定义一个任务build来执行css、js、imgs这三个任务，我们可以通过指定一个任务数组而不是函数来完成。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(&apos;build&apos;, [&apos;css&apos;, &apos;js&apos;, &apos;imgs&apos;]);</span><br></pre></td></tr></table></figure><hr><h5 id="・gulp-src-src-globs-options"><a href="#・gulp-src-src-globs-options" class="headerlink" title="・gulp.src src(globs[, options])"></a>・gulp.src src(globs[, options])</h5><p>src()方法输入一个glob或者glob数组，然后返回一个可以传递给插件的数据流</p><p>Gulp使用node-glob来从你指定的glob里面获取文件：</p><ul><li>app.js 精确匹配</li><li>*.js 能匹配js后缀的文件</li><li><em>*/</em>.js 能匹配多级目录下的js文件（也包含当前目录下）</li><li>!js/app.js 精确排除</li></ul><p>例子：js目录下包含了压缩和未压缩的js文件，我们想要压缩还没有被压缩的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp.src([&apos;js/**/*.js&apos;, &apos;!js/**/*.min.js&apos;])</span><br></pre></td></tr></table></figure><hr><h5 id="・gulp-watch-watch-globs-opts-cb-or-watch-globs-opts-tasks"><a href="#・gulp-watch-watch-globs-opts-cb-or-watch-globs-opts-tasks" class="headerlink" title="・gulp.watch watch(globs[, opts], cb) or watch(globs[, opts], tasks)"></a>・gulp.watch watch(globs[, opts], cb) or watch(globs[, opts], tasks)</h5><p>watch()方法可以监听文件，它接受一个glob或者glob数组以及一个任务数组来执行回调<br>// 当templates目录下的模板文件发生变化，自动执行编译任务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(&apos;watch&apos;, function (event) &#123;</span><br><span class="line">  gulp.watch(&apos;templates/*.tmpl.html&apos;, [&apos;artTemplate&apos;]);</span><br><span class="line">  console.log(&apos;Event type: &apos; + event.type); // added, changed, or deleted   </span><br><span class="line">  console.log(&apos;Event path: &apos; + event.path); // The path of the modified file</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>1.package.json文件。它就是记录了我们使用了什么插件，以及版本号的记录的一个json文件而已。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"gulp"</span>: <span class="string">"^3.9.1"</span>,</span><br><span class="line">    <span class="string">"gulp-autoprefixer"</span>: <span class="string">"^3.1.0"</span>,</span><br><span class="line">    <span class="string">"gulp-concat"</span>: <span class="string">"^2.6.0"</span>,</span><br><span class="line">    <span class="string">"gulp-imagemin"</span>: <span class="string">"^3.0.1"</span>,</span><br><span class="line">    <span class="string">"gulp-jshint"</span>: <span class="string">"^2.0.1"</span>,</span><br><span class="line">    <span class="string">"gulp-less"</span>: <span class="string">"^3.1.0"</span>, <span class="comment">//例如这是处理LESS文件的，将LESS编译成.css文件</span></span><br><span class="line">    <span class="string">"gulp-minify-css"</span>: <span class="string">"^1.2.4"</span>,</span><br><span class="line">    <span class="string">"gulp-notify"</span>: <span class="string">"^2.2.0"</span>,</span><br><span class="line">    <span class="string">"gulp-rename"</span>: <span class="string">"^1.2.2"</span>,</span><br><span class="line">    <span class="string">"gulp-uglify"</span>: <span class="string">"^1.5.4"</span>,</span><br><span class="line">    <span class="string">"gulp-watch"</span>: <span class="string">"^4.3.8"</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>2.gulpfile.js文件<br>它就是告诉了gulp我们要将什么文件编译到什么文件下的XXX目录里面。例如在我的src目录里面存在一个css文件夹，里面装了很多css或者LESS等样式文件，我现在想通过gulp将它编译到dist目录下面的css文件夹里面并且这个css文件夹里的样式文件还是压缩过了。那么gulpfile.js就是起到了这样的一个作用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下面我将自己的gulpfile.js文件的内容给你大家做做案例</span></span><br><span class="line"><span class="keyword">var</span> gulp=<span class="built_in">require</span>(<span class="string">'gulp'</span>); <span class="comment">//基础库</span></span><br><span class="line"><span class="keyword">var</span> less=<span class="built_in">require</span>(<span class="string">'gulp-less'</span>); <span class="comment">//编译less工具</span></span><br><span class="line"><span class="keyword">var</span> concat=<span class="built_in">require</span>(<span class="string">'gulp-concat'</span>); <span class="comment">//文件合并</span></span><br><span class="line"><span class="keyword">var</span> uglify=<span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);<span class="comment">//压缩JS文件</span></span><br><span class="line"><span class="comment">//首先require的意思就是从你的电脑里面加载某一个gulp的插件，例如require('gulp-less')</span></span><br><span class="line"><span class="comment">//请注意：加载这些插件需要你的电脑已经安装了这些插件，详情请百度，很简单也就是CMD两行命令的事情而已。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//配置文件路径</span></span><br><span class="line"><span class="keyword">var</span> paths=&#123;</span><br><span class="line">    src_html:<span class="string">"./src/**/*.html"</span>,  <span class="comment">//src_变量开头的是源文件的文件目录</span></span><br><span class="line">    src_less:<span class="string">"./src/css/**/*.less"</span>, <span class="comment">//less文件</span></span><br><span class="line">    src_css:<span class="string">"./src/css/**/*.css"</span>,  <span class="comment">//css文件</span></span><br><span class="line">    src_json:<span class="string">"./src/**/*.json"</span>,   <span class="comment">//json格式的文件</span></span><br><span class="line">    src_images:<span class="string">"src/images/**/*"</span>, </span><br><span class="line">    src_pic:<span class="string">"src/pic/**/*"</span>, <span class="comment">//它的意思是src文件下pic文件里面的所有格式的文件</span></span><br><span class="line">    src_js:<span class="string">"./src/js/**/*.js"</span>,</span><br><span class="line">    src_text:<span class="string">"./src/**/*.text"</span>,</span><br><span class="line"></span><br><span class="line">    dist:<span class="string">"./dist"</span>,    <span class="comment">//dist_变量开头的都是编译过后的文件目录</span></span><br><span class="line">    dist_css:<span class="string">"./dist/css"</span>,   <span class="comment">//dist文件夹下的css文件</span></span><br><span class="line">    dist_mincss:<span class="string">"./dist/mincss"</span>, <span class="comment">//dist文件夹下的mincss文件</span></span><br><span class="line">    dist_images:<span class="string">"dist/images"</span>,</span><br><span class="line">    dist_html:<span class="string">"./dist/**/*.html"</span>,</span><br><span class="line">    dist_pic:<span class="string">"dist/pic"</span>,</span><br><span class="line">    dist_js:<span class="string">"./dist/js"</span>,</span><br><span class="line">    dist_minjs:<span class="string">"./dist/minjs"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//style任务</span></span><br><span class="line">gulp.task(<span class="string">'styles'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//gulp.task就是告诉gulp要编译什么东西，并且使用什么样的处理方式，比如我这边就是编译less文件</span></span><br><span class="line">    gulp.src([paths.src_less])</span><br><span class="line">    .pipe(less())</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//然后输出编译文件到指定文件夹</span></span><br><span class="line">    .pipe(gulp.dest(paths.dist_css))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// HTML任务</span></span><br><span class="line">gulp.task(<span class="string">'html'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  <span class="comment">//编译html文件</span></span><br><span class="line">    <span class="keyword">return</span> gulp.src([paths.src_html,paths.src_json,paths.src_text])</span><br><span class="line">    .pipe(gulp.dest(paths.dist))<span class="comment">//输出到指定文件夹</span></span><br><span class="line">    <span class="comment">//提醒任务完成</span></span><br><span class="line">    .pipe(notify(&#123; <span class="attr">message</span>: <span class="string">'html,json,text is OK'</span> &#125;))</span><br><span class="line">&#125;);</span><br><span class="line">gulp.task(<span class="string">'scripts'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  <span class="comment">//编译js文件内容，诸如此类，你也可以创建其他的任务，比如images</span></span><br><span class="line">    <span class="keyword">return</span> gulp.src([paths.src_js])</span><br><span class="line">    .pipe(gulp.dest(paths.dist_js)) <span class="comment">//输出到指定文件夹</span></span><br><span class="line">    .pipe(notify(&#123; <span class="attr">message</span>: <span class="string">'Scripts is OK'</span> &#125;)) <span class="comment">//提醒任务完成</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>监听文件变化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下面的这段代码是gulpfile.js最后的一点的代码，他的作用就是去监听哪一个文件发生了变化，然后好把它编译到dist的文件夹内</span></span><br><span class="line"><span class="comment">//监听文档</span></span><br><span class="line">gulp.task(<span class="string">'watch'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//监听less,sass,css</span></span><br><span class="line">    gulp.watch([paths.src_less,paths.src_css],[<span class="string">'styles'</span>, <span class="string">'html'</span>])</span><br><span class="line">    <span class="comment">//监听js</span></span><br><span class="line">    gulp.watch([paths.src_js],[<span class="string">'scripts'</span>])</span><br><span class="line">    <span class="comment">//监听图片</span></span><br><span class="line">    gulp.watch([paths.src_images],[<span class="string">'images'</span>])</span><br><span class="line">    <span class="comment">//监听hhtml,json,text</span></span><br><span class="line">    gulp.watch([paths.src_html,paths.src_json,paths.src_text], <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">      gulp.run(<span class="string">'html'</span>)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>然后cmd中输入gulp watch就是监听的意思，然后就OK了。<br>现在你在src文件目录中修改了什么文件，就会编译到dist文件中，gulp有很多的好处，比如处理CSS预编译语言，压缩，或者将EC6编译成EC5都是很好的！</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://ics.media/entry/3290/" target="_blank" rel="noopener">絶対つまずかないGulp 4入門（2019年版）<br>インストールとSassを使うまでの手順</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于Gulp&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="Gulp" scheme="https://kisky3.github.io/tags/Gulp/"/>
    
  </entry>
  
  <entry>
    <title>About Nuxt Router and Params</title>
    <link href="https://kisky3.github.io/2019/12/08/AboutNuxtRouter/"/>
    <id>https://kisky3.github.io/2019/12/08/AboutNuxtRouter/</id>
    <published>2019-12-08T11:33:18.000Z</published>
    <updated>2019-12-08T12:33:45.708Z</updated>
    
    <content type="html"><![CDATA[<p>关于Nuxt路由设置及传参</p><a id="more"></a><p>首先在pages路径下建立about.vue，news.vue，和index.vue文件，并在index.vue里引用三个link<br><br><br><img src="./1.png" style="width: 500px"></p><p>运行打开页面可以发现路由生效，并可以通过a标签进行跳转。</p><p>下面我们利用nuxt的写法，将a标签写成下面的形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;nuxt-link :to = &quot;&#123;name: &apos;index&apos;&#125;&quot;&gt;HOME&lt;/nuxt-link&gt;</span><br></pre></td></tr></table></figure><img src="./2.png" style="width: 500px"><p>打开画面验证，效果是一样的。</p><p>下面进行画面间的传参。在给news的link上传一个参数params的对象，newsId = 3306</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;nuxt-link :to = &quot;&#123;name: &apos;news&apos;, params:&#123;newsId:3306&#125;&#125;&quot;&gt;HOME&lt;/nuxt-link&gt;</span><br></pre></td></tr></table></figure><img src="./3.png" style="width: 500px">然后在news.vue里接受参数，并显示。在这里是使用双花括号进行显示，也可以通过js里进行设置之后再显示。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;$router.params.newsId&#125;&#125;</span><br></pre></td></tr></table></figure><img src="./4.png" style="width: 500px"><p>运行，打开页面，发现传递的参数newsId已经被news页面接受到并成功显示了。<br><br><br><img src="./5.png" style="width: 500px"></p><p>以上!！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于Nuxt路由设置及传参&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="Nuxt.js" scheme="https://kisky3.github.io/tags/Nuxt-js/"/>
    
      <category term="Router" scheme="https://kisky3.github.io/tags/Router/"/>
    
  </entry>
  
  <entry>
    <title>Set Nuxt.js Options</title>
    <link href="https://kisky3.github.io/2019/12/08/howtomodifynuxtserverstartport/"/>
    <id>https://kisky3.github.io/2019/12/08/howtomodifynuxtserverstartport/</id>
    <published>2019-12-08T09:47:03.000Z</published>
    <updated>2019-12-08T11:26:58.274Z</updated>
    
    <content type="html"><![CDATA[<p>Nuxt.js常用配置</p><a id="more"></a><h3 id="如何更改Nuxt默认端口号"><a href="#如何更改Nuxt默认端口号" class="headerlink" title="如何更改Nuxt默认端口号"></a>如何更改Nuxt默认端口号</h3><p>我们知道Nuxt项目运行的默认端口是localhost:3000,<br>但是有时候我们需要多个项目同时运行，那么一个端口必然不够用，那么我们如何去修改项目的本地运行端口呢。</p><p>如果你已经启动运行了一个nuxt项目<br>在不更改本地运行端口的情况下就会出现如下错误：</p> <img src="./1.png" style="width:500px"><p>更改项目的本地运行端口很简单<br>只需要在项目的package.json文件中做出相关配置就可以了。</p><p>更改之前package.json的配置:<br> <img src="./2.png" style="width:500px"></p><p> 在package.json中增加config的相关配置，如下图所示:</p><img src="./3.png" style="width:500px"><p>运行:<br><img src="./4.png" style="width:500px"></p><p>可以看到端口号已经修改成功了！</p><hr><h3 id="配置全局css"><a href="#配置全局css" class="headerlink" title="配置全局css"></a>配置全局css</h3><p>比如在asset下创建css文件夹，并创建全局css normalize.css<br><img src="./5.png" style="width:500px"><br><br><br>然后在nuxt.config.js设置文件里添加css全局设置选项。~就是代表根目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">css:[&apos;~asset/css/normalize.css&apos;],</span><br></pre></td></tr></table></figure><img src="./6.png" style="width:500px">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Nuxt.js常用配置&lt;/p&gt;
    
    </summary>
    
      <category term="System Setting" scheme="https://kisky3.github.io/categories/System-Setting/"/>
    
    
      <category term="Nuxt.js" scheme="https://kisky3.github.io/tags/Nuxt-js/"/>
    
      <category term="package.json" scheme="https://kisky3.github.io/tags/package-json/"/>
    
      <category term="port" scheme="https://kisky3.github.io/tags/port/"/>
    
      <category term="css" scheme="https://kisky3.github.io/tags/css/"/>
    
      <category term="nuxt.config.js" scheme="https://kisky3.github.io/tags/nuxt-config-js/"/>
    
  </entry>
  
  <entry>
    <title>Connect Mysql8.0.14 Container To Sequel</title>
    <link href="https://kisky3.github.io/2019/12/08/ConnectMysql8-0-14ContainerToSequel/"/>
    <id>https://kisky3.github.io/2019/12/08/ConnectMysql8-0-14ContainerToSequel/</id>
    <published>2019-12-07T15:57:08.000Z</published>
    <updated>2019-12-07T16:40:31.294Z</updated>
    
    <content type="html"><![CDATA[<p>将Mysql 8.0.14容器连接到Sequel Pro</p><a id="more"></a><h3 id="启动一个Mysql容器"><a href="#启动一个Mysql容器" class="headerlink" title="启动一个Mysql容器"></a>启动一个Mysql容器</h3><p>首先本地建造一个测试用的mysql容器,为了避免使用重复端口号，这里设置为4306。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name test_mysql -v ~/docker/mysql/conf:/etc/mysql/conf.d -v mysql-datavolume:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -e MYSQL_USER=root -e MYSQL_DATABASE=test -p 4306:3306 mysql:8.0.14 --default-authentication-plugin=mysql_native_password</span><br></pre></td></tr></table></figure><p>出现[Server] /usr/sbin/mysqld: ready for connections的log就说明应该启动了Mysql8.0.14的容器了。</p><hr><h3 id="连接启动好的docker容器"><a href="#连接启动好的docker容器" class="headerlink" title="连接启动好的docker容器"></a>连接启动好的docker容器</h3><p>分别试试以下途径连接，看看能否成功连接上容器。</p><ul><li>docker</li><li>ローカル</li><li>Sequel Pro</li></ul><h5 id="1-使用docker进入容器"><a href="#1-使用docker进入容器" class="headerlink" title="1.使用docker进入容器"></a>1.使用docker进入容器</h5><p>1.使用exec命令行进入容器，容器名为test_mysql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it test_mysql bash</span><br></pre></td></tr></table></figure><p>显示如下则表示连接成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@cf28f18b8a08:/#</span><br></pre></td></tr></table></figure><p>测试一下我们的容器参数是否设置成功了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@cf28f18b8a08:/# printenv</span><br></pre></td></tr></table></figure><p>显示如下，设置成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">HOSTNAME=cf28f18b8a08</span><br><span class="line">MYSQL_DATABASE=test</span><br><span class="line">MYSQL_ROOT_PASSWORD=root</span><br><span class="line">PWD=/</span><br><span class="line">HOME=/root</span><br><span class="line">MYSQL_MAJOR=8.0</span><br><span class="line">GOSU_VERSION=1.7</span><br><span class="line">MYSQL_USER=root</span><br><span class="line">MYSQL_VERSION=8.0.14-1debian9</span><br><span class="line">TERM=xterm</span><br><span class="line">SHLVL=1</span><br><span class="line">PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line">_=/usr/bin/printenv</span><br></pre></td></tr></table></figure><p>2.在容器内连接Mysql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">root@cf28f18b8a08:/# mysql -u root -p</span><br><span class="line">Enter password:</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 11</span><br><span class="line">Server version: 8.0.14 MySQL Community Server - GPL</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><p>连接成功，可以在容器内进行Mysql的操作了。</p><hr><h5 id="2-本地连接"><a href="#2-本地连接" class="headerlink" title="2.本地连接"></a>2.本地连接</h5><p>使用本地的Mysql连接容器内的Mysql（首先确保本地Mysql安装完毕）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p -h 127.0.0.1 --port 4306</span><br><span class="line">Enter password:</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 9</span><br><span class="line">Server version: 8.0.14 MySQL Community Server - GPL</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; exit</span><br><span class="line">Bye</span><br></pre></td></tr></table></figure><p>本地连接成功！</p><hr><h5 id="3-从Sequel-Pro进行连接"><a href="#3-从Sequel-Pro进行连接" class="headerlink" title="3.从Sequel Pro进行连接"></a>3.从Sequel Pro进行连接</h5><p>输入信息后发现Sequel Pro出现了下面的错误导致无法连接：<br><img src="./1.png" style="width:500px"></p><p>这是因为Mysql8.0系对登陆密码的认证方法更新了。<br>为了解除错误，要将root用户的插件修改成mysql_native_password。</p><p>首先要在本地连接docker容器内的Mysql，并确认目前user的情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT user, host, plugin FROM mysql.user;</span><br><span class="line">+------------------+-----------+-----------------------+</span><br><span class="line">| user             | host      | plugin                |</span><br><span class="line">+------------------+-----------+-----------------------+</span><br><span class="line">| root             | %         | caching_sha2_password |</span><br><span class="line">| mysql.infoschema | localhost | caching_sha2_password |</span><br><span class="line">| mysql.session    | localhost | caching_sha2_password |</span><br><span class="line">| mysql.sys        | localhost | caching_sha2_password |</span><br><span class="line">| root             | localhost | caching_sha2_password |</span><br><span class="line">+------------------+-----------+-----------------------+</span><br><span class="line">5 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><p>可以看到所有的插件（plugin）都被设定为caching_sha2_password，总之为了连接Sequel Pro，我们要将root用户的插件修改成mysql_native_password。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER USER &apos;root&apos;@&apos;%&apos; IDENTIFIED WITH mysql_native_password BY &apos;root&apos;;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure><p>修改成功后再次确认状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT user, host, plugin FROM mysql.user;</span><br><span class="line">+------------------+-----------+-----------------------+</span><br><span class="line">| user             | host      | plugin                |</span><br><span class="line">+------------------+-----------+-----------------------+</span><br><span class="line">| root             | %         | mysql_native_password |</span><br><span class="line">| mysql.infoschema | localhost | caching_sha2_password |</span><br><span class="line">| mysql.session    | localhost | caching_sha2_password |</span><br><span class="line">| mysql.sys        | localhost | caching_sha2_password |</span><br><span class="line">| root             | localhost | caching_sha2_password |</span><br><span class="line">+------------------+-----------+-----------------------+</span><br><span class="line">5 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><p>可以看到plugin已经被修改成功了。<br>再试着连接Sequel Pro看看<br><img src="./1.png" style="width:500px"></p><p>以上 成功！</p><hr><h3 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h3><p>在本地安装完Mysql的时候，输入mysql -u root -p会出现：zsh: command not found: mysql的提示。<br>此时需要配置环境变量。</p><p>解决方法：</p><p>a.打开终端,输入： cd ~</p><p>b.输入：sudo vim .bash_profile</p><p>回车执行，需要输入root用户密码。sudo是使用root用户修改环境变量文件。</p><p>c.输入i进入编辑模式，然后输入：export PATH=${PATH}:/usr/local/mysql/bin</p><p>然后esc退出insert状态，并在最下方输入:wq保存退出。</p><p>d.输入：source .bash_profile</p><p>回车执行，运行环境变量。</p><p>e.vi ~/.zshrc，在这里面添加了：</p><p>export PATH=${PATH}:/usr/local/mysql/bin</p><p>保存后 source ~/.zshrc</p><p>f.执行命令：mysql -u root -p即可</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;将Mysql 8.0.14容器连接到Sequel Pro&lt;/p&gt;
    
    </summary>
    
      <category term="System Setting" scheme="https://kisky3.github.io/categories/System-Setting/"/>
    
    
      <category term="Mysql" scheme="https://kisky3.github.io/tags/Mysql/"/>
    
      <category term="Sequel Pro" scheme="https://kisky3.github.io/tags/Sequel-Pro/"/>
    
  </entry>
  
  <entry>
    <title>Install nodebrew</title>
    <link href="https://kisky3.github.io/2019/12/08/installNodebrew/"/>
    <id>https://kisky3.github.io/2019/12/08/installNodebrew/</id>
    <published>2019-12-07T15:24:44.000Z</published>
    <updated>2019-12-07T15:44:39.909Z</updated>
    
    <content type="html"><![CDATA[<p>安装nodebrew</p><a id="more"></a><h3 id="什么是nodebrew"><a href="#什么是nodebrew" class="headerlink" title="什么是nodebrew"></a>什么是nodebrew</h3><p>nodebrew是Node.js版本管理工具。<br>可以安装指定版本的Node.js，并进行版本间切换。</p><hr><h3 id="nodebrew安装"><a href="#nodebrew安装" class="headerlink" title="nodebrew安装"></a>nodebrew安装</h3><p>1.如果安装来Homebrew则可以用homebrew来安装。<br>首先安装Homebrew。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure><p>确认Homebrew安装成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew help</span><br></pre></td></tr></table></figure><p>2.安装nodebrew</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$ brew install nodebrew</span><br><span class="line">Updating Homebrew...</span><br><span class="line">==&gt; Auto-updated Homebrew!</span><br><span class="line">Updated 1 tap (homebrew/core).</span><br><span class="line">==&gt; Updated Formulae</span><br><span class="line">pulledpork</span><br><span class="line"></span><br><span class="line">==&gt; Downloading https://github.com/hokaccha/nodebrew/archive/v1.0.1.tar.gz</span><br><span class="line">==&gt; Downloading from https://codeload.github.com/hokaccha/nodebrew/tar.gz/v1.0.1</span><br><span class="line">######################################################################## 100.0%</span><br><span class="line">==&gt; Caveats</span><br><span class="line">You need to manually run setup_dirs to create directories required by nodebrew:</span><br><span class="line">  /usr/local/opt/nodebrew/bin/nodebrew setup_dirs</span><br><span class="line"></span><br><span class="line">Add path:</span><br><span class="line">  export PATH=$HOME/.nodebrew/current/bin:$PATH</span><br><span class="line"></span><br><span class="line">To use Homebrew&apos;s directories rather than ~/.nodebrew add to your profile:</span><br><span class="line">  export NODEBREW_ROOT=/usr/local/var/nodebrew</span><br><span class="line"></span><br><span class="line">Bash completion has been installed to:</span><br><span class="line">  /usr/local/etc/bash_completion.d</span><br><span class="line"></span><br><span class="line">zsh completions have been installed to:</span><br><span class="line">  /usr/local/share/zsh/site-functions</span><br><span class="line">==&gt; Summary</span><br><span class="line">  /usr/local/Cellar/nodebrew/1.0.1: 8 files, 38.6KB, built in 5 seconds</span><br><span class="line">$</span><br></pre></td></tr></table></figure><p>3.设置环境path</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ echo &apos;export PATH=$HOME/.nodebrew/current/bin:$PATH&apos; &gt;&gt; ~/.bash_profile</span><br><span class="line">$ source ~/.bash_profile</span><br></pre></td></tr></table></figure><p>4.确认nodebrew是否安装成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$ nodebrew -v</span><br><span class="line">nodebrew 1.0.1</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">    nodebrew help                         Show this message</span><br><span class="line">    nodebrew install &lt;version&gt;            Download and install &lt;version&gt; (from binary)</span><br><span class="line">    nodebrew compile &lt;version&gt;            Download and install &lt;version&gt; (from source)</span><br><span class="line">    nodebrew install-binary &lt;version&gt;     Alias of `install` (For backword compatibility)</span><br><span class="line">    nodebrew uninstall &lt;version&gt;          Uninstall &lt;version&gt;</span><br><span class="line">    nodebrew use &lt;version&gt;                Use &lt;version&gt;</span><br><span class="line">    nodebrew list                         List installed versions</span><br><span class="line">    nodebrew ls                           Alias for `list`</span><br><span class="line">    nodebrew ls-remote                    List remote versions</span><br><span class="line">    nodebrew ls-all                       List remote and installed versions</span><br><span class="line">    nodebrew alias &lt;key&gt; &lt;value&gt;          Set alias</span><br><span class="line">    nodebrew unalias &lt;key&gt;                Remove alias</span><br><span class="line">    nodebrew clean &lt;version&gt; | all        Remove source file</span><br><span class="line">    nodebrew selfupdate                   Update nodebrew</span><br><span class="line">    nodebrew migrate-package &lt;version&gt;    Install global NPM packages contained in &lt;version&gt; to current version</span><br><span class="line">    nodebrew exec &lt;version&gt; -- &lt;command&gt;  Execute &lt;command&gt; using specified &lt;version&gt;</span><br><span class="line"></span><br><span class="line">Example:</span><br><span class="line">    # install</span><br><span class="line">    nodebrew install v8.9.4</span><br><span class="line"></span><br><span class="line">    # use a specific version number</span><br><span class="line">    nodebrew use v8.9.4</span><br><span class="line">$</span><br></pre></td></tr></table></figure><hr><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>接下来可以用nodebrew来安装Node.js了。<br>1.首先确认可以安装的版本号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$ nodebrew ls-remote</span><br><span class="line">v0.0.1    v0.0.2    v0.0.3    v0.0.4    v0.0.5    v0.0.6    </span><br><span class="line"></span><br><span class="line">v0.1.0    v0.1.1    v0.1.2    v0.1.3    v0.1.4    v0.1.5    v0.1.6    v0.1.7</span><br><span class="line">v0.1.8    v0.1.9    v0.1.10   v0.1.11   v0.1.12   v0.1.13   v0.1.14   v0.1.15</span><br><span class="line">v0.1.16   v0.1.17   v0.1.18   v0.1.19   v0.1.20   v0.1.21   v0.1.22   v0.1.23</span><br><span class="line">v0.1.24   v0.1.25   v0.1.26   v0.1.27   v0.1.28   v0.1.29   v0.1.30   v0.1.31</span><br><span class="line">v0.1.32   v0.1.33   v0.1.90   v0.1.91   v0.1.92   v0.1.93   v0.1.94   v0.1.95</span><br><span class="line">v0.1.96   v0.1.97   v0.1.98   v0.1.99   v0.1.100  v0.1.101  v0.1.102  v0.1.103</span><br><span class="line">v0.1.104  </span><br><span class="line"></span><br><span class="line">︙</span><br><span class="line">︙</span><br><span class="line"></span><br><span class="line">v11.0.0   v11.1.0   v11.2.0   v11.3.0   v11.4.0   v11.5.0   v11.6.0   v11.7.0</span><br><span class="line">v11.8.0   v11.9.0   v11.10.0  v11.10.1  v11.11.0  v11.12.0  </span><br><span class="line"></span><br><span class="line">io@v1.0.0 io@v1.0.1 io@v1.0.2 io@v1.0.3 io@v1.0.4 io@v1.1.0 io@v1.2.0 io@v1.3.0</span><br><span class="line">io@v1.4.1 io@v1.4.2 io@v1.4.3 io@v1.5.0 io@v1.5.1 io@v1.6.0 io@v1.6.1 io@v1.6.2</span><br><span class="line">io@v1.6.3 io@v1.6.4 io@v1.7.1 io@v1.8.1 io@v1.8.2 io@v1.8.3 io@v1.8.4 </span><br><span class="line"></span><br><span class="line">io@v2.0.0 io@v2.0.1 io@v2.0.2 io@v2.1.0 io@v2.2.0 io@v2.2.1 io@v2.3.0 io@v2.3.1</span><br><span class="line">io@v2.3.2 io@v2.3.3 io@v2.3.4 io@v2.4.0 io@v2.5.0 </span><br><span class="line"></span><br><span class="line">io@v3.0.0 io@v3.1.0 io@v3.2.0 io@v3.3.0 io@v3.3.1 </span><br><span class="line">$</span><br></pre></td></tr></table></figure><p>2.指定版本号的安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ nodebrew install-binary &#123;version&#125; //指定版本号</span><br><span class="line">$ nodebrew install-binary latest    //安装最新版本</span><br></pre></td></tr></table></figure><p>如果出现错误的话就新建以下路径<br>错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ nodebrew install-binary latest</span><br><span class="line">Fetching: https://nodejs.org/dist/v11.12.0/node-v11.12.0-darwin-x64.tar.gz</span><br><span class="line">Warning: Failed to create the file </span><br><span class="line">Warning: /Users/fukatsu/.nodebrew/src/v11.12.0/node-v11.12.0-darwin-x64.tar.gz:</span><br><span class="line">Warning:  No such file or directory</span><br><span class="line">                                                                           0.0%</span><br><span class="line">curl: (23) Failed writing body (0 != 1057)</span><br><span class="line">download failed: https://nodejs.org/dist/v11.12.0/node-v11.12.0-darwin-x64.tar.gz</span><br></pre></td></tr></table></figure><p>解决方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p ~/.nodebrew/src</span><br><span class="line">$ nodebrew install-binary latest</span><br><span class="line">Fetching: https://nodejs.org/dist/v11.12.0/node-v11.12.0-darwin-x64.tar.gz</span><br><span class="line">######################################################################## 100.0%</span><br><span class="line">Installed successfully</span><br></pre></td></tr></table></figure><p>3.确认安装的Node.js版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ nodebrew ls</span><br><span class="line">v11.12.0</span><br><span class="line"></span><br><span class="line">current: none</span><br></pre></td></tr></table></figure><p>4.使用安装好的Node.js版本,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ nodebrew use v11.12.0</span><br><span class="line">use v11.12.0</span><br></pre></td></tr></table></figure><p>5.再次确认</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ nodebrew ls</span><br><span class="line">v11.12.0</span><br><span class="line"></span><br><span class="line">current: v11.12.0</span><br></pre></td></tr></table></figure><p>或者用Node.js版本确认命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ node -v</span><br><span class="line">v11.12.0</span><br></pre></td></tr></table></figure><p>确认完毕！ 安装成功！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;安装nodebrew&lt;/p&gt;
    
    </summary>
    
      <category term="System Setting" scheme="https://kisky3.github.io/categories/System-Setting/"/>
    
    
      <category term="node.js" scheme="https://kisky3.github.io/tags/node-js/"/>
    
      <category term="nodebrew" scheme="https://kisky3.github.io/tags/nodebrew/"/>
    
  </entry>
  
  <entry>
    <title>Create Vue.js + SSR demo with Nuxt</title>
    <link href="https://kisky3.github.io/2019/12/03/%E5%88%9B%E5%BB%BANuxtDemo/"/>
    <id>https://kisky3.github.io/2019/12/03/创建NuxtDemo/</id>
    <published>2019-12-03T13:36:57.000Z</published>
    <updated>2019-12-07T15:13:53.881Z</updated>
    
    <content type="html"><![CDATA[<p>利用Nuxt创建一个Vue.js + SSR的Demo</p><a id="more"></a><h3 id="什么是Nuxt"><a href="#什么是Nuxt" class="headerlink" title="什么是Nuxt"></a>什么是Nuxt</h3><p>Nuxt就是一个通用的Vue.js的框架。再直白点说，就是Vue.js原来是开发SPA（单页应用）的，但是随着技术的普及，很多人想用Vue开发多页应用，并在服务端完成渲染。这时候就出现了Nuxt.js这个框架，她简化了SSR的开发难度。还可以直接用命令把我们制作的vue项目生成为静态html。</p><hr><h3 id="什么是SSR和SPA"><a href="#什么是SSR和SPA" class="headerlink" title="什么是SSR和SPA"></a>什么是SSR和SPA</h3><p>Nuxt.js最常用于的是SSR – Server Side Rendering(服务端渲染)，也就是在服务器端上把我们的Vue文件渲染成html，然后再返回给浏览器。</p><p>Vue写出来的大都是SPA – Single Page Application(单页应用)。<br>把所有东西加载完之后再在浏览器打开。但是对SEO搜索引擎不友好。</p><p>SSR优点：</p><ul><li>更好的 SEO，由于搜索引擎爬虫抓取工具可以直接查看完全渲染的页面。<br>如果你的应用程序初始展示Loading菊花图，然后通过Ajax获取内容，抓取工具并不会等待异步完成后再行抓取页面内容。也就是说，如果SEO对你的站点至关重要，而你的页面又是异步获取内容，则你可能需要服务器端渲染(SSR)解决此问题。</li></ul><ul><li>更快的内容到达时间（首屏加载更快），因为服务端只需要返回渲染好的HTML，这部分代码量很小的，所以用户体验更好。</li></ul><hr><h3 id="安装Nuxt并创建Hello-World"><a href="#安装Nuxt并创建Hello-World" class="headerlink" title="安装Nuxt并创建Hello World"></a>安装Nuxt并创建Hello World</h3><p>1.安装vue-cli</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">install vue-cli -g</span><br></pre></td></tr></table></figure><p>2.创建文件夹NuxtDemo</p><p>3.在文件夹下生成项目，并输入项目名称（尽量用小写），描述，作者。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init nuxt/starter</span><br></pre></td></tr></table></figure><p>4.使用npm/yarn安装package.json里的dependencies里的包。<br>安装失败对时候可以删除node_modules之后再进行安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install / yarn install</span><br></pre></td></tr></table></figure><p>5.启动Nuxt，修改Nuxt里的h1为Hello World</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev / yarn run dev</span><br></pre></td></tr></table></figure><br><img src="./2.png" style="width:500px"><br><img src="./1.png" style="width:500px"><hr><p>接下来我们要了解一下目录结构及设定，并生成自己的页面。</p><h3 id="生成的目录结构"><a href="#生成的目录结构" class="headerlink" title="生成的目录结构"></a>生成的目录结构</h3><img src="./3.png" style="width:300px"><h5 id="assets"><a href="#assets" class="headerlink" title="assets:"></a>assets:</h5><p>资源文件，放置不需要webpack打包处理的资源文件，比如scss,图片，字体文件等等。</p><h5 id="components"><a href="#components" class="headerlink" title="components:"></a>components:</h5><p>组件。可以复用的组件。存放项目中的各种组件。<br>※只有在这个目录下的文件才能被称为组件。</p><h5 id="layouts："><a href="#layouts：" class="headerlink" title="layouts："></a>layouts：</h5><p>创建自定义的页面布局。页面都需要有一个布局，默认为 default.vue。它规定了一个页面如何布局页面。 可以在这个目录下创建全局页面的统一布局，或是错误页布局。如果需要在布局中渲染 pages 目录中的路由页面，需要在布局文件中加上 <nuxt> 标签。如果需要在普通页面中使用下级路由，则需要在页面中添加 <nuxt-child>。 该目录名为Nuxt.js保留的，不可更改。</nuxt-child></nuxt></p><h5 id="middleware："><a href="#middleware：" class="headerlink" title="middleware："></a>middleware：</h5><p>中间件。放置自定义的中间件，会在加载组件之前调用。可以在页面中调用： middleware: ‘middlewareName’。</p><h5 id="pages："><a href="#pages：" class="headerlink" title="pages："></a>pages：</h5><p>页面。一个 vue 文件即为一个页面。index.vue 为根页面。用于nuxt自动组织应用的路由及视图。Nuxt.js 框架读取该目录下所有的 .vue 文件并<span class="highlight-text red">自动</span>生成对应的路由配置。</p><ol><li>若需要二级页面，则添加文件夹即可。</li><li>如果页面的名称类似于 <em>id.vue （以 _ 开头），则为动态路由页面，</em> 后为匹配的变量（params）。</li><li>若变量是必须的，则在文件夹下建立空文件 index.vue。更多的配置请移步至 <a href="https://zh.nuxtjs.org/guide/routing/" target="_blank" rel="noopener">官网</a>。</li></ol><h5 id="plugins"><a href="#plugins" class="headerlink" title="plugins:"></a>plugins:</h5><p>插件。用于组织那些需要在 根vue.js应用 实例化之前需要运行的 Javascript 插件。需要注意的是，在任何 Vue 组件的生命周期内， 只有 beforeCreate 和 created 这两个钩子方法会在 客户端和服务端均被调用。其他钩子方法仅在客户端被调用。 可以在这个目录中放置自定义插件，在根 Vue 对象实例化之前运行。例如，可以将项目中的埋点逻辑封装成一个插件，放置在这个目录中，并在 nuxt.config.js 中加载。</p><h5 id="static"><a href="#static" class="headerlink" title="static:"></a>static:</h5><p>静态文件。静态文件目录 static 用于存放应用的静态文件，此类文件不会被 Nuxt.js 调用 Webpack 进行构建编译处理。 放置不需要经过 webpack 打包的静态资源。如一些 js, css 库,图片,ico地址导航图标。服务器启动的时候，该目录下的文件会映射至应用的根路径 / 下。</p><h5 id="store"><a href="#store" class="headerlink" title="store:"></a>store:</h5><p>用于组织vuex状态管理。</p><h5 id="nuxt-config-js"><a href="#nuxt-config-js" class="headerlink" title="nuxt.config.js:"></a>nuxt.config.js:</h5><p>nuxt.config.js 文件用于组织Nuxt.js 应用的个性化配置，以便覆盖默认配置。</p><hr><h3 id="Nuxt-js-的渲染流程"><a href="#Nuxt-js-的渲染流程" class="headerlink" title="Nuxt.js 的渲染流程"></a>Nuxt.js 的渲染流程</h3><p>Nuxt.js 通过一系列构建于 Vue.js 之上的方法进行服务端渲染，具体流程如下:</p><img src="./4.png" style="width:400px"><h6>1.调用 nuxtServerInit 方法</h6><p>当请求打入时，最先调用的即是 nuxtServerInit 方法，可以通过这个方法预先将服务器的数据保存，如已登录的用户信息等。另外，这个方法中也可以执行异步操作，并等待数据解析后返回。</p><h6>2.Middleware 层</h6><p>经过第一步后，请求会进入 Middleware 层，在该层中有三步操作：</p><p>读取 nuxt.config.js 中全局 middleware 字段的配置，并调用相应的中间件方法 匹配并加载与请求相对应的 layout 调用 layout 和 page 的中间件方法</p><h6>3.调用 validate 方法</h6><p>在这一步可以对请求参数进行校验，或是对第一步中服务器下发的数据进行校验，如果校验失败，将抛出 404 页面。</p><h6>4.调用 fetch 及 asyncData 方法</h6><p>这两个方法都会在组件加载之前被调用，它们的职责各有不同， asyncData 用来异步的进行组件数据的初始化工作，而 fetch 方法偏重于异步获取数据后修改 Vuex 中的状态。</p><hr><h3 id="添加Page"><a href="#添加Page" class="headerlink" title="添加Page"></a>添加Page</h3><p>Nuxt.js是使用了Vue-Router进行routing管理。当Vue.js制作SPA的时候也是使用了Vue-Router的。但是需要先写好component，然后在Vue-Router将URL和componeng进行配对设置。</p><p>Nuxt.js的话pages目录下已经放置了页面用的component。<br>page目录下如果放置了类似*.vue的文件的话，它就会自动进行routing的定义设定。</p><p>比如:<br>在page下新建一个index.vue文件和sample.vue文件。</p><p>/pages/index.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"index_container"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">h3</span>&gt;</span>This is a test homepage<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span>&gt;</span>test home page content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.index_container</span> &#123;</span></span><br><span class="line">      padding: 45px;</span><br><span class="line">      position: absolute;</span><br><span class="line">      left: 5%;</span><br><span class="line">      right: 5%;</span><br><span class="line">      width: 90%;</span><br><span class="line">      height: 100%;</span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-id">#f9f7e8</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span>&gt;</span><br></pre></td></tr></table></figure><p>/pages/sample.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sample_container"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is sample page<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span>&gt;</span>sample sample sample sample sample sample<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.sample_container</span> &#123;</span></span><br><span class="line">      padding: 45px;</span><br><span class="line">      position: absolute;</span><br><span class="line">      left: 5%;</span><br><span class="line">      right: 5%;</span><br><span class="line">      width: 90%;</span><br><span class="line">      height: 100%;</span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-id">#f9f7e8</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打开 <a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a> 和 <a href="http://localhost:3000/sample" target="_blank" rel="noopener">http://localhost:3000/sample</a> 就可以看到以下画面了。</p><img src="./5.png" style="width:400px"><br><img src="./6.png" style="width:400px"><hr><h3 id="添加Layout"><a href="#添加Layout" class="headerlink" title="添加Layout"></a>添加Layout</h3><p>在component下添加layout组件<br>.Footer.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">footer</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  footer &#123;</span><br><span class="line"><span class="css">      <span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</span></span><br><span class="line">      display: flex;</span><br><span class="line">      justify-content: center;</span><br><span class="line">      align-items: center;</span><br><span class="line"><span class="css">      <span class="selector-tag">width</span><span class="selector-pseudo">:100</span>%;</span></span><br><span class="line">      height: 100px;</span><br><span class="line">      background: lightblue;</span><br><span class="line"><span class="css">      <span class="selector-tag">bottom</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>.Header.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span>header<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  header &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100px;</span><br><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#ff8b8b</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">display</span><span class="selector-pseudo">:flex</span>;</span></span><br><span class="line">    justify-content: center;</span><br><span class="line">    align-items: center;</span><br><span class="line">    top: 0;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>.Sidebar.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aside</span> <span class="attr">class</span>=<span class="string">"c-widget"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"c-widget__title"</span>&gt;</span>Sidebar Title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"c-widget__text"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a sidebar content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a sidebar content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a sidebar content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a sidebar content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a sidebar content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a sidebar content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a sidebar content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a sidebar content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a sidebar content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a sidebar content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  aside &#123;</span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-id">#61bfad</span>;</span></span><br><span class="line">      width: 100%;</span><br><span class="line">      height: 100%;</span><br><span class="line">      display: flex;</span><br><span class="line">      justify-content: center;</span><br><span class="line">      align-items: center;</span><br><span class="line">      padding: 20px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在layout下创建twocolumns.vue作为自定义layout,并import Footer 和 Sidebar两个组件。最后export name为twocolumns</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"l-container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"l-main"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">nuxt</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"l-sidebar"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">my-sidebar</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-footer</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> MyFooter <span class="keyword">from</span> <span class="string">"../components/Footer.vue"</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> MySidebar <span class="keyword">from</span> <span class="string">"../components/Sidebar.vue"</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">"twocolumns"</span>,</span></span><br><span class="line">    components: &#123;</span><br><span class="line">        MyFooter,</span><br><span class="line">        MySidebar</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.l-container</span> &#123;</span></span><br><span class="line">    overflow: hidden;</span><br><span class="line">    max-width: 1080px;</span><br><span class="line">    margin-left: auto;</span><br><span class="line">    margin-right: auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.l-main</span> &#123;</span></span><br><span class="line">    width: calc(100% - 340px);</span><br><span class="line">    float: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.l-sidebar</span> &#123;</span></span><br><span class="line">    width: 320px;</span><br><span class="line">    float: right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>自定义的default.vue（所有页面默认引用的layout）里添加Header 和 Footer</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-header</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nuxt</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-footer</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">html &#123;</span><br><span class="line">  font-family: "Source Sans Pro", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;</span><br><span class="line">  font-size: 16px;</span><br><span class="line">  word-spacing: 1px;</span><br><span class="line">  -ms-text-size-adjust: 100%;</span><br><span class="line">  -webkit-text-size-adjust: 100%;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> MyHeader <span class="keyword">from</span> <span class="string">'../components//Header.vue'</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> MyFooter <span class="keyword">from</span> <span class="string">'../components/Footer'</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    components: &#123;</span><br><span class="line">      MyHeader,</span><br><span class="line">      MyFooter</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在希望使用自定义的sample.vue里添加下面的代码来指定layout</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  layout: <span class="string">'twocolumns'</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到在homepage是使用默认样式带着Header和Footer，但是sample页面使用来自定义layout，没有Header但是有sidebar。</p><p>top:<br><img src="./7.png" style="width:400px"></p><br>sample:<img src="./8.png" style="width:400px"><p>完成！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;利用Nuxt创建一个Vue.js + SSR的Demo&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="Nuxt.js" scheme="https://kisky3.github.io/tags/Nuxt-js/"/>
    
      <category term="SSR" scheme="https://kisky3.github.io/tags/SSR/"/>
    
      <category term="Vue" scheme="https://kisky3.github.io/tags/Vue/"/>
    
      <category term="SPA" scheme="https://kisky3.github.io/tags/SPA/"/>
    
  </entry>
  
  <entry>
    <title>Npm And Yarn</title>
    <link href="https://kisky3.github.io/2019/11/24/aboutnpm/"/>
    <id>https://kisky3.github.io/2019/11/24/aboutnpm/</id>
    <published>2019-11-24T08:01:22.000Z</published>
    <updated>2019-12-02T15:41:44.709Z</updated>
    
    <content type="html"><![CDATA[<p>Npm和Yarn</p><a id="more"></a><h3 id="npm概念"><a href="#npm概念" class="headerlink" title="npm概念"></a>npm概念</h3><p>Npm就是Node Package Manager，也就是Node包管理工具。</p><hr><h3 id="npm用途"><a href="#npm用途" class="headerlink" title="npm用途"></a>npm用途</h3><p>如果不使用包管理器，有什么麻烦的呢？</p><p>这是源于代码包分享的理念，包和依赖越来越多，每个包都有自己的版本和发展，而包与包之间也有依赖。版本管理就成了一件令人头痛的事。</p><p>比如jQuery插件A(版本1)，依赖于jQuery(版本1)，当你把jQuery版本更新为2的时候，A很可能就挂掉了。各个插件间也有依赖，插件A挂掉了，可能B也挂掉了，<br>连接挂掉是噩梦一般，你要一个个去查文档，看每个包要求依赖的版本，然后自己协调。<br>这时候npm就应运而生了，不仅可以帮你把各种包从网上download下来，最主要的是还可以帮你管理不同包之间的关系，<br>比如你当前的版本号是多少，你依赖着谁，你依赖的版本号是多少都一目了然。</p><hr><h3 id="npm实现具体步骤"><a href="#npm实现具体步骤" class="headerlink" title="npm实现具体步骤"></a>npm实现具体步骤</h3><p>NPM 的思路大概是这样的：</p><ol><li><p>买个服务器作为代码仓库（registry），在里面放所有需要被共享的代码</p></li><li><p>发邮件通知 jQuery、Bootstrap、Underscore 作者使用 npm publish 把代码提交到 registry 上，分别取名 jquery、bootstrap 和 underscore（注意大小写）</p></li><li><p>社区里的其他人如果想使用这些代码，就把 jquery、bootstrap 和 underscore 写到 package.json 里，然后运行 npm install ，npm 就会帮他们下载代码</p></li><li><p>下载完的代码出现在 node_modules 目录里，可以随意使用了。</p></li></ol><p>这些可以被使用的代码被叫做「包」（package），这就是 NPM 名字的由来：Node Package(包) Manager(管理器)。</p><hr><h3 id="npm的发展"><a href="#npm的发展" class="headerlink" title="npm的发展"></a>npm的发展</h3><p>那么 npm 是怎么火的呢？</p><p>npm 的发展是跟 Node.js 的发展相辅相成的。</p><p>Node.js 是由一个在德国工作的美国程序员 Ryan Dahl 写的。他写了 Node.js，但是 Node.js 缺少一个包管理器，于是他和 npm 的作者一拍即合、抱团取暖，最终 Node.js 内置了 npm。</p><p>后来的事情大家都知道，Node.js 火了。<br>随着 Node.js 的火爆，大家开始用 npm 来共享 JS 代码了，于是 jQuery 作者也将 jQuery 发布到 npm 了。</p><p>所以现在，你可以使用 npm install jquery 来下载 jQuery 代码。</p><p>现在用 npm 来分享代码已经成了前端的标配。</p><hr><h3 id="npm使用方法"><a href="#npm使用方法" class="headerlink" title="npm使用方法"></a>npm使用方法</h3><p>进入新建的工作目录，然后进行npm的初始化。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -t</span><br></pre></td></tr></table></figure><img src="./1.png" style="width:500px "><p>在项目目录下生成了一个<strong>package.json</strong>文件。<br>然后安装jQuery包。然后npm就会帮你看有没有jQuery这个包。如果存在的话就帮你安装到根目录下<strong>node_modules</strong>这个文件夹下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i jQuery</span><br></pre></td></tr></table></figure><img src="./2.png" style="width:500px "><p>并且你安装的包的版本信息还会被自动记录到<strong>package.json</strong>的<strong>dependencies</strong>里面。是一对一的。即使之后你把node_modules文件夹全部删除了，<br>在你重新初始化的时候，它会读取dependencies里的信息，然后再重新生成对应的node_modules文件夹。<br><img src="./3.png" style="width:500px "></p><hr><h3 id="npm常用配置"><a href="#npm常用配置" class="headerlink" title="npm常用配置"></a>npm常用配置</h3><p><strong>package.json</strong>的<strong>script</strong><br>在script里会执行你指定的命令。<br>比如写一个yo，输出yo的指令，然后<strong>npm run yo</strong>,就会看到命令行输出了yo<br><img src="./4.png" style="width:500px "></p><p>区别生产环境和开发环境用下面的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i webpack --save-dev</span><br></pre></td></tr></table></figure><p>安装成功之后可以看到package.json里多了一个devDependencies。也就是用于生产环境下的依赖。<br><img src="./5.png" style="width:500px "></p><hr><h3 id="yarn和npm的不同"><a href="#yarn和npm的不同" class="headerlink" title="yarn和npm的不同"></a>yarn和npm的不同</h3><blockquote><p>Yarn是由Facebook、Google、Exponent 和 Tilde 联合推出了一个新的 JS 包管理工具 ，正如官方文档中写的，Yarn 是为了弥补 npm 的一些缺陷而出现的。</p></blockquote><p>npm有几个不好的特点</p><ul><li>npm install的时候巨慢。特别是新的项目拉下来要等半天，删除node_modules，重新install的时候依旧如此。</li><li>同一个项目，安装的时候无法保持一致性。由于package.json文件中版本号的特点，下面三个版本号在安装的时候代表不同的含义。</li></ul><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;5.0.3&quot;,</span><br><span class="line">&quot;~5.0.3&quot;,</span><br><span class="line">&quot;^5.0.3&quot;</span><br></pre></td></tr></table></figure><p>“5.0.3”表示安装指定的5.0.3版本，“～5.0.3”表示安装5.0.X中最新的版本，“^5.0.3”表示安装5.X.X中最新的版本。这就麻烦了，常常会出现同一个项目，有的同事是OK的，有的同事会由于安装的版本不一致出现bug。</p><ul><li>安装的时候，包会在同一时间下载和安装，中途某个时候，一个包抛出了一个错误，但是npm会继续下载和安装包。因为npm会把所有的日志输出到终端，有关错误包的错误信息就会在一大堆npm打印的警告中丢失掉，并且你甚至永远不会注意到实际发生的错误。</li></ul><h3 id="yarn的优点"><a href="#yarn的优点" class="headerlink" title="yarn的优点"></a>yarn的优点</h3><ul><li><p>速度快：<br> 速度快主要来自以下两个方面：<br> 并行安装：无论 npm 还是 Yarn 在执行包的安装时，都会执行一系列任务。npm 是按照队列执行每个 package，也就是说必须要等到当前 package 安装完成之后，才能继续后面的安装。而 Yarn 是同步执行所有任务，提高了性能。</p></li><li><p>离线模式：<br> 如果之前已经安装过一个软件包，用Yarn再次安装时之间从缓存中获取，就不用像npm那样再从网络下载了。</p></li><li><p>安装版本统一：<br> 为了防止拉取到不同的版本，Yarn 有一个锁定文件 (lock file) 记录了被确切安装上的模块的版本号。每次只要新增了一个模块，Yarn 就会创建（或更新）yarn.lock 这个文件。这么做就保证了，每一次拉取同一个项目依赖时，使用的都是一样的模块版本。npm 其实也有办法实现处处使用相同版本的 packages，但需要开发者执行 npm shrinkwrap 命令。这个命令将会生成一个锁定文件，在执行 npm install 的时候，该锁定文件会先被读取，和 Yarn 读取 yarn.lock 文件一个道理。npm 和 Yarn 两者的不同之处在于，Yarn 默认会生成这样的锁定文件，而 npm 要通过 shrinkwrap 命令生成 npm-shrinkwrap.json 文件，只有当这个文件存在的时候，packages 版本信息才会被记录和更新。</p></li><li><p>更简洁的输出：<br> npm 的输出信息比较冗长。在执行 npm install 的时候，命令行里会不断地打印出所有被安装上的依赖。相比之下，Yarn 简洁太多：默认情况下，结合了 emoji直观且直接地打印出必要的信息，也提供了一些命令供开发者查询额外的安装信息。</p></li><li><p>多注册来源处理：<br> 所有的依赖包，不管他被不同的库间接关联引用多少次，安装这个包时，只会从一个注册来源去装，要么是 npm 要么是 bower,防止出现混乱不一致。</p></li><li><p>更好的语义化：<br> yarn改变了一些npm命令的名称，比如 yarn add/remove，感觉上比 npm 原本的 install/uninstall 要更清晰。</p></li></ul><hr><h3 id="将npm换到yarn"><a href="#将npm换到yarn" class="headerlink" title="将npm换到yarn"></a>将npm换到yarn</h3><p>从npm安装yarn</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># npm install -g yarn</span><br><span class="line">/usr/local/bin/yarn -&gt; /usr/local/lib/node_modules/yarn/bin/yarn.js</span><br><span class="line">/usr/local/bin/yarnpkg -&gt; /usr/local/lib/node_modules/yarn/bin/yarn.js</span><br><span class="line">+ yarn@1.7.0</span><br></pre></td></tr></table></figure><p>在app根目录下确认package.json</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># ls -1 ./ | grep package.json</span><br><span class="line">package.json</span><br></pre></td></tr></table></figure><p>执行yarn，并确认yarn.lock是否生成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># ls -1 ./ | grep yarn.lock</span><br><span class="line">yarn.lock</span><br></pre></td></tr></table></figure><p>使用yarn命令行安装，这里和npm install一样，在node_modules文件夹下安装各种包。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># yarn install</span><br><span class="line">yarn install v1.7.0</span><br><span class="line">[1/4] Resolving packages...</span><br><span class="line">[2/4] Fetching packages...</span><br><span class="line">[3/4] Linking dependencies...</span><br><span class="line">[4/4] Building fresh packages...</span><br><span class="line">Done in 71.00s.</span><br></pre></td></tr></table></figure><p>和npm run dev一样, 可以运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># yarn run dev</span><br><span class="line">yarn run v1.7.0</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Npm和Yarn&lt;/p&gt;
    
    </summary>
    
      <category term="System Setting" scheme="https://kisky3.github.io/categories/System-Setting/"/>
    
    
      <category term="Npm" scheme="https://kisky3.github.io/tags/Npm/"/>
    
      <category term="Yarn" scheme="https://kisky3.github.io/tags/Yarn/"/>
    
  </entry>
  
  <entry>
    <title>Create PHP Environment With Docker</title>
    <link href="https://kisky3.github.io/2019/11/11/CreatePhpEnvironmentInDocker/"/>
    <id>https://kisky3.github.io/2019/11/11/CreatePhpEnvironmentInDocker/</id>
    <published>2019-11-11T14:05:48.000Z</published>
    <updated>2019-11-23T23:54:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>用docker构建PHP开发环境（mysql、nginx）</p><a id="more"></a><h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><ul><li>Mac OS Mojave Version 10.14</li><li>Docker for Mac</li></ul><hr><h3 id="利用Docker构建开发环境的方法"><a href="#利用Docker构建开发环境的方法" class="headerlink" title="利用Docker构建开发环境的方法"></a>利用Docker构建开发环境的方法</h3><p>首先，利用Docker构建PHP开发环境的时候，至少要具备Web服务器，PHP，和数据库这三个主要要素。<br>其次，用Docker准备你所需要的东西的话有两个方法：</p><ul><li>Docker Registory(DockerHub)开始一个一个的安装并build</li><li>docker-compose.yml里写入你需要的条件，然后一口气安装</li></ul><p>明显docker-compose会比较简单明了。</p><hr><h3 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h3><p>首先安装Docker Compose</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://github.com/docker/compose/releases/download/1.3.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p>注意：如果出现这个错误，Permission denied则说明/usr/lical/bin路径没有读写权限。<br>要使用superuser来执行。这个情况下执行sudo -i 之后再执行上面两个命令。</p><p>确认docker compose安装情况及版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose version</span><br></pre></td></tr></table></figure><hr><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>Docker Compose会根据你写在docker-compose.yml文件里的内容来进行容器的管理。<br>首先新建一个文件夹，文件结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">├── docker-compose.yml</span><br><span class="line">├── nginx</span><br><span class="line">│   └── nginx.conf</span><br><span class="line">├── php</span><br><span class="line">│   ├── Dockerfile</span><br><span class="line">│   └── php.ini</span><br><span class="line">├── mysql</span><br><span class="line">│   └── data</span><br><span class="line">└── www</span><br><span class="line">    └── html</span><br><span class="line">        └── index.php</span><br></pre></td></tr></table></figure><hr><h3 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h3><p>然后就是制作作为地基的docker-compose.yml。<br>docker-compose.yml</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">'3'</span></span><br><span class="line">services:</span><br><span class="line">  nginx:</span><br><span class="line">    image: nginx:latest</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">.8080</span>:<span class="number">8080</span></span><br><span class="line">    volumes:</span><br><span class="line">      - ./nginx/nginx.conf:<span class="regexp">/etc/</span>nginx/conf.d/<span class="keyword">default</span>.conf</span><br><span class="line">      - ./www/html:<span class="regexp">/var/</span>www/html</span><br><span class="line">    depends_on:</span><br><span class="line">      - php</span><br><span class="line"></span><br><span class="line">  php:</span><br><span class="line">    build: ./php</span><br><span class="line">    volumes:</span><br><span class="line">      - ./www/html:<span class="regexp">/var/</span>www/html</span><br><span class="line">    depends_on:</span><br><span class="line">      - db</span><br><span class="line"></span><br><span class="line">  db:</span><br><span class="line">    image: mysql:<span class="number">5.7</span></span><br><span class="line">    ports:</span><br><span class="line">      - <span class="number">13306</span>:<span class="number">3306</span></span><br><span class="line">    volumes:</span><br><span class="line">      - ./mysql/data:<span class="regexp">/var/</span>lib/mysql</span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_ROOT_PASSWORD: secret</span><br><span class="line"></span><br><span class="line">  phpmyadmin:</span><br><span class="line">    image: phpmyadmin/phpmyadmin:latest</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="number">8888</span>:<span class="number">80</span></span><br><span class="line">    depends_on:</span><br><span class="line">      - db</span><br></pre></td></tr></table></figure><p>nginx/nginx.conf</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">8080</span>;</span><br><span class="line">    server_name _;</span><br><span class="line"></span><br><span class="line">    root  /<span class="keyword">var</span>/www/html;</span><br><span class="line">    index index.php index.html;</span><br><span class="line"></span><br><span class="line">    access_log /<span class="keyword">var</span>/log/nginx/access.log;</span><br><span class="line">    error_log  /<span class="keyword">var</span>/log/nginx/error.log;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        try_files $uri $uri/ <span class="regexp">/index.php$is_args$args;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    location ~ \.php$ &#123;</span></span><br><span class="line"><span class="regexp">        fastcgi_pass php:9000;</span></span><br><span class="line"><span class="regexp">        fastcgi_index index.php;    </span></span><br><span class="line"><span class="regexp">        fastcgi_param SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span></span><br><span class="line"><span class="regexp">        include       fastcgi_params;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>php/Dockerfile</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FROM php:<span class="number">7.2</span>-fpm</span><br><span class="line">COPY php.ini /usr/local/etc/php/</span><br></pre></td></tr></table></figure><p>php.ini</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date.timezone = &quot;Asia/Tokyo&quot;</span><br></pre></td></tr></table></figure><p>www/html/index.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;php</span><br><span class="line">phpinfo();</span><br></pre></td></tr></table></figure><hr><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><br><img src="./1.png" style="width:600px"><p>打开localhost:8080就可以看到php的设置画面了。</p><br><img src="./2.png" style="width:600px"><br><h3 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose down</span><br></pre></td></tr></table></figure><hr><h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用docker构建PHP开发环境（mysql、nginx）&lt;/p&gt;
    
    </summary>
    
      <category term="Back-end Knowledge" scheme="https://kisky3.github.io/categories/Back-end-Knowledge/"/>
    
    
      <category term="docker" scheme="https://kisky3.github.io/tags/docker/"/>
    
      <category term="php" scheme="https://kisky3.github.io/tags/php/"/>
    
      <category term="mysql" scheme="https://kisky3.github.io/tags/mysql/"/>
    
      <category term="nginx" scheme="https://kisky3.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>About SSH Login And How To Connect To Cyberduck</title>
    <link href="https://kisky3.github.io/2019/11/11/ssh/"/>
    <id>https://kisky3.github.io/2019/11/11/ssh/</id>
    <published>2019-11-11T08:48:10.000Z</published>
    <updated>2019-11-23T23:54:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于SSH登陆以及如何连接Cyberduck</p><a id="more"></a><h3 id="什么是SSH"><a href="#什么是SSH" class="headerlink" title="什么是SSH"></a>什么是SSH</h3><p>SSH（Secure Shell）是一种网络协议，用于计算机之间的加密登录。如果一个用户从本地计算机，使用SSH协议登录另一台远程计算机，我们就可以认为，这种登录是安全的，即使被中途截获，密码也不会泄露。</p><h3 id="什么是FTP"><a href="#什么是FTP" class="headerlink" title="什么是FTP"></a>什么是FTP</h3><p>FTP（File Transfer Protocol）就是就是专门用来传输文件的协议。<br>FTP服务器（File Transfer Protocol Server）是在互联网上提供文件存储和访问服务的计算机，它们依照FTP协议提供服务。</p><h3 id="什么是SFTP"><a href="#什么是SFTP" class="headerlink" title="什么是SFTP"></a>什么是SFTP</h3><p>SFTP（SSH File Transfer Protocol），安全文件传送协议。<br>可以为传输文件提供一种安全的加密方法。sftp 与 ftp 有着几乎一样的语法和功能。SFTP 为 SSH的一部分，是一种传输档案至 Blogger 伺服器的安全方式。其实在SSH软件包中，已经包含了一个叫作SFTP(Secure File Transfer Protocol)的安全文件传输子系统。</p><h3 id="FTP与SFTP的区别"><a href="#FTP与SFTP的区别" class="headerlink" title="FTP与SFTP的区别"></a>FTP与SFTP的区别</h3><p>FTP是一种文件传输协议，一般是为了方便数据共享的。包括一个FTP服务器和多个FTP客户端。FTP客户端通过FTP协议在服务器上下载资源。而SFTP协议是在FTP的基础上对数据进行加密，使得传输的数据相对来说更安全。但是这种安全是以牺牲效率为代价的，也就是说SFTP的传输效率比FTP要低(不过现实使用当中，没有发现多大差别)。</p><p>总结：<br>1.FTP要安装，SFTP不要安装。<br>当我们需要传输文件到Linux服务器当中，我们习惯用ftp来传输，其实Linux默认是不提供ftp的，需要你额外安装FTP服务器。而SFTP不需要单独配置，开启SSH默认就开启了SFTP。</p><p>2.SFTP使用加密传输认证信息和传输数据更安全，但更安全带来副作用就是的效率比FTP要低。</p><h3 id="SFTP-SSH登录及命令行用法"><a href="#SFTP-SSH登录及命令行用法" class="headerlink" title="SFTP/SSH登录及命令行用法"></a>SFTP/SSH登录及命令行用法</h3><p>SFTP：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">get xxx.txt 下载xxx文件</span><br><span class="line">put xxx.txt 上传xxx文件</span><br><span class="line">quit / bye / exit 退出sftp</span><br><span class="line">sftp  xxx.xxx.xxx.xxx   登录root用户</span><br><span class="line">sftp zygf@xxx.xxx.xxx.xxx  进行登录zygf用户。</span><br></pre></td></tr></table></figure><p>例：：<br>1.首先如果要登陆你需要「远程服务器的秘密键」，「用户名」和「邮件地址」。<br>2.在本地存在公开键的情况下，你需要将远程服务器的秘密键保存在本地。<br>  生成一个秘密键文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">　cd ~/.ssh</span><br><span class="line">　cp kou_id_rsa wordpress_rsa</span><br><span class="line">vim wordpress_rsa</span><br></pre></td></tr></table></figure><img src="./1.png" style="width:500px"><p>3.登陆服务器并且传送你生成的秘密键,不用写端口号!(默认为22)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh ユーザー名@IPアドレス -i ~/.ssh/wordpress_rsa(生成した秘密鍵ファイル名)</span><br></pre></td></tr></table></figure><p>4.有问题则回答yes，然后就可以看到登陆成功了。<br><img src="./2.png" style="width:500px"></p><h3 id="使用FTP软件进行登陆及文件操作"><a href="#使用FTP软件进行登陆及文件操作" class="headerlink" title="使用FTP软件进行登陆及文件操作"></a>使用FTP软件进行登陆及文件操作</h3><p>mac可以使用免费的FTP软件<a href="https://cyberduck.io/download/" target="_blank" rel="noopener">Cyberduck</a><br>就是这个小黄鸭！！<br><img src="./7.png" style="width:500px"></p><p>1.点击新建连接<br><img src="./3.png" style="width:500px"></p><p>2.在界面上选择SFTP连接<br><img src="./4.png" style="width:500px"></p><p>3.输入用户名。密码以及选择本地秘密键文件，点击连接。<br><img src="./5.png" style="width:500px"></p><p>成功！！<br><img src="./6.png" style="width:500px"></p><h3 id="可能发生的错误"><a href="#可能发生的错误" class="headerlink" title="可能发生的错误"></a>可能发生的错误</h3><h5 id="1-没有给ssh文件夹权限"><a href="#1-没有给ssh文件夹权限" class="headerlink" title="1.没有给ssh文件夹权限"></a>1.没有给ssh文件夹权限</h5><p>解决方法：<br>给下面的ssh文件夹以及你生成的秘密键权限。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 600 ~/.ssh/wordpress_rsa</span><br><span class="line">chmod 700 ~/.ssh</span><br></pre></td></tr></table></figure><h5 id="2-复制秘密键的时候转换软件导致字符改变"><a href="#2-复制秘密键的时候转换软件导致字符改变" class="headerlink" title="2.复制秘密键的时候转换软件导致字符改变"></a>2.复制秘密键的时候转换软件导致字符改变</h5><p>解决方法：<br>下载之后用记事本打开再进行复制粘贴。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于SSH登陆以及如何连接Cyberduck&lt;/p&gt;
    
    </summary>
    
      <category term="Back-end Knowledge" scheme="https://kisky3.github.io/categories/Back-end-Knowledge/"/>
    
    
      <category term="SSH" scheme="https://kisky3.github.io/tags/SSH/"/>
    
      <category term="Cyberduck" scheme="https://kisky3.github.io/tags/Cyberduck/"/>
    
      <category term="FTP" scheme="https://kisky3.github.io/tags/FTP/"/>
    
      <category term="SFTP" scheme="https://kisky3.github.io/tags/SFTP/"/>
    
  </entry>
  
  <entry>
    <title>Docker Basic and Commands</title>
    <link href="https://kisky3.github.io/2019/11/07/dockercommand/"/>
    <id>https://kisky3.github.io/2019/11/07/dockercommand/</id>
    <published>2019-11-06T15:10:07.000Z</published>
    <updated>2019-11-23T23:54:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>docker的基础知识以及常用命令行</p><a id="more"></a><h3 id="1-Docker-简介"><a href="#1-Docker-简介" class="headerlink" title="1.Docker 简介"></a>1.Docker 简介</h3><p>Docker 两个主要部件：</p><ul><li>Docker: 开源的容器虚拟化平台</li><li>Docker Hub: 用于分享、管理 Docker 容器的 Docker SaaS 平台 – <a href="https://link.jianshu.com/?t=https://registry.hub.docker.com/search?q=library" target="_blank" rel="noopener">Docker Hub</a></li></ul><hr><h3 id="2-Docker内部"><a href="#2-Docker内部" class="headerlink" title="2.Docker内部"></a>2.Docker内部</h3><p>要理解 Docker 内部构建，需要理解以下三种部件：</p><ul><li>Docker 镜像 - Docker images</li><li>Docker 仓库 - Docker registeries</li><li>Docker 容器 - Docker containers</li></ul><hr><h6 id="Docker-镜像"><a href="#Docker-镜像" class="headerlink" title="Docker 镜像"></a>Docker 镜像</h6><p>Docker 镜像是 Docker 容器运行时的只读模板。每一个镜像由一系列的层 (layers) 组成。<br>如果我们想要在本地运行容器，就必须保证本地存在对应的镜像。所以，第一步，我们需要下载镜像。当我们尝试下载镜像时，Docker 会尝试先从默认的镜像仓库（默认使用 Docker Hub 公共仓库）去下载，当然了，用户也可以自定义配置想要下载的镜像仓库。</p><hr><h6 id="Docker-仓库"><a href="#Docker-仓库" class="headerlink" title="Docker 仓库"></a>Docker 仓库</h6><p>Docker 仓库用来保存镜像，可以理解为代码控制中的代码仓库。同样的，Docker 仓库也有公有和私有的概念。公有的 Docker 仓库名字是 Docker Hub。Docker Hub 提供了庞大的镜像集合供使用。这些镜像可以是自己创建，或者在别人的镜像基础上创建。Docker 仓库是 Docker 的分发部分。</p><hr><h6 id="Docker-容器"><a href="#Docker-容器" class="headerlink" title="Docker 容器"></a>Docker 容器</h6><p>Docker 容器和文件夹很类似，一个Docker容器包含了所有的某个应用运行所需要的环境。每一个 Docker 容器都是从 Docker 镜像创建的。Docker 容器可以运行、开始、停止、移动和删除。每一个 Docker 容器都是独立和安全的应用平台，Docker 容器是 Docker 的运行部分。</p><hr><h6 id="Docker-File"><a href="#Docker-File" class="headerlink" title="Docker File"></a>Docker File</h6><p>当获得docker镜像时，还不能就这样使用，大多数情况下我们要根据自身所需要的条件（比如版本号啊，端口号啊之类的）来将docker镜像设置成我们所需要的开发环境。<br>实际上，docker file一般写成下面这样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FROM centos:7               # ①</span><br><span class="line">RUN yum install -y java     # ②</span><br><span class="line">ADD files/apache-tomcat-9.0.6.tar.gz /opt/  # ③</span><br><span class="line">CMD [ &quot;/opt/apache-tomcat-9.0.6/bin/catalina.sh&quot;, &quot;run&quot; ]  # ④</span><br></pre></td></tr></table></figure><p>① FROM是指定你所需要的docker镜像（作为最基层）。比如这里就是将centos:7的docker镜像为基础来执行之后的指令。<br>在执行时哪怕没有事先通过docker pull获取镜像，它也能自动获取相应的镜像供你使用。</p><p>② RUN是指在OS命令行执行时使用。在这里是指下载java，并加上了-y 的选项默认确认安装</p><p>③ ADD是指将 tar.gz文件的容器copy到你的指定的路径内，并同时解压展开tar文件。<br>写成这样：「ADD &lt;copy源文件&gt; &lt;复制到Docker镜像内・并展开<br>这里就是在与docker file同阶层的地方生成一个「file」的路径，并将tomcat放置其中</p><p>④ CMD是指容器启动时所执行的命令行</p><p>我们现在利用做好的Dockerfile来生成Docker镜像。移动到Docker所在的路径，然后使用生成Docker镜像的命令：build</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># cd &lt;Dockerfile所在路径&gt;</span><br><span class="line"># docker build -t tomcat:1 .</span><br><span class="line">　(docker build -t &lt;Docker镜像名&gt; &lt;Dockerfile所在路径&gt;)</span><br><span class="line"># docker images</span><br><span class="line">REPOSITORY   TAG   IMAGE ID       CREATED         SIZE</span><br><span class="line">tomcat       1     10af894cf09a   1 minutes ago   456MB</span><br></pre></td></tr></table></figure><p>通过这样我们就生成了自己的Docker镜像。然后我们使用Docker镜像来启动docker容器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># docker run -it -d --name tomcat-1 -p 8081:8080 tomcat:1</span><br></pre></td></tr></table></figure><p>然后打开「http://&lt;IP地址&gt;:8081/」就能看到启动成功的画面了。</p><p>可以使用下面的命令来查看log</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># docker logs -f tomcat-1</span><br></pre></td></tr></table></figure><hr><h6 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h6><p>就是对于有好几个容器构成的服务来说，可以使用Docker Compose来控制多个Docker镜像的生成（build）和多个容器的启动和停止</p><p>上面几个概念的整体关系如图所示：<br><img src="./1.png"></p><hr><h3 id="Docker基础用法"><a href="#Docker基础用法" class="headerlink" title="Docker基础用法"></a>Docker基础用法</h3><p><a href="https://link.jianshu.com/?t=https://registry.hub.docker.com/search?q=library" target="_blank" rel="noopener">Docker Hub</a>: Docker镜像首页，包括官方镜像和其它公开镜像</p><p>镜像搜索</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker search ubuntu # 搜索ubuntu官方镜像</span><br></pre></td></tr></table></figure><p>获取镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker pull ubuntu # 获取ubuntu官方镜像</span><br><span class="line">$ sudo docker images # 查看当前镜像列表</span><br></pre></td></tr></table></figure><p>删除镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi IMAGE [IMAGE...]</span><br></pre></td></tr></table></figure><p>运行容器<br>・docker run - 运行一个容器<br>・-t - 分配一个（伪）tty (link is external)<br>・-i - 交互模式 (so we can interact with it)<br>・ubuntu:14.04 - 使用 ubuntu 基础镜像 14.04<br>・/bin/bash - 运行命令 bash shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -i -t ubuntu:14.04 /bin/bash</span><br></pre></td></tr></table></figure><p>查看当前所有容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker ps # 查看当前运行的容器, ps -a 列出当前系统所有的容器</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">6c9129e9df10        ubuntu:14.04        /bin/bash           6 minutes ago       Up 6 minutes                            cranky_babbage</span><br></pre></td></tr></table></figure><p>进入指定容器（运行中）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker attach CONTAINER</span><br><span class="line">docker exec -it CONTAINER /bin/bash</span><br></pre></td></tr></table></figure><p>删除所有容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm $(docker ps -aq)</span><br></pre></td></tr></table></figure><hr><h5 id="Docker-compose"><a href="#Docker-compose" class="headerlink" title="Docker-compose"></a>Docker-compose</h5><p>启动所有的容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>进入启动中的某个容器内</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose + exec ( or run )  + サービス名 + 実行したいコマンド</span><br></pre></td></tr></table></figure><p>停止全部容器或某个容器的运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose stop</span><br><span class="line">docker-compose stop nginx</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;docker的基础知识以及常用命令行&lt;/p&gt;
    
    </summary>
    
      <category term="Back-end Knowledge" scheme="https://kisky3.github.io/categories/Back-end-Knowledge/"/>
    
    
      <category term="Docker" scheme="https://kisky3.github.io/tags/Docker/"/>
    
      <category term="Command" scheme="https://kisky3.github.io/tags/Command/"/>
    
  </entry>
  
  <entry>
    <title>About CMS</title>
    <link href="https://kisky3.github.io/2019/11/02/AboutCMS/"/>
    <id>https://kisky3.github.io/2019/11/02/AboutCMS/</id>
    <published>2019-11-02T01:30:56.000Z</published>
    <updated>2019-11-23T23:54:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于CMS</p><a id="more"></a><h4 id="什么是CMS"><a href="#什么是CMS" class="headerlink" title="什么是CMS"></a>什么是CMS</h4><p>CMS是英语Content Management System的缩写，按英语的字面翻译就是内容管理系统，顾名思义，它主要是为了方便发布网络内容而存在的一体化Web管理系统。</p><hr><h3 id="CMS的基本作用"><a href="#CMS的基本作用" class="headerlink" title="CMS的基本作用"></a>CMS的基本作用</h3><p>很久很久以前，人们做网站很多用静态HTML+CSS+Javascript直接写，也就是静态页面。</p><p>但是如果有一组页面要维护，对于静态页面来说是一件很麻烦的事，比如我有一个人的Email地址变更了，这一组页面上所有出现的地方都要改，于是就有了适合Web的动态语言，如ASP，PHP，JAVA，.NET等等，它们把数据保存在数据库中，可以动态的引用，这样就能生产出较大规模的网站了。</p><p>当时诞生了一批大型网站，叫做门户网站，比如新浪，网易，搜狐，他们的内容很丰富，很多。他们有一大批编辑来搜集整理网站的文章，但是总不可能让程序员帮他们把内容上传吧。</p><p>于是CMS诞生了，通常CMS有一个后台，编辑通过登录后台进入一个可视化的操作界面，把文章录入进去，然后通过上一级的总编审核后发布到网站中。</p><hr><h3 id="CMS的主要功能模块"><a href="#CMS的主要功能模块" class="headerlink" title="CMS的主要功能模块"></a>CMS的主要功能模块</h3><p>上面说的文章发布只是CMS的一个功能模块，通常还会有一个会员管理系统，这是最基本的2个功能模块。文章发布会带有一个富文本编辑器，可以直接插入和上传媒体文件，如图片和视频；还有分类以及排序，发布以及更新的时间戳，Tag标签等等，更有强大的CMS会添加自定义的字段，比如加入文章出处，原创作者等。</p><p>会员系统会分级人员的权限，比如超级管理员能做所有后台能做的事情，而编辑只能添加和编辑删除某个分类下的文章，甚至只能看到这个分类，其他分类对于他是隐藏的。但是一个功能较强大的CMS远不止如此，他们会有各种各样奇奇怪怪的功能模块，比如留言板，评论系统，预约系统，多语言模块等等。博客系统也是一种CMS，只是它们更侧重于发布博客。</p><hr><h3 id="流行的CMS框架"><a href="#流行的CMS框架" class="headerlink" title="流行的CMS框架"></a>流行的CMS框架</h3><p>CMS最擅长的就是建设网站，最流行的CMS有：国外的：Wordpress，Drupal，Joomla，这是国外最流行的3大CMS。国内则是DedeCMS和帝国，PHPCMS等。国内的CMS会追求大而全，而国外的CMS更注重生态，更注重友好的接口，更多的功能留给第三方开发插件来实现。</p><p>推荐几个比较新的：ProcessWire，OctoberCMS，CraftCMS每个CMS都有自己的一套管理组织方法，这个需要多读官网的文档。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于CMS&lt;/p&gt;
    
    </summary>
    
      <category term="Back-end Knowledge" scheme="https://kisky3.github.io/categories/Back-end-Knowledge/"/>
    
    
      <category term="CMS" scheme="https://kisky3.github.io/tags/CMS/"/>
    
  </entry>
  
  <entry>
    <title>Install Modx Revolution With Docker</title>
    <link href="https://kisky3.github.io/2019/10/31/createDockerModx/"/>
    <id>https://kisky3.github.io/2019/10/31/createDockerModx/</id>
    <published>2019-10-31T01:22:48.000Z</published>
    <updated>2019-11-23T23:54:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>用docker构建modx安装环境</p><a id="more"></a><h3 id="什么是Modx"><a href="#什么是Modx" class="headerlink" title="什么是Modx"></a>什么是Modx</h3><p>MODx 是一个完全开源免费的 php 内容管理系统（CMS）. 是一个PHP 应用框架，可以帮助使用者控制自己的网上内容。<br>它是开发人员和高级用户理想的控制系统，任何人都可以使用 MODx 发布、更新、维护动态网站，或 html 静态页面的网站内容。</p><hr><h3 id="使用docker构建环境"><a href="#使用docker构建环境" class="headerlink" title="使用docker构建环境"></a>使用docker构建环境</h3><p>环境可自行定义，本例的环境参照下面：</p><ul><li>server: nginx:1.12.2</li><li>DB: mysql:5.6.34</li><li>Modx Revolition :modx-2.7.2-pl</li><li>php</li></ul><h4 id="1-从GitLab下载modx-docker"><a href="#1-从GitLab下载modx-docker" class="headerlink" title="1.从GitLab下载modx-docker"></a>1.从GitLab下载modx-docker</h4><p><a href="https://gitlab.com/EUsipov/modx-docker" target="_blank" rel="noopener">modx-docker Repo</a></p><hr><h4 id="2-设置nginx服务器"><a href="#2-设置nginx服务器" class="headerlink" title="2.设置nginx服务器"></a>2.设置nginx服务器</h4><p>在nginx/site.conf文件里修改服务器名以及监听窗口号。记得不要漏了分号！否则之后无法启动的！</p><p>nginx/site.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    index index.php index.html;</span><br><span class="line">    server_name localhost;</span><br><span class="line">    listen 8899;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><hr><h4 id="3-设置docker启动时的配置"><a href="#3-设置docker启动时的配置" class="headerlink" title="3. 设置docker启动时的配置"></a>3. 设置docker启动时的配置</h4><p>docker-compose可以理解可以让你一条命令运行多个配置的容器。docker-compose.yml就是配置文件。<br>下面将nginx的端口号设置成和ngin配置文件里一样：8899，记得这里要加上本地机默认域名，写成这样！ =&gt; “127.0.0.1:8899:8899”<br>然后写上mysql的用户名和密码，mysql的端口号为了避免重复，这里使用’13306:3306’<br>最后如下文所示：</p><p>docker-compose.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">nginx:</span><br><span class="line">   image: nginx:1.12.2</span><br><span class="line">   container_name: nginx</span><br><span class="line">   restart: always</span><br><span class="line">   ports:</span><br><span class="line">      - &quot;127.0.0.1:8899:8899&quot;</span><br><span class="line">   volumes:</span><br><span class="line">      - ./code:/code</span><br><span class="line">      - ./nginx/site.conf:/etc/nginx/conf.d/site.conf</span><br><span class="line">   links:</span><br><span class="line">      - php</span><br><span class="line"></span><br><span class="line">php:</span><br><span class="line">   build: ./php</span><br><span class="line">   container_name: php</span><br><span class="line">   restart: always</span><br><span class="line">   volumes:</span><br><span class="line">      - ./code:/code:rw</span><br><span class="line">   links:</span><br><span class="line">      - mysql</span><br><span class="line"></span><br><span class="line">mysql:</span><br><span class="line">   image: mysql:5.6.34</span><br><span class="line">   environment:</span><br><span class="line">      MYSQL_ROOT_PASSWORD: mysql</span><br><span class="line">      MYSQL_DATABASE: modx</span><br><span class="line">      MYSQL_USER: modx</span><br><span class="line">      MYSQL_PASSWORD: modx</span><br><span class="line">   ports:</span><br><span class="line">      - &apos;13306:3306&apos;</span><br><span class="line">   command: mysqld --sql-mode=NO_ENGINE_SUBSTITUTION</span><br><span class="line">   volumes:</span><br><span class="line">      - &apos;./mysql:/var/lib/mysql&apos;</span><br></pre></td></tr></table></figure><hr><h4 id="创建DB数据储存文件夹"><a href="#创建DB数据储存文件夹" class="headerlink" title="创建DB数据储存文件夹"></a>创建DB数据储存文件夹</h4><p>在根目录下创建mysql文件夹，用于储存数据库数据。这里的文件夹名与docker-compose.yml里mysql的volumes对应：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">volumes:</span><br><span class="line">      - &apos;./mysql:/var/lib/mysql&apos;</span><br></pre></td></tr></table></figure><hr><h4 id="创建code文件夹"><a href="#创建code文件夹" class="headerlink" title="创建code文件夹"></a>创建code文件夹</h4><p>用于存放modx相关文件</p><hr><h4 id="安装modx"><a href="#安装modx" class="headerlink" title="安装modx"></a>安装modx</h4><p>移动到code文件夹并在该路径内安装所需的modx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd code</span><br><span class="line">wget http://modx.com/download/direct/modx-2.7.2-pl.zip</span><br></pre></td></tr></table></figure><p>解压安装包并重命名文件夹，修改权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">unzip modx-2.7.2-pl.zip</span><br><span class="line">mv modx-2.7.2-pl modx</span><br><span class="line">chmod -R 775 modx</span><br></pre></td></tr></table></figure><p>修改路径回到上层菜单并启动docker容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>这时打开/modx/setup就可以看到modx的安装页面了<br><img src="./1.png" style="width:500px"></p><hr><h3 id="安装Modx"><a href="#安装Modx" class="headerlink" title="安装Modx"></a>安装Modx</h3><p>安装页面选择语言，点击下一步<br><img src="./2.png" style="width:500px"><br><br><br><img src="./3.png" style="width:500px"><br>设置mysql，将之前设定的用户名密码输入，注意在host处写入mysql，点击验证<br>在本地连接登陆mysql数据库可以使用下面的命令行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u modx -h 127.0.0.1 -P 13306 --protocol=tcp -p</span><br></pre></td></tr></table></figure><br>也可以用SequelPro打开<img src="./12.png" style="width:500px"><br><img src="./4.png" style="width:500px"><br>验证成功后选择文字编码,并验证<img src="./5.png" style="width:500px"><br>写入用户名和密码点击下一步<img src="./6.png" style="width:500px"><br>全部检查项目显示绿色，通过之后就可以安装了<img src="./7.png" style="width:500px"><br>安装成功后输入刚刚设定的用户名和密码进行登陆<img src="./8.png" style="width:500px"><br><img src="./9.png" style="width:500px"><br><img src="./10.png" style="width:500px"><br><p>大功告成！<br>进入管理页面之后就可以进行你自己的CMS页面开发了！<br><br><br><img src="./11.png" style="width:500px"><br><br></p><h3 id="遗留课题"><a href="#遗留课题" class="headerlink" title="遗留课题"></a>遗留课题</h3><p>如何将现存的数据导入数据库并在本地进行开发</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用docker构建modx安装环境&lt;/p&gt;
    
    </summary>
    
      <category term="Back-end Knowledge" scheme="https://kisky3.github.io/categories/Back-end-Knowledge/"/>
    
    
      <category term="Docker" scheme="https://kisky3.github.io/tags/Docker/"/>
    
      <category term="Modx" scheme="https://kisky3.github.io/tags/Modx/"/>
    
      <category term="Modx-docker" scheme="https://kisky3.github.io/tags/Modx-docker/"/>
    
  </entry>
  
  <entry>
    <title>Miss Saigon (Musical 2014)</title>
    <link href="https://kisky3.github.io/2019/10/20/MissSaigon/"/>
    <id>https://kisky3.github.io/2019/10/20/MissSaigon/</id>
    <published>2019-10-20T01:01:43.000Z</published>
    <updated>2019-11-23T23:54:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>音乐剧：西贡小姐（英国/美国 2014年）</p><a id="more"></a><p>「西贡小姐」是西方现代四大音乐名剧之一, 也是在80年代是百老汇上受欧洲影响的剧目之一，与「歌剧魅影」，「悲惨世界」和「猫」齐名. 据说是翻「蝴蝶夫人」.</p><h3 id="第一幕"><a href="#第一幕" class="headerlink" title="第一幕"></a>第一幕</h3><p>故事发生在1975年西贡的一间夜总会，就在西贡解放前几天。今天是金（Kim)做妓女的第一天，工程师（Engineer）向她问候。工程师是一个法国裔越南皮条，有一家迎合美国士兵需要的夜总会.<br>在后台，所有的女孩子们都准备着晚上的节目，她们一边帮金穿上戏服一边取笑她的幼稚.</p><p>夜总会的节目开始了，所有的美国大兵和越南妓女们一起狂欢（The Heat is on in Saigon）.</p><p>士兵们都知道他们已经节节败退，只想在离开越南以前再玩一下子. 我们认识了克里斯（Chris）— 一个年轻的、却不幻想的陆军作战队士兵 和他的朋友约翰(John).<br><img src="./1.jpg" style="width:500px;margin:40px 0"></p><p>女孩子们在大兵面前骚手弄姿，都想争夺“西贡小姐”的称号. 得主将被作为奖品被大兵们抽奖，而妓女们认为，这就表示她们可能会被带到美国去，从此过上好日子. 每一个妓女都用自己上场的机会使出浑身解数取悦大兵们，而轮到金时，她的纯洁与天真吸引了克里斯的注意.</p><img src="./2.jpg" style="width:500px;margin:40px 0"><p>约翰注意到了克里斯对金的迷恋，他与工程师谈了价钱，给克里斯买下了金的处女之夜（The Transaction”）.</p><img src="./3.jpg" style="width:500px;margin:40px 0"><p>克里斯痛恨越南的一切，然而他完完全全为金迷恋，他问上帝为什么他一定要在临走之前才遇到这个人（Why God Why”）。<br>金醒来之后，克里斯想给她钱，被她回绝了,他告诉她她不需要在夜总会卖身，因为他想让她跟他一起生活。两个人疯狂地相爱了（Sun and Moon”）。<br><img src="./4.jpg" style="width:500px;margin:40px 0"></p><p>金和其他的女孩子们为克里斯和金准备了婚礼（“婚礼 - Dju Vui Vai”）。在婚礼上，金的表兄岁（Thuy），也是金的父母为以前她订下的丈夫，闯进来要救金离开这里。<br>当他得知金是要嫁给另一个人的时候，他十分伤心 （“岁的到来 - Thuy’s Arrival”）。<br><img src="./5.jpg" style="width:500px;margin:40px 0"></p><p>金为此十分难过，她认为克里斯也会离开她，克里斯说他是要离开越南，但是他会带金一起走。克里斯与金拥抱在一起，跟着一首夜总会的庸俗歌曲“世界的最后一晚”一起跳舞。然而这首歌在这里非比寻常，因为对金和克里斯来说，这一晚，的确就是她们的世界里的最后一晚。（“世界的最后一晚 - Last Night of the World”)。<br><img src="./6.jpg" style="width:500px;margin:40px 0"></p><p>故事向后跳跃三年，我们到了1978年。西贡（现已经改名为“胡志明市”）人都走到街头，举城欢庆打败美国、越南统一三周年的纪念活动（“龙之晨 - Morning of the Dragon”）。</p><p>岁现在是新政府的官员，他命令他手下的士兵去把工程师找来,命令工程师去把在共产党入城时就没了踪影的金找到，并把她带到他那里去。</p><p>金被克里斯留在了越南，她一直生活在贫民窟里。她依然深深地爱着克里斯，而且坚信他会回来救她出去。</p><p>与此同时，我们看到克里斯与他的新美国人妻子，艾伦(Ellen），躺在一起。艾伦很爱克里斯，但是她很渴望知道一直缠绕他内心的阴影究竟是什么。他突然从睡梦中惊醒，坐起来叫着金的名字，艾伦安慰他重新躺下。<br>两个身处地球两端的女人不约而同地表白她们对克里斯的爱情。（“我依然相信 - I Still Believe”）。<br><img src="./7.jpg" style="width:500px;margin:40px 0"></p><p>工程师找到金，把她带到岁那里。岁解释说他寻找金已经找了三年了，而且，他仍然想把金带回家做他的妻子。她拒绝了，哪怕克里斯不在她也全心全意地爱着他。金把她与克里斯的两岁的儿子，谭（Tam），介绍给岁，令岁大为震惊。<br><img src="./9.jpg" style="width:500px;margin:40px 0"></p><p>岁愤怒已极，他骂金是叛国者，谭则是国家的敌人，他企图用刀杀了谭。金抽出克里斯留下的手枪，被迫朝岁开了一枪。岁死在了金的怀中。<br><img src="./8.jpg" style="width:500px;margin:40px 0"></p><p>金跑到工程师那里，告诉他所发生的事情（“假如你愿意死在温床上 - If You Want to Die in Bed”）. 金吐露克里斯是谭的父亲，他立刻兴高采烈把这小孩看成自己去美国的签证。他告诉金从现在起他就是孩子的叔叔了，而他将带她们去曼谷。金向谭保证，哪怕是牺牲她的性命，她也要让谭过上好的日子。他们三人随着其他饱受坚辛的难民一起，登上了去曼谷的船（“为了你我可以付出生命 - I’d Give My Life for You”）。<br><img src="./10.jpg" style="width:500px;margin:40px 0"></p><hr><h3 id="第二幕"><a href="#第二幕" class="headerlink" title="第二幕"></a>第二幕</h3><p>1978年，乔治亚州的亚特兰大市。约翰现在为一家帮助”Bui-Doi”（指越战期间美国士兵与越南女人所生的小孩）寻找美国父亲的机构工作。<br>在越南，这些混血儿因为外貌特称明显，经常受到很大程度的歧视。</p><p>约翰把克里斯拉到一边，说他有很重要的消息要告诉他。约翰告诉克里斯金还活着，这让克里斯十分欣慰，因为他几年来一直做着金死去的梦魇。<br><img src="./11.jpg" style="width:500px;margin:40px 0"></p><p>1978年，曼谷。工程师现在已经沦落到招揽游客进下等酒吧的皮条客，而金则是酒吧里的舞女（“真是浪费 - What a Waste”）。<br>克里斯、艾伦和约翰来到曼谷寻找金的下落，约翰走进酒吧，见到了金和工程师。金见了约翰十分惊讶，等听说了克里斯也在曼谷的消息更是欣喜不已。<br><img src="./12.jpg" style="width:500px;margin:40px 0"></p><p>约翰去找克里斯的时候，工程师让金自己去找克里斯，因为他不相信克里斯真的会来（Chris is Here）。在金准备出门去找克里斯的时候，岁的鬼魂出现了。他恐吓金，说克里斯会跟西贡解放那晚一样，遗弃金。金的思绪，立刻被带回到那一夜（“金的梦魇 - Kim’s Nightmare”）。<br><img src="./13.jpg" style="width:500px;margin:40px 0"></p><p>1975年，西贡。在越共逐渐逼近、西贡日益混乱的时候，克里斯和金作好了逃离越南的准备。克里斯被招回去保护大使馆，他把枪留给她，让她在家收拾行李，说他们会有充足的时间离开。<br>几乎就在克里斯走进大使馆的那一瞬间，大使馆的门关闭了。大使命令不许放任何越南进入大使馆。<br>听说了这个消息，金挤到大使馆门口，但她不过是无数企图收买、乞求、爬进大使馆的越南人中间的一个罢了。<br><img src="./14.jpg" style="width:500px;margin:40px 0"><br>与此同时，美国人不许克里斯出去。约翰最后不得不打他的脸，让他停止无谓的挣扎。克里斯坐上了最后一班离开西贡的直升飞机，金从大门口看着他离开，她绝望地向他表白着她对他的忠贞。直升飞机在克里斯呼唤金的声音里起飞了。<br><img src="./15.jpg" style="width:500px;margin:40px 0"></p><p>1978年，曼谷。回忆结束了.<br>金来到克里斯的旅馆房间，但当她走进屋里的时候，那里只有一个女人，艾伦。而当艾伦告诉她他们不可能带谭去美国时，她所有那些希望儿子过上好日子的梦想也破灭了。艾伦说他们可以从美国寄钱来救济她们。金仍不能相信，她愤怒地要求克里斯当面告诉她这些话（Room 317）<br><img src="./16.jpg" style="width:500px;margin:40px 0"></p><p>克里斯和约翰没找到金，回到旅馆。克里斯听艾伦讲述了和金的激烈会面，惊恐万分。他决定让金和谭留在曼谷，他们会从美国寄钱来保证她们的生活，他们认为金是个好人，她“很聪明，她会理解的”（“对质 - The Confrontation”）。工程师仍把谭看做自己去美国的船票，他梦想着自己在美国的崭新生活。他、克里斯、艾伦一起来到金的房间（The American Dream）。<br><img src="./17.jpg" style="width:500px;margin:40px 0"></p><p>在金的房间里，金告诉谭他应该高兴，因为他现在有爸爸了。看到克里斯、艾伦、约翰和工程师从远处走过来，她对谭说了再见，吻着他的额头。她走到帘子后面，开枪自尽了。</p><p>克里斯、艾伦、约翰和工程师听到枪响立刻冲进房间，看到金倒在地上奄奄一息。克里斯跑到金旁边抱她起来，他心碎地问金为什么要这样做，但她只是求他再抱她最后一次。<br>她再次重复当初两人坠入爱河时说过的话：“为什么一夜之间我们改变了这么多？”在其他人震惊的目光里，金在克里斯的怀里死去了。而艾伦跪下来，朝谭伸开了双臂（Finale）。<br><img src="./18.jpg" style="width:500px;margin:40px 0"></p><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>「西贡小姐」虽然借助了一个「蝴蝶夫人」的老套故事，极尽一切歌唱和宣泄，嘲讽整个时代人性的虚伪，悲天悯人的大情感收纳着一个小小女人的辛酸之泪.<br>假借中西悲催恋情演绎的他乡故事不过是一个西方意淫的东方爱情和充满嘲讽的所谓的美国梦的结合罢了。</p><p>西贡小姐中，金比蝴蝶夫人巧巧桑更加立体，有血有肉、柔中带刚，会为维护真爱而勇敢杀人，会为内心自由而怒斥情敌，会为孩子再度沦落风尘，表现在Sun and moon中那种婉约，在I’d give my life for you中那种坚毅的在Please中那种渴望和坚守。虽然两者皆以自杀收场，金是悲壮睿智且义无返顾的。</p><p>如果这部风靡全球的歌剧曾经给以无数西方观众以灵魂震撼，在全球化的视野下，他们将如何定位他们的东方，他们将如何想象这朵“东方美学”的西方救赎意味。<br>当然，或许我们不必纠结于这种文化矛盾和生命哲学气息，于音乐来说不应该受精神的绑架；让故事安于它们被叙述的语境吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;音乐剧：西贡小姐（英国/美国 2014年）&lt;/p&gt;
    
    </summary>
    
      <category term="About Me" scheme="https://kisky3.github.io/categories/About-Me/"/>
    
    
      <category term="musical" scheme="https://kisky3.github.io/tags/musical/"/>
    
      <category term="Miss Saigon" scheme="https://kisky3.github.io/tags/Miss-Saigon/"/>
    
  </entry>
  
  <entry>
    <title>Mac iTerm2 powerlevel9k Theme</title>
    <link href="https://kisky3.github.io/2019/10/06/iTerm2/"/>
    <id>https://kisky3.github.io/2019/10/06/iTerm2/</id>
    <published>2019-10-06T14:56:14.000Z</published>
    <updated>2019-11-23T23:54:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>Mac iTerm2的个性主题设置</p><a id="more"></a><h3 id="安装对象"><a href="#安装对象" class="headerlink" title="安装对象"></a>安装对象</h3><p>iTerm2：号称 Mac 下最好的终端工具（嗯，我也这么认为，毕竟我不会别的了）<br>zsh：一款强大的终端工具，能帮助你更高效地编写和执行命令</p><hr><h3 id="安装-iTerm2"><a href="#安装-iTerm2" class="headerlink" title="安装 iTerm2"></a>安装 iTerm2</h3><p>前提：已经安装了 Homebrew.<br>如果你从来没有运行过 brew cask 命令，可以先执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew tap caskroom/cask</span><br></pre></td></tr></table></figure><p>然后开始安装 iTerm2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install iterm2</span><br></pre></td></tr></table></figure><p>安装成功后在 Launchpad 中可以看到有一个新图标出现，打开 iTerm2</p><hr><h3 id="代码配色"><a href="#代码配色" class="headerlink" title="代码配色"></a>代码配色</h3><p>默认的界面还是略显丑陋的，我们来设置一下代码配色吧<br>先检查下终端颜色配置为 xterm-256color，位置在 iTerm2 -&gt; Preferences -&gt; Profiles -&gt; Terminal<br><br><br><img src="./1.png"><br><br><br>然后就可以设置配色了，默认情况下 iTerm2 只有 7 种自带的配色，当然满足不了我们高颜值的需求了.<br>有人就开源了一款叫 iTerm2-Color-Schemes 的配色合集，里面有各种经典、常用的配色方案.<br>这里我在Desktop创建了一个iterm2的目录,再来将配色使用 Git 下载到本地.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir iterm2 &amp;&amp; cd iterm2</span><br><span class="line"></span><br><span class="line">git clone https://github.com/mbadolato/iTerm2-Color-Schemes</span><br></pre></td></tr></table></figure><p>下面需要导入配色方案，选择 schemes 文件夹内的所有配色方案<br><br><br><img src="./2.png"><br><br><br><img src="./3.png"><br><br><br>导入成功后就可以选择一些流行的配色方案了，目前使用的是「Bright Lights」.并且把亮度调暗了一点.</p><hr><h3 id="安装字体"><a href="#安装字体" class="headerlink" title="安装字体"></a>安装字体</h3><p>为什么要安装字体呢？我们电脑的字体其实是可以用的，但是想要图标的这种字体就没法儿了.<br>图标字体其实是非 ASCII 码字体，在 iTerm2 中可以进行配置，所以先要安装这个字体。这款字体叫 nerd-fonts</p><p>使用 brew 安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew tap homebrew/cask-fonts</span><br><span class="line">brew cask install font-hack-nerd-font</span><br></pre></td></tr></table></figure><p>安装成功后需要在 iTerm2 中配置一下:<br>在 iTerm2 -&gt; Preferences -&gt; Profiles -&gt; Text -&gt; Font -&gt; Change Font 栏位中，<br>Text 下面勾选 Use a different font for non-ASCII text，然后在 Non-ASCII font 点击 Change font 修改<br><br><br><img src="./4.png"><br><br><br><img src="./5.png"><br><br><br><img src="./6.png"><br><br></p><p>这里选择的字体是非 ASCII 码字符的字体，不要设置错了！选择好之后关闭即可</p><hr><h3 id="安装-zsh"><a href="#安装-zsh" class="headerlink" title="安装 zsh"></a>安装 zsh</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install zsh</span><br></pre></td></tr></table></figure><br><img src="./7.png"><p>默认的 shell 是 bash，需要修改为 zsh：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo sh -c &quot;echo $(which zsh) &gt;&gt; /etc/shells&quot;</span><br><span class="line">chsh -s $(which zsh)</span><br></pre></td></tr></table></figure><p>修改时会提示你输入密码.</p><p>现在 zsh 安装完成了，安装虽简单，可配置麻烦啊，这你能忍吗？？当然不能！</p><p>于是，oh-my-zsh 出现了，有了它 zsh 配置起来就方便多了，来安装一下它<br><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure><br><img src="./8.png"><br>安装好之后可以看到界面发生了一点点变化，同时会产生一个名为 .zshrc 的配置文件，在用户家目录下面，我们以后主要就是修改它了<hr><h3 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h3><p>上面看到界面发生变化是因为 oh-my-zsh 默认帮我们配置了一个终端主题，你可以打开 ~/.zshrc 文件看看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZSH_THEME=&quot;robbyrussell&quot;</span><br></pre></td></tr></table></figure><p>这些主题文件存储在 ~/.oh-my-zsh/themes 目录下，你也可以使用其他的。</p><p>为了实现前面想要的酷炫的终端主题，有人写了一个名为 powerlevel9k 的高颜值主题。</p><p>先将主题下载到本地的主题目录中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/custom/themes/powerlevel9k</span><br></pre></td></tr></table></figure><p>然后修改 zsh 主题配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ZSH_THEME=&quot;powerlevel9k/powerlevel9k&quot;</span><br><span class="line">POWERLEVEL9K_MODE=&quot;nerdfont-complete&quot;</span><br><span class="line"># Customise the Powerlevel9k prompts</span><br><span class="line">POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(ssh dir vcs newline status)</span><br><span class="line">POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=()</span><br><span class="line">POWERLEVEL9K_PROMPT_ADD_NEWLINE=true</span><br></pre></td></tr></table></figure><ul><li>POWERLEVEL9K_MODE：设置 powerlevel9k 的字体是我们前面下载的</li><li>POWERLEVEL9K_LEFT_PROMPT_ELEMENTS：将前面居右的几个元素放在左边了</li><li>POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS：右边不放置任何元素（如果你喜欢在右边也可以加）</li><li>POWERLEVEL9K_PROMPT_ADD_NEWLINE：在每个提示之前添加换行符</li></ul><p>修改配置文件后一定要记得让配置生效，使用 source 命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure><p>现在来看看终端变成什么样子了！<br><br><br><img src="./9.png"><br><br><br>大功告成！！！</p><hr><h3 id="踩的坑"><a href="#踩的坑" class="headerlink" title="踩的坑"></a>踩的坑</h3><p>安装了oh-my-zsh插件后发现之前在.bash_profile自定义的一些内容都失效了,hexo无法启动报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zsh: command not found: hexo</span><br></pre></td></tr></table></figure><p>问题分析:<br>oh-my-zsh有自己的配置文件，覆盖了.bash_profile的内容</p><p>解决方法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.zshrc</span><br></pre></td></tr></table></figure><p>在最后一行加入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><p>这样就可以”继承”.bash_profile的配置了<br>执行source ~/.zshrc，让配置生效，重新使用，一切OK！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Mac iTerm2的个性主题设置&lt;/p&gt;
    
    </summary>
    
      <category term="System Setting" scheme="https://kisky3.github.io/categories/System-Setting/"/>
    
    
      <category term="setting" scheme="https://kisky3.github.io/tags/setting/"/>
    
      <category term="iTerm2" scheme="https://kisky3.github.io/tags/iTerm2/"/>
    
      <category term="powerlevel9k" scheme="https://kisky3.github.io/tags/powerlevel9k/"/>
    
  </entry>
  
</feed>
