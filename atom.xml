<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xiang Yu&#39;s Blog</title>
  
  <subtitle>Hello World, Hello Programming!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://kisky3.github.io/"/>
  <updated>2019-06-25T11:07:32.914Z</updated>
  <id>https://kisky3.github.io/</id>
  
  <author>
    <name>Xiang Yu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker环境下使用bake自动生成页面</title>
    <link href="https://kisky3.github.io/2019/04/06/Docker%E7%8E%AF%E5%A2%83%E4%B8%8B%E4%BD%BF%E7%94%A8bake%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E9%A1%B5%E9%9D%A2/"/>
    <id>https://kisky3.github.io/2019/04/06/Docker环境下使用bake自动生成页面/</id>
    <published>2019-04-06T11:00:52.000Z</published>
    <updated>2019-06-25T11:07:32.914Z</updated>
    
    <content type="html"><![CDATA[<h3 id="上节回顾"><a href="#上节回顾" class="headerlink" title="上节回顾"></a>上节回顾</h3><p>使用Docker配置Cakephp3开发环境</p><a id="more"></a><p>上节做到了用Docker构建环境并连接好了数据库，这节使用bake进行自动化页面的生成。</p><hr><h3 id="执行bake"><a href="#执行bake" class="headerlink" title="执行bake"></a>执行bake</h3><p>执行bake时要注意，执行commend的场所在bin路径下。执行前确保数据库里存在相应的表。</p><p>1.创建User表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// User Table</span><br><span class="line">CREATE TABLE `users` (</span><br><span class="line">    `id` int(11) unsigned NOT NULL AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">    `email` varchar(255) NOT NULL,</span><br><span class="line">    `password` varchar(255) NOT NULL,</span><br><span class="line">    `status` char(1) DEFAULT 0,</span><br><span class="line">    `created` DATETIME DEFAULT NULL,</span><br><span class="line">    `modified` DATETIME DEFAULT NULL</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;</span><br></pre></td></tr></table></figure><p>2.使用bake进行users全页面自动生成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"># bin/cake bake all users</span><br><span class="line">Bake All</span><br><span class="line">---------------------------------------------------------------</span><br><span class="line">One moment while associations are detected.</span><br><span class="line"> </span><br><span class="line">Baking table class for Users...</span><br><span class="line"> </span><br><span class="line">Creating file /var/www/html/cakephp3.com/src/Model/Table/UsersTable.php</span><br><span class="line">Wrote `/var/www/html/cakephp3.com/src/Model/Table/UsersTable.php`</span><br><span class="line">Deleted `/var/www/html/cakephp3.com/src/Model/Table/empty`</span><br><span class="line"> </span><br><span class="line">Baking entity class for User...</span><br><span class="line"> </span><br><span class="line">Creating file /var/www/html/cakephp3.com/src/Model/Entity/User.php</span><br><span class="line">Wrote `/var/www/html/cakephp3.com/src/Model/Entity/User.php`</span><br><span class="line">Deleted `/var/www/html/cakephp3.com/src/Model/Entity/empty`</span><br><span class="line"> </span><br><span class="line">Baking test fixture for Users...</span><br><span class="line"> </span><br><span class="line">Creating file /var/www/html/cakephp3.com/tests/Fixture/UsersFixture.php</span><br><span class="line">Wrote `/var/www/html/cakephp3.com/tests/Fixture/UsersFixture.php`</span><br><span class="line">Deleted `/var/www/html/cakephp3.com/tests/Fixture/empty`</span><br><span class="line">Bake is detecting possible fixtures...</span><br><span class="line"> </span><br><span class="line">Baking test case for App\Model\Table\UsersTable ...</span><br><span class="line"> </span><br><span class="line">Creating file /var/www/html/cakephp3.com/tests/TestCase/Model/Table/UsersTableTest.php</span><br><span class="line">Wrote `/var/www/html/cakephp3.com/tests/TestCase/Model/Table/UsersTableTest.php`</span><br><span class="line"> </span><br><span class="line">Baking controller class for Users...</span><br><span class="line"> </span><br><span class="line">Creating file /var/www/html/cakephp3.com/src/Controller/UsersController.php</span><br><span class="line">Wrote `/var/www/html/cakephp3.com/src/Controller/UsersController.php`</span><br><span class="line">Bake is detecting possible fixtures...</span><br><span class="line"> </span><br><span class="line">Baking test case for App\Controller\UsersController ...</span><br><span class="line"> </span><br><span class="line">Creating file /var/www/html/cakephp3.com/tests/TestCase/Controller/UsersControllerTest.php</span><br><span class="line">Wrote `/var/www/html/cakephp3.com/tests/TestCase/Controller/UsersControllerTest.php`</span><br><span class="line"> </span><br><span class="line">Baking `index` view template file...</span><br><span class="line"> </span><br><span class="line">Creating file /var/www/html/cakephp3.com/src/Template/Users/index.ctp</span><br><span class="line">Wrote `/var/www/html/cakephp3.com/src/Template/Users/index.ctp`</span><br><span class="line"> </span><br><span class="line">Baking `view` view template file...</span><br><span class="line"> </span><br><span class="line">Creating file /var/www/html/cakephp3.com/src/Template/Users/view.ctp</span><br><span class="line">Wrote `/var/www/html/cakephp3.com/src/Template/Users/view.ctp`</span><br><span class="line"> </span><br><span class="line">Baking `add` view template file...</span><br><span class="line"> </span><br><span class="line">Creating file /var/www/html/cakephp3.com/src/Template/Users/add.ctp</span><br><span class="line">Wrote `/var/www/html/cakephp3.com/src/Template/Users/add.ctp`</span><br><span class="line"> </span><br><span class="line">Baking `edit` view template file...</span><br><span class="line"> </span><br><span class="line">Creating file /var/www/html/cakephp3.com/src/Template/Users/edit.ctp</span><br><span class="line">Wrote `/var/www/html/cakephp3.com/src/Template/Users/edit.ctp`</span><br><span class="line">Bake All complete.</span><br></pre></td></tr></table></figure><p>3.bake自动生成的页面确认</p><p>此时user表为基准，生成了一系列users信息表（预览，添加，修改，删除）<br>user添加页面： https://开发环境的URL/users/add<br><br><br><img src="./1.png" style="width:500px"></p><hr><h3 id="自动生成的文件"><a href="#自动生成的文件" class="headerlink" title="自动生成的文件"></a>自动生成的文件</h3><p>1.Model/Table/UsersTable.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat src/Model/Table/UsersTable.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Model</span>\<span class="title">Table</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">use</span> <span class="title">Cake</span>\<span class="title">ORM</span>\<span class="title">Query</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Cake</span>\<span class="title">ORM</span>\<span class="title">RulesChecker</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Cake</span>\<span class="title">ORM</span>\<span class="title">Table</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Cake</span>\<span class="title">Validation</span>\<span class="title">Validator</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Users Model</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> \App\Model\Entity\User get($primaryKey, $options = [])</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> \App\Model\Entity\User newEntity($data = null, array $options = [])</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> \App\Model\Entity\User[] newEntities(array $data, array $options = [])</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> \App\Model\Entity\User|bool save(\Cake\Datasource\EntityInterface $entity, $options = [])</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> \App\Model\Entity\User patchEntity(\Cake\Datasource\EntityInterface $entity, array $data, array $options = [])</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> \App\Model\Entity\User[] patchEntities($entities, array $data, array $options = [])</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> \App\Model\Entity\User findOrCreate($search, callable $callback = null, $options = [])</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@mixin</span> \Cake\ORM\Behavior\TimestampBehavior</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UsersTable</span> <span class="keyword">extends</span> <span class="title">Table</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Initialize method</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $config The configuration for the Table.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">initialize</span><span class="params">(array $config)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::initialize($config);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">$this</span>-&gt;setTable(<span class="string">'users'</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;setDisplayField(<span class="string">'id'</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;setPrimaryKey(<span class="string">'id'</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">$this</span>-&gt;addBehavior(<span class="string">'Timestamp'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Default validation rules.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> \Cake\Validation\Validator $validator Validator instance.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> \Cake\Validation\Validator</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">validationDefault</span><span class="params">(Validator $validator)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $validator</span><br><span class="line">            -&gt;integer(<span class="string">'id'</span>)</span><br><span class="line">            -&gt;allowEmpty(<span class="string">'id'</span>, <span class="string">'create'</span>);</span><br><span class="line"> </span><br><span class="line">        $validator</span><br><span class="line">            -&gt;email(<span class="string">'email'</span>)</span><br><span class="line">            -&gt;requirePresence(<span class="string">'email'</span>, <span class="string">'create'</span>)</span><br><span class="line">            -&gt;notEmpty(<span class="string">'email'</span>);</span><br><span class="line"> </span><br><span class="line">        $validator</span><br><span class="line">            -&gt;scalar(<span class="string">'password'</span>)</span><br><span class="line">            -&gt;requirePresence(<span class="string">'password'</span>, <span class="string">'create'</span>)</span><br><span class="line">            -&gt;notEmpty(<span class="string">'password'</span>);</span><br><span class="line"> </span><br><span class="line">        $validator</span><br><span class="line">            -&gt;scalar(<span class="string">'status'</span>)</span><br><span class="line">            -&gt;allowEmpty(<span class="string">'status'</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> $validator;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a rules checker object that will be used for validating</span></span><br><span class="line"><span class="comment">     * application integrity.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> \Cake\ORM\RulesChecker $rules The rules object to be modified.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> \Cake\ORM\RulesChecker</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">buildRules</span><span class="params">(RulesChecker $rules)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $rules-&gt;add($rules-&gt;isUnique([<span class="string">'email'</span>]));</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> $rules;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>2.Model/Entity/User.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat src/Model/Entity/User.php </span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Model</span>\<span class="title">Entity</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">use</span> <span class="title">Cake</span>\<span class="title">ORM</span>\<span class="title">Entity</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * User Entity</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@property</span> int $id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@property</span> string $email</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@property</span> string $password</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@property</span> string $status</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@property</span> \Cake\I18n\FrozenTime $created</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@property</span> \Cake\I18n\FrozenTime $modified</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Entity</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Fields that can be mass assigned using newEntity() or patchEntity().</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Note that when '*' is set to true, this allows all unspecified fields to</span></span><br><span class="line"><span class="comment">     * be mass assigned. For security purposes, it is advised to set '*' to false</span></span><br><span class="line"><span class="comment">     * (or remove it), and explicitly make individual fields accessible as needed.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> $_accessible = [</span><br><span class="line">        <span class="string">'email'</span> =&gt; <span class="keyword">true</span>,</span><br><span class="line">        <span class="string">'password'</span> =&gt; <span class="keyword">true</span>,</span><br><span class="line">        <span class="string">'status'</span> =&gt; <span class="keyword">true</span>,</span><br><span class="line">        <span class="string">'created'</span> =&gt; <span class="keyword">true</span>,</span><br><span class="line">        <span class="string">'modified'</span> =&gt; <span class="keyword">true</span></span><br><span class="line">    ];</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Fields that are excluded from JSON versions of the entity.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> $_hidden = [</span><br><span class="line">        <span class="string">'password'</span></span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>3.Template/Users/index.ctp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat src/Template/Users/index.ctp </span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@var</span> \App\View\AppView $this</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@var</span> \App\Model\Entity\User[]|\Cake\Collection\CollectionInterface $users</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;nav class="large-3 medium-4 columns" id="actions-sidebar"&gt;</span><br><span class="line">    &lt;ul class="side-nav"&gt;</span><br><span class="line">        &lt;li class="heading"&gt;&lt;?= __('Actions') ?&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;<span class="meta">&lt;?</span>= <span class="keyword">$this</span>-&gt;Html-&gt;link(__(<span class="string">'New User'</span>), [<span class="string">'action'</span> =&gt; <span class="string">'add'</span>]) <span class="meta">?&gt;</span>&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/nav&gt;</span><br><span class="line">&lt;div class="users index large-9 medium-8 columns content"&gt;</span><br><span class="line">    &lt;h3&gt;<span class="meta">&lt;?</span>= __(<span class="string">'Users'</span>) <span class="meta">?&gt;</span>&lt;/h3&gt;</span><br><span class="line">    &lt;table cellpadding=<span class="string">"0"</span> cellspacing=<span class="string">"0"</span>&gt;</span><br><span class="line">        &lt;thead&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;th scope=<span class="string">"col"</span>&gt;<span class="meta">&lt;?</span>= <span class="keyword">$this</span>-&gt;Paginator-&gt;sort(<span class="string">'id'</span>) <span class="meta">?&gt;</span>&lt;/th&gt;</span><br><span class="line">                &lt;th scope=<span class="string">"col"</span>&gt;<span class="meta">&lt;?</span>= <span class="keyword">$this</span>-&gt;Paginator-&gt;sort(<span class="string">'email'</span>) <span class="meta">?&gt;</span>&lt;/th&gt;</span><br><span class="line">                &lt;th scope=<span class="string">"col"</span>&gt;<span class="meta">&lt;?</span>= <span class="keyword">$this</span>-&gt;Paginator-&gt;sort(<span class="string">'password'</span>) <span class="meta">?&gt;</span>&lt;/th&gt;</span><br><span class="line">                &lt;th scope=<span class="string">"col"</span>&gt;<span class="meta">&lt;?</span>= <span class="keyword">$this</span>-&gt;Paginator-&gt;sort(<span class="string">'status'</span>) <span class="meta">?&gt;</span>&lt;/th&gt;</span><br><span class="line">                &lt;th scope=<span class="string">"col"</span>&gt;<span class="meta">&lt;?</span>= <span class="keyword">$this</span>-&gt;Paginator-&gt;sort(<span class="string">'created'</span>) <span class="meta">?&gt;</span>&lt;/th&gt;</span><br><span class="line">                &lt;th scope=<span class="string">"col"</span>&gt;<span class="meta">&lt;?</span>= <span class="keyword">$this</span>-&gt;Paginator-&gt;sort(<span class="string">'modified'</span>) <span class="meta">?&gt;</span>&lt;/th&gt;</span><br><span class="line">                &lt;th scope="col" class="actions"&gt;&lt;?= __('Actions') ?&gt;&lt;/th&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/thead&gt;</span><br><span class="line">        &lt;tbody&gt;</span><br><span class="line">            <span class="meta">&lt;?php</span> <span class="keyword">foreach</span> ($users <span class="keyword">as</span> $user): <span class="meta">?&gt;</span></span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;<span class="meta">&lt;?</span>= <span class="keyword">$this</span>-&gt;Number-&gt;format($user-&gt;id) <span class="meta">?&gt;</span>&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;<span class="meta">&lt;?</span>= h($user-&gt;email) <span class="meta">?&gt;</span>&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;<span class="meta">&lt;?</span>= h($user-&gt;password) <span class="meta">?&gt;</span>&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;<span class="meta">&lt;?</span>= h($user-&gt;status) <span class="meta">?&gt;</span>&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;<span class="meta">&lt;?</span>= h($user-&gt;created) <span class="meta">?&gt;</span>&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;<span class="meta">&lt;?</span>= h($user-&gt;modified) <span class="meta">?&gt;</span>&lt;/td&gt;</span><br><span class="line">                &lt;td class="actions"&gt;</span><br><span class="line">                    <span class="meta">&lt;?</span>= <span class="keyword">$this</span>-&gt;Html-&gt;link(__(<span class="string">'View'</span>), [<span class="string">'action'</span> =&gt; <span class="string">'view'</span>, $user-&gt;id]) <span class="meta">?&gt;</span></span><br><span class="line">                    <span class="meta">&lt;?</span>= <span class="keyword">$this</span>-&gt;Html-&gt;link(__(<span class="string">'Edit'</span>), [<span class="string">'action'</span> =&gt; <span class="string">'edit'</span>, $user-&gt;id]) <span class="meta">?&gt;</span></span><br><span class="line">                    <span class="meta">&lt;?</span>= <span class="keyword">$this</span>-&gt;Form-&gt;postLink(__(<span class="string">'Delete'</span>), [<span class="string">'action'</span> =&gt; <span class="string">'delete'</span>, $user-&gt;id], [<span class="string">'confirm'</span> =&gt; __(<span class="string">'Are you sure you want to delete # &#123;0&#125;?'</span>, $user-&gt;id)]) <span class="meta">?&gt;</span></span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            <span class="meta">&lt;?php</span> <span class="keyword">endforeach</span>; <span class="meta">?&gt;</span></span><br><span class="line">        &lt;/tbody&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">    &lt;div class="paginator"&gt;</span><br><span class="line">        &lt;ul class="pagination"&gt;</span><br><span class="line">            <span class="meta">&lt;?</span>= <span class="keyword">$this</span>-&gt;Paginator-&gt;first(<span class="string">'&lt;&lt; '</span> . __(<span class="string">'first'</span>)) <span class="meta">?&gt;</span></span><br><span class="line">            <span class="meta">&lt;?</span>= <span class="keyword">$this</span>-&gt;Paginator-&gt;prev(<span class="string">'&lt; '</span> . __(<span class="string">'previous'</span>)) <span class="meta">?&gt;</span></span><br><span class="line">            <span class="meta">&lt;?</span>= <span class="keyword">$this</span>-&gt;Paginator-&gt;numbers() <span class="meta">?&gt;</span></span><br><span class="line">            <span class="meta">&lt;?</span>= <span class="keyword">$this</span>-&gt;Paginator-&gt;next(__(<span class="string">'next'</span>) . <span class="string">' &gt;'</span>) <span class="meta">?&gt;</span></span><br><span class="line">            <span class="meta">&lt;?</span>= <span class="keyword">$this</span>-&gt;Paginator-&gt;last(__(<span class="string">'last'</span>) . <span class="string">' &gt;&gt;'</span>) <span class="meta">?&gt;</span></span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        &lt;p&gt;<span class="meta">&lt;?</span>= <span class="keyword">$this</span>-&gt;Paginator-&gt;counter([<span class="string">'format'</span> =&gt; __(<span class="string">'Page &#123;&#123;page&#125;&#125; of &#123;&#123;pages&#125;&#125;, showing &#123;&#123;current&#125;&#125; record(s) out of &#123;&#123;count&#125;&#125; total'</span>)]) <span class="meta">?&gt;</span>&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><hr><p>4.Controller/UsersController.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat src/Controller/UsersController.php </span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Controller</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Controller</span>\<span class="title">AppController</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Users Controller</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@property</span> \App\Model\Table\UsersTable $Users</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> \App\Model\Entity\User[] paginate($object = null, array $settings = [])</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UsersController</span> <span class="keyword">extends</span> <span class="title">AppController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Index method</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> \Cake\Http\Response|void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $users = <span class="keyword">$this</span>-&gt;paginate(<span class="keyword">$this</span>-&gt;Users);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">$this</span>-&gt;set(compact(<span class="string">'users'</span>));</span><br><span class="line">        <span class="keyword">$this</span>-&gt;set(<span class="string">'_serialize'</span>, [<span class="string">'users'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * View method</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string|null $id User id.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> \Cake\Http\Response|void</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> \Cake\Datasource\Exception\RecordNotFoundException When record not found.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">view</span><span class="params">($id = null)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $user = <span class="keyword">$this</span>-&gt;Users-&gt;get($id, [</span><br><span class="line">            <span class="string">'contain'</span> =&gt; []</span><br><span class="line">        ]);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">$this</span>-&gt;set(<span class="string">'user'</span>, $user);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;set(<span class="string">'_serialize'</span>, [<span class="string">'user'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Add method</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> \Cake\Http\Response|null Redirects on successful add, renders view otherwise.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $user = <span class="keyword">$this</span>-&gt;Users-&gt;newEntity();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;request-&gt;is(<span class="string">'post'</span>)) &#123;</span><br><span class="line">            $user = <span class="keyword">$this</span>-&gt;Users-&gt;patchEntity($user, <span class="keyword">$this</span>-&gt;request-&gt;getData());</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;Users-&gt;save($user)) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;Flash-&gt;success(__(<span class="string">'The user has been saved.'</span>));</span><br><span class="line"> </span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;redirect([<span class="string">'action'</span> =&gt; <span class="string">'index'</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;Flash-&gt;error(__(<span class="string">'The user could not be saved. Please, try again.'</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;set(compact(<span class="string">'user'</span>));</span><br><span class="line">        <span class="keyword">$this</span>-&gt;set(<span class="string">'_serialize'</span>, [<span class="string">'user'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Edit method</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string|null $id User id.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> \Cake\Network\Exception\NotFoundException When record not found.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">edit</span><span class="params">($id = null)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $user = <span class="keyword">$this</span>-&gt;Users-&gt;get($id, [</span><br><span class="line">            <span class="string">'contain'</span> =&gt; []</span><br><span class="line">        ]);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;request-&gt;is([<span class="string">'patch'</span>, <span class="string">'post'</span>, <span class="string">'put'</span>])) &#123;</span><br><span class="line">            $user = <span class="keyword">$this</span>-&gt;Users-&gt;patchEntity($user, <span class="keyword">$this</span>-&gt;request-&gt;getData());</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;Users-&gt;save($user)) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;Flash-&gt;success(__(<span class="string">'The user has been saved.'</span>));</span><br><span class="line"> </span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;redirect([<span class="string">'action'</span> =&gt; <span class="string">'index'</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;Flash-&gt;error(__(<span class="string">'The user could not be saved. Please, try again.'</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;set(compact(<span class="string">'user'</span>));</span><br><span class="line">        <span class="keyword">$this</span>-&gt;set(<span class="string">'_serialize'</span>, [<span class="string">'user'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Delete method</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string|null $id User id.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> \Cake\Http\Response|null Redirects to index.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> \Cake\Datasource\Exception\RecordNotFoundException When record not found.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">delete</span><span class="params">($id = null)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;request-&gt;allowMethod([<span class="string">'post'</span>, <span class="string">'delete'</span>]);</span><br><span class="line">        $user = <span class="keyword">$this</span>-&gt;Users-&gt;get($id);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;Users-&gt;delete($user)) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;Flash-&gt;success(__(<span class="string">'The user has been deleted.'</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;Flash-&gt;error(__(<span class="string">'The user could not be deleted. Please, try again.'</span>));</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;redirect([<span class="string">'action'</span> =&gt; <span class="string">'index'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;上节回顾&quot;&gt;&lt;a href=&quot;#上节回顾&quot; class=&quot;headerlink&quot; title=&quot;上节回顾&quot;&gt;&lt;/a&gt;上节回顾&lt;/h3&gt;&lt;p&gt;使用Docker配置Cakephp3开发环境&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="Docker" scheme="https://kisky3.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>使用Docker进行Cakephp3开发环境搭建</title>
    <link href="https://kisky3.github.io/2019/04/03/%E4%BD%BF%E7%94%A8Docker%E8%BF%9B%E8%A1%8CCakephp3%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://kisky3.github.io/2019/04/03/使用Docker进行Cakephp3开发环境搭建/</id>
    <published>2019-04-03T10:45:29.000Z</published>
    <updated>2019-06-25T11:01:39.161Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用Docker构建"><a href="#使用Docker构建" class="headerlink" title="使用Docker构建"></a>使用Docker构建</h3><p>本次使用Github公开的Dockerfile，利用docker-compose建立container.</p><a id="more"></a><p>使用的image是php:7-fpm-alpine</p><p><a href="https://github.com/matayoshi/docker_cakephp3_tutorial" target="_blank" rel="noopener">参照连接</a></p><p>1.首先将上面的克隆到本地home</p><img src="./1.png" style="width:500px"><p>2.然后使用docker-compose命令进行构建</p><img src="./2.png" style="width:500px">build的时候如果nginx存在的话会被跳过，需要确认的是这三个mysql、phpfpm、nginx有没有build成功。<p>3.然后创建Container</p><img src="./3.png" style="width:500px"><p>4.确认是否创建成功</p><img src="./4.png" style="width:500px"><p>5.启动Container，同时启动nginx服务器</p><img src="./5.png" style="width:500px"><p>注意：如果之前有创建过Container，并存在nginx container的时候，端口号重复所以会出现错误。此时应该停止Container然后再重复以上步骤。</p><p>6.然后Cakephp的composer装入phpfpm Container并安装。同时完成项目的创建。</p><img src="./6.png" style="width:500px"><p>7.安装和项目构建完成后，退出Container</p><p>8.启动服务器，就能看到确认画面了！</p><img src="./7.png" style="width:500px"><p>如果服务器版本不对则可能出现错误。此时需要brew在本地进行安装。</p><img src="./9.png" style="width:500px"><p>因为版本不同安装的东西也不同所以要进入Container里对php的版本进行确认。</p><img src="./10.png" style="width:500px"><p>版本为7.18，所以要安装php71-intl。</p><img src="./11.png" style="width:500px"><p>再启动服务器就能看到启动画面了。</p><p>通过此链接确认画面 <a href="http://localhost:8765/" target="_blank" rel="noopener">http://localhost:8765/</a></p><img src="./8.png" style="width:500px"><hr><h3 id="数据库连接"><a href="#数据库连接" class="headerlink" title="数据库连接"></a>数据库连接</h3><p>有时数据库无法连接上，则采用下面的方法进行确认：</p><h4 id="本地数据库连接方法："><a href="#本地数据库连接方法：" class="headerlink" title="本地数据库连接方法："></a>本地数据库连接方法：</h4><p>1.确认启动中的Container</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps</span><br></pre></td></tr></table></figure><p> 2.找到启动中的mysql Container<br>确认到host为127.0.0.1,port为3306</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">259d8b05f8ec  mysql:5.6  ... 127.0.0.1:3306-&gt;3306/tcp</span><br></pre></td></tr></table></figure><p>3.修改参数</p><p>cakephp的app.php的database改成「localhost」-&gt; 「127.0.0.1」<br>docker-compose.yml里的database的port改成相应的3306</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">services:</span><br><span class="line">  mysql:</span><br><span class="line">    restart: always</span><br><span class="line">    build: ./data/mysql/</span><br><span class="line">    volumes:</span><br><span class="line">      - <span class="string">"./data/mysql/db:/var/lib/mysql"</span></span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_ROOT_PASSWORD: password</span><br><span class="line">      MYSQL_USER: my_app</span><br><span class="line">      MYSQL_PASSWORD: secret</span><br><span class="line">      MYSQL_DATABASE: my_app</span><br><span class="line">      TZ: <span class="string">"Asia/Tokyo"</span></span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">"3306:3306"</span> </span><br><span class="line">  nginx:</span><br><span class="line">    restart: always</span><br><span class="line"></span><br><span class="line">    ~~~~~~~~~~~~~~~</span><br></pre></td></tr></table></figure><p>4.重新启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose down</span><br><span class="line">$ docker-compose up -d</span><br></pre></td></tr></table></figure><hr><h4 id="已存在数据库连接方法："><a href="#已存在数据库连接方法：" class="headerlink" title="已存在数据库连接方法："></a>已存在数据库连接方法：</h4><p>1.修改以下文件</p><p>app.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;host&apos; =&gt; &apos;xxxxx&apos;(你的数据库host),</span><br></pre></td></tr></table></figure><p>docker-compose.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">environment:</span><br><span class="line">      MYSQL_ROOT_PASSWORD: xxxx(你的数据库的密码)</span><br><span class="line">      MYSQL_USER: xxxx（你的登陆用户名）</span><br><span class="line">      MYSQL_PASSWORD: xxxx(你的数据库的密码)</span><br><span class="line">      MYSQL_DATABASE: xxxx（你的数据库名字）</span><br><span class="line">      TZ: &quot;Asia/Tokyo&quot;</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;3306:3306&quot;</span><br></pre></td></tr></table></figure><p>2.进入mysql Container，确认是否已经连接上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mysqlコンテナ名 sh</span><br></pre></td></tr></table></figure><p>3.重新启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose down</span><br><span class="line">$ docker-compose up -d</span><br></pre></td></tr></table></figure><hr><h4 id="途中可能会出现下面的问题"><a href="#途中可能会出现下面的问题" class="headerlink" title="途中可能会出现下面的问题"></a>途中可能会出现下面的问题</h4><h5 id="问题1"><a href="#问题1" class="headerlink" title="问题1:"></a>问题1:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ brew install homebrew/php/php71-intl</span><br><span class="line">Updating Homebrew...</span><br><span class="line">Error: homebrew/php was deprecated. This tap is now empty as all its formulae were migrated.</span><br></pre></td></tr></table></figure><p>解决方法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># Save all old configurations, so the new packaes can recreate their versions -- eases the migration</span><br><span class="line">mv /usr/local/etc/php $HOME/old-brew-php</span><br><span class="line"># Uninstall ALL php related Packages (most of them homebrew/php related)</span><br><span class="line">brew list | grep php | xargs brew uninstall --force</span><br><span class="line"># Remove deprecated tap</span><br><span class="line">brew untap homebrew/php</span><br><span class="line"># Clean cache</span><br><span class="line">brew cleanup</span><br><span class="line"># Ensure latest brew repo HEAD</span><br><span class="line">brew update</span><br><span class="line"># Install latest php (php 7.2)</span><br><span class="line">brew install php</span><br><span class="line">pecl install xdebug</span><br><span class="line"># Now copy &amp; paste specific conf.d from your old-brew-php version if needed</span><br><span class="line"># after that you may dispose of the old-brew-php folder</span><br></pre></td></tr></table></figure><p>使用下面进行确认</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">brew list | grep php:</span><br><span class="line"></span><br><span class="line">php php71</span><br><span class="line"></span><br><span class="line">brew tap:</span><br><span class="line"></span><br><span class="line">homebrew/bundle homebrew/core homebrew/dupes homebrew/php homebrew/services homebrew/versions</span><br></pre></td></tr></table></figure><p>然后再安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install php@7.1</span><br></pre></td></tr></table></figure><p>最后composer install再启动服务器就好了</p><h5 id="问题2"><a href="#问题2" class="headerlink" title="问题2:"></a>问题2:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E: Failed to fetch http://deb.debian.org/debian/dists/stretch/main/binary-amd64/Packages  Error writing to output file - write (28: No space left on device) Error writing to file - write (28: No space left on device)</span><br></pre></td></tr></table></figure><p>解决方法：<br>空间不足无法启动的情况，可以将所有的Container和Image都删除，再启动</p><p>删除所有的Container</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f $(docker ps -aq)</span><br></pre></td></tr></table></figure><p>删除所有的Images</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi -f $(docker images -q)</span><br></pre></td></tr></table></figure><p>删除所有的docker volume</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume rm -f $(docker volume ls -q)</span><br></pre></td></tr></table></figure><p>重新启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose down</span><br><span class="line">$ docker-compose up -d</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;使用Docker构建&quot;&gt;&lt;a href=&quot;#使用Docker构建&quot; class=&quot;headerlink&quot; title=&quot;使用Docker构建&quot;&gt;&lt;/a&gt;使用Docker构建&lt;/h3&gt;&lt;p&gt;本次使用Github公开的Dockerfile，利用docker-compose建立container.&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="Docker" scheme="https://kisky3.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>JS-DOM元素以及DOM元素操作常用API</title>
    <link href="https://kisky3.github.io/2019/03/22/JS-DOM%E5%85%83%E7%B4%A0%E4%BB%A5%E5%8F%8ADOM%E5%85%83%E7%B4%A0%E6%93%8D%E4%BD%9C%E5%B8%B8%E7%94%A8API/"/>
    <id>https://kisky3.github.io/2019/03/22/JS-DOM元素以及DOM元素操作常用API/</id>
    <published>2019-03-22T10:36:45.000Z</published>
    <updated>2019-06-25T10:42:58.892Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是DOM"><a href="#什么是DOM" class="headerlink" title="什么是DOM"></a>什么是DOM</h3><p>文档对象模型（DOM）是HTML和XML文档的编程借口。</p><a id="more"></a><p>在HTML里我们可以看到很多可折叠的标签。Js可以选择这些页面上对应的文档元素然后进行操作它，这些文档是对象，有相应的属性和方法。<br>所以称为文档对象模型。相当于把文档对象化，之后可以用Js进行对象的操作。<br>要改变页面的某个东西，Js就需要获得对HTML文档中所有元素进行访问的入口。<br>这个入口连同对HTML元素进行添加，移动，改变或移除的方法和属性，都是通过DOM来获得的。</p><img src="./1.png" style="500px"><hr><h3 id="DOM获取元素的方式"><a href="#DOM获取元素的方式" class="headerlink" title="DOM获取元素的方式"></a>DOM获取元素的方式</h3><ul><li><p>document 对象<br>每个载入浏览器的HTML文档都会成为document对象。<br>document对象包含了文档的基本信息，我们可以通过JavaScript对HTML页面中的所有元素进行访问、修改。</p></li><li><p>Element<br>除了document对象，在DOM中最常用的就是Element对象了，Element对象表示HTML元素。</p></li></ul><p>Element 对象可以拥有类型为元素节点、文本节点、注释节点的子节点，DOM提供了一系列的方法可以进行元素的增、删、改、查操作</p><hr><h3 id="DOM元素选取常用API"><a href="#DOM元素选取常用API" class="headerlink" title="DOM元素选取常用API"></a>DOM元素选取常用API</h3><p>1.getElementById()</p><p>2.getElementsByClassName()</p><p>3.getElementsByTagName()</p><p>4.getElementsByName()</p><p>5.querySelector()</p><p>querySelector方法返回匹配指定的CSS选择器的元素节点。如果有多个节点满足匹配条件，则返回第一个匹配的节点。如果没有发现匹配的节点，则返回null。<br>可以完成getElementById和getElementsByTagName的工作</p><p>6.querySelectorAll()</p><p>querySelectorAll方法返回匹配指定的CSS选择器的所有节点，返回的是NodeList类型的对象。NodeList对象不是动态集合，所以元素节点的变化无法实时反映在返回结果中。<br>str = document.querySelectorAll(selectors);<br>querySelectorAll方法的参数，可以是逗号分隔的多个CSS选择器，返回所有匹配其中一个选择器的元素。</p><hr><h3 id="创建和添加DOM元素"><a href="#创建和添加DOM元素" class="headerlink" title="创建和添加DOM元素"></a>创建和添加DOM元素</h3><h4 id="创建元素"><a href="#创建元素" class="headerlink" title="创建元素:"></a>创建元素:</h4><p>用createElement()来创建元素节点，如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>)</span><br></pre></td></tr></table></figure><p>用creatTextNode()来创建文本节点，如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> text = <span class="built_in">document</span>.createTextNode(<span class="string">"hello"</span>)</span><br></pre></td></tr></table></figure><p>用createDocumentFragment()生成一个Dom片段，不属在文档流中,如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> docFragment = <span class="built_in">document</span>.createDocumentFragment();</span><br></pre></td></tr></table></figure><h4 id="添加元素："><a href="#添加元素：" class="headerlink" title="添加元素："></a>添加元素：</h4><p>用appendChild()，在元素末尾添加子元素，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>)</span><br><span class="line"><span class="keyword">var</span> text = <span class="built_in">document</span>.createTextNode(<span class="string">"hello"</span>)</span><br><span class="line">div.appendChild(text)</span><br></pre></td></tr></table></figure><p>如需向 HTML DOM 添加新元素，必须首先创建该元素（元素节点），然后向一个已存在的元素追加该元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p1"</span>&gt;</span>这是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p2"</span>&gt;</span>这是另一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 这段代码创建新的 &lt;p&gt; 元素：</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> para=<span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">// 如需向 &lt;p&gt; 元素添加文本，您必须首先创建文本节点。这段代码创建了一个文本节点：</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> node=<span class="built_in">document</span>.createTextNode(<span class="string">"这是新段落。"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">// 然后向 &lt;p&gt; 元素追加这个文本节点：</span></span></span><br><span class="line">para.appendChild(node);</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">// 最后您必须向一个已有的元素追加这个新元素。这段代码找到一个已有的元素：</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> element=<span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">// 这段代码向这个已有的元素追加新元素：</span></span></span><br><span class="line">element.appendChild(para);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是DOM&quot;&gt;&lt;a href=&quot;#什么是DOM&quot; class=&quot;headerlink&quot; title=&quot;什么是DOM&quot;&gt;&lt;/a&gt;什么是DOM&lt;/h3&gt;&lt;p&gt;文档对象模型（DOM）是HTML和XML文档的编程借口。&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="JS" scheme="https://kisky3.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS正则表达式</title>
    <link href="https://kisky3.github.io/2019/03/16/JS%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://kisky3.github.io/2019/03/16/JS正则表达式/</id>
    <published>2019-03-16T10:23:28.000Z</published>
    <updated>2019-06-25T10:36:16.989Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是JS正则表达式"><a href="#什么是JS正则表达式" class="headerlink" title="什么是JS正则表达式"></a>什么是JS正则表达式</h3><p>正则表达式是计算机科学的一个概念，正则表达式使用单个字符串来描述，匹配一系列符合某个句法规则的字符串。</p><a id="more"></a><p>在很多文本编辑器里，正则表达式常被用来检索替换某些符合某个模式的文本。</p><h3 id="正则表达式的创建"><a href="#正则表达式的创建" class="headerlink" title="正则表达式的创建"></a>正则表达式的创建</h3><p>1.构造函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var reg = new RegExp(&apos;&lt;%[^%]+%&gt;&apos;,&apos;g&apos;);</span><br></pre></td></tr></table></figure><p>2.字面量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var reg =/&lt;%[^%]%&gt;/g;</span><br></pre></td></tr></table></figure><p>最后的g代表全局搜索，不添加的画搜索到第一个结果停止搜索</p><hr><h3 id="预定义类"><a href="#预定义类" class="headerlink" title="预定义类"></a>预定义类</h3><table><thead><tr><th>字符</th><th>等价类</th><th>含义</th></tr></thead><tbody><tr><td>.</td><td>[^\r\n]</td><td>除了回车符和换行符之外的所有字符</td></tr><tr><td>\d</td><td>[0-9]</td><td>数字字符</td></tr><tr><td>\D</td><td>[^0-9]</td><td>非数字字符</td></tr><tr><td>\s</td><td>[\t\n\x0B\f\r]</td><td>空白符</td></tr><tr><td>\S</td><td>[^\t\n\x0B\f\r]</td><td>非空白符</td></tr><tr><td>\w</td><td>[a-zA-Z_0-9]</td><td>单词字符，字母，数字下划线</td></tr><tr><td>\W</td><td>[^a-zA-Z_0-9]</td><td>非单词字符</td></tr></tbody></table><hr><h3 id="边界"><a href="#边界" class="headerlink" title="边界"></a>边界</h3><p>正则表达式还提供里几个常用的边界匹配字符串</p><table><thead><tr><th>字符</th><th>含义</th></tr></thead><tbody><tr><td>^</td><td>以xxx开头</td></tr><tr><td>$</td><td>以xxx结尾</td></tr><tr><td>\b</td><td>单词边界</td></tr><tr><td>\B</td><td>非单词边界</td></tr></tbody></table><hr><h3 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h3><p>正则表达式还提供里几个常用的边界匹配字符串</p><table><thead><tr><th>字符</th><th>含义</th></tr></thead><tbody><tr><td>?</td><td>出现零次或一次（最多出现一次）</td></tr><tr><td>+</td><td>出现一次或多次（至少出现一次）</td></tr><tr><td>*</td><td>出现零次或多次（任意次）</td></tr><tr><td>{n}</td><td>出现n次</td></tr><tr><td>{n，m}</td><td>出现n到m次</td></tr><tr><td>{n，}</td><td>至少出现n次</td></tr></tbody></table><hr><h3 id="前瞻"><a href="#前瞻" class="headerlink" title="前瞻"></a>前瞻</h3><table><thead><tr><th>字符</th><th>含义</th></tr></thead><tbody><tr><td>exp1(?=exp2)</td><td>匹配后面是exp2的exp1</td></tr><tr><td>exp1(?！=exp2)</td><td>匹配后面不是exp2的exp1</td></tr></tbody></table><hr><h3 id="贪婪模式与非贪婪模式"><a href="#贪婪模式与非贪婪模式" class="headerlink" title="贪婪模式与非贪婪模式"></a>贪婪模式与非贪婪模式</h3><h4 id="贪婪模式"><a href="#贪婪模式" class="headerlink" title="贪婪模式"></a>贪婪模式</h4><p>在贪婪模式下（一般为默认模式），正则引擎尽可能多的重复匹配字符<br>也就是匹配时先忽略下一个条件，优先以当前条件进行匹配，完成当前条件之后才开始回溯以下一条件进行匹配</p><h4 id="非贪婪模式"><a href="#非贪婪模式" class="headerlink" title="非贪婪模式"></a>非贪婪模式</h4><p>非贪婪模式和贪婪模式相反，可通过在代表适量的表示符后放置？来开启非贪婪模式<br>如？，+？甚至是？？？，<br>非贪婪模式是不只看当前条件还看下一条件进行检索，正则引擎尝试用最小可能的重复次数来进行匹配</p><p>例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'a "witch" and her "broom" is one'</span>;</span><br><span class="line"> str.match( <span class="regexp">/".*"/g</span>);</span><br></pre></td></tr></table></figure><p>在贪婪模式下，匹配到 “witch” and her “broom” 一个字符串</p><p>而在非贪婪模式下匹配到的是”witch”和”broom”</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是JS正则表达式&quot;&gt;&lt;a href=&quot;#什么是JS正则表达式&quot; class=&quot;headerlink&quot; title=&quot;什么是JS正则表达式&quot;&gt;&lt;/a&gt;什么是JS正则表达式&lt;/h3&gt;&lt;p&gt;正则表达式是计算机科学的一个概念，正则表达式使用单个字符串来描述，匹配一系列符合某个句法规则的字符串。&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="JS" scheme="https://kisky3.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS立即执行函数表达式</title>
    <link href="https://kisky3.github.io/2019/03/02/JS%E7%AB%8B%E5%8D%B3%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://kisky3.github.io/2019/03/02/JS立即执行函数表达式/</id>
    <published>2019-03-02T10:13:39.000Z</published>
    <updated>2019-06-25T10:19:40.936Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是JS作用域"><a href="#什么是JS作用域" class="headerlink" title="什么是JS作用域"></a>什么是JS作用域</h3><p>JS作用域表示变量或函数起作用的区域，指代了它们在什么样的上下文中执行，亦即上下文执行环境。</p><a id="more"></a><p>Javascript 的作用域只有两种：全局作用域和本地作用域，本地作用域是按照函数来区分的。</p><h4 id="全局变量："><a href="#全局变量：" class="headerlink" title="全局变量："></a>全局变量：</h4><p>声明在函数外部的变量，在代码中任何地方都能访问到的对象拥有全局作用域（所有没有var直接赋值的变量都属于全局变量）</p><p>1.最外层函数和在最外层函数外面定义的变量拥有全局作用域</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> authorName=<span class="string">"Dream"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> blogName=<span class="string">"blogName"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">innerSay</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(blogName);</span><br><span class="line">    &#125;</span><br><span class="line">    innerSay();</span><br><span class="line">&#125;</span><br><span class="line">alert(authorName); <span class="comment">//Dream</span></span><br><span class="line">alert(blogName); <span class="comment">//脚本错误</span></span><br><span class="line">doSomething(); <span class="comment">//blogName</span></span><br><span class="line">innerSay() <span class="comment">//脚本错误</span></span><br></pre></td></tr></table></figure><p>2.所有末定义直接赋值的变量自动声明为拥有全局作用域<br>例：变量blogName拥有全局作用域，而authorName在函数外部无法访问到。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> authorName=<span class="string">"Dream"</span>;</span><br><span class="line">    blogName=<span class="string">"blogName"</span>;</span><br><span class="line">    alert(authorName);</span><br><span class="line">&#125;</span><br><span class="line">doSomething(); <span class="comment">//Dream</span></span><br><span class="line">alert(blogName); <span class="comment">//blogName</span></span><br><span class="line">alert(authorName); <span class="comment">//脚本错误</span></span><br></pre></td></tr></table></figure><h4 id="局部变量（函数作用域）："><a href="#局部变量（函数作用域）：" class="headerlink" title="局部变量（函数作用域）："></a>局部变量（函数作用域）：</h4><p>声明在函数内部的变量，和全局作用域相反，局部作用域一般只在固定的代码片段内可访问到。<br>例：代码中的blogName和函数innerSay都只拥有局部作用域。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> blogName=<span class="string">"Dream"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">innerSay</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(blogName);</span><br><span class="line">    &#125;</span><br><span class="line">    innerSay();</span><br><span class="line">&#125;</span><br><span class="line">alert(blogName); <span class="comment">//脚本错误</span></span><br><span class="line">innerSay(); <span class="comment">//脚本错误</span></span><br></pre></td></tr></table></figure><hr><h3 id="什么是JS作用域链"><a href="#什么是JS作用域链" class="headerlink" title="什么是JS作用域链"></a>什么是JS作用域链</h3><p>每当执行一个函数就会进入一个新的作用域下，当使用一个变量时首先从自己的作用域找，如果找到就输出，如果没有再从自己的上层作用域找，也就是该函数声明的作用域。<br>这就是js的作用域链。</p><p>例：执行下面fn（）时输出结果为 2</p><ul><li>因为return fn3，所以执行fn3内的fn2，</li><li>首先从fn2的作用域内找变量a，</li><li>而fn2内没有声明变量a，所以从fn2的上层作用域，也就是声明fn2的fn1下找变量a，</li><li>在fn1下找到 var a = 2</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">4</span></span><br><span class="line">    fn2()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span></span><br><span class="line">  <span class="keyword">return</span> fn3</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fn = fn1()</span><br><span class="line">fn() <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><hr><h3 id="什么是JS立即执行函数"><a href="#什么是JS立即执行函数" class="headerlink" title="什么是JS立即执行函数"></a>什么是JS立即执行函数</h3><p>首先声明一个匿名函数 function(){alert(‘我是匿名函数’)}。然后在匿名函数后面接一对括号 ()，调用这个匿名函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="string">'我是匿名函数'</span>)&#125;)()</span><br></pre></td></tr></table></figure><p>用括号把函数包起来其实是为了兼容 JS 的语法。如果我们不加另一对括号，直接写成下面这样浏览器会报语法错误。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="string">'我是匿名函数'</span>)&#125;()</span><br></pre></td></tr></table></figure><p>立即执行函数只有一个作用：创建一个独立的作用域。<br>这个作用域里面的变量，外面访问不到（即避免「变量污染」）。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是JS作用域&quot;&gt;&lt;a href=&quot;#什么是JS作用域&quot; class=&quot;headerlink&quot; title=&quot;什么是JS作用域&quot;&gt;&lt;/a&gt;什么是JS作用域&lt;/h3&gt;&lt;p&gt;JS作用域表示变量或函数起作用的区域，指代了它们在什么样的上下文中执行，亦即上下文执行环境。&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="JS" scheme="https://kisky3.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS函数关于if-xx-和-a-b</title>
    <link href="https://kisky3.github.io/2019/02/26/JS%E5%87%BD%E6%95%B0%E5%85%B3%E4%BA%8Eif-xx-%E5%92%8C-a-b/"/>
    <id>https://kisky3.github.io/2019/02/26/JS函数关于if-xx-和-a-b/</id>
    <published>2019-02-26T09:35:02.000Z</published>
    <updated>2019-06-25T10:11:34.350Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JS函数-f-xx"><a href="#JS函数-f-xx" class="headerlink" title="JS函数:f(xx)"></a>JS函数:f(xx)</h3><p>JS对于括号里的表达式，会被强制转换成布尔类型</p><a id="more"></a><p>基本原理如下表：</p><table><thead><tr><th>type</th><th>result</th></tr></thead><tbody><tr><td>Undefined</td><td>false</td></tr><tr><td>Null</td><td>false</td></tr><tr><td>Boolean</td><td>直接判断</td></tr><tr><td>Number</td><td>+0，-0，或者NaN为false，其他为true</td></tr><tr><td>String</td><td>空字符串为false，其他都为true</td></tr><tr><td>Object</td><td>true</td></tr></tbody></table><hr><h3 id="JS函数：a-b"><a href="#JS函数：a-b" class="headerlink" title="JS函数：a==b"></a>JS函数：a==b</h3><p>JS对于a==b类型会进行变形比较，原理如下表：<br>基本上遇到数字以外的类型可以先考虑往数字上转型</p><table><thead><tr><th>x</th><th>y</th><th>结果</th></tr></thead><tbody><tr><td>null</td><td>undefined</td><td>true</td></tr><tr><td>Number</td><td>String</td><td>x == toNumber(y)</td></tr><tr><td>Boolean</td><td>(any)</td><td>toNumber(x) == y</td></tr><tr><td>Object</td><td>String or Number</td><td>toPrimitive(x) == y</td></tr><tr><td>otherwise</td><td>otherwise</td><td>false</td></tr></tbody></table><hr><h3 id="toNumber"><a href="#toNumber" class="headerlink" title="toNumber"></a>toNumber</h3><p>其他类型转换成数字用toNumber：</p><table><thead><tr><th>type</th><th>result</th></tr></thead><tbody><tr><td>Undefined</td><td>NaN</td></tr><tr><td>Null</td><td>0</td></tr><tr><td>Boolean</td><td>true -&gt; 1, false -&gt; 0</td></tr><tr><td>String</td><td>“abc” -&gt; NaN, “123” -&gt; 123</td></tr></tbody></table><hr><h3 id="toPrimitive"><a href="#toPrimitive" class="headerlink" title="toPrimitive"></a>toPrimitive</h3><p>对于Object类型，先尝试调用.v3alueOf方法获取结果。如果没定义，再尝试调用.toString方法获取结果。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;JS函数-f-xx&quot;&gt;&lt;a href=&quot;#JS函数-f-xx&quot; class=&quot;headerlink&quot; title=&quot;JS函数:f(xx)&quot;&gt;&lt;/a&gt;JS函数:f(xx)&lt;/h3&gt;&lt;p&gt;JS对于括号里的表达式，会被强制转换成布尔类型&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="JS" scheme="https://kisky3.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>关于浏览器渲染机制</title>
    <link href="https://kisky3.github.io/2019/02/23/%E5%85%B3%E4%BA%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E6%9C%BA%E5%88%B6/"/>
    <id>https://kisky3.github.io/2019/02/23/关于浏览器渲染机制/</id>
    <published>2019-02-23T09:03:58.000Z</published>
    <updated>2019-06-25T09:32:06.105Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>浏览器的内核是指支持浏览器运行的最核心的程序，分为两个部分的，一是渲染引擎，另一个是JS引擎。</p><a id="more"></a><p>渲染引擎在不同的浏览器中也不是都相同的。比如在 Firefox 中叫做 Gecko，在 Chrome 和 Safari 中都是基于 WebKit 开发的。</p><hr><h3 id="浏览器渲染步骤"><a href="#浏览器渲染步骤" class="headerlink" title="浏览器渲染步骤"></a>浏览器渲染步骤</h3><img src="./1.png" style="width:500px"><h4 id="1-解析HTML标签，构建DOM树"><a href="#1-解析HTML标签，构建DOM树" class="headerlink" title="1.解析HTML标签，构建DOM树"></a>1.解析HTML标签，构建DOM树</h4><p>浏览器会遵守一套步骤将HTML 文件转换为 DOM 树。宏观上，可以分为几个步骤：<br>字节数据 =&gt; 字符串 =&gt; Token =&gt; Node =&gt; DOM</p><p>比如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Web page parsing<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Web page parsing<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is an example Web page.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面这段HTML会解析成这样：<br><img src="./2.png" style="width:500px"></p><h4 id="2-解析CSS标签，构建CSSOM树"><a href="#2-解析CSS标签，构建CSSOM树" class="headerlink" title="2.解析CSS标签，构建CSSOM树"></a>2.解析CSS标签，构建CSSOM树</h4><p>DOM会捕获页面的内容，但浏览器还需要知道页面如何展示，所以需要构建CSSOM。<br>构建CSSOM的过程与构建DOM的过程非常相似，当浏览器接收到一段CSS，浏览器首先要做的是识别出Token，然后构建节点并生成CSSOM。<br>字节数据 =&gt; 字符串 =&gt; Token =&gt; Node =&gt; CSSOM</p><h4 id="3-把DOM和CSSOM组合成渲染树（reder-tree）"><a href="#3-把DOM和CSSOM组合成渲染树（reder-tree）" class="headerlink" title="3.把DOM和CSSOM组合成渲染树（reder tree）"></a>3.把DOM和CSSOM组合成渲染树（reder tree）</h4><p>当我们生成 DOM 树和 CSSOM 树以后，就需要将这两棵树组合为渲染树。然后在渲染树的基础上进行布局，计算每个节点的几何结构</p><img src="./3.png" style="width:500px"><h4 id="4-把每个节点绘制到屏幕上（painting）"><a href="#4-把每个节点绘制到屏幕上（painting）" class="headerlink" title="4. 把每个节点绘制到屏幕上（painting）"></a>4. 把每个节点绘制到屏幕上（painting）</h4><p>当浏览器生成渲染树以后，就会根据渲染树来进行布局（也可以叫做回流）。</p><p>这一阶段浏览器要做的事情是要弄清楚各个节点在页面中的确切位置和大小。通常这一行为也被称为“自动重排”。<br>布局流程的输出是一个“盒模型”，它会精确地捕获每个元素在视口内的确切位置和尺寸，所有相对测量值都将转换为屏幕上的绝对像素。<br>布局完成后，浏览器会立即发出“Paint Setup”和“Paint”事件，将渲染树转换成屏幕上的像素。</p><hr><h3 id="关于JS渲染"><a href="#关于JS渲染" class="headerlink" title="关于JS渲染"></a>关于JS渲染</h3><p>JavaScript的加载、解析与执行会阻塞DOM的构建，也就是说，在构建DOM时，HTML解析器若遇到了JavaScript，那么它会暂停构建DOM，将控制权移交给JavaScript引擎，等JavaScript引擎运行完毕，浏览器再从中断的地方恢复DOM构建。</p><p>也就是说，如果你想首屏渲染的越快，就越不应该在首屏就加载 JS 文件，这也是都建议将 script 标签放在 body 标签底部的原因。当然在当下，并不是说 script 标签必须放在底部，因为你可以给 script 标签添加 defer 或者 async 属性</p><p>JS文件不只是阻塞DOM的构建，它会导致CSSOM也阻塞DOM的构建。<br>因为JavaScript不只是可以改DOM，它还可以更改样式，也就是它可以更改CSSOM<br>原本DOM和CSSOM的构建是互不影响，井水不犯河水，但是一旦引入了JavaScript，CSSOM也开始阻塞DOM的构建，只有CSSOM构建完毕后，DOM再恢复DOM构建。</p><hr><h3 id="关于回流和重绘"><a href="#关于回流和重绘" class="headerlink" title="关于回流和重绘"></a>关于回流和重绘</h3><p>我们知道，当网页生成的时候，至少会渲染一次。在用户访问的过程中，还会不断重新渲染。重新渲染会重复上图中的第四步(回流)+第五步(重绘)或者只有第五个步(重绘)。</p><h4 id="repaint：重绘"><a href="#repaint：重绘" class="headerlink" title="repaint：重绘"></a>repaint：重绘</h4><p>页面元素不发生位置的变化，不需要重新计算所有元素的位置。比如说改变DOM的颜色等</p><h4 id="reflow：-回流"><a href="#reflow：-回流" class="headerlink" title="reflow： 回流"></a>reflow： 回流</h4><p>当我们增加，删除更新DOM元素的时候，元素自身位置发生变化，导致其余的元素位置也发生变化，导致页面必须重新计算的现象称为回流<br>比如</p><ul><li>添加或者删除可见的DOM元素；</li><li>元素尺寸改变——边距、填充、边框、宽度和高度</li><li>内容变化，比如用户在input框中输入文字</li><li>浏览器窗口尺寸改变——resize事件发生时</li><li>计算 offsetWidth 和 offsetHeight 属性</li><li>设置 style 属性的值</li><li>回流必定会发生重绘，重绘不一定会引发回流。</li><li>重绘和回流会在我们设置节点样式时频繁出现，同时也会很大程度上影响性能。回流所需的成本比重绘高的多，改变父节点里的子节点很可能会导致父节点的一系列回流。</li></ul><hr><h3 id="async和defer的作用是什么"><a href="#async和defer的作用是什么" class="headerlink" title="async和defer的作用是什么"></a>async和defer的作用是什么</h3><p>没有 defer 或 async，浏览器会立即加载并执行指定的脚本，也就是说不等待后续载入的文档元素，读到就加载并执行。</p><h4 id="异步下载"><a href="#异步下载" class="headerlink" title="(异步下载)"></a>(异步下载)</h4><p>async 属性表示异步执行引入的 JavaScript，与 defer 的区别在于，如果已经加载好，就会开始执行——无论此刻是 HTML 解析阶段还是 DOMContentLoaded 触发之后。</p><h4 id="延迟执行"><a href="#延迟执行" class="headerlink" title="(延迟执行)"></a>(延迟执行)</h4><p>defer 属性表示延迟执行引入的 JavaScript，即这段 JavaScript 加载时 HTML 并未停止解析，这两个过程是并行的。整个 document 解析完毕且 defer-script 也加载完成之后（这两件事情的顺序无关），会执行所有由 defer-script 加载的 JavaScript 代码，然后触发 DOMContentLoaded 事件。</p><p>defer 与相比普通 script，有两点区别：载入 JavaScript 文件时不阻塞 HTML 的解析，执行阶段被放到 HTML 标签解析完成之后。在加载多个JS脚本的时候，async是无顺序的加载，而defer是有顺序的加载。</p><hr><h3 id="关于白屏和-FOUC"><a href="#关于白屏和-FOUC" class="headerlink" title="关于白屏和 FOUC"></a>关于白屏和 FOUC</h3><p>由于浏览器的渲染机制不同，在渲染页面时会出现两种常见的不良现象—-白屏问题和FOUS（无样式内容闪烁）</p><h4 id="FOUC："><a href="#FOUC：" class="headerlink" title="FOUC："></a>FOUC：</h4><p>由于浏览器渲染机制（比如firefox），再CSS加载之前，先呈现了HTML，就会导致展示出无样式内容，然后样式突然呈现的现象；</p><h4 id="白屏："><a href="#白屏：" class="headerlink" title="白屏："></a>白屏：</h4><p>有些浏览器渲染机制（比如chrome）要先构建DOM树和CSSOM树，构建完成后再进行渲染，如果CSS部分放在HTML尾部，由于CSS未加载完成，浏览器迟迟未渲染，从而导致白屏；也可能是把js文件放在头部，脚本会阻塞后面内容的呈现，脚本会阻塞其后组件的下载，出现白屏问题。</p><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>浏览器工作流程：构建DOM -&gt; 构建CSSOM -&gt; 构建渲染树 -&gt; 布局 -&gt; 绘制。</p><p>CSSOM会阻塞渲染，只有当CSSOM构建完毕后才会进入下一个阶段构建渲染树。</p><p>通常情况下DOM和CSSOM是并行构建的，但是当浏览器遇到一个script标签时，DOM构建将暂停，直至脚本完成执行。但由于JavaScript可以修改CSSOM，所以需要等CSSOM构建完毕后再执行JS。</p><p>如果你想首屏渲染的越快，就越不应该在首屏就加载 JS 文件，建议将 script 标签放在 body 标签底部。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;浏览器的内核是指支持浏览器运行的最核心的程序，分为两个部分的，一是渲染引擎，另一个是JS引擎。&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="Browser" scheme="https://kisky3.github.io/tags/Browser/"/>
    
  </entry>
  
  <entry>
    <title>JS发展简史及ES6新特性</title>
    <link href="https://kisky3.github.io/2019/02/10/JS%E5%8F%91%E5%B1%95%E7%AE%80%E5%8F%B2/"/>
    <id>https://kisky3.github.io/2019/02/10/JS发展简史/</id>
    <published>2019-02-10T08:59:27.000Z</published>
    <updated>2019-06-25T09:02:51.224Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JS标准制定简史"><a href="#JS标准制定简史" class="headerlink" title="JS标准制定简史"></a>JS标准制定简史</h3><p>1995年，只花了10天时间 Brendan 就开发完成了当时被称作Mocha的初版 JavaScript 原型。</p><a id="more"></a><p>那时候的JS比较简陋，没有数组和字面量的对象的概念，所有的报错都只能通过丑陋的alert展示，缺乏异常处理机制，出错时很多运算的结果会是NaN或undefined。不过 Brendan 对 DOM 0 的描述及初版的JavaScript还是成为了最初的标准。</p><p>1995年9月，JavaScript也被包装为LiveScript一同面世。1995年12月，Netscape Navigator 2.0 beta3发布，LiveScript在这时被改名为JavaScript(当时这个商标为Sun公司所有，现在属甲骨文公司)。之后不久,网景推出了LiveWire，一种在其服务器（Netscape Enterprise Server）上的JavaScript实现1。</p><p>1996年，微软推出了JScript，同ie3捆绑发行,JScript在微软的IIS服务器上同样可用。</p><p>1996年开始,JS语言开始走上规范之路，由于当时Sun公司不愿意转让JavaScript这一商标，虽然微软愿意转让JScript这一商标,但却遭到其它公司成员的反对，因此这一语言的名字就成了我们熟悉的ECMAScript。</p><p>1997年6月ECMA-262的第一版发布，之后一年中，规范依据ISO / IEC 16262国际标准进行了改进，并由ISO认证机构大量审查，1997年6月ECMAScript规范正式发布第二版。</p><p>1999年12月，ES3也发布了，这一版的规范带来了正则表达式，switch，do/while,try/catch，Object#hasOwnProperty以及其它的一些改变，同时新增的大部分规范在网景的新版浏览器SpiderMonkey中也得以实现。<br>ES4标准的草案在之后不久就被TC39提出，这一草案直接影响了2000年中期的JScript,.NET等的开发，2006年Flash推出了ActionScript 3也深受其影响。</p><p>但是关于JavaScript语言该如何发展，当时的意见非常矛盾，这使规范制定的工作停滞不前。这在Web标准指定史上是一个非常尴尬且奇妙的时刻，当时微软掌握着主动权，但是它对规范的改进却没太大的兴趣。</p><p>两年后，随着火狐浏览器市场占有率不断增高，就职于 Mozilla 的 Brendan 迫使微软回到标准指定的议程中。2005年中期开始，TC39委员会又开始了例会。重新开始讨论起ES4，他们计划在ES4中引入模块系统，类，迭代器，生成器，解构，类型注释，适当的尾调用，新的数据类型和各种其他功能,由于这个工程的野心太大，ES4的制定因而被一而再的延期。</p><p>2007年，TC39委员会被迫分为两部分，一部分负责ES3的渐进加强版ES3.1标准的制定，另一部分则负责重新设计改动巨大的ES4标准。<br>2008年8月，ES3.1被认为是正确的选择，随后其更名为ES5， ES4也随之被废弃，不过值得庆幸的是 ES4 提出的很多新功能被融入到了 ES6 ，也有一些功能仍然在考虑之中，另一些则已被放弃，拒绝或撤回。兼容ES3.1 成为 ES4 标准提出的功能可能被采纳的前提。 2009年12月，ES3发布10周年后，第五版ECMAScript才得以发布。这个版本把十年来各浏览器中已有的普遍实践标准化了，新增了get<code>set</code>，改进了数组原型的函数式特征，原生支持了JSON的解析，提出了严格模式。 2011年6月，ES5标准再次修改并改进为 ISO/IEC 16262:2011标准 的第三版，并以ES5.1的名义正式发布。 2015年6月，也就是ES5.1发布的四年后，TC39公布了JS语言有史以来最大的更新 ES6， 其中包含了很多ES4中提出草案。</p><p>ES6的发布是JS标准制定历史上的一个重要里程碑。除了数十种引入注目的新功能，ES6 的发布也标志着 ECMAScript 标准将持续更新。</p><hr><h3 id="ES6中的新特性"><a href="#ES6中的新特性" class="headerlink" title="ES6中的新特性"></a>ES6中的新特性</h3><p>ES6改动非常大，这从规范的页数就可以看出，ES5.1 258页，ES6 566页。总的来说新增的规范可以划分为以下不同类别：</p><ul><li><p>语法糖</p></li><li><p>新机制</p></li><li><p>更好的语义化</p></li><li><p>更多内置的方法</p></li></ul><p>现存局限方法的非破坏性解决方案</p><p>语法糖是ES6所有改变中最重要的一块，class语法可简洁的构建对象实例，支持使用箭头函数，简写的对象属性方法，解构，剩余值，和拓展，等提供语义良好的编写程序的方法。</p><p>ES6为我们提供了几种控制异步代码流的机制：包括可靠的promises，表征一系列值的iterators，特殊的iterators–&gt; generators。基于这些新概念,ES2017还有了了async/await语法，让我们以同步的方式来书写异步代码。</p><p>ES6提供了一些新的内置类型来管理set和map,这些新类型不具有仅使用字符串键的限制</p><p>Proxy对象重新定义了我们通过JavaScript reflection可以做什么，Proxy对象类似于其它上下文中的代理。可以用以修改与JavaScript对象的任何交互，如定义、删除或访问属性。考虑到代理对象的工作机制，他们不能彻底通过ployfill实现，事实上相关的ployfill也是存在的，但是由于存在局限性使得他们在某些方面与规范有所不一致。</p><p>除此之外，ES6还在语言层面上为我们提供了模块系统,ES6对Number,Math,Array和string等都进行了更新，提供了新的api。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;JS标准制定简史&quot;&gt;&lt;a href=&quot;#JS标准制定简史&quot; class=&quot;headerlink&quot; title=&quot;JS标准制定简史&quot;&gt;&lt;/a&gt;JS标准制定简史&lt;/h3&gt;&lt;p&gt;1995年，只花了10天时间 Brendan 就开发完成了当时被称作Mocha的初版 JavaScript 原型。&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="JS" scheme="https://kisky3.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>CSS编码规范</title>
    <link href="https://kisky3.github.io/2019/01/22/CSS%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    <id>https://kisky3.github.io/2019/01/22/CSS编码规范/</id>
    <published>2019-01-22T08:44:59.000Z</published>
    <updated>2019-06-25T08:58:12.910Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h3><p>CSS作为网页样式的描述语言，在百度一直有着广泛的应用。本文档的目标是使CSS代码风格保持一致，容易被理解和被维护。</p><a id="more"></a><p>虽然本文档是针对CSS设计的，但是在使用各种CSS的预编译器(如less、sass、stylus等)时，适用的部分也应尽量遵循本文档的约定。</p><h3 id="2-代码风格"><a href="#2-代码风格" class="headerlink" title="2 代码风格"></a>2 代码风格</h3><h4 id="2-1-文件"><a href="#2-1-文件" class="headerlink" title="2.1 文件"></a>2.1 文件</h4><p>[建议] CSS 文件使用无 BOM 的 UTF-8 编码。<br>解释：</p><p>UTF-8 编码具有更广泛的适应性。BOM 在使用程序或工具处理文件时可能造成不必要的干扰。</p><h4 id="2-2-缩进"><a href="#2-2-缩进" class="headerlink" title="2.2 缩进"></a>2.2 缩进</h4><p>[强制] 使用 4 个空格做为一个缩进层级，不允许使用 2 个空格 或 tab 字符。</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.selector</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-空格"><a href="#2-3-空格" class="headerlink" title="2.3 空格"></a>2.3 空格</h4><p>[强制] 选择器 与 { 之间必须包含空格。<br>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.selector</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[强制] 属性名 与之后的 : 之间不允许包含空格， : 与 属性值 之间必须包含空格。<br>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">margin</span>: 0;</span><br></pre></td></tr></table></figure><p>[强制] 列表型属性值 书写在单行时，, 后必须跟一个空格。<br>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">font-family</span>: <span class="selector-tag">Arial</span>, <span class="selector-tag">sans-serif</span>;</span><br></pre></td></tr></table></figure><h4 id="2-4-行长度"><a href="#2-4-行长度" class="headerlink" title="2.4 行长度"></a>2.4 行长度</h4><p>[强制] 每行不得超过 120 个字符，除非单行不可分割。<br>解释：</p><p>常见不可分割的场景为URL超长。</p><p>[建议] 对于超长的样式，在样式值的 空格 处或 , 后换行，建议按逻辑分组。<br>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 不同属性值按逻辑分组 */</span></span><br><span class="line"><span class="selector-tag">background</span>:</span><br><span class="line">    <span class="selector-tag">transparent</span> <span class="selector-tag">url</span>(<span class="selector-tag">aVeryVeryVeryLongUrlIsPlacedHere</span>)</span><br><span class="line">    <span class="selector-tag">no-repeat</span> 0 0;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 可重复多次的属性，每次重复一行 */</span></span><br><span class="line"><span class="selector-tag">background-image</span>:</span><br><span class="line">    <span class="selector-tag">url</span>(<span class="selector-tag">aVeryVeryVeryLongUrlIsPlacedHere</span>)</span><br><span class="line">    <span class="selector-tag">url</span>(<span class="selector-tag">anotherVeryVeryVeryLongUrlIsPlacedHere</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 类似函数的属性值可以根据函数调用的缩进进行 */</span></span><br><span class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">-webkit-gradient</span>(</span><br><span class="line">    <span class="selector-tag">linear</span>,</span><br><span class="line">    <span class="selector-tag">left</span> <span class="selector-tag">bottom</span>,</span><br><span class="line">    <span class="selector-tag">left</span> <span class="selector-tag">top</span>,</span><br><span class="line">    <span class="selector-tag">color-stop</span>(0<span class="selector-class">.04</span>, <span class="selector-tag">rgb</span>(88,94,124)),</span><br><span class="line">    <span class="selector-tag">color-stop</span>(0<span class="selector-class">.52</span>, <span class="selector-tag">rgb</span>(115,123,162))</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="2-5-选择器"><a href="#2-5-选择器" class="headerlink" title="2.5 选择器"></a>2.5 选择器</h4><p>[强制] 当一个 rule 包含多个 selector 时，每个选择器声明必须独占一行。<br>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.post</span>,</span><br><span class="line"><span class="selector-class">.page</span>,</span><br><span class="line"><span class="selector-class">.comment</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.post</span>, <span class="selector-class">.page</span>, <span class="selector-class">.comment</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[强制] &gt;、+、~ 选择器的两边各保留一个空格。<br>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-tag">main</span> &gt; <span class="selector-tag">nav</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">label</span> + <span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#69C</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-tag">main</span>&gt;<span class="selector-tag">nav</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">label</span>+<span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:checked</span>~<span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#69C</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[强制] 属性选择器中的值必须用双引号包围。<br>解释：</p><p>不允许使用单引号，不允许不使用引号。</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-tag">article</span><span class="selector-attr">[character="juliet"]</span> &#123;</span><br><span class="line">    <span class="attribute">voice-family</span>: <span class="string">"Vivien Leigh"</span>, victoria, female</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-tag">article</span><span class="selector-attr">[character='juliet']</span> &#123;</span><br><span class="line">    <span class="attribute">voice-family</span>: <span class="string">"Vivien Leigh"</span>, victoria, female</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-6-属性"><a href="#2-6-属性" class="headerlink" title="2.6 属性"></a>2.6 属性</h4><p>[强制] 属性定义必须另起一行。</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.selector</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.selector</span> &#123; <span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">0</span>; &#125;</span><br><span class="line"><span class="selector-attr">[强制]</span> 属性定义后必须以分号结尾。</span><br><span class="line">示例：</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.selector</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.selector</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-通用"><a href="#3-通用" class="headerlink" title="3 通用"></a>3 通用</h3><h4 id="3-1-选择器"><a href="#3-1-选择器" class="headerlink" title="3.1 选择器"></a>3.1 选择器</h4><p>[强制] 如无必要，不得为 id、class 选择器添加类型选择器进行限定。<br>解释：</p><p>在性能和维护性上，都有一定的影响。</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-id">#error</span>,</span><br><span class="line"><span class="selector-class">.danger-message</span> &#123;</span><br><span class="line">    <span class="attribute">font-color</span>: <span class="number">#c00</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-tag">dialog</span><span class="selector-id">#error</span>,</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.danger-message</span> &#123;</span><br><span class="line">    <span class="attribute">font-color</span>: <span class="number">#c00</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[建议] 选择器的嵌套层级应不大于 3 级，位置靠后的限定条件应尽可能精确。<br>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-id">#username</span> <span class="selector-tag">input</span> &#123;&#125;</span><br><span class="line"><span class="selector-class">.comment</span> <span class="selector-class">.avatar</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.page</span> <span class="selector-class">.header</span> <span class="selector-class">.login</span> <span class="selector-id">#username</span> <span class="selector-tag">input</span> &#123;&#125;</span><br><span class="line"><span class="selector-class">.comment</span> <span class="selector-tag">div</span> * &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-属性缩写"><a href="#3-2-属性缩写" class="headerlink" title="3.2 属性缩写"></a>3.2 属性缩写</h4><p>[建议] 在可以使用缩写的情况下，尽量使用属性缩写。<br>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.post</span> &#123;</span><br><span class="line">    <span class="attribute">font</span>: <span class="number">12px</span>/<span class="number">1.5</span> arial, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.post</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: arial, sans-serif;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[建议] 使用 border / margin / padding 等缩写时，应注意隐含值对实际数值的影响，确实需要设置多个方向的值时才使用缩写。<br>解释：</p><p>border / margin / padding 等缩写会同时设置多个属性的值，容易覆盖不需要覆盖的设定。如某些方向需要继承其他声明的值，则应该分开设置。</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* centering &lt;article class="page"&gt; horizontally and highlight featured ones */</span></span><br><span class="line"><span class="selector-tag">article</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#999</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.page</span> &#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: auto;</span><br><span class="line">    <span class="attribute">margin-left</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.featured</span> &#123;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#69c</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.page</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">5px</span> auto; <span class="comment">/* introducing redundancy */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.featured</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#69c</span>; <span class="comment">/* introducing redundancy */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-属性书写顺序"><a href="#3-3-属性书写顺序" class="headerlink" title="3.3 属性书写顺序"></a>3.3 属性书写顺序</h4><p>[建议] 同一 rule set 下的属性在书写时，应按功能进行分组，并以 Formatting Model（布局方式、位置） &gt; Box Model（尺寸） &gt; Typographic（文本相关） &gt; Visual（视觉效果） 的顺序书写，以提高代码的可读性。<br>解释：</p><p>Formatting Model 相关属性包括：position / top / right / bottom / left / float / display / overflow 等<br>Box Model 相关属性包括：border / margin / padding / width / height 等<br>Typographic 相关属性包括：font / line-height / text-align / word-wrap 等<br>Visual 相关属性包括：background / color / transition / list-style 等<br>另外，如果包含 content 属性，应放在最前面。</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">    <span class="comment">/* formatting model: positioning schemes / offsets / z-indexes / display / ...  */</span></span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">overflow-x</span>: hidden;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* box model: sizes / margins / paddings / borders / ...  */</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* typographic: font / aligns / text styles / ... */</span></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* visual: colors / shadows / gradients / ... */</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#f5f5f5</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">-webkit-transition</span>: color <span class="number">1s</span>;</span><br><span class="line">       <span class="attribute">-moz-transition</span>: color <span class="number">1s</span>;</span><br><span class="line">            <span class="attribute">transition</span>: color <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-4-清除浮动"><a href="#3-4-清除浮动" class="headerlink" title="3.4 清除浮动"></a>3.4 清除浮动</h4><p>[建议] 当元素需要撑起高度以包含内部的浮动元素时，通过对伪类设置 clear 或触发 BFC 的方式进行 clearfix。尽量不使用增加空标签的方式。<br>解释：</p><p>触发 BFC 的方式很多，常见的有：</p><p>float 非 none<br>position 非 static<br>overflow 非 visible<br>如希望使用更小副作用的清除浮动方法，参见 A new micro clearfix hack 一文。</p><p>另需注意，对已经触发 BFC 的元素不需要再进行 clearfix。</p><h4 id="3-5-important"><a href="#3-5-important" class="headerlink" title="3.5 !important"></a>3.5 !important</h4><p>[建议] 尽量不使用 !important 声明。<br>[建议] 当需要强制指定样式且不允许任何场景覆盖时，通过标签内联和 !important 定义样式。<br>解释：</p><p>必须注意的是，仅在设计上 确实不允许任何其它场景覆盖样式 时，才使用内联的 !important 样式。通常在第三方环境的应用中使用这种方案。下面的 z-index 章节是其中一个特殊场景的典型样例。</p><h4 id="3-6-z-index"><a href="#3-6-z-index" class="headerlink" title="3.6 z-index"></a>3.6 z-index</h4><p>[建议] 将 z-index 进行分层，对文档流外绝对定位元素的视觉层级关系进行管理。<br>解释：</p><p>同层的多个元素，如多个由用户输入触发的 Dialog，在该层级内使用相同的 z-index 或递增 z-index。</p><p>建议每层包含100个 z-index 来容纳足够的元素，如果每层元素较多，可以调整这个数值。</p><p>[建议] 在可控环境下，期望显示在最上层的元素，z-index 指定为 999999。<br>解释：</p><p>可控环境分成两种，一种是自身产品线环境；还有一种是可能会被其他产品线引用，但是不会被外部第三方的产品引用。</p><p>不建议取值为 2147483647。以便于自身产品线被其他产品线引用时，当遇到层级覆盖冲突的情况，留出向上调整的空间。</p><p>[建议] 在第三方环境下，期望显示在最上层的元素，通过标签内联和 !important，将 z-index 指定为 2147483647。<br>解释：</p><p>第三方环境对于开发者来说完全不可控。在第三方环境下的元素，为了保证元素不被其页面其他样式定义覆盖，需要采用此做法。</p><h3 id="4-值与单位"><a href="#4-值与单位" class="headerlink" title="4 值与单位"></a>4 值与单位</h3><h4 id="4-1-文本"><a href="#4-1-文本" class="headerlink" title="4.1 文本"></a>4.1 文本</h4><p>[强制] 文本内容必须用双引号包围。<br>解释：</p><p>文本类型的内容可能在选择器、属性值等内容中。</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-tag">html</span><span class="selector-attr">[lang|="zh"]</span> <span class="selector-tag">q</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"Microsoft YaHei"</span>, sans-serif;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">"“"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span><span class="selector-attr">[lang|="zh"]</span> <span class="selector-tag">q</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"Microsoft YaHei"</span>, sans-serif;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">"”"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-tag">html</span><span class="selector-attr">[lang|=zh]</span> <span class="selector-tag">q</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">'Microsoft YaHei'</span>, sans-serif;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">'“'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span><span class="selector-attr">[lang|=zh]</span> <span class="selector-tag">q</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"Microsoft YaHei"</span>, sans-serif;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">"”"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-数值"><a href="#4-2-数值" class="headerlink" title="4.2 数值"></a>4.2 数值</h4><p>[强制] 当数值为 0 - 1 之间的小数时，省略整数部分的 0。<br>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-tag">panel</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: .<span class="number">8</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-tag">panel</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.8</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-url"><a href="#4-3-url" class="headerlink" title="4.3 url()"></a>4.3 url()</h4><p>[强制] url() 函数中的路径不加引号。<br>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(bg.png);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[建议] url() 函数中的绝对路径可省去协议名。<br>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(//baidu.com/img/bg.png) no-repeat <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4-长度"><a href="#4-4-长度" class="headerlink" title="4.4 长度"></a>4.4 长度</h4><p>[强制] 长度为 0 时须省略单位。 (也只有长度单位可省)<br>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0px</span> <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-5-颜色"><a href="#4-5-颜色" class="headerlink" title="4.5 颜色"></a>4.5 颜色</h4><p>[强制] RGB颜色值必须使用十六进制记号形式 #rrggbb。不允许使用 rgb()。<br>解释：</p><p>带有alpha的颜色信息可以使用 rgba()。使用 rgba() 时每个逗号后必须保留一个空格。</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> <span class="built_in">rgba</span>(0, 128, 0, .3);</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#008000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> <span class="built_in">rgba</span>(0,128,0,.3);</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="built_in">rgb</span>(0, 128, 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[强制] 颜色值可以缩写时，必须使用缩写形式。<br>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#aca</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#aaccaa</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[强制] 颜色值不允许使用命名色值。<br>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#90ee90</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: lightgreen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[建议] 颜色值中的英文字符采用小写。如不用小写也需要保证同一项目内保持大小写一致。<br>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#aca</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#90ee90</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ACA</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#90EE90</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ACA</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#90ee90</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-6-2D-位置"><a href="#4-6-2D-位置" class="headerlink" title="4.6 2D 位置"></a>4.6 2D 位置</h4><p>[强制] 必须同时给出水平和垂直方向的位置。<br>解释：</p><p>2D 位置初始值为 0% 0%，但在只有一个方向的值时，另一个方向的值会被解析为 center。为避免理解上的困扰，应同时给出两个方向的值。background-position属性值的定义</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: center top; <span class="comment">/* 50% 0% */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: top; <span class="comment">/* 50% 0% */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-文本编排"><a href="#5-文本编排" class="headerlink" title="5 文本编排"></a>5 文本编排</h3><h4 id="5-1-字体族"><a href="#5-1-字体族" class="headerlink" title="5.1 字体族"></a>5.1 字体族</h4><p>[强制] font-family 属性中的字体族名称应使用字体的英文 Family Name，其中如有空格，须放置在引号中。<br>解释：</p><p>所谓英文 Family Name，为字体文件的一个元数据，常见名称如下：</p><p>字体    操作系统    Family Name<br>宋体 (中易宋体)    Windows    SimSun<br>黑体 (中易黑体)    Windows    SimHei<br>微软雅黑    Windows    Microsoft YaHei<br>微软正黑    Windows    Microsoft JhengHei<br>华文黑体    Mac/iOS    STHeiti<br>冬青黑体    Mac/iOS    Hiragino Sans GB<br>文泉驿正黑    Linux    WenQuanYi Zen Hei<br>文泉驿微米黑    Linux    WenQuanYi Micro Hei<br>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"Microsoft YaHei"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[强制] font-family 按「西文字体在前、中文字体在后」、「效果佳 (质量高/更能满足需求) 的字体在前、效果一般的字体在后」的顺序编写，最后必须指定一个通用字体族( serif / sans-serif )。<br>解释：</p><p>更详细说明可参考本文。</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Display according to platform */</span></span><br><span class="line"><span class="selector-class">.article</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: Arial, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Specific for most platforms */</span></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"Helvetica Neue"</span>, Arial, <span class="string">"Hiragino Sans GB"</span>, <span class="string">"WenQuanYi Micro Hei"</span>, <span class="string">"Microsoft YaHei"</span>, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[强制] font-family 不区分大小写，但在同一个项目中，同样的 Family Name 大小写必须统一。<br>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: Arial, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: Arial, <span class="string">"Microsoft YaHei"</span>, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: arial, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: Arial, <span class="string">"Microsoft YaHei"</span>, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-字号"><a href="#5-2-字号" class="headerlink" title="5.2 字号"></a>5.2 字号</h4><p>[强制] 需要在 Windows 平台显示的中文内容，其字号应不小于 12px。<br>解释：</p><p>由于 Windows 的字体渲染机制，小于 12px 的文字显示效果极差、难以辨认。</p><h4 id="5-3-字体风格"><a href="#5-3-字体风格" class="headerlink" title="5.3 字体风格"></a>5.3 字体风格</h4><p>[建议] 需要在 Windows 平台显示的中文内容，不要使用除 normal 外的 font-style。其他平台也应慎用。<br>解释：</p><p>由于中文字体没有 italic 风格的实现，所有浏览器下都会 fallback 到 obilique 实现 (自动拟合为斜体)，小字号下 (特别是 Windows 下会在小字号下使用点阵字体的情况下) 显示效果差，造成阅读困难。</p><h4 id="5-4-字重"><a href="#5-4-字重" class="headerlink" title="5.4 字重"></a>5.4 字重</h4><p>[强制] font-weight 属性必须使用数值方式描述。<br>解释：</p><p>CSS 的字重分 100 – 900 共九档，但目前受字体本身质量和浏览器的限制，实际上支持 400 和 700 两档，分别等价于关键词 normal 和 bold。</p><p>浏览器本身使用一系列启发式规则来进行匹配，在 &lt;700 时一般匹配字体的=”” regular=”” 字重，=””&gt;=700 时匹配 Bold 字重。<br>但已有浏览器开始支持 =600 时匹配 Semibold 字重 (见此表)，故使用数值描述增加了灵活性，也更简短。</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-5-行高"><a href="#5-5-行高" class="headerlink" title="5.5 行高"></a>5.5 行高</h4><p>[建议] line-height 在定义文本段落时，应使用数值。<br>解释：</p><p>将 line-height 设置为数值，浏览器会基于当前元素设置的 font-size 进行再次计算。在不同字号的文本段落组合中，能达到较为舒适的行间间隔效果，避免在每个设置了 font-size 都需要设置 line-height。</p><p>当 line-height 用于控制垂直居中时，还是应该设置成与容器高度一致。</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-变换与动画"><a href="#6-变换与动画" class="headerlink" title="6 变换与动画"></a>6 变换与动画</h3><p>[强制] 使用 transition 时应指定 transition-property。<br>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: color <span class="number">1s</span>, border-color <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[建议] 尽可能在浏览器能高效实现的属性上添加过渡和动画。<br>解释：</p><p>见本文，在可能的情况下应选择这样四种变换：</p><p>transform: translate(npx, npx);<br>transform: scale(n);<br>transform: rotate(ndeg);<br>opacity: 0..1;<br>典型的，可以使用 translate 来代替 left 作为动画属性。</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: transform <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(20px); <span class="comment">/* move right for 20px */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transition</span>: left <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">20px</span>; <span class="comment">/* move right for 20px */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-响应式"><a href="#7-响应式" class="headerlink" title="7 响应式"></a>7 响应式</h3><p>[强制] Media Query 不得单独编排，必须与相关的规则一起定义。<br>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Good */</span></span><br><span class="line"><span class="comment">/* header styles */</span></span><br><span class="line">@<span class="keyword">media</span> (...) &#123;</span><br><span class="line">    <span class="comment">/* header styles */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* main styles */</span></span><br><span class="line">@<span class="keyword">media</span> (...) &#123;</span><br><span class="line">    <span class="comment">/* main styles */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* footer styles */</span></span><br><span class="line">@<span class="keyword">media</span> (...) &#123;</span><br><span class="line">    <span class="comment">/* footer styles */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Bad */</span></span><br><span class="line"><span class="comment">/* header styles */</span></span><br><span class="line"><span class="comment">/* main styles */</span></span><br><span class="line"><span class="comment">/* footer styles */</span></span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> (...) &#123;</span><br><span class="line">    <span class="comment">/* header styles */</span></span><br><span class="line">    <span class="comment">/* main styles */</span></span><br><span class="line">    <span class="comment">/* footer styles */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[强制] Media Query 如果有多个逗号分隔的条件时，应将每个条件放在单独一行中。<br>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span></span><br><span class="line">(-webkit-min-device-pixel-ratio: 2), /* Webkit-based browsers */</span><br><span class="line">(<span class="selector-tag">min--moz-device-pixel-ratio</span>: 2),    <span class="comment">/* Older Firefox browsers (prior to Firefox 16) */</span></span><br><span class="line">(<span class="selector-tag">min-resolution</span>: 2<span class="selector-tag">dppx</span>),             <span class="comment">/* The standard way */</span></span><br><span class="line">(<span class="selector-tag">min-resolution</span>: 192<span class="selector-tag">dpi</span>) &#123;           <span class="comment">/* dppx fallback */</span></span><br><span class="line">    <span class="comment">/* Retina-specific stuff here */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[建议] 尽可能给出在高分辨率设备 (Retina) 下效果更佳的样式。</p><h3 id="8-兼容性"><a href="#8-兼容性" class="headerlink" title="8 兼容性"></a>8 兼容性</h3><h4 id="8-1-属性前缀"><a href="#8-1-属性前缀" class="headerlink" title="8.1 属性前缀"></a>8.1 属性前缀</h4><p>[强制] 带私有前缀的属性由长到短排列，按冒号位置对齐。<br>解释：</p><p>标准属性放在最后，按冒号对齐方便阅读，也便于在编辑器内进行多行编辑。</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">-webkit-box-sizing</span>: border-box;</span><br><span class="line">       <span class="attribute">-moz-box-sizing</span>: border-box;</span><br><span class="line">            <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-2-Hack"><a href="#8-2-Hack" class="headerlink" title="8.2 Hack"></a>8.2 Hack</h4><p>[建议] 需要添加 hack 时应尽可能考虑是否可以采用其他方式解决。<br>解释：</p><p>如果能通过合理的 HTML 结构或使用其他的 CSS 定义达到理想的样式，则不应该使用 hack 手段解决问题。通常 hack 会导致维护成本的增加。</p><p>[建议] 尽量使用 选择器 hack 处理兼容性，而非 属性 hack。<br>解释：</p><p>尽量使用符合 CSS 语法的 selector hack，可以避免一些第三方库无法识别 hack 语法的问题。</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* IE 7 */</span></span><br><span class="line">*<span class="selector-pseudo">:first-child</span> + <span class="selector-tag">html</span> <span class="selector-id">#header</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* IE 6 */</span></span><br><span class="line">* <span class="selector-tag">html</span> <span class="selector-id">#header</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[建议] 尽量使用简单的 属性 hack。<br>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">_display</span>: inline; <span class="comment">/* fix double margin */</span></span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    *zoom: 1; /* triggering hasLayout */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-3-Expression"><a href="#8-3-Expression" class="headerlink" title="8.3 Expression"></a>8.3 Expression</h4><p>[强制] 禁止使用 Expression。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1 前言&quot;&gt;&lt;/a&gt;1 前言&lt;/h3&gt;&lt;p&gt;CSS作为网页样式的描述语言，在百度一直有着广泛的应用。本文档的目标是使CSS代码风格保持一致，容易被理解和被维护。&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="CSS" scheme="https://kisky3.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>关于BFC及外边距合并</title>
    <link href="https://kisky3.github.io/2019/01/16/%E5%85%B3%E4%BA%8EBFC%E5%8F%8A%E5%A4%96%E8%BE%B9%E8%B7%9D%E5%90%88%E5%B9%B6/"/>
    <id>https://kisky3.github.io/2019/01/16/关于BFC及外边距合并/</id>
    <published>2019-01-16T14:40:57.000Z</published>
    <updated>2019-06-25T08:40:08.742Z</updated>
    
    <content type="html"><![CDATA[<h3 id="BFC-是什么"><a href="#BFC-是什么" class="headerlink" title="BFC 是什么"></a>BFC 是什么</h3><p>BFC全称Block Formatting Context。中文为”块级格式化上下文”。</p><a id="more"></a><p>每个渲染区域用formatting context表示，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。在正常流中的盒子要么属于块级格式化上下文，要么属于内联格式化上下文。<br>也就是页面渲染时候所遵循的一种规则。</p><hr><h3 id="BFC的特性有"><a href="#BFC的特性有" class="headerlink" title="BFC的特性有"></a>BFC的特性有</h3><ul><li>内部的Box会在垂直方向按顺序放置</li><li>Box垂直方向的距离由margin决定，属于同一个BFC的两个相邻Box的margin会发生重叠 ，每个元素的margin box的左边与包含块border box的左边相接触。</li><li>BFC 区域不会与float box重叠</li><li>BFC就是页面上的一个隔离的独立容器，容器里的子元素不会影响到外面的元素。</li><li>BFC的高度也包括浮动元素的高度。</li></ul><hr><h3 id="BFC的产生"><a href="#BFC的产生" class="headerlink" title="BFC的产生"></a>BFC的产生</h3><ol><li>根元素</li></ol><ul><li>撑满父容器，父容器能被子元素撑开</li><li>可能会产生外边局合并的情况</li><li>页面渲染时位置从上到下</li></ul><p>2.float属性不为none<br>拥有float属性的元素，相当于脱离文档流，拥有自己专属空间，对外界元素没有影响的元素。</p><p>3.position为absolute或fixed<br>position属性值为absolute或fixed的，脱离了文档流的元素。</p><p>4.display为inline-block，flex，或者inline-flex</p><p>5.overflow不为visible</p><hr><h3 id="BFC-有什么作用？举例说明。"><a href="#BFC-有什么作用？举例说明。" class="headerlink" title="BFC 有什么作用？举例说明。"></a>BFC 有什么作用？举例说明。</h3><p>BFC的作用有：</p><ol><li>自适应两栏布局<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.aside</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">90px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">        <span class="attribute">background</span>: <span class="number">#f66</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.main</span> &#123;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">background</span>: <span class="number">#fcc</span>;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;div class="aside"&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class="main"&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></li></ol><p>页面效果：</p><img src="./1.png" style="width:500px"><p>根据BFC布局规则第三条：</p><p>每个元素的margin box的左边，与包含border box的左边相接触（对于从左往右的格式化，否则相反）。即使存在浮动也是如此。</p><p>因此，虽然存在浮动元素aslide，但main的左边依然会与包含块的左边接触。<br>根据BFC布局规则第四条：</p><p>BFC的区域不会与float box重叠。<br>我们可以通过除法main生成BFC，来实现自适应两栏布局。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当除法main生成BFC后，这个新的BFC不会与浮动的aside重叠。因此会根据包含块的宽度和aside的宽度自动变窄。</p><p>页面效果：</p><img src="./2.png" style="width:500px"><p>2.清除内部浮动</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">    <span class="selector-class">.parent</span> &#123;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#fcc</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.child</span> &#123;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#f66</span>;</span><br><span class="line">        <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;div class="parent"&gt;</span><br><span class="line">        &lt;div class="child"&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class="child"&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>页面效果：</p><img src="./3.png" style="width:500px"><p>根据BFC布局规则：</p><p>计算BFC的高度时，浮动元素也参与计算<br>为达到清除内部浮动，我们可以除法parent生成BFC，那么parent在计算高度时，parent内的浮动元素child也会参与计算。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.防止垂直margin重叠</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">    <span class="selector-tag">p</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#f55</span>;</span><br><span class="line">        <span class="attribute">background</span>: <span class="number">#fcc</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">text-align</span>:center;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">100px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;p&gt;Haha&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;Hehe&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>页面效果：</p><img src="./4.png" style="width:500px"><p>两个p之间的距离为100px，发送了margin重叠。 根据BFC布局规则第二条：</p><p>Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠</p><p>我们可以在p外面包裹一层容器，并触发该容器生成一个BFC。那么两个P便不属于同一个BFC，就不会发生margin重叠了。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">    <span class="selector-class">.wrap</span> &#123;</span><br><span class="line">        <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">p</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#f55</span>;</span><br><span class="line">        <span class="attribute">background</span>: <span class="number">#fcc</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">text-align</span>:center;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">100px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;p&gt;Haha&lt;/p&gt;</span><br><span class="line">    &lt;div class="wrap"&gt;</span><br><span class="line">        &lt;p&gt;Hehe&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>页面效果：<br><img src="./5.png" style="width:500px"></p><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</p><p>因为BFC内部的元素和外部的元素绝对不会互相影响，因此， 当BFC外部存在浮动时，它不应该影响BFC内部Box的布局，BFC会通过变窄，而不与浮动有重叠。同样的，当BFC内部有浮动时，为了不影响外部元素的布局，BFC计算高度时会包括浮动的高度。避免margin重叠也是这样的一个道理。</p><h3 id="外边距合并"><a href="#外边距合并" class="headerlink" title="外边距合并"></a>外边距合并</h3><p>块的顶部外边距和底部外边距有时候会被折叠为单个外边距，其大小为两值中的最大值，这种行为就被称为外边距合并。<br>一般发生外边距合并主要有以下三种情况：</p><ul><li>相邻兄弟姐妹元素</li><li>父元素和子元素</li><li>空元素</li></ul><h4 id="相邻兄弟姐妹元素"><a href="#相邻兄弟姐妹元素" class="headerlink" title="相邻兄弟姐妹元素"></a>相邻兄弟姐妹元素</h4><p>两个兄弟元素之间的外边距，会取两个元素外边距的最大值。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;p style="margin-bottom: 30px;"&gt;这个段落的下外边距被合并...&lt;/p&gt;</span><br><span class="line">&lt;p style="margin-top: 20px;"&gt;...这个段落的上外边距被合并。&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>按照上面的例子可以得出，两个p元素之间距离为30px。</p><h4 id="父元素和子元素"><a href="#父元素和子元素" class="headerlink" title="父元素和子元素"></a>父元素和子元素</h4><p>这种情况又可以分为以下两种：</p><ul><li>父元素的上外边距和第一个子元素的上外边距</li><li>父元素的下外边距和最后一个子元素的下外边距<br>这两种情况，最终显示出来的结果都是取二者中的最大值。</li></ul><h4 id="空元素"><a href="#空元素" class="headerlink" title="空元素"></a>空元素</h4><p>自己的上外边距会和自己的下外边距合并</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;p style="margin-bottom: 0px;"&gt;这个段落的和下面段落的距离将为20px&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;div style="margin-top: 20px; margin-bottom: 20px;"&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;p style="margin-top: 0px;"&gt;这个段落的和上面段落的距离将为20px&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>这样第一个p元素和第三个p元素之间距离为20px</p><h4 id="阻止合并方法"><a href="#阻止合并方法" class="headerlink" title="阻止合并方法"></a>阻止合并方法</h4><h5 id="通用方法"><a href="#通用方法" class="headerlink" title="通用方法"></a>通用方法</h5><ol><li>处于静态流元素会发生合并，所以float和position:absolute都不会发生合并</li><li>设置为inline-block ，也不会发生合并</li></ol><h5 id="针对于父元素和子元素情况不合并方法"><a href="#针对于父元素和子元素情况不合并方法" class="headerlink" title="针对于父元素和子元素情况不合并方法"></a>针对于父元素和子元素情况不合并方法</h5><p>以下都不会发生合并</p><ol><li>设置了清除浮动属性</li><li>因为margin需要直接接触才能合并，所以父元素或子元素中有border或padding，或者二者之间有元素</li></ol><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><ul><li>如果两个外边距值中有一个为0，也会发生合并。</li><li>如果有负外边距，合并后外边距为最大正边距加上最小负边距（绝对值最大的一个），如上面元素下边距为20px，下面元素上边距为-20px，则最后为0px</li></ul><hr><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing" target="_blank" rel="noopener">外边距合并MDN</a><br><a href="https://segmentfault.com/a/1190000003712262" target="_blank" rel="noopener">「CSS」Margin Collapsing - 外边距合并</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;BFC-是什么&quot;&gt;&lt;a href=&quot;#BFC-是什么&quot; class=&quot;headerlink&quot; title=&quot;BFC 是什么&quot;&gt;&lt;/a&gt;BFC 是什么&lt;/h3&gt;&lt;p&gt;BFC全称Block Formatting Context。中文为”块级格式化上下文”。&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="CSS" scheme="https://kisky3.github.io/tags/CSS/"/>
    
      <category term="BFC" scheme="https://kisky3.github.io/tags/BFC/"/>
    
  </entry>
  
  <entry>
    <title>【TOP】CSS TIPS</title>
    <link href="https://kisky3.github.io/2019/01/11/CSSTip/"/>
    <id>https://kisky3.github.io/2019/01/11/CSSTip/</id>
    <published>2019-01-11T14:24:59.000Z</published>
    <updated>2019-06-24T14:39:19.237Z</updated>
    
    <content type="html"><![CDATA[<div class="alert success no-icon"><h3 id="About-common-css-tips-Continuously-update-here"><a href="#About-common-css-tips-Continuously-update-here" class="headerlink" title="About common css tips. Continuously update here."></a>About common css tips. Continuously update here.</h3></div><a id="more"></a><div class="alert info no-icon"><h4 id="1-CSS关闭按钮"><a href="#1-CSS关闭按钮" class="headerlink" title="1. CSS关闭按钮"></a>1. CSS关闭按钮</h4></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.c-modal-close_button</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">   <span class="attribute">content</span>: <span class="string">"\00D7"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.c-modal-close_button</span> &#123;</span><br><span class="line">   <span class="attribute">position</span>: absolute;</span><br><span class="line">   <span class="attribute">top</span>: <span class="number">8px</span>;</span><br><span class="line">   <span class="attribute">right</span>: <span class="number">15px</span>;</span><br><span class="line">   <span class="attribute">font-size</span>: <span class="number">25px</span>;</span><br><span class="line">   <span class="attribute">color</span>: <span class="built_in">var</span>(--color-navy-e9);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><div class="alert info no-icon"><h4 id="2-Input-伪类实现输入框active时改变背景颜色"><a href="#2-Input-伪类实现输入框active时改变背景颜色" class="headerlink" title="2. [Input]伪类实现输入框active时改变背景颜色"></a>2. [Input]伪类实现输入框active时改变背景颜色</h4></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[name="input"]</span><span class="selector-pseudo">:focus</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>:<span class="built_in">var</span>(--color-gray-f8);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><div class="alert info no-icon"><h4 id="3-Input-去掉Input自带淡蓝色边框"><a href="#3-Input-去掉Input自带淡蓝色边框" class="headerlink" title="3. [Input]去掉Input自带淡蓝色边框"></a>3. [Input]去掉Input自带淡蓝色边框</h4></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type="text"]</span>,</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type="password"]</span>,</span><br><span class="line"><span class="selector-tag">textarea</span>,</span><br><span class="line"><span class="selector-tag">select</span> &#123;</span><br><span class="line">    <span class="attribute">outline</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><div class="alert info no-icon"><h4 id="4-CSS伪元素实现三角形"><a href="#4-CSS伪元素实现三角形" class="headerlink" title="4. CSS伪元素实现三角形"></a>4. CSS伪元素实现三角形</h4></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.triangle</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-class">.triangle</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">10px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">10px</span> solid <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">10px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">10px</span> solid transparent;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-class">.triangle</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">12px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">12px</span> solid <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">12px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">12px</span> solid transparent;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><hr><div class="alert info no-icon"><h4 id="5-CSS上下跳动的动画效果"><a href="#5-CSS上下跳动的动画效果" class="headerlink" title="5. CSS上下跳动的动画效果"></a>5. CSS上下跳动的动画效果</h4></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.c-style-item</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>:<span class="built_in">var</span>(--color-green-00);</span><br><span class="line">  <span class="attribute">color</span>:red;</span><br><span class="line">  <span class="attribute">animation</span>: shake <span class="number">2s</span> infinite;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">keyframes</span> shake &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(0px, 0px);</span><br><span class="line">  &#125;</span><br><span class="line">  50% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(0px, -10px);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(0px, 0px);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><div class="alert info no-icon"><h4 id="6-CSS不固定宽度模块屏幕居中"><a href="#6-CSS不固定宽度模块屏幕居中" class="headerlink" title="6.CSS不固定宽度模块屏幕居中"></a>6.CSS不固定宽度模块屏幕居中</h4></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.c-dialog</span> &#123;</span><br><span class="line">     <span class="attribute">position</span>: absolute;</span><br><span class="line">     <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">     <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">     <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%,-50%);</span><br><span class="line">     <span class="attribute">border</span>: solid <span class="number">1px</span> <span class="number">#ccc</span>;</span><br><span class="line">     <span class="attribute">background</span>: <span class="number">#ccc</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><hr><div class="alert info no-icon"><h4 id="7-HTML使用pre的情况下，让长文字自动换行"><a href="#7-HTML使用pre的情况下，让长文字自动换行" class="headerlink" title="7. HTML使用pre的情况下，让长文字自动换行"></a>7. HTML使用pre的情况下，让长文字自动换行</h4></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">pre</span>&#123;</span><br><span class="line">  <span class="attribute">white-space</span>:pre-wrap;</span><br><span class="line">  <span class="attribute">word-wrap</span>:break-word;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Parent*/</span></span><br><span class="line"><span class="selector-class">.c-modal</span> &#123;</span><br><span class="line">   ...</span><br><span class="line">   <span class="selector-tag">word-wrap</span>: <span class="selector-tag">break-word</span>;</span><br><span class="line">   <span class="selector-tag">white-space</span> : <span class="selector-tag">normal</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;alert success no-icon&quot;&gt;&lt;h3 id=&quot;About-common-css-tips-Continuously-update-here&quot;&gt;&lt;a href=&quot;#About-common-css-tips-Continuously-update-here&quot; class=&quot;headerlink&quot; title=&quot;About common css tips. Continuously update here.&quot;&gt;&lt;/a&gt;About common css tips. Continuously update here.&lt;/h3&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="CSS" scheme="https://kisky3.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>关于CSS浮动</title>
    <link href="https://kisky3.github.io/2018/12/30/%E5%85%B3%E4%BA%8ECSS%E6%B5%AE%E5%8A%A8/"/>
    <id>https://kisky3.github.io/2018/12/30/关于CSS浮动/</id>
    <published>2018-12-30T14:00:12.000Z</published>
    <updated>2019-06-24T14:16:42.664Z</updated>
    
    <content type="html"><![CDATA[<h3 id="浮动元素的特征"><a href="#浮动元素的特征" class="headerlink" title="浮动元素的特征"></a>浮动元素的特征</h3><p>一个浮动元素会向左或向右移动，直到其外边（outer edge）挨到包含块边沿或者另</p><a id="more"></a><p>一个浮动盒的外边。<br>如果存在行盒，浮动盒的外top会与当前行盒的top对齐。<br>如果没有足够的水平空间来浮动，它会向下移动，直到空间合适或者不会再出现其他浮动了。<br>块级元素设置浮动后会呈现出inline-block的感觉，宽度会收缩。<br>行内元素设置浮动后会呈现块级的特性。比如可以设置宽高margin等。</p><hr><h3 id="浮动元素的效果及对其他元素的影响"><a href="#浮动元素的效果及对其他元素的影响" class="headerlink" title="浮动元素的效果及对其他元素的影响"></a>浮动元素的效果及对其他元素的影响</h3><p>下面为浮动最简单的一个左浮动效果。<br>有3个box，分别向左浮动。<br>可以看到box原来为块级元素，本应该单独占据一行。但是设置左浮动之后，脱离文档流，依次向左移动。由于没有足够空间来让box3移动，便到了下一行。<br><img src="./1.png" style="width:500px"></p><br>如果改为右浮动的话，效果将变成box2，box1，box3。<img src="./2.png" style="width:500px"><p>这个效果是因为浏览器渲染时，从上到下渲染代码。第一个是box1，便向右浮动，直至碰到外边缘便停止下来。第二个是box2接着向右浮动，直至碰到了box1的外边缘便停止浮动。最后是box3，向右浮动时没有足够空间便移到了下一行。</p><p>有时浮动还会出现如下图卡住的现象。<br>这是因为box3在向左浮动时，第一个碰到的是box1的外边缘，便停下来卡住了。</p><img src="./3.png" style="width:500px"><p>当浮动元素与普通元素和文本有交集的时候会是什么情况呢。<br>我们在box1下面加一个文本p作为文字，p背景色设置为黄色作为普通元素。其余box元素不变向左浮动。最终呈现效果如下图:</p><img src="./4.png" style="width:500px"><br>可以得出结论，box1把普通元素p遮挡住了，普通元素看不见浮动元素。但是普通元素内的文字是可以看到浮动元素的，所以就会围绕浮动元素显示。<hr><h3 id="关于如何清除浮动"><a href="#关于如何清除浮动" class="headerlink" title="关于如何清除浮动"></a>关于如何清除浮动</h3><h5 id="clear-left-clear-right定义："><a href="#clear-left-clear-right定义：" class="headerlink" title="clear: left/clear right定义："></a>clear: left/clear right定义：</h5><p>要求该盒的top border边位于源文档中在此之前的元素形成的所有左/右浮动盒的bottom外边下方。</p><p>也就是说当我们给一个元素设置了clear:left之后，它的文档流上方如果有左浮动元素，它就要位于该左浮动元素的下方。如果前面没有左浮动元素则不起效果。<br>clear:right也同理。<br>还有clear：both 就是该元素之前有左浮动元素或者右浮动元素都生效。</p><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><p>在浮动元素的最后加上一个普通元素，设置clear:left,达到撑开容器的效果。</p><img src="./5.png" style="width:500px"><h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><p>给包含浮动元素的容器设置一个class伪元素来清除浮动。相当于在最下方添加了一个内容为空的块级元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line"> <span class="attribute">content</span>:<span class="string">''</span>;</span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line"><span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;浮动元素的特征&quot;&gt;&lt;a href=&quot;#浮动元素的特征&quot; class=&quot;headerlink&quot; title=&quot;浮动元素的特征&quot;&gt;&lt;/a&gt;浮动元素的特征&lt;/h3&gt;&lt;p&gt;一个浮动元素会向左或向右移动，直到其外边（outer edge）挨到包含块边沿或者另&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="CSS" scheme="https://kisky3.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>IconFont</title>
    <link href="https://kisky3.github.io/2018/12/28/IconFont/"/>
    <id>https://kisky3.github.io/2018/12/28/IconFont/</id>
    <published>2018-12-28T10:38:46.000Z</published>
    <updated>2019-06-24T14:17:42.675Z</updated>
    
    <content type="html"><![CDATA[<p>Icon Font简而言之也就是把字体做成图标</p><h3 id="Icon-Font的原理"><a href="#Icon-Font的原理" class="headerlink" title="Icon Font的原理"></a>Icon Font的原理</h3><a id="more"></a><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello &amp;#x9965; &amp;#x4eba;&amp;#x8c37;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">p&#123;</span><br><span class="line">  font-family: serif;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里把「饥人谷」这几个字改为 unicode 编码，此时页面上仍然能以serif 字体展示「饥人谷」三个字。<br>使用浏览器打开页面时，浏览器会读取 HTML 文件进行解析渲染。当读到「饥人谷」三个字时会转换成对应的 unicode码（可以认为是世界上任意一种文字的特定编号）。再根据HTML 里设置的 font-family （如果没设置则使用浏览器默认设置）去查找电脑里（如果有自定义字体@font-face ，则加载对应字体文件）对应字体的字体文件。找到文件后根据 unicode 码去查找绘制外形，找到后绘制到页面上。 所以对于第二个范例， 「&amp;#9965」是「饥」的 unicede 码，所以用户最终也能看到serf字体样式的「饥」字。</p><hr><h3 id="Icon-Font生成和使用步骤"><a href="#Icon-Font生成和使用步骤" class="headerlink" title="Icon Font生成和使用步骤"></a>Icon Font生成和使用步骤</h3><h4 id="1-制作字体文件"><a href="#1-制作字体文件" class="headerlink" title="1.制作字体文件"></a>1.制作字体文件</h4><p>这个需要设计师把字体文件做好。一般不属于前端工作范畴，在这里掠过不讲。</p><h4 id="2-声明font-family"><a href="#2-声明font-family" class="headerlink" title="2.声明font-family"></a>2.声明font-family</h4><ul><li>使用本地链接</li><li>使用第三方链接</li></ul><h4 id="3-使用font-family"><a href="#3-使用font-family" class="headerlink" title="3.使用font-family"></a>3.使用font-family</h4><ul><li>使用HTML实体</li><li>使用CSS：before</li></ul><hr><h3 id="最常用的Icon-Font生成步骤"><a href="#最常用的Icon-Font生成步骤" class="headerlink" title="最常用的Icon Font生成步骤"></a>最常用的Icon Font生成步骤</h3><h4 id="1-点击打开阿里巴巴的免费字体工具网站"><a href="#1-点击打开阿里巴巴的免费字体工具网站" class="headerlink" title="1. 点击打开阿里巴巴的免费字体工具网站"></a>1. 点击打开<a href="https://www.iconfont.cn/" target="_blank" rel="noopener">阿里巴巴的免费字体工具网站</a></h4><h4 id="2-在搜索栏里搜索自己需要的图标（英文）"><a href="#2-在搜索栏里搜索自己需要的图标（英文）" class="headerlink" title="2. 在搜索栏里搜索自己需要的图标（英文）"></a>2. 在搜索栏里搜索自己需要的图标（英文）</h4><img src="./1.png" style="width:500px"><h4 id="3-用Github登陆后选择自己中意的图标，添加入库"><a href="#3-用Github登陆后选择自己中意的图标，添加入库" class="headerlink" title="3. 用Github登陆后选择自己中意的图标，添加入库"></a>3. 用Github登陆后选择自己中意的图标，添加入库</h4><img src="./2.png" style="width:500px"><h4 id="4-可以选择添加至项目或者直接下载至本地"><a href="#4-可以选择添加至项目或者直接下载至本地" class="headerlink" title="4. 可以选择添加至项目或者直接下载至本地"></a>4. 可以选择添加至项目或者直接下载至本地</h4><p>下图的search下的&amp;#xe71d为HTML实体，可以用实体显示但是不便记忆所以不推荐<br>也可以使用CSS before 的content加上/ 导出icon</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.icon-search</span><span class="selector-pseudo">:before</span> &#123; <span class="attribute">content</span>: <span class="string">"\e71d"</span>; &#125;</span><br></pre></td></tr></table></figure><img src="./3.png" style="width:500px"><h4 id="5-下载至本地后解压"><a href="#5-下载至本地后解压" class="headerlink" title="5. 下载至本地后解压"></a>5. 下载至本地后解压</h4><p>为了浏览器兼容，建议复制后缀名为.eot,svg,ttf和woff的4个文件到自己的目录下</p><img src="./4.png" style="width:500px"><h4 id="6-复制iconfont-css的内容到自己的页面，并直接添加span和class引用生产的字体文件"><a href="#6-复制iconfont-css的内容到自己的页面，并直接添加span和class引用生产的字体文件" class="headerlink" title="6. 复制iconfont.css的内容到自己的页面，并直接添加span和class引用生产的字体文件"></a>6. 复制iconfont.css的内容到自己的页面，并直接添加span和class引用生产的字体文件</h4><img src="./5.png" style="width:500px"><h4 id="7-保存并查看"><a href="#7-保存并查看" class="headerlink" title="7. 保存并查看"></a>7. 保存并查看</h4>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Icon Font简而言之也就是把字体做成图标&lt;/p&gt;
&lt;h3 id=&quot;Icon-Font的原理&quot;&gt;&lt;a href=&quot;#Icon-Font的原理&quot; class=&quot;headerlink&quot; title=&quot;Icon Font的原理&quot;&gt;&lt;/a&gt;Icon Font的原理&lt;/h3&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="CSS" scheme="https://kisky3.github.io/tags/CSS/"/>
    
      <category term="IconFont" scheme="https://kisky3.github.io/tags/IconFont/"/>
    
  </entry>
  
  <entry>
    <title>【TOP】GIT TIPS</title>
    <link href="https://kisky3.github.io/2018/12/06/GitTip/"/>
    <id>https://kisky3.github.io/2018/12/06/GitTip/</id>
    <published>2018-12-06T09:28:52.000Z</published>
    <updated>2019-06-24T10:47:09.595Z</updated>
    
    <content type="html"><![CDATA[<div class="alert info no-icon"><h3 id="About-common-git-tips-Continuously-update-here"><a href="#About-common-git-tips-Continuously-update-here" class="headerlink" title="About common git tips. Continuously update here."></a>About common git tips. Continuously update here.</h3></div><a id="more"></a><div class="alert success no-icon"><h4 id="1-git-pull时-「Error：The-following-untracked-working-tree-files-would-be-overwritten-by-merge-」"><a href="#1-git-pull时-「Error：The-following-untracked-working-tree-files-would-be-overwritten-by-merge-」" class="headerlink" title="1. git pull时 「Error：The following untracked working tree files would be overwritten by merge:」"></a>1. git pull时 「Error：The following untracked working tree files would be overwritten by merge:」</h4></div><p>输入以下代码后再进行修改，然后再push就好 （本地做的修改会不见 修改多的时候不建议！)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin</span><br><span class="line">git reset --hard FETCH_HEAD</span><br></pre></td></tr></table></figure><hr><br><div class="alert success no-icon"><h4 id="2-git本地版本回退与远端版本回退"><a href="#2-git本地版本回退与远端版本回退" class="headerlink" title="2. git本地版本回退与远端版本回退"></a>2. git本地版本回退与远端版本回退</h4></div><h5 id="本地回滚"><a href="#本地回滚" class="headerlink" title="本地回滚"></a>本地回滚</h5><p>1.在Github上或者下面的命令行查看想回退版本的版本号。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure><p>2.接着回退版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard *****(版本号)</span><br></pre></td></tr></table></figure><h5 id="远程回滚"><a href="#远程回滚" class="headerlink" title="远程回滚"></a>远程回滚</h5><h6 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h6><p>如果错误提交已经推送到自己的远程分支了，那么就需要回滚远程分支了。 以下方法只能在自己一人的branch下使用。<br>强制回滚会消除别人提交的修改。慎用！</p><ol><li><p>首先回退本地分支步骤参见本地回滚</p></li><li><p>强制推送到远程分支</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -f *****(你的分支名)</span><br></pre></td></tr></table></figure><h6 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h6><p>git revert 命令意思是撤销某次提交。<br>它会产生一个新的提交，虽然代码回退了，但是版本依然是向前的，所以，当你用revert回退之后，所有人pull之后，他们的代码也自动的回退了。<br>如果使用 revert 撤销的不是最近一次提交，那么一定会有代码冲突，需要你合并代码，合并代码只需要把当前的代码全部去掉，保留之前版本的代码就可以了.<br>撤销最近一次提交</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git revert HEAD</span><br></pre></td></tr></table></figure><p>撤销上上次提交</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git revert HEAD～1</span><br></pre></td></tr></table></figure><p>撤销这次提交</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git revert *****(版本号)</span><br></pre></td></tr></table></figure><hr><br><div class="alert success no-icon"><h4 id="3-git-将当前branch1的一部分抽出merge-剩余部分在另一个branch2上开发"><a href="#3-git-将当前branch1的一部分抽出merge-剩余部分在另一个branch2上开发" class="headerlink" title="3. git 将当前branch1的一部分抽出merge 剩余部分在另一个branch2上开发"></a>3. git 将当前branch1的一部分抽出merge 剩余部分在另一个branch2上开发</h4></div><ol><li>切换回master</li><li>在master上创建一个新的branch2作为继续开发的branch</li><li>在branch2上merge branch1</li><li>将branch1 返回到想merge的范围，然后强制push回滚 之后merge</li><li>在branch2 上进行后续开发</li></ol><hr><br><div class="alert success no-icon"><h3 id="4-Git-撤销修改"><a href="#4-Git-撤销修改" class="headerlink" title="4. Git 撤销修改"></a>4. Git 撤销修改</h3></div>1.本地修改了一堆文件(并没有使用git add到暂存区)，想放弃修改。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- filename</span><br></pre></td></tr></table></figure><p>2.撤销所有文件/文件夹的修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout .</span><br></pre></td></tr></table></figure><p>3.本地新增了一堆文件(并没有git add到暂存区)，想放弃修改。<br>【单个文件】</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm filename / rm dir -rf</span><br></pre></td></tr></table></figure><p>【所有文件/文件夹：】</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clean -xdf</span><br></pre></td></tr></table></figure><p>4.本地修改/新增了一堆文件，已经git add到暂存区，想放弃修改。<br>【单个文件/文件夹：】</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD filename</span><br></pre></td></tr></table></figure><p>【所有文件/文件夹：】</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD .</span><br></pre></td></tr></table></figure><p>5.本地通过git add &amp; git commit 之后，想要撤销此次commit</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset commit_id</span><br></pre></td></tr></table></figure><hr><br><div class="alert success no-icon"><h4 id="5-git-将当前的branch的commit移动到另一个新的branch"><a href="#5-git-将当前的branch的commit移动到另一个新的branch" class="headerlink" title="5. git 将当前的branch的commit移动到另一个新的branch"></a>5. git 将当前的branch的commit移动到另一个新的branch</h4></div><p>git cherry-pick可以理解为”挑拣”提交，它会获取某一个分支的单笔提交，并作为一个新的提交引入到你当前分支上。 当我们需要在本地合入其他分支的提交时，如果我们不想对整个分支进行合并，而是只想将某一次提交合入到本地当前分支上，那么就要使用git cherry-pick了。</p><p>查看你需要的commit，然后切换到master上建立新分支。</p><h6 id="一个commit的情况下"><a href="#一个commit的情况下" class="headerlink" title="一个commit的情况下"></a>一个commit的情况下</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick 版本号</span><br></pre></td></tr></table></figure><h6 id="复数commit的情况下"><a href="#复数commit的情况下" class="headerlink" title="复数commit的情况下"></a>复数commit的情况下</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick [起点版本号]..[终点版本号]</span><br></pre></td></tr></table></figure><h6 id="终止cherry-pick"><a href="#终止cherry-pick" class="headerlink" title="终止cherry-pick"></a>终止cherry-pick</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick --abort</span><br></pre></td></tr></table></figure><p>如果发生conflict则需要解决冲突并commit。复数的情况下利用下面的comment查看状态并继续cheery-pick</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line">git cherry-pick --continue</span><br></pre></td></tr></table></figure><p>最后成功后git push到新分支便可以获得所需commit（不是新分支的情况下也适用。）</p><hr><br><div class="alert success no-icon"><h4 id="6-git删除分支"><a href="#6-git删除分支" class="headerlink" title="6. git删除分支"></a>6. git删除分支</h4></div><h6 id="删除已经push的远程分支"><a href="#删除已经push的远程分支" class="headerlink" title="删除已经push的远程分支"></a>删除已经push的远程分支</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -r -d origin/branch-name</span><br><span class="line">git push origin :branch-name</span><br></pre></td></tr></table></figure><p>但是本地查看branch还是能看到删除的分支。利用下面的命令行可删除远程仓库不存在的分支。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote prune origin</span><br></pre></td></tr></table></figure><h6 id="删除本地分支"><a href="#删除本地分支" class="headerlink" title="删除本地分支"></a>删除本地分支</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d</span><br></pre></td></tr></table></figure><hr><br><div class="alert success no-icon"><h4 id="7-出现错误-fatal-remote-origin-already-exists"><a href="#7-出现错误-fatal-remote-origin-already-exists" class="headerlink" title="7. 出现错误 fatal: remote origin already exists"></a>7. 出现错误 fatal: remote origin already exists</h4></div><p>当要把本地文件夹上传到git时要执行下面的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin 〜</span><br></pre></td></tr></table></figure><p>但是有时会出现fatal: remote origin already exists.的错误信息，<br>此时需要使用git remote rm origin删除origin，然后再次上传即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git remote rm origin</span><br><span class="line">$ git remote add origin git@github.com:user_name/repository_name.git</span><br><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;alert info no-icon&quot;&gt;&lt;h3 id=&quot;About-common-git-tips-Continuously-update-here&quot;&gt;&lt;a href=&quot;#About-common-git-tips-Continuously-update-here&quot; class=&quot;headerlink&quot; title=&quot;About common git tips. Continuously update here.&quot;&gt;&lt;/a&gt;About common git tips. Continuously update here.&lt;/h3&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="Git" scheme="https://kisky3.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>关于CSS继承</title>
    <link href="https://kisky3.github.io/2018/11/25/%E5%85%B3%E4%BA%8ECSS%E7%BB%A7%E6%89%BF/"/>
    <id>https://kisky3.github.io/2018/11/25/关于CSS继承/</id>
    <published>2018-11-25T09:12:40.000Z</published>
    <updated>2019-06-24T10:35:33.438Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是-CSS-继承"><a href="#什么是-CSS-继承" class="headerlink" title="什么是 CSS 继承?"></a>什么是 CSS 继承?</h3><p>CSS继承是指子元素能够拥有和父元素一样的属性。不用特地在子元素上定义但是也能在页面上展示出来。</p><a id="more"></a><hr><h4 id="哪些属性能继承"><a href="#哪些属性能继承" class="headerlink" title="哪些属性能继承"></a>哪些属性能继承</h4><p>1.字体系列属性</p><ul><li>font：组合字体</li><li>font-family：规定元素的字体系列</li><li>font-weight：设置字体的粗细</li><li>font-size：设置字体的尺寸</li><li>font-style：定义字体的风格</li><li>font-variant：设置小型大写字母的字体显示文本，这意味着所有的小写字母均会被转换为大写，但是所有使用小型大写字体的字母与其余文本相比，其字体尺寸更小。</li><li>font-stretch：对当前的 font-family 进行伸缩变形。所有主流浏览器都不支持。</li><li>font-size-adjust：为某个元素规定一个 aspect 值，这样就可以保持首选字体的 x-height。</li></ul><p>2、文本系列属性</p><ul><li>text-indent：文本缩进</li><li>text-align：文本水平对齐</li><li>line-height：行高</li><li>word-spacing：增加或减少单词间的空白（即字间隔）</li><li>letter-spacing：增加或减少字符间的空白（字符间距）</li><li>text-transform：控制文本大小写</li><li>direction：规定文本的书写方向</li><li>color：文本颜色</li></ul><p>3、元素可见性：</p><ul><li>visibility</li></ul><p>4、表格布局属性：</p><ul><li>caption-side</li><li>border-collapse</li><li>border-spacing</li><li>empty-cells</li><li>table-layout</li></ul><p>5、列表布局属性：</p><ul><li>list-style-type</li><li>list-style-image</li><li>list-style-position</li><li>list-style</li></ul><p>6、生成内容属性：</p><ul><li>quotes</li></ul><p>7、光标属性：</p><ul><li>cursor</li></ul><p>8、页面样式属性：</p><ul><li>page</li><li>page-break-inside</li><li>windows</li><li>orphans</li></ul><p>9、声音样式属性：</p><ul><li>speak</li><li>speak-punctuation</li><li>speak-numeral</li><li>speak-header</li><li>speech-rate</li><li>volume</li><li>voice-family</li><li>pitch</li><li>pitch-range</li><li>stress</li><li>richness</li><li>azimuth</li><li>elevation</li></ul><hr><h3 id="二、有继承性的属性"><a href="#二、有继承性的属性" class="headerlink" title="二、有继承性的属性"></a>二、有继承性的属性</h3><p>1、字体系列属性</p><ul><li>font：组合字体</li><li>font-family：规定元素的字体系列</li><li>font-weight：设置字体的粗细</li><li>font-size：设置字体的尺寸</li><li>font-style：定义字体的风格</li><li>font-variant：设置小型大写字母的字体显示文本，这意味着所有的小写字母均会被转换为大写，但是所有使用小型大写字体的字母与其余文本相比，其字体尺寸更小。</li><li>font-stretch：对当前的 font-family 进行伸缩变形。所有主流浏览器都不支持。</li><li>font-size-adjust：为某个元素规定一个 aspect 值，这样就可以保持首选字体的 x-height。</li></ul><p>2、文本系列属性</p><ul><li>text-indent：文本缩进</li><li>text-align：文本水平对齐</li><li>line-height：行高</li><li>word-spacing：增加或减少单词间的空白（即字间隔）</li><li>letter-spacing：增加或减少字符间的空白（字符间距）</li><li>text-transform：控制文本大小写</li><li>direction：规定文本的书写方向</li><li>color：文本颜色</li></ul><p>3、元素可见性：</p><ul><li>visibility</li></ul><p>4、表格布局属性：</p><ul><li>caption-side</li><li>border-collapse</li><li>border-spacing</li><li>empty-cells</li><li>table-layout</li></ul><p>5、列表布局属性：</p><ul><li>list-style-type</li><li>list-style-image</li><li>list-style-position</li><li>list-style</li></ul><p>6、生成内容属性：</p><ul><li>quotes</li></ul><p>7、光标属性：</p><ul><li>cursor</li></ul><p>8、页面样式属性：</p><ul><li>page</li><li>page-break-inside</li><li>windows</li><li>orphans</li></ul><p>9、声音样式属性：</p><ul><li>speak</li><li>speak-punctuation</li><li>speak-numeral</li><li>speak-header</li><li>speech-rate</li><li>volume</li><li>voice-family</li><li>pitch</li><li>pitch-range</li><li>stress</li><li>richness</li><li>azimuth</li><li>elevation</li></ul><hr><h3 id="三、所有元素可以继承的属性"><a href="#三、所有元素可以继承的属性" class="headerlink" title="三、所有元素可以继承的属性"></a>三、所有元素可以继承的属性</h3><p>1、元素可见性：</p><ul><li>visibility</li></ul><p>2、光标属性：</p><ul><li>cursor</li></ul><hr><h3 id="四、内联元素可以继承的属性"><a href="#四、内联元素可以继承的属性" class="headerlink" title="四、内联元素可以继承的属性"></a>四、内联元素可以继承的属性</h3><p>1、字体系列属性<br>2、除text-indent、text-align之外的文本系列属性</p><hr><h3 id="五、块级元素可以继承的属性"><a href="#五、块级元素可以继承的属性" class="headerlink" title="五、块级元素可以继承的属性"></a>五、块级元素可以继承的属性</h3><p>1、text-indent、text-align</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是-CSS-继承&quot;&gt;&lt;a href=&quot;#什么是-CSS-继承&quot; class=&quot;headerlink&quot; title=&quot;什么是 CSS 继承?&quot;&gt;&lt;/a&gt;什么是 CSS 继承?&lt;/h3&gt;&lt;p&gt;CSS继承是指子元素能够拥有和父元素一样的属性。不用特地在子元素上定义但是也能在页面上展示出来。&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="CSS" scheme="https://kisky3.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS选择器类型与用法</title>
    <link href="https://kisky3.github.io/2018/11/15/CSS%E9%80%89%E6%8B%A9%E5%99%A8%E7%B1%BB%E5%9E%8B%E4%B8%8E%E7%94%A8%E6%B3%95/"/>
    <id>https://kisky3.github.io/2018/11/15/CSS选择器类型与用法/</id>
    <published>2018-11-15T08:23:25.000Z</published>
    <updated>2019-06-24T14:18:01.152Z</updated>
    
    <content type="html"><![CDATA[<h3 id="选择器类型"><a href="#选择器类型" class="headerlink" title="选择器类型"></a>选择器类型</h3><p>选择器分为基础选择器，组合选择器，属性选择器，伪类选择器，伪元素选择器</p><a id="more"></a><hr><h4 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h4><table><thead><tr><th>选择器</th><th>含义</th></tr></thead><tbody><tr><td>*</td><td>通用元素选择器，匹配页面任何元素（这也就决定了我们很少使用）</td></tr><tr><td>#id</td><td>id选择器，匹配特定id元素</td></tr><tr><td>.class</td><td>类选择器，匹配class包含（不是等于）特定类的元素</td></tr><tr><td>element</td><td>标签选择器</td></tr></tbody></table><p>例子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line"> <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#id-selector</span> &#123;</span><br><span class="line"> <span class="attribute">color</span>:<span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.class-selector</span> &#123;</span><br><span class="line"> <span class="attribute">background</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="组合选择器"><a href="#组合选择器" class="headerlink" title="组合选择器"></a>组合选择器</h3><table><thead><tr><th>选择器</th><th>含义</th></tr></thead><tbody><tr><td>E,F</td><td>多元素选择器，用逗号分隔，同时匹配元素E或元素F</td></tr><tr><td>E F</td><td>后代选择器，用空格分隔，匹配E元素所有的后代（不只是子元素向下递归）元素F</td></tr><tr><td>E&gt;F</td><td>子元素选择器，用&gt;分隔，匹配E元素的所有直接子元素</td></tr><tr><td>E+F</td><td>直接相邻选择器，匹配E元素之后的相邻的同级元素F</td></tr><tr><td>E~F</td><td>普通相邻选择器(弟弟选择器)，匹配E元素之后的同级元素F(无论直接相邻与否)</td></tr><tr><td>.class1.class2</td><td>id和class选择器和选择器连写的时候中间没有分隔符， 。和#本身充当分隔符的元素</td></tr><tr><td>element#id</td><td>id和class 选择器和选择器连写的时候中间没有分隔符，。和#本身充当分隔符的元素</td></tr></tbody></table><p>例子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.p1</span>,<span class="selector-class">.p2</span> &#123;</span><br><span class="line"> <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#ct</span> <span class="selector-class">.p2</span> &#123;</span><br><span class="line"> <span class="attribute">color</span>:blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#ct</span> &gt;<span class="selector-class">.p2</span> &#123;</span><br><span class="line"> <span class="attribute">color</span>:blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.p1</span>+<span class="selector-tag">p</span> &#123;</span><br><span class="line"> <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.p1</span>~<span class="selector-tag">p</span> &#123;</span><br><span class="line"> <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.p2</span><span class="selector-class">.active</span> &#123;</span><br><span class="line"> <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#ct</span> &#123;</span><br><span class="line"> <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><table><thead><tr><th>选择器</th><th>含义</th></tr></thead><tbody><tr><td>E[attr]</td><td>匹配所有具有属性attr的元素，div[id]就能取到所有有id属性的div</td></tr><tr><td>E[attr=value]</td><td>匹配属性attr 值为value的元素，div[id=test]，匹配id=test的div</td></tr><tr><td>E[attr~=value]</td><td>匹配所有属性attr具有多个空格分隔，其中一个值等于value的元素</td></tr><tr><td>E[attr^=value]</td><td>匹配属性attr的值以value开头的元素</td></tr><tr><td>E[attr$=value]</td><td>匹配属性attr的值以value结尾的元素</td></tr><tr><td>E[attr*=value]</td><td>匹配属性attr的值包含value的元素</td></tr></tbody></table><hr><h3 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h3><p>代表元素的一种状态</p><table><thead><tr><th>选择器</th><th>含义</th></tr></thead><tbody><tr><td>E:first-child</td><td>匹配其E的父元素的第一个子元素</td></tr><tr><td>E:nth-child(n)</td><td>匹配其E的父元素的第n个子元素(2n+1,2n)</td></tr><tr><td>E:first-of-type</td><td>E的同种类型下的第一个元素</td></tr><tr><td>E:nth-of-type(n)</td><td>E的同种类型下的第n个元素</td></tr><tr><td>E:link</td><td>匹配所有未被点击的链接</td></tr><tr><td>E:visited</td><td>匹配所有已经被点击的链接</td></tr><tr><td>E:active</td><td>匹配鼠标已经其上按下还没有释放的E元素</td></tr><tr><td>E:hover</td><td>匹配鼠标悬停其上的E元素</td></tr><tr><td>E:focus</td><td>匹配获得当前焦点的E元素</td></tr><tr><td>E:enabled</td><td>匹配表单中可用的元素</td></tr><tr><td>E:disabled</td><td>匹配表单中禁用的元素</td></tr><tr><td>E:checked</td><td>匹配表单中被选中的radio或checkoutbox元素</td></tr><tr><td>E:selection</td><td>匹配用户当前选中的元素</td></tr></tbody></table><p>a链接伪类选择器时要注意伪类的顺序</p><hr><h3 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h3><table><thead><tr><th>选择器</th><th>含义</th></tr></thead><tbody><tr><td>E::first-line</td><td>匹配E元素内容的第一行</td></tr><tr><td>E::first-letter</td><td>匹配E元素内容的第一个字母</td></tr><tr><td>E::before</td><td>在E元素之前插入生成的内容</td></tr><tr><td>E::after</td><td>在E元素之后插入生成的内容</td></tr></tbody></table><hr><h3 id="选择器的优先级"><a href="#选择器的优先级" class="headerlink" title="选择器的优先级"></a>选择器的优先级</h3><img src="./1.png" style="width:500px"><p>注意：</p><p>在一些复杂场景下，可以进行一些标记再进行比较<br>假如选择器有两次则下面的样式会覆盖上面的样式<br><img src="./2.png" style="width:500px"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;选择器类型&quot;&gt;&lt;a href=&quot;#选择器类型&quot; class=&quot;headerlink&quot; title=&quot;选择器类型&quot;&gt;&lt;/a&gt;选择器类型&lt;/h3&gt;&lt;p&gt;选择器分为基础选择器，组合选择器，属性选择器，伪类选择器，伪元素选择器&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="CSS" scheme="https://kisky3.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>从URL到页面展现</title>
    <link href="https://kisky3.github.io/2018/11/10/%E4%BB%8EURL%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%B1%95%E7%8E%B0/"/>
    <id>https://kisky3.github.io/2018/11/10/从URL到页面展现/</id>
    <published>2018-11-10T07:54:13.000Z</published>
    <updated>2019-06-24T14:18:12.112Z</updated>
    
    <content type="html"><![CDATA[<p>专有名词解释：URL：统一资源定位符 http : 网络协议 用于找到互联网上的资源</p><h3 id="1-在浏览器输入URL"><a href="#1-在浏览器输入URL" class="headerlink" title="1.在浏览器输入URL"></a>1.在浏览器输入URL</h3><a id="more"></a><p>通过输入「<a href="http://www.baidu.com」" target="_blank" rel="noopener">http://www.baidu.com」</a> 的URL来最终定位找到百度首页。</p><hr><h3 id="2-域名解析"><a href="#2-域名解析" class="headerlink" title="2.域名解析"></a>2.域名解析</h3><p>对于　「<a href="http://baidu.com」" target="_blank" rel="noopener">http://baidu.com」</a>　的URL来说，浏览器实际上不知道baidu.com到底是什么，需要对应查找到该域名对应的服务器IP地址才能找到目标。<br>域名解析的流程</p><p>1.浏览器缓存<br>如果你之前打开过百度首页，那么百度的ip地址会被缓存到浏览器里，当你打开时百度首页时就能从浏览器缓存里获取之前缓存的百度ip地址并访问它。</p><p>2.系统缓存<br>如果你是第一次打开百度，那么无法从浏览器获取缓存，便会从你电脑的Hosts文件查找是否有该域名和其对应ip。<br>下图为Mac电脑的hosts文件内容。开发时可以修改hosts文件内的ip，达到打开本地文件的效果。</p><img src="./1.png" style="width:500px"><p>3.路由器缓存<br>如果浏览器缓存和系统缓存都没有，就会看你的路由器缓存。路由器曾经登陆过也会缓存域名信息，如果你或别人在该路由器上登陆过网站，则可以获取到baidu的ip地址。</p><p>4.ISPDNS缓存<br>如果路由器也没有缓存就会找你的服务商，比如到电信的DNS上查找。</p><p>5.如果都没有找到就会到你的根域名服务器查找域名对应ip，根域名服务器把请求转发到下一级，直到找到ip。(找不到就返回404 找不到服务器)</p><hr><h3 id="3-服务器处理"><a href="#3-服务器处理" class="headerlink" title="3.服务器处理"></a>3.服务器处理</h3><p>服务器是一台安装电脑的机器，常见的系统如Linux，Windows Server 系统里安装的处理请求的应用叫做Web Server。<br>常见的Web服务器有Apache，Nginx，IIS，Lighttpd等。Web服务器接收用户的Request交给网站代码，或者接受请求反向代理到其他Web服务器。也就是一个管理者的作用。<br>下图的白色区域为Web服务器。</p><img src="./2.png" style="width:500px"><hr><h3 id="4-网站处理流程"><a href="#4-网站处理流程" class="headerlink" title="4.网站处理流程"></a>4.网站处理流程</h3><p>经服务器处理后，网站接受请求后进行处理，最后将页面呈现给用户。<br>比如下图的MVC模型</p><img src="./3.png" style="width:500px"><hr><h3 id="5-浏览器读取并再次请求"><a href="#5-浏览器读取并再次请求" class="headerlink" title="5.浏览器读取并再次请求"></a>5.浏览器读取并再次请求</h3><p>HTML字符串被浏览器接受后被一句句读取解析，解析到link标签后重新发送请求获取CSS。解析到script标签后发送请求获取js，并执行代码。解析到img标签后发送请求获取图片。</p><hr><h3 id="6-浏览器渲染"><a href="#6-浏览器渲染" class="headerlink" title="6.浏览器渲染"></a>6.浏览器渲染</h3><p>浏览器根据获取到的HTML和CSS计算并渲染，绘制到屏幕上的js会被执行。<br>到此你就能看到你所打开的网页了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;专有名词解释：URL：统一资源定位符 http : 网络协议 用于找到互联网上的资源&lt;/p&gt;
&lt;h3 id=&quot;1-在浏览器输入URL&quot;&gt;&lt;a href=&quot;#1-在浏览器输入URL&quot; class=&quot;headerlink&quot; title=&quot;1.在浏览器输入URL&quot;&gt;&lt;/a&gt;1.在浏览器输入URL&lt;/h3&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="URL" scheme="https://kisky3.github.io/tags/URL/"/>
    
  </entry>
  
  <entry>
    <title>常见浏览器及浏览器内核</title>
    <link href="https://kisky3.github.io/2018/10/29/%E5%B8%B8%E8%A7%81%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8F%8A%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E6%A0%B8/"/>
    <id>https://kisky3.github.io/2018/10/29/常见浏览器及浏览器内核/</id>
    <published>2018-10-29T10:42:04.000Z</published>
    <updated>2019-06-24T13:57:03.389Z</updated>
    
    <content type="html"><![CDATA[<p>浏览器内核可以分为：渲染引擎(layout engineer)和JS引擎。</p><a id="more"></a><p>它负责：</p><ul><li>获取网页的HTML，XML，图像等内容</li><li>整理CSS讯息以及计算机网页的显示方式</li><li>然后会输出至显示器或打印机。</li></ul><h3 id="内核是什么"><a href="#内核是什么" class="headerlink" title="内核是什么"></a>内核是什么</h3><p>浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。<br>所有的网页浏览器，电子邮件客户端以及其他需要编辑显示网络内容的应用程序都需要内核。JS引擎是解析Javascript语言，执行javascript语言来实现网页的动态效果。</p><p>最开始渲染引擎和JS引擎并没有很明确的区分，后来JS引擎越来越独立，内核就只倾向于只指渲染引擎。</p><hr><h3 id="内核的种类"><a href="#内核的种类" class="headerlink" title="内核的种类"></a>内核的种类</h3><p>内核的种类有很多，加上没什么人使用的非商业的免费内核，可能会有10多种，但是常见的浏览器内核可以分为以下四种：</p><span class="highlight-text" style="background-color:#FFCCCC;">Trident，Gecko，Blink，Webkit。</span><h4 id="Trident-‘traɪd-ə-nt"><a href="#Trident-‘traɪd-ə-nt" class="headerlink" title="Trident ([‘traɪd(ə)nt])"></a>Trident ([‘traɪd(ə)nt])</h4><p>Trident(IE内核)：该内核程序在 1997 年的 IE4 中首次被采用，是微软在 Mosaic（”马赛克”，这是人类历史上第一个浏览器，从此网页可以在图形界面的窗口浏览） 代码的基础之上修改而来的，并沿用到 IE11，也被普遍称作 “IE内核”。</p><p>Trident实际上是一款开放的内核，其接口内核设计的相当成熟，因此才有许多采用 IE 内核而非 IE 的浏览器(壳浏览器)涌现。由于 IE 本身的 “垄断性”（虽然名义上 IE 并非垄断，但实际上，特别是从 Windows 95 年代一直到 XP 初期，就市场占有率来说 IE 的确借助 Windows 的东风处于 “垄断” 的地位）而使得 Trident 内核的长期一家独大，微软很长时间都并没有更新 Trident 内核，这导致了两个后果——</p><p>一是 Trident 内核曾经几乎与 W3C 标准脱节（2005年），二是 Trident 内核的大量 Bug 等安全性问题没有得到及时解决，然后加上一些致力于开源的开发者和一些学者们公开自己认为 IE 浏览器不安全的观点，也有很多用户转向了其他浏览器，Firefox 和 Opera 就是这个时候兴起的。非 Trident 内核浏览器的市场占有率大幅提高也致使许多网页开发人员开始注意网页标准和非 IE浏览器的浏览效果问题。</p><p>补充：IE 从版本 11 开始，初步支持 WebGL 技术。IE8 的 JavaScript 引擎是 Jscript，IE9 开始用 Chakra，这两个版本区别很大，Chakra 无论是速度和标准化方面都很出色。<br>国内很多的双核浏览器的其中一核便是 Trident，美其名曰 “兼容模式”。<br>Window10 发布后，IE 将其内置浏览器命名为 Edge，Edge 最显著的特点就是新内核 EdgeHTML。<br>关于 Edge 浏览器更多可以参考 如何评价 Microsoft Edge 浏览器</p><h4 id="Gecko-‘gekəʊ"><a href="#Gecko-‘gekəʊ" class="headerlink" title="Gecko ([‘gekəʊ])"></a>Gecko ([‘gekəʊ])</h4><p>Gecko(Firefox 内核)：Netscape6 开始采用的内核，后来的 Mozilla FireFox(火狐浏览器) 也采用了该内核，Gecko 的特点是代码完全公开，因此，其可开发程度很高，全世界的程序员都可以为其编写代码，增加功能。因为这是个开源内核，因此受到许多人的青睐，Gecko 内核的浏览器也很多，这也是 Gecko 内核虽然年轻但市场占有率能够迅速提高的重要原因。</p><p>事实上，Gecko 引擎的由来跟 IE 不无关系，前面说过 IE 没有使用 W3C 的标准，这导致了微软内部一些开发人员的不满；他们与当时已经停止更新了的 Netscape 的一些员工一起创办了 Mozilla，以当时的 Mosaic 内核为基础重新编写内核，于是开发出了 Gecko。不过事实上，Gecko 内核的浏览器仍然还是 Firefox (火狐) 用户最多，所以有时也会被称为 Firefox 内核。此外 Gecko 也是一个跨平台内核，可以在Windows、 BSD、Linux 和 Mac OS X 中使用。</p><h4 id="Webkit"><a href="#Webkit" class="headerlink" title="Webkit"></a>Webkit</h4><p>一提到 webkit，首先想到的便是 chrome，可以说，chrome 将 Webkit内核 深入人心，殊不知，Webkit 的鼻祖其实是 Safari。现在很多人错误地把 webkit 叫做 chrome内核（即使 chrome内核已经是 blink 了），苹果都哭瞎了有木有。</p><p>Safari 是苹果公司开发的浏览器，使用了KDE（Linux桌面系统）的 KHTML 作为浏览器的内核，Safari 所用浏览器内核的名称是大名鼎鼎的 WebKit。 Safari 在 2003 年 1 月 7 日首度发行测试版，并成为 Mac OS X v10.3 与之后版本的默认浏览器，也成为苹果其它系列产品的指定浏览器（也已支持 Windows 平台）。</p><p>如上述可知，WebKit 前身是 KDE 小组的 KHTML 引擎，可以说 WebKit 是 KHTML 的一个开源的分支。当年苹果在比较了 Gecko 和 KHTML 后，选择了后者来做引擎开发，是因为 KHTML 拥有清晰的源码结构和极快的渲染速度。</p><p>Webkit内核 可以说是以硬件盈利为主的苹果公司给软件行业的最大贡献之一。随后，2008 年谷歌公司发布 chrome 浏览器，采用的 chromium 内核便 fork 了 Webkit。</p><h4 id="Chromium-Blink"><a href="#Chromium-Blink" class="headerlink" title="Chromium/Blink"></a>Chromium/Blink</h4><p>2008 年，谷歌公司发布了 chrome 浏览器，浏览器使用的内核被命名为 chromium。</p><p>chromium fork 自开源引擎 webkit，却把 WebKit 的代码梳理得可读性提高很多，所以以前可能需要一天进行编译的代码，现在只要两个小时就能搞定。因此 Chromium 引擎和其它基于 WebKit 的引擎所渲染页面的效果也是有出入的。所以有些地方会把 chromium 引擎和 webkit 区分开来单独介绍，而有的文章把 chromium 归入 webkit 引擎中，都是有一定道理的。</p><p>谷歌公司还研发了自己的 Javascript 引擎，V8，极大地提高了 Javascript 的运算速度。</p><p>chromium 问世后，带动了国产浏览器行业的发展。一些基于 chromium 的单核，双核浏览器如雨后春笋般拔地而起，例如 搜狗、360、QQ浏览器等等，无一不是套着不同的外壳用着相同的内核。</p><p>然而 2013 年 4 月 3 日，谷歌在 Chromium Blog 上发表 博客，称将与苹果的开源浏览器核心 Webkit 分道扬镳，在 Chromium 项目中研发 Blink 渲染引擎（即浏览器核心），内置于 Chrome 浏览器之中。</p><p>webkit 用的好好的，为何要投入到一个新的内核中去呢？</p><p>Blink 其实是 WebKit 的分支，如同 WebKit 是 KHTML 的分支。Google 的 Chromium 项目此前一直使用 WebKit(WebCore) 作为渲染引擎，但出于某种原因，并没有将其多进程架构移植入Webkit。</p><p>后来，由于苹果推出的 WebKit2 与 Chromium 的沙箱设计存在冲突，所以 Chromium 一直停留在 WebKit，并使用移植的方式来实现和主线 WebKit2 的对接。这增加了 Chromium 的复杂性，且在一定程度上影响了 Chromium 的架构移植工作。</p><p>基于以上原因，Google 决定从 WebKit 衍生出自己的 Blink 引擎（后由 Google 和 Opera Software 共同研发），将在 WebKit 代码的基础上研发更加快速和简约的渲染引擎，并逐步脱离 WebKit 的影响，创造一个完全独立的 Blink 引擎。这样以来，唯一一条维系 Google 和苹果之间技术关系的纽带就这样被切断了。</p><p>Google 和苹果在多个领域都是竞争对手，而唯独在浏览器引擎上有技术合作，利益一致。但为了各自的利益，谁都不会拿出 100% 的 “诚意” 来做好 WebKit，因为你做出来的成果竞争对手可以直接享用。移动互联网已经崛起，手机和平板设备端必将成为浏览器的另一个战场。这个时候，如果 Google 跟苹果仍然黏在一起，将会严重阻碍双方的进步，也会阻碍 WebKit 的进步。</p><h4 id="Presto-‘prestəʊ"><a href="#Presto-‘prestəʊ" class="headerlink" title="Presto ([‘prestəʊ])"></a>Presto ([‘prestəʊ])</h4><p>Presto 是挪威产浏览器 opera 的 “前任” 内核，为何说是 “前任”，因为最新的 opera 浏览器早已将之抛弃从而投入到了谷歌大本营。</p><p>Opera 的一个里程碑作品是 Opera7.0，因为它使用了 Opera Software 自主开发的 Presto 渲染引擎，取代了旧版 Opera 4 至 6 版本使用的 Elektra 排版引擎。该款引擎的特点就是渲染速度的优化达到了极致，然而代价是牺牲了网页的兼容性。</p><p>Presto 加入了动态功能，例如网页或其部分可随着 DOM 及 Script 语法的事件而重新排版。Presto 在推出后不断有更新版本推出，使不少错误得以修正，以及阅读 Javascript 效能得以最佳化，并成为当时速度最快的引擎。</p><p>然而为了减少研发成本，Opera 在 2013 年 2 月宣布放弃 Presto，转而跟随 Chrome 使用 WebKit 分支的 Chromium 引擎作为自家浏览器核心引擎，Presto 内核的 Opera 浏览器版本永远的停留在了 12.17。在 Chrome 于 2013 年推出 Blink 引擎之后，Opera 也紧跟其脚步表示将转而使用 Blink 作为浏览器核心引擎。</p><p>Presto 与开源的 WebKit 和经过谷歌加持的 Chromium 系列相比毫无推广上的优势，这是 Opera 转投 WebKit 的主要原因，并且使用 WebKit 内核的 Opera 浏览器可以兼容谷歌 Chrome 浏览器海量的插件资源。但是换内核的代价对于 Opera 来说过于惨痛。使用谷歌的 WebKit 内核之后，原本快速，轻量化，稳定的 Opera 浏览器变得异常的卡顿，而且表现不稳定，Opera 原本旧内核浏览器书签同步到新内核上的工作 Opera 花了整整两年时间，期间很多 Opera 的用户纷纷转投谷歌浏览器和其他浏览器，造成了众多的用户流失。时至今日现在还有上千万人在使用老版本的 Opera。</p><p>很多人都认为 Opera 浏览器终止在了 12.17，此后所更新的 Opera 版本号不再是原来那个 Opera。</p><hr><h3 id="关于移动端"><a href="#关于移动端" class="headerlink" title="关于移动端"></a>关于移动端</h3><p>移动端的浏览器内核主要说的是系统内置浏览器的内核。</p><p>目前移动设备浏览器上常用的内核有 Webkit，Blink，Trident，Gecko 等，其中 iPhone 和 iPad 等苹果 iOS 平台主要是 WebKit，Android 4.4 之前的 Android 系统浏览器内核是 WebKit，Android4.4 系统浏览器切换到了Chromium，内核是 Webkit 的分支 Blink，Windows Phone 8 系统浏览器内核是 Trident。</p><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>浏览器内核主要指的是浏览器的渲染引擎，2013 年以前，代表有 Trident（IE），Gecko（firefox），Webkit（Safari chrome 等）以及 Presto（opera)。2013 年，谷歌开始研发 blink 引擎，chrome 28 以后开始使用，而 opera 则放弃了自主研发的 Presto 引擎，投入谷歌怀抱，和谷歌一起研发 blink 引擎，国内各种 chrome系的浏览器（360、UC、QQ、2345 等等）也纷纷放弃 webkit，投入 blink 的怀抱。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;浏览器内核可以分为：渲染引擎(layout engineer)和JS引擎。&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="Browser" scheme="https://kisky3.github.io/tags/Browser/"/>
    
  </entry>
  
  <entry>
    <title>Get和Post提交数据有什么区别</title>
    <link href="https://kisky3.github.io/2018/10/25/Get%E5%92%8CPost%E6%8F%90%E4%BA%A4%E6%95%B0%E6%8D%AE%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/"/>
    <id>https://kisky3.github.io/2018/10/25/Get和Post提交数据有什么区别/</id>
    <published>2018-10-25T07:18:03.000Z</published>
    <updated>2019-06-24T10:34:51.221Z</updated>
    
    <content type="html"><![CDATA[<span class="highlight-text" style="background-color:#FFCCCC;">1.post更安全，安全要求高的用post 要求低的用get</span><br><a id="more"></a><br><span class="highlight-text" style="background-color:#FFCCCC;">2.post发送的数据更大（get有url长度限制）</span><br><br><span class="highlight-text" style="background-color:#FFCCCC;">3.post能发送更多的数据类型</span><br><br><span class="highlight-text" style="background-color:#FFCCCC;">4.post比get慢</span><br>(原因:post在真正接收数据之前会先将请求头发送给服务器进行确认，服务器返回100 Continue响应之后才真正发送数据 )<br><br><span class="highlight-text" style="background-color:#FFCCCC;">5.post用于向后台传数据，get一般用于向后台要数据。</span>]]></content>
    
    <summary type="html">
    
      &lt;span class=&quot;highlight-text&quot; style=&quot;background-color:#FFCCCC;&quot;&gt;1.post更安全，安全要求高的用post 要求低的用get&lt;/span&gt;
&lt;br&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="Get" scheme="https://kisky3.github.io/tags/Get/"/>
    
      <category term="Post" scheme="https://kisky3.github.io/tags/Post/"/>
    
  </entry>
  
  <entry>
    <title>CSRF攻击及防范措施</title>
    <link href="https://kisky3.github.io/2018/10/14/CSRF%E6%94%BB%E5%87%BB%E5%8F%8A%E9%98%B2%E8%8C%83%E6%8E%AA%E6%96%BD/"/>
    <id>https://kisky3.github.io/2018/10/14/CSRF攻击及防范措施/</id>
    <published>2018-10-14T04:58:15.000Z</published>
    <updated>2019-06-24T14:18:31.711Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CSRF是什么"><a href="#CSRF是什么" class="headerlink" title="CSRF是什么"></a>CSRF是什么</h3><p>CSRF全称为跨站请求伪造（Cross-site request forgery），</p><a id="more"></a><p>是一种网络攻击方式，也被称为 one-click attack 或者 session riding。<br>简单说来就是已经利用登陆成功的User强制实行某些操作的恶意攻击行为。</p><hr><h3 id="CSRF攻击原理"><a href="#CSRF攻击原理" class="headerlink" title="CSRF攻击原理"></a>CSRF攻击原理</h3><p>其原理是攻击者构造网站后台某个功能接口的请求地址，诱导用户去点击或者用特殊方法让该请求地址自动加载。<br>用户在登录状态下这个请求被服务端接收后会被误以为是用户合法的操作。对于 GET 形式的接口地址可轻易被攻击，<br>对于 POST 形式的接口地址也不是百分百安全，攻击者可诱导用户进入带 Form 表单可用POST方式提交参数的页面。<br><img src="./1.png" style="width:500px"></p><p>角色：</p><ul><li>正常浏览网页的用户： User</li><li>正规的但是具有漏洞的网站： WebA</li><li>利用CSRF进行攻击百度网站： WebB</li></ul><p>例子：<br>比如有shop.example.com这样一个购物网站，用户通过用户名和密码可以登录。其中有点击按钮重设密码的功能。<br>当用户点击按钮更改密码时，下图的送信请求将会被提交至WebA的服务器</p><p>URL：</p><ol><li><a href="http://shop.example.com/password/change" target="_blank" rel="noopener">http://shop.example.com/password/change</a></li><li>Parmeter:</li><li>new_pass:XXXXX</li><li>new_pass_conf:XXXXX</li></ol><p>说明：<br>1.User正常登陆网页WebA，WebA通过用户的认证并在User的浏览器中产生Cookie(证明是User本人登陆)</p><p>2.攻击者伪造能发送同样请求的网站WebB。利用简单的Javascript便可达到目的。</p><p>3.攻击者把该伪造的网站的URL放到img的src里上传，当User登陆后，打开网页时便会自动加载图片，WebB会利用用户的浏览器访问WebA。<br>由于User是在登录状态下，所以User的浏览器根据WebB的要求，带着1中生成的Cookie访问WebA。</p><p>4.WebA接收到User浏览器的请求，并带着用户的Cookie(如例子中的请求)，要求修改密码。</p><p>5.WebA误以为是用户的操作，响应修改密码的请求。User密码被盗。</p><p>以上Web便达到了在用户不知情的情况下，利用用户登陆后的Cookie进行用户的模拟操作过程。</p><hr><h3 id="CSRF防范措施"><a href="#CSRF防范措施" class="headerlink" title="CSRF防范措施"></a>CSRF防范措施</h3><p>1.服务端在收到路由请求时，生成一个随机数，在渲染请求页面时把随机数埋入页面<br>（一般埋入 form 表单内，）</p><p>2.服务端设置setCookie，把该随机数作为session种入用户浏览器。<br>(加入保存在Cookie中，旧Token消耗后，新的Token会被生成，造成用户混乱。而Session能避免此问题。)</p><p>3.当用户发送 GET 或者 POST 请求时带上_csrf_token参数<br>（对于 Form 表单直接提交即可，因为会自动把当前表单内所有的 input 提交给后台，包括_csrf_token）</p><p>4.后台在接受到请求后解析请求的cookie获取_csrf_token的值，然后和用户请求提交的_csrf_token做个比较，如果相等表示请求是合法的。</p><p>（下图是某电商网站的真实设置，这里页面上设置的 token和session里设置的token 虽然不直接相等，但 md5(‘1474357164624’) === ‘4bd4e512b0fbd9357150649adadedd4e’，后台还是很好计算的）</p><img src="./2.png" style="width:500px"><img src="./3.png" style="width:500px"><p>注意：尽量避免使用Get。因为能在发送请求时能在URL处暴露token信息。</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/22521378" target="_blank" rel="noopener">「每日一题」CSRF 是什么？</a>;</li><li><a href="https://www.jianshu.com/p/00fa457f6d3e" target="_blank" rel="noopener">CSRF攻击原理及防护</a>;</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;CSRF是什么&quot;&gt;&lt;a href=&quot;#CSRF是什么&quot; class=&quot;headerlink&quot; title=&quot;CSRF是什么&quot;&gt;&lt;/a&gt;CSRF是什么&lt;/h3&gt;&lt;p&gt;CSRF全称为跨站请求伪造（Cross-site request forgery），&lt;/p&gt;
    
    </summary>
    
      <category term="Back-end Knowledge" scheme="https://kisky3.github.io/categories/Back-end-Knowledge/"/>
    
    
      <category term="CSRF" scheme="https://kisky3.github.io/tags/CSRF/"/>
    
  </entry>
  
</feed>
