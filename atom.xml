<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xiang Yu&#39;s Blog</title>
  
  <subtitle>Hello World, Hello Programming!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://kisky3.github.io/"/>
  <updated>2019-06-24T14:39:19.237Z</updated>
  <id>https://kisky3.github.io/</id>
  
  <author>
    <name>Xiang Yu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【TOP】CSS TIPS</title>
    <link href="https://kisky3.github.io/2019/01/11/CSSTip/"/>
    <id>https://kisky3.github.io/2019/01/11/CSSTip/</id>
    <published>2019-01-11T14:24:59.000Z</published>
    <updated>2019-06-24T14:39:19.237Z</updated>
    
    <content type="html"><![CDATA[<div class="alert success no-icon"><h3 id="About-common-css-tips-Continuously-update-here"><a href="#About-common-css-tips-Continuously-update-here" class="headerlink" title="About common css tips. Continuously update here."></a>About common css tips. Continuously update here.</h3></div><a id="more"></a><div class="alert info no-icon"><h4 id="1-CSS关闭按钮"><a href="#1-CSS关闭按钮" class="headerlink" title="1. CSS关闭按钮"></a>1. CSS关闭按钮</h4></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.c-modal-close_button</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">   <span class="attribute">content</span>: <span class="string">"\00D7"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.c-modal-close_button</span> &#123;</span><br><span class="line">   <span class="attribute">position</span>: absolute;</span><br><span class="line">   <span class="attribute">top</span>: <span class="number">8px</span>;</span><br><span class="line">   <span class="attribute">right</span>: <span class="number">15px</span>;</span><br><span class="line">   <span class="attribute">font-size</span>: <span class="number">25px</span>;</span><br><span class="line">   <span class="attribute">color</span>: <span class="built_in">var</span>(--color-navy-e9);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><div class="alert info no-icon"><h4 id="2-Input-伪类实现输入框active时改变背景颜色"><a href="#2-Input-伪类实现输入框active时改变背景颜色" class="headerlink" title="2. [Input]伪类实现输入框active时改变背景颜色"></a>2. [Input]伪类实现输入框active时改变背景颜色</h4></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[name="input"]</span><span class="selector-pseudo">:focus</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>:<span class="built_in">var</span>(--color-gray-f8);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><div class="alert info no-icon"><h4 id="3-Input-去掉Input自带淡蓝色边框"><a href="#3-Input-去掉Input自带淡蓝色边框" class="headerlink" title="3. [Input]去掉Input自带淡蓝色边框"></a>3. [Input]去掉Input自带淡蓝色边框</h4></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type="text"]</span>,</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type="password"]</span>,</span><br><span class="line"><span class="selector-tag">textarea</span>,</span><br><span class="line"><span class="selector-tag">select</span> &#123;</span><br><span class="line">    <span class="attribute">outline</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><div class="alert info no-icon"><h4 id="4-CSS伪元素实现三角形"><a href="#4-CSS伪元素实现三角形" class="headerlink" title="4. CSS伪元素实现三角形"></a>4. CSS伪元素实现三角形</h4></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.triangle</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-class">.triangle</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">10px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">10px</span> solid <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">10px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">10px</span> solid transparent;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-class">.triangle</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">12px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">12px</span> solid <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">12px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">12px</span> solid transparent;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><hr><div class="alert info no-icon"><h4 id="5-CSS上下跳动的动画效果"><a href="#5-CSS上下跳动的动画效果" class="headerlink" title="5. CSS上下跳动的动画效果"></a>5. CSS上下跳动的动画效果</h4></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.c-style-item</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>:<span class="built_in">var</span>(--color-green-00);</span><br><span class="line">  <span class="attribute">color</span>:red;</span><br><span class="line">  <span class="attribute">animation</span>: shake <span class="number">2s</span> infinite;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">keyframes</span> shake &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(0px, 0px);</span><br><span class="line">  &#125;</span><br><span class="line">  50% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(0px, -10px);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(0px, 0px);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><div class="alert info no-icon"><h4 id="6-CSS不固定宽度模块屏幕居中"><a href="#6-CSS不固定宽度模块屏幕居中" class="headerlink" title="6.CSS不固定宽度模块屏幕居中"></a>6.CSS不固定宽度模块屏幕居中</h4></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.c-dialog</span> &#123;</span><br><span class="line">     <span class="attribute">position</span>: absolute;</span><br><span class="line">     <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">     <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">     <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%,-50%);</span><br><span class="line">     <span class="attribute">border</span>: solid <span class="number">1px</span> <span class="number">#ccc</span>;</span><br><span class="line">     <span class="attribute">background</span>: <span class="number">#ccc</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><hr><div class="alert info no-icon"><h4 id="7-HTML使用pre的情况下，让长文字自动换行"><a href="#7-HTML使用pre的情况下，让长文字自动换行" class="headerlink" title="7. HTML使用pre的情况下，让长文字自动换行"></a>7. HTML使用pre的情况下，让长文字自动换行</h4></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">pre</span>&#123;</span><br><span class="line">  <span class="attribute">white-space</span>:pre-wrap;</span><br><span class="line">  <span class="attribute">word-wrap</span>:break-word;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Parent*/</span></span><br><span class="line"><span class="selector-class">.c-modal</span> &#123;</span><br><span class="line">   ...</span><br><span class="line">   <span class="selector-tag">word-wrap</span>: <span class="selector-tag">break-word</span>;</span><br><span class="line">   <span class="selector-tag">white-space</span> : <span class="selector-tag">normal</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;alert success no-icon&quot;&gt;&lt;h3 id=&quot;About-common-css-tips-Continuously-update-here&quot;&gt;&lt;a href=&quot;#About-common-css-tips-Continuously-update-here&quot; class=&quot;headerlink&quot; title=&quot;About common css tips. Continuously update here.&quot;&gt;&lt;/a&gt;About common css tips. Continuously update here.&lt;/h3&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="CSS" scheme="https://kisky3.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>关于CSS浮动</title>
    <link href="https://kisky3.github.io/2018/12/30/%E5%85%B3%E4%BA%8ECSS%E6%B5%AE%E5%8A%A8/"/>
    <id>https://kisky3.github.io/2018/12/30/关于CSS浮动/</id>
    <published>2018-12-30T14:00:12.000Z</published>
    <updated>2019-06-24T14:16:42.664Z</updated>
    
    <content type="html"><![CDATA[<h3 id="浮动元素的特征"><a href="#浮动元素的特征" class="headerlink" title="浮动元素的特征"></a>浮动元素的特征</h3><p>一个浮动元素会向左或向右移动，直到其外边（outer edge）挨到包含块边沿或者另</p><a id="more"></a><p>一个浮动盒的外边。<br>如果存在行盒，浮动盒的外top会与当前行盒的top对齐。<br>如果没有足够的水平空间来浮动，它会向下移动，直到空间合适或者不会再出现其他浮动了。<br>块级元素设置浮动后会呈现出inline-block的感觉，宽度会收缩。<br>行内元素设置浮动后会呈现块级的特性。比如可以设置宽高margin等。</p><hr><h3 id="浮动元素的效果及对其他元素的影响"><a href="#浮动元素的效果及对其他元素的影响" class="headerlink" title="浮动元素的效果及对其他元素的影响"></a>浮动元素的效果及对其他元素的影响</h3><p>下面为浮动最简单的一个左浮动效果。<br>有3个box，分别向左浮动。<br>可以看到box原来为块级元素，本应该单独占据一行。但是设置左浮动之后，脱离文档流，依次向左移动。由于没有足够空间来让box3移动，便到了下一行。<br><img src="./1.png" style="width:500px"></p><br>如果改为右浮动的话，效果将变成box2，box1，box3。<img src="./2.png" style="width:500px"><p>这个效果是因为浏览器渲染时，从上到下渲染代码。第一个是box1，便向右浮动，直至碰到外边缘便停止下来。第二个是box2接着向右浮动，直至碰到了box1的外边缘便停止浮动。最后是box3，向右浮动时没有足够空间便移到了下一行。</p><p>有时浮动还会出现如下图卡住的现象。<br>这是因为box3在向左浮动时，第一个碰到的是box1的外边缘，便停下来卡住了。</p><img src="./3.png" style="width:500px"><p>当浮动元素与普通元素和文本有交集的时候会是什么情况呢。<br>我们在box1下面加一个文本p作为文字，p背景色设置为黄色作为普通元素。其余box元素不变向左浮动。最终呈现效果如下图:</p><img src="./4.png" style="width:500px"><br>可以得出结论，box1把普通元素p遮挡住了，普通元素看不见浮动元素。但是普通元素内的文字是可以看到浮动元素的，所以就会围绕浮动元素显示。<hr><h3 id="关于如何清除浮动"><a href="#关于如何清除浮动" class="headerlink" title="关于如何清除浮动"></a>关于如何清除浮动</h3><h5 id="clear-left-clear-right定义："><a href="#clear-left-clear-right定义：" class="headerlink" title="clear: left/clear right定义："></a>clear: left/clear right定义：</h5><p>要求该盒的top border边位于源文档中在此之前的元素形成的所有左/右浮动盒的bottom外边下方。</p><p>也就是说当我们给一个元素设置了clear:left之后，它的文档流上方如果有左浮动元素，它就要位于该左浮动元素的下方。如果前面没有左浮动元素则不起效果。<br>clear:right也同理。<br>还有clear：both 就是该元素之前有左浮动元素或者右浮动元素都生效。</p><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><p>在浮动元素的最后加上一个普通元素，设置clear:left,达到撑开容器的效果。</p><img src="./5.png" style="width:500px"><h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><p>给包含浮动元素的容器设置一个class伪元素来清除浮动。相当于在最下方添加了一个内容为空的块级元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line"> <span class="attribute">content</span>:<span class="string">''</span>;</span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line"><span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;浮动元素的特征&quot;&gt;&lt;a href=&quot;#浮动元素的特征&quot; class=&quot;headerlink&quot; title=&quot;浮动元素的特征&quot;&gt;&lt;/a&gt;浮动元素的特征&lt;/h3&gt;&lt;p&gt;一个浮动元素会向左或向右移动，直到其外边（outer edge）挨到包含块边沿或者另&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="CSS" scheme="https://kisky3.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>IconFont</title>
    <link href="https://kisky3.github.io/2018/12/28/IconFont/"/>
    <id>https://kisky3.github.io/2018/12/28/IconFont/</id>
    <published>2018-12-28T10:38:46.000Z</published>
    <updated>2019-06-24T14:17:42.675Z</updated>
    
    <content type="html"><![CDATA[<p>Icon Font简而言之也就是把字体做成图标</p><h3 id="Icon-Font的原理"><a href="#Icon-Font的原理" class="headerlink" title="Icon Font的原理"></a>Icon Font的原理</h3><a id="more"></a><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello &amp;#x9965; &amp;#x4eba;&amp;#x8c37;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">p&#123;</span><br><span class="line">  font-family: serif;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里把「饥人谷」这几个字改为 unicode 编码，此时页面上仍然能以serif 字体展示「饥人谷」三个字。<br>使用浏览器打开页面时，浏览器会读取 HTML 文件进行解析渲染。当读到「饥人谷」三个字时会转换成对应的 unicode码（可以认为是世界上任意一种文字的特定编号）。再根据HTML 里设置的 font-family （如果没设置则使用浏览器默认设置）去查找电脑里（如果有自定义字体@font-face ，则加载对应字体文件）对应字体的字体文件。找到文件后根据 unicode 码去查找绘制外形，找到后绘制到页面上。 所以对于第二个范例， 「&amp;#9965」是「饥」的 unicede 码，所以用户最终也能看到serf字体样式的「饥」字。</p><hr><h3 id="Icon-Font生成和使用步骤"><a href="#Icon-Font生成和使用步骤" class="headerlink" title="Icon Font生成和使用步骤"></a>Icon Font生成和使用步骤</h3><h4 id="1-制作字体文件"><a href="#1-制作字体文件" class="headerlink" title="1.制作字体文件"></a>1.制作字体文件</h4><p>这个需要设计师把字体文件做好。一般不属于前端工作范畴，在这里掠过不讲。</p><h4 id="2-声明font-family"><a href="#2-声明font-family" class="headerlink" title="2.声明font-family"></a>2.声明font-family</h4><ul><li>使用本地链接</li><li>使用第三方链接</li></ul><h4 id="3-使用font-family"><a href="#3-使用font-family" class="headerlink" title="3.使用font-family"></a>3.使用font-family</h4><ul><li>使用HTML实体</li><li>使用CSS：before</li></ul><hr><h3 id="最常用的Icon-Font生成步骤"><a href="#最常用的Icon-Font生成步骤" class="headerlink" title="最常用的Icon Font生成步骤"></a>最常用的Icon Font生成步骤</h3><h4 id="1-点击打开阿里巴巴的免费字体工具网站"><a href="#1-点击打开阿里巴巴的免费字体工具网站" class="headerlink" title="1. 点击打开阿里巴巴的免费字体工具网站"></a>1. 点击打开<a href="https://www.iconfont.cn/" target="_blank" rel="noopener">阿里巴巴的免费字体工具网站</a></h4><h4 id="2-在搜索栏里搜索自己需要的图标（英文）"><a href="#2-在搜索栏里搜索自己需要的图标（英文）" class="headerlink" title="2. 在搜索栏里搜索自己需要的图标（英文）"></a>2. 在搜索栏里搜索自己需要的图标（英文）</h4><img src="./1.png" style="width:500px"><h4 id="3-用Github登陆后选择自己中意的图标，添加入库"><a href="#3-用Github登陆后选择自己中意的图标，添加入库" class="headerlink" title="3. 用Github登陆后选择自己中意的图标，添加入库"></a>3. 用Github登陆后选择自己中意的图标，添加入库</h4><img src="./2.png" style="width:500px"><h4 id="4-可以选择添加至项目或者直接下载至本地"><a href="#4-可以选择添加至项目或者直接下载至本地" class="headerlink" title="4. 可以选择添加至项目或者直接下载至本地"></a>4. 可以选择添加至项目或者直接下载至本地</h4><p>下图的search下的&amp;#xe71d为HTML实体，可以用实体显示但是不便记忆所以不推荐<br>也可以使用CSS before 的content加上/ 导出icon</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.icon-search</span><span class="selector-pseudo">:before</span> &#123; <span class="attribute">content</span>: <span class="string">"\e71d"</span>; &#125;</span><br></pre></td></tr></table></figure><img src="./3.png" style="width:500px"><h4 id="5-下载至本地后解压"><a href="#5-下载至本地后解压" class="headerlink" title="5. 下载至本地后解压"></a>5. 下载至本地后解压</h4><p>为了浏览器兼容，建议复制后缀名为.eot,svg,ttf和woff的4个文件到自己的目录下</p><img src="./4.png" style="width:500px"><h4 id="6-复制iconfont-css的内容到自己的页面，并直接添加span和class引用生产的字体文件"><a href="#6-复制iconfont-css的内容到自己的页面，并直接添加span和class引用生产的字体文件" class="headerlink" title="6. 复制iconfont.css的内容到自己的页面，并直接添加span和class引用生产的字体文件"></a>6. 复制iconfont.css的内容到自己的页面，并直接添加span和class引用生产的字体文件</h4><img src="./5.png" style="width:500px"><h4 id="7-保存并查看"><a href="#7-保存并查看" class="headerlink" title="7. 保存并查看"></a>7. 保存并查看</h4>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Icon Font简而言之也就是把字体做成图标&lt;/p&gt;
&lt;h3 id=&quot;Icon-Font的原理&quot;&gt;&lt;a href=&quot;#Icon-Font的原理&quot; class=&quot;headerlink&quot; title=&quot;Icon Font的原理&quot;&gt;&lt;/a&gt;Icon Font的原理&lt;/h3&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="CSS" scheme="https://kisky3.github.io/tags/CSS/"/>
    
      <category term="IconFont" scheme="https://kisky3.github.io/tags/IconFont/"/>
    
  </entry>
  
  <entry>
    <title>【TOP】GIT TIPS</title>
    <link href="https://kisky3.github.io/2018/12/06/GitTip/"/>
    <id>https://kisky3.github.io/2018/12/06/GitTip/</id>
    <published>2018-12-06T09:28:52.000Z</published>
    <updated>2019-06-24T10:47:09.595Z</updated>
    
    <content type="html"><![CDATA[<div class="alert info no-icon"><h3 id="About-common-git-tips-Continuously-update-here"><a href="#About-common-git-tips-Continuously-update-here" class="headerlink" title="About common git tips. Continuously update here."></a>About common git tips. Continuously update here.</h3></div><a id="more"></a><div class="alert success no-icon"><h4 id="1-git-pull时-「Error：The-following-untracked-working-tree-files-would-be-overwritten-by-merge-」"><a href="#1-git-pull时-「Error：The-following-untracked-working-tree-files-would-be-overwritten-by-merge-」" class="headerlink" title="1. git pull时 「Error：The following untracked working tree files would be overwritten by merge:」"></a>1. git pull时 「Error：The following untracked working tree files would be overwritten by merge:」</h4></div><p>输入以下代码后再进行修改，然后再push就好 （本地做的修改会不见 修改多的时候不建议！)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin</span><br><span class="line">git reset --hard FETCH_HEAD</span><br></pre></td></tr></table></figure><hr><br><div class="alert success no-icon"><h4 id="2-git本地版本回退与远端版本回退"><a href="#2-git本地版本回退与远端版本回退" class="headerlink" title="2. git本地版本回退与远端版本回退"></a>2. git本地版本回退与远端版本回退</h4></div><h5 id="本地回滚"><a href="#本地回滚" class="headerlink" title="本地回滚"></a>本地回滚</h5><p>1.在Github上或者下面的命令行查看想回退版本的版本号。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure><p>2.接着回退版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard *****(版本号)</span><br></pre></td></tr></table></figure><h5 id="远程回滚"><a href="#远程回滚" class="headerlink" title="远程回滚"></a>远程回滚</h5><h6 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h6><p>如果错误提交已经推送到自己的远程分支了，那么就需要回滚远程分支了。 以下方法只能在自己一人的branch下使用。<br>强制回滚会消除别人提交的修改。慎用！</p><ol><li><p>首先回退本地分支步骤参见本地回滚</p></li><li><p>强制推送到远程分支</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -f *****(你的分支名)</span><br></pre></td></tr></table></figure><h6 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h6><p>git revert 命令意思是撤销某次提交。<br>它会产生一个新的提交，虽然代码回退了，但是版本依然是向前的，所以，当你用revert回退之后，所有人pull之后，他们的代码也自动的回退了。<br>如果使用 revert 撤销的不是最近一次提交，那么一定会有代码冲突，需要你合并代码，合并代码只需要把当前的代码全部去掉，保留之前版本的代码就可以了.<br>撤销最近一次提交</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git revert HEAD</span><br></pre></td></tr></table></figure><p>撤销上上次提交</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git revert HEAD～1</span><br></pre></td></tr></table></figure><p>撤销这次提交</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git revert *****(版本号)</span><br></pre></td></tr></table></figure><hr><br><div class="alert success no-icon"><h4 id="3-git-将当前branch1的一部分抽出merge-剩余部分在另一个branch2上开发"><a href="#3-git-将当前branch1的一部分抽出merge-剩余部分在另一个branch2上开发" class="headerlink" title="3. git 将当前branch1的一部分抽出merge 剩余部分在另一个branch2上开发"></a>3. git 将当前branch1的一部分抽出merge 剩余部分在另一个branch2上开发</h4></div><ol><li>切换回master</li><li>在master上创建一个新的branch2作为继续开发的branch</li><li>在branch2上merge branch1</li><li>将branch1 返回到想merge的范围，然后强制push回滚 之后merge</li><li>在branch2 上进行后续开发</li></ol><hr><br><div class="alert success no-icon"><h3 id="4-Git-撤销修改"><a href="#4-Git-撤销修改" class="headerlink" title="4. Git 撤销修改"></a>4. Git 撤销修改</h3></div>1.本地修改了一堆文件(并没有使用git add到暂存区)，想放弃修改。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- filename</span><br></pre></td></tr></table></figure><p>2.撤销所有文件/文件夹的修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout .</span><br></pre></td></tr></table></figure><p>3.本地新增了一堆文件(并没有git add到暂存区)，想放弃修改。<br>【单个文件】</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm filename / rm dir -rf</span><br></pre></td></tr></table></figure><p>【所有文件/文件夹：】</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clean -xdf</span><br></pre></td></tr></table></figure><p>4.本地修改/新增了一堆文件，已经git add到暂存区，想放弃修改。<br>【单个文件/文件夹：】</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD filename</span><br></pre></td></tr></table></figure><p>【所有文件/文件夹：】</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD .</span><br></pre></td></tr></table></figure><p>5.本地通过git add &amp; git commit 之后，想要撤销此次commit</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset commit_id</span><br></pre></td></tr></table></figure><hr><br><div class="alert success no-icon"><h4 id="5-git-将当前的branch的commit移动到另一个新的branch"><a href="#5-git-将当前的branch的commit移动到另一个新的branch" class="headerlink" title="5. git 将当前的branch的commit移动到另一个新的branch"></a>5. git 将当前的branch的commit移动到另一个新的branch</h4></div><p>git cherry-pick可以理解为”挑拣”提交，它会获取某一个分支的单笔提交，并作为一个新的提交引入到你当前分支上。 当我们需要在本地合入其他分支的提交时，如果我们不想对整个分支进行合并，而是只想将某一次提交合入到本地当前分支上，那么就要使用git cherry-pick了。</p><p>查看你需要的commit，然后切换到master上建立新分支。</p><h6 id="一个commit的情况下"><a href="#一个commit的情况下" class="headerlink" title="一个commit的情况下"></a>一个commit的情况下</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick 版本号</span><br></pre></td></tr></table></figure><h6 id="复数commit的情况下"><a href="#复数commit的情况下" class="headerlink" title="复数commit的情况下"></a>复数commit的情况下</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick [起点版本号]..[终点版本号]</span><br></pre></td></tr></table></figure><h6 id="终止cherry-pick"><a href="#终止cherry-pick" class="headerlink" title="终止cherry-pick"></a>终止cherry-pick</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick --abort</span><br></pre></td></tr></table></figure><p>如果发生conflict则需要解决冲突并commit。复数的情况下利用下面的comment查看状态并继续cheery-pick</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line">git cherry-pick --continue</span><br></pre></td></tr></table></figure><p>最后成功后git push到新分支便可以获得所需commit（不是新分支的情况下也适用。）</p><hr><br><div class="alert success no-icon"><h4 id="6-git删除分支"><a href="#6-git删除分支" class="headerlink" title="6. git删除分支"></a>6. git删除分支</h4></div><h6 id="删除已经push的远程分支"><a href="#删除已经push的远程分支" class="headerlink" title="删除已经push的远程分支"></a>删除已经push的远程分支</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -r -d origin/branch-name</span><br><span class="line">git push origin :branch-name</span><br></pre></td></tr></table></figure><p>但是本地查看branch还是能看到删除的分支。利用下面的命令行可删除远程仓库不存在的分支。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote prune origin</span><br></pre></td></tr></table></figure><h6 id="删除本地分支"><a href="#删除本地分支" class="headerlink" title="删除本地分支"></a>删除本地分支</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d</span><br></pre></td></tr></table></figure><hr><br><div class="alert success no-icon"><h4 id="7-出现错误-fatal-remote-origin-already-exists"><a href="#7-出现错误-fatal-remote-origin-already-exists" class="headerlink" title="7. 出现错误 fatal: remote origin already exists"></a>7. 出现错误 fatal: remote origin already exists</h4></div><p>当要把本地文件夹上传到git时要执行下面的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin 〜</span><br></pre></td></tr></table></figure><p>但是有时会出现fatal: remote origin already exists.的错误信息，<br>此时需要使用git remote rm origin删除origin，然后再次上传即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git remote rm origin</span><br><span class="line">$ git remote add origin git@github.com:user_name/repository_name.git</span><br><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;alert info no-icon&quot;&gt;&lt;h3 id=&quot;About-common-git-tips-Continuously-update-here&quot;&gt;&lt;a href=&quot;#About-common-git-tips-Continuously-update-here&quot; class=&quot;headerlink&quot; title=&quot;About common git tips. Continuously update here.&quot;&gt;&lt;/a&gt;About common git tips. Continuously update here.&lt;/h3&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="Git" scheme="https://kisky3.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>关于CSS继承</title>
    <link href="https://kisky3.github.io/2018/11/25/%E5%85%B3%E4%BA%8ECSS%E7%BB%A7%E6%89%BF/"/>
    <id>https://kisky3.github.io/2018/11/25/关于CSS继承/</id>
    <published>2018-11-25T09:12:40.000Z</published>
    <updated>2019-06-24T10:35:33.438Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是-CSS-继承"><a href="#什么是-CSS-继承" class="headerlink" title="什么是 CSS 继承?"></a>什么是 CSS 继承?</h3><p>CSS继承是指子元素能够拥有和父元素一样的属性。不用特地在子元素上定义但是也能在页面上展示出来。</p><a id="more"></a><hr><h4 id="哪些属性能继承"><a href="#哪些属性能继承" class="headerlink" title="哪些属性能继承"></a>哪些属性能继承</h4><p>1.字体系列属性</p><ul><li>font：组合字体</li><li>font-family：规定元素的字体系列</li><li>font-weight：设置字体的粗细</li><li>font-size：设置字体的尺寸</li><li>font-style：定义字体的风格</li><li>font-variant：设置小型大写字母的字体显示文本，这意味着所有的小写字母均会被转换为大写，但是所有使用小型大写字体的字母与其余文本相比，其字体尺寸更小。</li><li>font-stretch：对当前的 font-family 进行伸缩变形。所有主流浏览器都不支持。</li><li>font-size-adjust：为某个元素规定一个 aspect 值，这样就可以保持首选字体的 x-height。</li></ul><p>2、文本系列属性</p><ul><li>text-indent：文本缩进</li><li>text-align：文本水平对齐</li><li>line-height：行高</li><li>word-spacing：增加或减少单词间的空白（即字间隔）</li><li>letter-spacing：增加或减少字符间的空白（字符间距）</li><li>text-transform：控制文本大小写</li><li>direction：规定文本的书写方向</li><li>color：文本颜色</li></ul><p>3、元素可见性：</p><ul><li>visibility</li></ul><p>4、表格布局属性：</p><ul><li>caption-side</li><li>border-collapse</li><li>border-spacing</li><li>empty-cells</li><li>table-layout</li></ul><p>5、列表布局属性：</p><ul><li>list-style-type</li><li>list-style-image</li><li>list-style-position</li><li>list-style</li></ul><p>6、生成内容属性：</p><ul><li>quotes</li></ul><p>7、光标属性：</p><ul><li>cursor</li></ul><p>8、页面样式属性：</p><ul><li>page</li><li>page-break-inside</li><li>windows</li><li>orphans</li></ul><p>9、声音样式属性：</p><ul><li>speak</li><li>speak-punctuation</li><li>speak-numeral</li><li>speak-header</li><li>speech-rate</li><li>volume</li><li>voice-family</li><li>pitch</li><li>pitch-range</li><li>stress</li><li>richness</li><li>azimuth</li><li>elevation</li></ul><hr><h3 id="二、有继承性的属性"><a href="#二、有继承性的属性" class="headerlink" title="二、有继承性的属性"></a>二、有继承性的属性</h3><p>1、字体系列属性</p><ul><li>font：组合字体</li><li>font-family：规定元素的字体系列</li><li>font-weight：设置字体的粗细</li><li>font-size：设置字体的尺寸</li><li>font-style：定义字体的风格</li><li>font-variant：设置小型大写字母的字体显示文本，这意味着所有的小写字母均会被转换为大写，但是所有使用小型大写字体的字母与其余文本相比，其字体尺寸更小。</li><li>font-stretch：对当前的 font-family 进行伸缩变形。所有主流浏览器都不支持。</li><li>font-size-adjust：为某个元素规定一个 aspect 值，这样就可以保持首选字体的 x-height。</li></ul><p>2、文本系列属性</p><ul><li>text-indent：文本缩进</li><li>text-align：文本水平对齐</li><li>line-height：行高</li><li>word-spacing：增加或减少单词间的空白（即字间隔）</li><li>letter-spacing：增加或减少字符间的空白（字符间距）</li><li>text-transform：控制文本大小写</li><li>direction：规定文本的书写方向</li><li>color：文本颜色</li></ul><p>3、元素可见性：</p><ul><li>visibility</li></ul><p>4、表格布局属性：</p><ul><li>caption-side</li><li>border-collapse</li><li>border-spacing</li><li>empty-cells</li><li>table-layout</li></ul><p>5、列表布局属性：</p><ul><li>list-style-type</li><li>list-style-image</li><li>list-style-position</li><li>list-style</li></ul><p>6、生成内容属性：</p><ul><li>quotes</li></ul><p>7、光标属性：</p><ul><li>cursor</li></ul><p>8、页面样式属性：</p><ul><li>page</li><li>page-break-inside</li><li>windows</li><li>orphans</li></ul><p>9、声音样式属性：</p><ul><li>speak</li><li>speak-punctuation</li><li>speak-numeral</li><li>speak-header</li><li>speech-rate</li><li>volume</li><li>voice-family</li><li>pitch</li><li>pitch-range</li><li>stress</li><li>richness</li><li>azimuth</li><li>elevation</li></ul><hr><h3 id="三、所有元素可以继承的属性"><a href="#三、所有元素可以继承的属性" class="headerlink" title="三、所有元素可以继承的属性"></a>三、所有元素可以继承的属性</h3><p>1、元素可见性：</p><ul><li>visibility</li></ul><p>2、光标属性：</p><ul><li>cursor</li></ul><hr><h3 id="四、内联元素可以继承的属性"><a href="#四、内联元素可以继承的属性" class="headerlink" title="四、内联元素可以继承的属性"></a>四、内联元素可以继承的属性</h3><p>1、字体系列属性<br>2、除text-indent、text-align之外的文本系列属性</p><hr><h3 id="五、块级元素可以继承的属性"><a href="#五、块级元素可以继承的属性" class="headerlink" title="五、块级元素可以继承的属性"></a>五、块级元素可以继承的属性</h3><p>1、text-indent、text-align</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是-CSS-继承&quot;&gt;&lt;a href=&quot;#什么是-CSS-继承&quot; class=&quot;headerlink&quot; title=&quot;什么是 CSS 继承?&quot;&gt;&lt;/a&gt;什么是 CSS 继承?&lt;/h3&gt;&lt;p&gt;CSS继承是指子元素能够拥有和父元素一样的属性。不用特地在子元素上定义但是也能在页面上展示出来。&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="CSS" scheme="https://kisky3.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS选择器类型与用法</title>
    <link href="https://kisky3.github.io/2018/11/15/CSS%E9%80%89%E6%8B%A9%E5%99%A8%E7%B1%BB%E5%9E%8B%E4%B8%8E%E7%94%A8%E6%B3%95/"/>
    <id>https://kisky3.github.io/2018/11/15/CSS选择器类型与用法/</id>
    <published>2018-11-15T08:23:25.000Z</published>
    <updated>2019-06-24T14:18:01.152Z</updated>
    
    <content type="html"><![CDATA[<h3 id="选择器类型"><a href="#选择器类型" class="headerlink" title="选择器类型"></a>选择器类型</h3><p>选择器分为基础选择器，组合选择器，属性选择器，伪类选择器，伪元素选择器</p><a id="more"></a><hr><h4 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h4><table><thead><tr><th>选择器</th><th>含义</th></tr></thead><tbody><tr><td>*</td><td>通用元素选择器，匹配页面任何元素（这也就决定了我们很少使用）</td></tr><tr><td>#id</td><td>id选择器，匹配特定id元素</td></tr><tr><td>.class</td><td>类选择器，匹配class包含（不是等于）特定类的元素</td></tr><tr><td>element</td><td>标签选择器</td></tr></tbody></table><p>例子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line"> <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#id-selector</span> &#123;</span><br><span class="line"> <span class="attribute">color</span>:<span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.class-selector</span> &#123;</span><br><span class="line"> <span class="attribute">background</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="组合选择器"><a href="#组合选择器" class="headerlink" title="组合选择器"></a>组合选择器</h3><table><thead><tr><th>选择器</th><th>含义</th></tr></thead><tbody><tr><td>E,F</td><td>多元素选择器，用逗号分隔，同时匹配元素E或元素F</td></tr><tr><td>E F</td><td>后代选择器，用空格分隔，匹配E元素所有的后代（不只是子元素向下递归）元素F</td></tr><tr><td>E&gt;F</td><td>子元素选择器，用&gt;分隔，匹配E元素的所有直接子元素</td></tr><tr><td>E+F</td><td>直接相邻选择器，匹配E元素之后的相邻的同级元素F</td></tr><tr><td>E~F</td><td>普通相邻选择器(弟弟选择器)，匹配E元素之后的同级元素F(无论直接相邻与否)</td></tr><tr><td>.class1.class2</td><td>id和class选择器和选择器连写的时候中间没有分隔符， 。和#本身充当分隔符的元素</td></tr><tr><td>element#id</td><td>id和class 选择器和选择器连写的时候中间没有分隔符，。和#本身充当分隔符的元素</td></tr></tbody></table><p>例子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.p1</span>,<span class="selector-class">.p2</span> &#123;</span><br><span class="line"> <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#ct</span> <span class="selector-class">.p2</span> &#123;</span><br><span class="line"> <span class="attribute">color</span>:blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#ct</span> &gt;<span class="selector-class">.p2</span> &#123;</span><br><span class="line"> <span class="attribute">color</span>:blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.p1</span>+<span class="selector-tag">p</span> &#123;</span><br><span class="line"> <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.p1</span>~<span class="selector-tag">p</span> &#123;</span><br><span class="line"> <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.p2</span><span class="selector-class">.active</span> &#123;</span><br><span class="line"> <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#ct</span> &#123;</span><br><span class="line"> <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><table><thead><tr><th>选择器</th><th>含义</th></tr></thead><tbody><tr><td>E[attr]</td><td>匹配所有具有属性attr的元素，div[id]就能取到所有有id属性的div</td></tr><tr><td>E[attr=value]</td><td>匹配属性attr 值为value的元素，div[id=test]，匹配id=test的div</td></tr><tr><td>E[attr~=value]</td><td>匹配所有属性attr具有多个空格分隔，其中一个值等于value的元素</td></tr><tr><td>E[attr^=value]</td><td>匹配属性attr的值以value开头的元素</td></tr><tr><td>E[attr$=value]</td><td>匹配属性attr的值以value结尾的元素</td></tr><tr><td>E[attr*=value]</td><td>匹配属性attr的值包含value的元素</td></tr></tbody></table><hr><h3 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h3><p>代表元素的一种状态</p><table><thead><tr><th>选择器</th><th>含义</th></tr></thead><tbody><tr><td>E:first-child</td><td>匹配其E的父元素的第一个子元素</td></tr><tr><td>E:nth-child(n)</td><td>匹配其E的父元素的第n个子元素(2n+1,2n)</td></tr><tr><td>E:first-of-type</td><td>E的同种类型下的第一个元素</td></tr><tr><td>E:nth-of-type(n)</td><td>E的同种类型下的第n个元素</td></tr><tr><td>E:link</td><td>匹配所有未被点击的链接</td></tr><tr><td>E:visited</td><td>匹配所有已经被点击的链接</td></tr><tr><td>E:active</td><td>匹配鼠标已经其上按下还没有释放的E元素</td></tr><tr><td>E:hover</td><td>匹配鼠标悬停其上的E元素</td></tr><tr><td>E:focus</td><td>匹配获得当前焦点的E元素</td></tr><tr><td>E:enabled</td><td>匹配表单中可用的元素</td></tr><tr><td>E:disabled</td><td>匹配表单中禁用的元素</td></tr><tr><td>E:checked</td><td>匹配表单中被选中的radio或checkoutbox元素</td></tr><tr><td>E:selection</td><td>匹配用户当前选中的元素</td></tr></tbody></table><p>a链接伪类选择器时要注意伪类的顺序</p><hr><h3 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h3><table><thead><tr><th>选择器</th><th>含义</th></tr></thead><tbody><tr><td>E::first-line</td><td>匹配E元素内容的第一行</td></tr><tr><td>E::first-letter</td><td>匹配E元素内容的第一个字母</td></tr><tr><td>E::before</td><td>在E元素之前插入生成的内容</td></tr><tr><td>E::after</td><td>在E元素之后插入生成的内容</td></tr></tbody></table><hr><h3 id="选择器的优先级"><a href="#选择器的优先级" class="headerlink" title="选择器的优先级"></a>选择器的优先级</h3><img src="./1.png" style="width:500px"><p>注意：</p><p>在一些复杂场景下，可以进行一些标记再进行比较<br>假如选择器有两次则下面的样式会覆盖上面的样式<br><img src="./2.png" style="width:500px"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;选择器类型&quot;&gt;&lt;a href=&quot;#选择器类型&quot; class=&quot;headerlink&quot; title=&quot;选择器类型&quot;&gt;&lt;/a&gt;选择器类型&lt;/h3&gt;&lt;p&gt;选择器分为基础选择器，组合选择器，属性选择器，伪类选择器，伪元素选择器&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="CSS" scheme="https://kisky3.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>从URL到页面展现</title>
    <link href="https://kisky3.github.io/2018/11/10/%E4%BB%8EURL%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%B1%95%E7%8E%B0/"/>
    <id>https://kisky3.github.io/2018/11/10/从URL到页面展现/</id>
    <published>2018-11-10T07:54:13.000Z</published>
    <updated>2019-06-24T14:18:12.112Z</updated>
    
    <content type="html"><![CDATA[<p>专有名词解释：URL：统一资源定位符 http : 网络协议 用于找到互联网上的资源</p><h3 id="1-在浏览器输入URL"><a href="#1-在浏览器输入URL" class="headerlink" title="1.在浏览器输入URL"></a>1.在浏览器输入URL</h3><a id="more"></a><p>通过输入「<a href="http://www.baidu.com」" target="_blank" rel="noopener">http://www.baidu.com」</a> 的URL来最终定位找到百度首页。</p><hr><h3 id="2-域名解析"><a href="#2-域名解析" class="headerlink" title="2.域名解析"></a>2.域名解析</h3><p>对于　「<a href="http://baidu.com」" target="_blank" rel="noopener">http://baidu.com」</a>　的URL来说，浏览器实际上不知道baidu.com到底是什么，需要对应查找到该域名对应的服务器IP地址才能找到目标。<br>域名解析的流程</p><p>1.浏览器缓存<br>如果你之前打开过百度首页，那么百度的ip地址会被缓存到浏览器里，当你打开时百度首页时就能从浏览器缓存里获取之前缓存的百度ip地址并访问它。</p><p>2.系统缓存<br>如果你是第一次打开百度，那么无法从浏览器获取缓存，便会从你电脑的Hosts文件查找是否有该域名和其对应ip。<br>下图为Mac电脑的hosts文件内容。开发时可以修改hosts文件内的ip，达到打开本地文件的效果。</p><img src="./1.png" style="width:500px"><p>3.路由器缓存<br>如果浏览器缓存和系统缓存都没有，就会看你的路由器缓存。路由器曾经登陆过也会缓存域名信息，如果你或别人在该路由器上登陆过网站，则可以获取到baidu的ip地址。</p><p>4.ISPDNS缓存<br>如果路由器也没有缓存就会找你的服务商，比如到电信的DNS上查找。</p><p>5.如果都没有找到就会到你的根域名服务器查找域名对应ip，根域名服务器把请求转发到下一级，直到找到ip。(找不到就返回404 找不到服务器)</p><hr><h3 id="3-服务器处理"><a href="#3-服务器处理" class="headerlink" title="3.服务器处理"></a>3.服务器处理</h3><p>服务器是一台安装电脑的机器，常见的系统如Linux，Windows Server 系统里安装的处理请求的应用叫做Web Server。<br>常见的Web服务器有Apache，Nginx，IIS，Lighttpd等。Web服务器接收用户的Request交给网站代码，或者接受请求反向代理到其他Web服务器。也就是一个管理者的作用。<br>下图的白色区域为Web服务器。</p><img src="./2.png" style="width:500px"><hr><h3 id="4-网站处理流程"><a href="#4-网站处理流程" class="headerlink" title="4.网站处理流程"></a>4.网站处理流程</h3><p>经服务器处理后，网站接受请求后进行处理，最后将页面呈现给用户。<br>比如下图的MVC模型</p><img src="./3.png" style="width:500px"><hr><h3 id="5-浏览器读取并再次请求"><a href="#5-浏览器读取并再次请求" class="headerlink" title="5.浏览器读取并再次请求"></a>5.浏览器读取并再次请求</h3><p>HTML字符串被浏览器接受后被一句句读取解析，解析到link标签后重新发送请求获取CSS。解析到script标签后发送请求获取js，并执行代码。解析到img标签后发送请求获取图片。</p><hr><h3 id="6-浏览器渲染"><a href="#6-浏览器渲染" class="headerlink" title="6.浏览器渲染"></a>6.浏览器渲染</h3><p>浏览器根据获取到的HTML和CSS计算并渲染，绘制到屏幕上的js会被执行。<br>到此你就能看到你所打开的网页了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;专有名词解释：URL：统一资源定位符 http : 网络协议 用于找到互联网上的资源&lt;/p&gt;
&lt;h3 id=&quot;1-在浏览器输入URL&quot;&gt;&lt;a href=&quot;#1-在浏览器输入URL&quot; class=&quot;headerlink&quot; title=&quot;1.在浏览器输入URL&quot;&gt;&lt;/a&gt;1.在浏览器输入URL&lt;/h3&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="URL" scheme="https://kisky3.github.io/tags/URL/"/>
    
  </entry>
  
  <entry>
    <title>常见浏览器及浏览器内核</title>
    <link href="https://kisky3.github.io/2018/10/29/%E5%B8%B8%E8%A7%81%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8F%8A%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E6%A0%B8/"/>
    <id>https://kisky3.github.io/2018/10/29/常见浏览器及浏览器内核/</id>
    <published>2018-10-29T10:42:04.000Z</published>
    <updated>2019-06-24T13:57:03.389Z</updated>
    
    <content type="html"><![CDATA[<p>浏览器内核可以分为：渲染引擎(layout engineer)和JS引擎。</p><a id="more"></a><p>它负责：</p><ul><li>获取网页的HTML，XML，图像等内容</li><li>整理CSS讯息以及计算机网页的显示方式</li><li>然后会输出至显示器或打印机。</li></ul><h3 id="内核是什么"><a href="#内核是什么" class="headerlink" title="内核是什么"></a>内核是什么</h3><p>浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。<br>所有的网页浏览器，电子邮件客户端以及其他需要编辑显示网络内容的应用程序都需要内核。JS引擎是解析Javascript语言，执行javascript语言来实现网页的动态效果。</p><p>最开始渲染引擎和JS引擎并没有很明确的区分，后来JS引擎越来越独立，内核就只倾向于只指渲染引擎。</p><hr><h3 id="内核的种类"><a href="#内核的种类" class="headerlink" title="内核的种类"></a>内核的种类</h3><p>内核的种类有很多，加上没什么人使用的非商业的免费内核，可能会有10多种，但是常见的浏览器内核可以分为以下四种：</p><span class="highlight-text" style="background-color:#FFCCCC;">Trident，Gecko，Blink，Webkit。</span><h4 id="Trident-‘traɪd-ə-nt"><a href="#Trident-‘traɪd-ə-nt" class="headerlink" title="Trident ([‘traɪd(ə)nt])"></a>Trident ([‘traɪd(ə)nt])</h4><p>Trident(IE内核)：该内核程序在 1997 年的 IE4 中首次被采用，是微软在 Mosaic（”马赛克”，这是人类历史上第一个浏览器，从此网页可以在图形界面的窗口浏览） 代码的基础之上修改而来的，并沿用到 IE11，也被普遍称作 “IE内核”。</p><p>Trident实际上是一款开放的内核，其接口内核设计的相当成熟，因此才有许多采用 IE 内核而非 IE 的浏览器(壳浏览器)涌现。由于 IE 本身的 “垄断性”（虽然名义上 IE 并非垄断，但实际上，特别是从 Windows 95 年代一直到 XP 初期，就市场占有率来说 IE 的确借助 Windows 的东风处于 “垄断” 的地位）而使得 Trident 内核的长期一家独大，微软很长时间都并没有更新 Trident 内核，这导致了两个后果——</p><p>一是 Trident 内核曾经几乎与 W3C 标准脱节（2005年），二是 Trident 内核的大量 Bug 等安全性问题没有得到及时解决，然后加上一些致力于开源的开发者和一些学者们公开自己认为 IE 浏览器不安全的观点，也有很多用户转向了其他浏览器，Firefox 和 Opera 就是这个时候兴起的。非 Trident 内核浏览器的市场占有率大幅提高也致使许多网页开发人员开始注意网页标准和非 IE浏览器的浏览效果问题。</p><p>补充：IE 从版本 11 开始，初步支持 WebGL 技术。IE8 的 JavaScript 引擎是 Jscript，IE9 开始用 Chakra，这两个版本区别很大，Chakra 无论是速度和标准化方面都很出色。<br>国内很多的双核浏览器的其中一核便是 Trident，美其名曰 “兼容模式”。<br>Window10 发布后，IE 将其内置浏览器命名为 Edge，Edge 最显著的特点就是新内核 EdgeHTML。<br>关于 Edge 浏览器更多可以参考 如何评价 Microsoft Edge 浏览器</p><h4 id="Gecko-‘gekəʊ"><a href="#Gecko-‘gekəʊ" class="headerlink" title="Gecko ([‘gekəʊ])"></a>Gecko ([‘gekəʊ])</h4><p>Gecko(Firefox 内核)：Netscape6 开始采用的内核，后来的 Mozilla FireFox(火狐浏览器) 也采用了该内核，Gecko 的特点是代码完全公开，因此，其可开发程度很高，全世界的程序员都可以为其编写代码，增加功能。因为这是个开源内核，因此受到许多人的青睐，Gecko 内核的浏览器也很多，这也是 Gecko 内核虽然年轻但市场占有率能够迅速提高的重要原因。</p><p>事实上，Gecko 引擎的由来跟 IE 不无关系，前面说过 IE 没有使用 W3C 的标准，这导致了微软内部一些开发人员的不满；他们与当时已经停止更新了的 Netscape 的一些员工一起创办了 Mozilla，以当时的 Mosaic 内核为基础重新编写内核，于是开发出了 Gecko。不过事实上，Gecko 内核的浏览器仍然还是 Firefox (火狐) 用户最多，所以有时也会被称为 Firefox 内核。此外 Gecko 也是一个跨平台内核，可以在Windows、 BSD、Linux 和 Mac OS X 中使用。</p><h4 id="Webkit"><a href="#Webkit" class="headerlink" title="Webkit"></a>Webkit</h4><p>一提到 webkit，首先想到的便是 chrome，可以说，chrome 将 Webkit内核 深入人心，殊不知，Webkit 的鼻祖其实是 Safari。现在很多人错误地把 webkit 叫做 chrome内核（即使 chrome内核已经是 blink 了），苹果都哭瞎了有木有。</p><p>Safari 是苹果公司开发的浏览器，使用了KDE（Linux桌面系统）的 KHTML 作为浏览器的内核，Safari 所用浏览器内核的名称是大名鼎鼎的 WebKit。 Safari 在 2003 年 1 月 7 日首度发行测试版，并成为 Mac OS X v10.3 与之后版本的默认浏览器，也成为苹果其它系列产品的指定浏览器（也已支持 Windows 平台）。</p><p>如上述可知，WebKit 前身是 KDE 小组的 KHTML 引擎，可以说 WebKit 是 KHTML 的一个开源的分支。当年苹果在比较了 Gecko 和 KHTML 后，选择了后者来做引擎开发，是因为 KHTML 拥有清晰的源码结构和极快的渲染速度。</p><p>Webkit内核 可以说是以硬件盈利为主的苹果公司给软件行业的最大贡献之一。随后，2008 年谷歌公司发布 chrome 浏览器，采用的 chromium 内核便 fork 了 Webkit。</p><h4 id="Chromium-Blink"><a href="#Chromium-Blink" class="headerlink" title="Chromium/Blink"></a>Chromium/Blink</h4><p>2008 年，谷歌公司发布了 chrome 浏览器，浏览器使用的内核被命名为 chromium。</p><p>chromium fork 自开源引擎 webkit，却把 WebKit 的代码梳理得可读性提高很多，所以以前可能需要一天进行编译的代码，现在只要两个小时就能搞定。因此 Chromium 引擎和其它基于 WebKit 的引擎所渲染页面的效果也是有出入的。所以有些地方会把 chromium 引擎和 webkit 区分开来单独介绍，而有的文章把 chromium 归入 webkit 引擎中，都是有一定道理的。</p><p>谷歌公司还研发了自己的 Javascript 引擎，V8，极大地提高了 Javascript 的运算速度。</p><p>chromium 问世后，带动了国产浏览器行业的发展。一些基于 chromium 的单核，双核浏览器如雨后春笋般拔地而起，例如 搜狗、360、QQ浏览器等等，无一不是套着不同的外壳用着相同的内核。</p><p>然而 2013 年 4 月 3 日，谷歌在 Chromium Blog 上发表 博客，称将与苹果的开源浏览器核心 Webkit 分道扬镳，在 Chromium 项目中研发 Blink 渲染引擎（即浏览器核心），内置于 Chrome 浏览器之中。</p><p>webkit 用的好好的，为何要投入到一个新的内核中去呢？</p><p>Blink 其实是 WebKit 的分支，如同 WebKit 是 KHTML 的分支。Google 的 Chromium 项目此前一直使用 WebKit(WebCore) 作为渲染引擎，但出于某种原因，并没有将其多进程架构移植入Webkit。</p><p>后来，由于苹果推出的 WebKit2 与 Chromium 的沙箱设计存在冲突，所以 Chromium 一直停留在 WebKit，并使用移植的方式来实现和主线 WebKit2 的对接。这增加了 Chromium 的复杂性，且在一定程度上影响了 Chromium 的架构移植工作。</p><p>基于以上原因，Google 决定从 WebKit 衍生出自己的 Blink 引擎（后由 Google 和 Opera Software 共同研发），将在 WebKit 代码的基础上研发更加快速和简约的渲染引擎，并逐步脱离 WebKit 的影响，创造一个完全独立的 Blink 引擎。这样以来，唯一一条维系 Google 和苹果之间技术关系的纽带就这样被切断了。</p><p>Google 和苹果在多个领域都是竞争对手，而唯独在浏览器引擎上有技术合作，利益一致。但为了各自的利益，谁都不会拿出 100% 的 “诚意” 来做好 WebKit，因为你做出来的成果竞争对手可以直接享用。移动互联网已经崛起，手机和平板设备端必将成为浏览器的另一个战场。这个时候，如果 Google 跟苹果仍然黏在一起，将会严重阻碍双方的进步，也会阻碍 WebKit 的进步。</p><h4 id="Presto-‘prestəʊ"><a href="#Presto-‘prestəʊ" class="headerlink" title="Presto ([‘prestəʊ])"></a>Presto ([‘prestəʊ])</h4><p>Presto 是挪威产浏览器 opera 的 “前任” 内核，为何说是 “前任”，因为最新的 opera 浏览器早已将之抛弃从而投入到了谷歌大本营。</p><p>Opera 的一个里程碑作品是 Opera7.0，因为它使用了 Opera Software 自主开发的 Presto 渲染引擎，取代了旧版 Opera 4 至 6 版本使用的 Elektra 排版引擎。该款引擎的特点就是渲染速度的优化达到了极致，然而代价是牺牲了网页的兼容性。</p><p>Presto 加入了动态功能，例如网页或其部分可随着 DOM 及 Script 语法的事件而重新排版。Presto 在推出后不断有更新版本推出，使不少错误得以修正，以及阅读 Javascript 效能得以最佳化，并成为当时速度最快的引擎。</p><p>然而为了减少研发成本，Opera 在 2013 年 2 月宣布放弃 Presto，转而跟随 Chrome 使用 WebKit 分支的 Chromium 引擎作为自家浏览器核心引擎，Presto 内核的 Opera 浏览器版本永远的停留在了 12.17。在 Chrome 于 2013 年推出 Blink 引擎之后，Opera 也紧跟其脚步表示将转而使用 Blink 作为浏览器核心引擎。</p><p>Presto 与开源的 WebKit 和经过谷歌加持的 Chromium 系列相比毫无推广上的优势，这是 Opera 转投 WebKit 的主要原因，并且使用 WebKit 内核的 Opera 浏览器可以兼容谷歌 Chrome 浏览器海量的插件资源。但是换内核的代价对于 Opera 来说过于惨痛。使用谷歌的 WebKit 内核之后，原本快速，轻量化，稳定的 Opera 浏览器变得异常的卡顿，而且表现不稳定，Opera 原本旧内核浏览器书签同步到新内核上的工作 Opera 花了整整两年时间，期间很多 Opera 的用户纷纷转投谷歌浏览器和其他浏览器，造成了众多的用户流失。时至今日现在还有上千万人在使用老版本的 Opera。</p><p>很多人都认为 Opera 浏览器终止在了 12.17，此后所更新的 Opera 版本号不再是原来那个 Opera。</p><hr><h3 id="关于移动端"><a href="#关于移动端" class="headerlink" title="关于移动端"></a>关于移动端</h3><p>移动端的浏览器内核主要说的是系统内置浏览器的内核。</p><p>目前移动设备浏览器上常用的内核有 Webkit，Blink，Trident，Gecko 等，其中 iPhone 和 iPad 等苹果 iOS 平台主要是 WebKit，Android 4.4 之前的 Android 系统浏览器内核是 WebKit，Android4.4 系统浏览器切换到了Chromium，内核是 Webkit 的分支 Blink，Windows Phone 8 系统浏览器内核是 Trident。</p><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>浏览器内核主要指的是浏览器的渲染引擎，2013 年以前，代表有 Trident（IE），Gecko（firefox），Webkit（Safari chrome 等）以及 Presto（opera)。2013 年，谷歌开始研发 blink 引擎，chrome 28 以后开始使用，而 opera 则放弃了自主研发的 Presto 引擎，投入谷歌怀抱，和谷歌一起研发 blink 引擎，国内各种 chrome系的浏览器（360、UC、QQ、2345 等等）也纷纷放弃 webkit，投入 blink 的怀抱。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;浏览器内核可以分为：渲染引擎(layout engineer)和JS引擎。&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="Browser" scheme="https://kisky3.github.io/tags/Browser/"/>
    
  </entry>
  
  <entry>
    <title>Get和Post提交数据有什么区别</title>
    <link href="https://kisky3.github.io/2018/10/25/Get%E5%92%8CPost%E6%8F%90%E4%BA%A4%E6%95%B0%E6%8D%AE%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/"/>
    <id>https://kisky3.github.io/2018/10/25/Get和Post提交数据有什么区别/</id>
    <published>2018-10-25T07:18:03.000Z</published>
    <updated>2019-06-24T10:34:51.221Z</updated>
    
    <content type="html"><![CDATA[<span class="highlight-text" style="background-color:#FFCCCC;">1.post更安全，安全要求高的用post 要求低的用get</span><br><a id="more"></a><br><span class="highlight-text" style="background-color:#FFCCCC;">2.post发送的数据更大（get有url长度限制）</span><br><br><span class="highlight-text" style="background-color:#FFCCCC;">3.post能发送更多的数据类型</span><br><br><span class="highlight-text" style="background-color:#FFCCCC;">4.post比get慢</span><br>(原因:post在真正接收数据之前会先将请求头发送给服务器进行确认，服务器返回100 Continue响应之后才真正发送数据 )<br><br><span class="highlight-text" style="background-color:#FFCCCC;">5.post用于向后台传数据，get一般用于向后台要数据。</span>]]></content>
    
    <summary type="html">
    
      &lt;span class=&quot;highlight-text&quot; style=&quot;background-color:#FFCCCC;&quot;&gt;1.post更安全，安全要求高的用post 要求低的用get&lt;/span&gt;
&lt;br&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="Get" scheme="https://kisky3.github.io/tags/Get/"/>
    
      <category term="Post" scheme="https://kisky3.github.io/tags/Post/"/>
    
  </entry>
  
  <entry>
    <title>CSRF攻击及防范措施</title>
    <link href="https://kisky3.github.io/2018/10/14/CSRF%E6%94%BB%E5%87%BB%E5%8F%8A%E9%98%B2%E8%8C%83%E6%8E%AA%E6%96%BD/"/>
    <id>https://kisky3.github.io/2018/10/14/CSRF攻击及防范措施/</id>
    <published>2018-10-14T04:58:15.000Z</published>
    <updated>2019-06-24T14:18:31.711Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CSRF是什么"><a href="#CSRF是什么" class="headerlink" title="CSRF是什么"></a>CSRF是什么</h3><p>CSRF全称为跨站请求伪造（Cross-site request forgery），</p><a id="more"></a><p>是一种网络攻击方式，也被称为 one-click attack 或者 session riding。<br>简单说来就是已经利用登陆成功的User强制实行某些操作的恶意攻击行为。</p><hr><h3 id="CSRF攻击原理"><a href="#CSRF攻击原理" class="headerlink" title="CSRF攻击原理"></a>CSRF攻击原理</h3><p>其原理是攻击者构造网站后台某个功能接口的请求地址，诱导用户去点击或者用特殊方法让该请求地址自动加载。<br>用户在登录状态下这个请求被服务端接收后会被误以为是用户合法的操作。对于 GET 形式的接口地址可轻易被攻击，<br>对于 POST 形式的接口地址也不是百分百安全，攻击者可诱导用户进入带 Form 表单可用POST方式提交参数的页面。<br><img src="./1.png" style="width:500px"></p><p>角色：</p><ul><li>正常浏览网页的用户： User</li><li>正规的但是具有漏洞的网站： WebA</li><li>利用CSRF进行攻击百度网站： WebB</li></ul><p>例子：<br>比如有shop.example.com这样一个购物网站，用户通过用户名和密码可以登录。其中有点击按钮重设密码的功能。<br>当用户点击按钮更改密码时，下图的送信请求将会被提交至WebA的服务器</p><p>URL：</p><ol><li><a href="http://shop.example.com/password/change" target="_blank" rel="noopener">http://shop.example.com/password/change</a></li><li>Parmeter:</li><li>new_pass:XXXXX</li><li>new_pass_conf:XXXXX</li></ol><p>说明：<br>1.User正常登陆网页WebA，WebA通过用户的认证并在User的浏览器中产生Cookie(证明是User本人登陆)</p><p>2.攻击者伪造能发送同样请求的网站WebB。利用简单的Javascript便可达到目的。</p><p>3.攻击者把该伪造的网站的URL放到img的src里上传，当User登陆后，打开网页时便会自动加载图片，WebB会利用用户的浏览器访问WebA。<br>由于User是在登录状态下，所以User的浏览器根据WebB的要求，带着1中生成的Cookie访问WebA。</p><p>4.WebA接收到User浏览器的请求，并带着用户的Cookie(如例子中的请求)，要求修改密码。</p><p>5.WebA误以为是用户的操作，响应修改密码的请求。User密码被盗。</p><p>以上Web便达到了在用户不知情的情况下，利用用户登陆后的Cookie进行用户的模拟操作过程。</p><hr><h3 id="CSRF防范措施"><a href="#CSRF防范措施" class="headerlink" title="CSRF防范措施"></a>CSRF防范措施</h3><p>1.服务端在收到路由请求时，生成一个随机数，在渲染请求页面时把随机数埋入页面<br>（一般埋入 form 表单内，）</p><p>2.服务端设置setCookie，把该随机数作为session种入用户浏览器。<br>(加入保存在Cookie中，旧Token消耗后，新的Token会被生成，造成用户混乱。而Session能避免此问题。)</p><p>3.当用户发送 GET 或者 POST 请求时带上_csrf_token参数<br>（对于 Form 表单直接提交即可，因为会自动把当前表单内所有的 input 提交给后台，包括_csrf_token）</p><p>4.后台在接受到请求后解析请求的cookie获取_csrf_token的值，然后和用户请求提交的_csrf_token做个比较，如果相等表示请求是合法的。</p><p>（下图是某电商网站的真实设置，这里页面上设置的 token和session里设置的token 虽然不直接相等，但 md5(‘1474357164624’) === ‘4bd4e512b0fbd9357150649adadedd4e’，后台还是很好计算的）</p><img src="./2.png" style="width:500px"><img src="./3.png" style="width:500px"><p>注意：尽量避免使用Get。因为能在发送请求时能在URL处暴露token信息。</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/22521378" target="_blank" rel="noopener">「每日一题」CSRF 是什么？</a>;</li><li><a href="https://www.jianshu.com/p/00fa457f6d3e" target="_blank" rel="noopener">CSRF攻击原理及防护</a>;</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;CSRF是什么&quot;&gt;&lt;a href=&quot;#CSRF是什么&quot; class=&quot;headerlink&quot; title=&quot;CSRF是什么&quot;&gt;&lt;/a&gt;CSRF是什么&lt;/h3&gt;&lt;p&gt;CSRF全称为跨站请求伪造（Cross-site request forgery），&lt;/p&gt;
    
    </summary>
    
      <category term="Back-end Knowledge" scheme="https://kisky3.github.io/categories/Back-end-Knowledge/"/>
    
    
      <category term="CSRF" scheme="https://kisky3.github.io/tags/CSRF/"/>
    
  </entry>
  
  <entry>
    <title>Hey,I&#39;m Xiang Yu. Welcome To My Blog</title>
    <link href="https://kisky3.github.io/2018/06/23/FirstBlog/"/>
    <id>https://kisky3.github.io/2018/06/23/FirstBlog/</id>
    <published>2018-06-23T13:14:53.000Z</published>
    <updated>2019-06-24T12:13:20.124Z</updated>
    
    <content type="html"><![CDATA[<p>你好，我是向宇！我今后的目标是成为会两门外语的高级前端开发工程师。<br>欢迎来到我的博客。我将在这里记录有关编程学习的知识，并不断更新完善这个博客。<br>谢谢你的观看与支持。欢迎你的意见与建议。</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;你好，我是向宇！我今后的目标是成为会两门外语的高级前端开发工程师。&lt;br&gt;欢迎来到我的博客。我将在这里记录有关编程学习的知识，并不断更新完善这个博客。&lt;br&gt;谢谢你的观看与支持。欢迎你的意见与建议。&lt;/p&gt;
    
    </summary>
    
      <category term="About Me" scheme="https://kisky3.github.io/categories/About-Me/"/>
    
    
  </entry>
  
</feed>
