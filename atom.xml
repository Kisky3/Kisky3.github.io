<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xiang Yu&#39;s Blog</title>
  
  <subtitle>Hello World, Hello Programming!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://kisky3.github.io/"/>
  <updated>2020-11-01T09:55:20.655Z</updated>
  <id>https://kisky3.github.io/</id>
  
  <author>
    <name>Xiang Yu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Add a live2d Character To Your Hexo Blog</title>
    <link href="https://kisky3.github.io/2020/07/01/Addlive2dCharacterToYourBlog/"/>
    <id>https://kisky3.github.io/2020/07/01/Addlive2dCharacterToYourBlog/</id>
    <published>2020-07-01T09:13:22.000Z</published>
    <updated>2020-11-01T09:55:20.655Z</updated>
    
    <content type="html"><![CDATA[<p>给你的Hexo博客加一只会动的live2d看板娘</p><a id="more"></a><p>实现效果</p><p>先看一下实现效果，右下角的小可爱就是添加的live2d卡通人物，而且她还会眨眼睛，头会随着鼠标的移动而转动。<br><img src="./1.png" style="width:600px"></p><h4 id="1-安装hexo-helper-live2d"><a href="#1-安装hexo-helper-live2d" class="headerlink" title="1. 安装hexo-helper-live2d"></a>1. 安装hexo-helper-live2d</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure><hr><h5 id="2-安装live2d"><a href="#2-安装live2d" class="headerlink" title="2.安装live2d"></a>2.安装live2d</h5><p>其中<live2d-widget-model>替换成想要的，比如我安装的的是live2d-widget-model-hijiki(小黑猫)</live2d-widget-model></p><p>当然，还有很多的model可供选择:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">live2d-widget-model-chitose</span><br><span class="line">live2d-widget-model-epsilon2_1</span><br><span class="line">live2d-widget-model-gf</span><br><span class="line">live2d-widget-model-haru/01 (use npm install --save live2d-widget-model-haru)</span><br><span class="line">live2d-widget-model-haru/02 (use npm install --save live2d-widget-model-haru)</span><br><span class="line">live2d-widget-model-haruto</span><br><span class="line">live2d-widget-model-hibiki</span><br><span class="line">live2d-widget-model-hijiki</span><br><span class="line">live2d-widget-model-izumi</span><br><span class="line">live2d-widget-model-koharu</span><br><span class="line">live2d-widget-model-miku</span><br><span class="line">live2d-widget-model-ni-j</span><br><span class="line">live2d-widget-model-nico</span><br><span class="line">live2d-widget-model-nietzsche</span><br><span class="line">live2d-widget-model-nipsilon</span><br><span class="line">live2d-widget-model-nito</span><br><span class="line">live2d-widget-model-shizuku</span><br><span class="line">live2d-widget-model-tororo</span><br><span class="line">live2d-widget-model-tsumiki</span><br><span class="line">live2d-widget-model-unitychan</span><br><span class="line">live2d-widget-model-wanko</span><br><span class="line">live2d-widget-model-z16</span><br></pre></td></tr></table></figure><p>live2d所有模型展示图：<br><a href="https://www.cnblogs.com/strengthen/p/11112215.html" target="_blank" rel="noopener">https://www.cnblogs.com/strengthen/p/11112215.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// $ npm install &lt;live2d-widget-model&gt;</span><br><span class="line">// 例: 安装live2d-widget-model-hijiki</span><br><span class="line">$ npm install live2d-widget-model-hijiki</span><br></pre></td></tr></table></figure><hr><h4 id="3-配置"><a href="#3-配置" class="headerlink" title="3.配置"></a>3.配置</h4><p>在Hexo站点配置文件_config.yml，或者主题配置文件_config.yml中添加如下配置<br>至于每个配置项的作用看名字就很清楚，也可以修改值然后部署看下效果.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">live2d:</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  scriptFrom: local</span><br><span class="line">  pluginRootPath: live2dw/</span><br><span class="line">  pluginJsPath: lib/</span><br><span class="line">  pluginModelPath: assets/</span><br><span class="line">  tagMode: <span class="literal">false</span></span><br><span class="line">  log: <span class="literal">false</span></span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-hijiki</span><br><span class="line">  display:</span><br><span class="line">    position: right</span><br><span class="line">    width: <span class="number">150</span></span><br><span class="line">    height: <span class="number">300</span></span><br><span class="line">  mobile:</span><br><span class="line">    show: <span class="literal">true</span></span><br><span class="line">  react:</span><br><span class="line">    opacity: <span class="number">0.7</span></span><br></pre></td></tr></table></figure><p>如果是在主题下的话有时可能无法生效。<br>下载完之后，在Hexo根目录中新建文件夹<code>live2d_models</code>，然后在node_modules文件夹中找到刚刚下载的live2d模型，将其复制到live2d_models中，然后编辑配置文件中的model.use项，将其修改为live2d_models文件夹中的模型文件夹名称。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model:</span><br><span class="line">    use: live2d-widget-model-hijiki</span><br></pre></td></tr></table></figure><p>一切就绪之后，用hexo server命令启动服务器，稍等一下就可以看到右下角出现了你设置的看板娘了。</p><hr><h4 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h4><p>预览完成以后没问题的话就可以发布了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给你的Hexo博客加一只会动的live2d看板娘&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="hexo" scheme="https://kisky3.github.io/tags/hexo/"/>
    
      <category term="blog" scheme="https://kisky3.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>Vuex in parent-child communication</title>
    <link href="https://kisky3.github.io/2020/06/23/VueCommons/"/>
    <id>https://kisky3.github.io/2020/06/23/VueCommons/</id>
    <published>2020-06-23T12:49:49.000Z</published>
    <updated>2020-11-01T08:36:53.433Z</updated>
    
    <content type="html"><![CDATA[<p>关于Vuex的父子组件传值和状态管理</p><a id="more"></a><p>Vue 组件间通信主要有 3 类通信：父子组件通信、隔代组件通信、兄弟组件通信。</p><h3 id="props-emit父子组件通信"><a href="#props-emit父子组件通信" class="headerlink" title="props/$emit父子组件通信"></a>props/$emit父子组件通信</h3><p>父组件向子组件传递数据是通过 props，子组件向父组件传值是通过 events（$emit）（事件形式）。</p><h4 id="父组件向子组件传值"><a href="#父组件向子组件传值" class="headerlink" title="父组件向子组件传值"></a>父组件向子组件传值</h4><p>父组件 Parent：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;child :msg=<span class="string">"message"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">"./Child"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">"parent"</span>,</span><br><span class="line">    components: &#123;</span><br><span class="line">      Child</span><br><span class="line">    &#125;,</span><br><span class="line">    data: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">      message: <span class="string">"父组件信息"</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>子组件 Child：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;我是子组件，接收：&#123;&#123; msg &#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">"child"</span>,</span><br><span class="line">    props: [<span class="string">"msg"</span>]</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>父组件 Parent，通过 msg 向子组件 Child 信息，Child 通过 props 接收 msg，并渲染到页面上。</p><hr><h4 id="子组件向父组件传值"><a href="#子组件向父组件传值" class="headerlink" title="子组件向父组件传值"></a>子组件向父组件传值</h4><p>子组件向父组件传值是通过 events（$emit）（事件形式）。<br>子组件 Child：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=<span class="string">"clickHandle"</span>&gt;点击&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">"child"</span>,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      clickHandle() &#123;</span><br><span class="line">        <span class="keyword">this</span>.$emit(<span class="string">"myclick"</span>, <span class="string">"子组件数据"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>父组件 Parent：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div&gt;这是父组件，接收：&#123;&#123; message &#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;child @myclick="getChildData"&gt;&lt;/</span>child&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">"./Child"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">"parent"</span>,</span><br><span class="line">    components: &#123;</span><br><span class="line">      Child</span><br><span class="line">    &#125;,</span><br><span class="line">    data: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">      message: <span class="string">""</span></span><br><span class="line">    &#125;),</span><br><span class="line">    methods: &#123;</span><br><span class="line">      getChildData(data) &#123;</span><br><span class="line">        <span class="keyword">this</span>.message = data;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>子组件 Child 通过this.$emit(“myclick”, “子组件数据”);，绑定一个自定义事件 myclick，并赋值要传递的数据。</p><p>父组件监听自定义事件 myclick，点击则触发子组件this.$emit(“myclick”, “子组件数据”);，获取子组件的数据，并同时返回给父组件的 getChildData 方法。</p><p>点击触发，最终得到：这是父组件，接收：子组件数据。<br>注意：自定义事件名 myclick 始终使用 kebab-case 的事件名。</p><hr><h3 id="ref-与-parent-children父子组件通信"><a href="#ref-与-parent-children父子组件通信" class="headerlink" title="ref 与 $parent/$children父子组件通信"></a>ref 与 $parent/$children父子组件通信</h3><p>特点：</p><ul><li>ref：如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例</li><li>$parent 属性可以用来从一个子组件访问父组件的实例。它提供了一种机会，可以在后期随时触达父级组件，以替代将数据以 prop 的方式传入子组件的方式。</li><li>这两种都是直接得到组件实例，使用后可以直接调用组件的方法或访问数据</li><li>无法在跨级或兄弟间通信</li></ul><h4 id="ref-访问子组件实例或子元素"><a href="#ref-访问子组件实例或子元素" class="headerlink" title="ref 访问子组件实例或子元素"></a>ref 访问子组件实例或子元素</h4><p>ref 被用来给元素或子组件注册引用信息。引用信息将会注册在父组件的 $refs 对象上。如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- <span class="string">`vm.$refs.p`</span> will be the DOM node --&gt;</span><br><span class="line">&lt;p ref=<span class="string">"p"</span>&gt;hello&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;!-- `vm.$refs.child` will be the child component instance --&gt;</span></span><br><span class="line"><span class="regexp">&lt;child-component ref="child"&gt;&lt;/</span>child-component&gt;</span><br></pre></td></tr></table></figure><p>父组件 Parent：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=<span class="string">"sayHi"</span>&gt;打招呼&lt;<span class="regexp">/button&gt;&lt;br /</span>&gt;</span><br><span class="line">    &lt;button @click=<span class="string">"getChildMsg"</span>&gt;点击获取子组件信息&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;button @click="getChildValue"&gt;点击获取子组件 input 值&lt;/</span>button&gt;</span><br><span class="line">    &lt;child ref=<span class="string">"usernameInput"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></span><br><span class="line">    &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">  import Child from "./</span>Child<span class="string">";</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  export default &#123;</span></span><br><span class="line"><span class="string">    name: "</span>parent<span class="string">",</span></span><br><span class="line"><span class="string">    components: &#123;</span></span><br><span class="line"><span class="string">      Child</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    data: () =&gt; (&#123;</span></span><br><span class="line"><span class="string">      message: "</span><span class="string">"</span></span><br><span class="line"><span class="string">    &#125;),</span></span><br><span class="line"><span class="string">    methods: &#123;</span></span><br><span class="line"><span class="string">      // 如果用在子组件上，引用就指向组件实例</span></span><br><span class="line"><span class="string">      getChildMsg() &#123;</span></span><br><span class="line"><span class="string">        this.message = this.$refs.usernameInput.msg;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      sayHi() &#123;</span></span><br><span class="line"><span class="string">        this.message = this.$refs.usernameInput.sayHello();</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      getChildValue() &#123;</span></span><br><span class="line"><span class="string">        this.message = this.$refs.usernameInput.$refs.input.value;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>子组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    子组件：&lt;input</span><br><span class="line">      @focus=<span class="string">"focusHandle"</span></span><br><span class="line">      type=<span class="string">"text"</span></span><br><span class="line">      ref=<span class="string">"input"</span></span><br><span class="line">      value=<span class="string">"hello msg"</span></span><br><span class="line">    /&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">"child"</span>,</span><br><span class="line">    data: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">      msg: <span class="string">"子组件信息"</span></span><br><span class="line">    &#125;),</span><br><span class="line">    methods: &#123;</span><br><span class="line">      <span class="comment">// 用来从父级组件聚焦输入框</span></span><br><span class="line">      focusHandle() &#123;</span><br><span class="line">        <span class="comment">// 如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素</span></span><br><span class="line">        <span class="keyword">this</span>.$refs.input.focus();</span><br><span class="line">      &#125;,</span><br><span class="line">      sayHello() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello Vue!"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><hr><p>$parent 和 $children<br>父组件 Parent：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;child&gt;<span class="xml"><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">"./Child"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">"parent"</span>,</span><br><span class="line">    components: &#123;</span><br><span class="line">      Child</span><br><span class="line">    &#125;,</span><br><span class="line">    data: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">      message: <span class="string">"Parent say Hi"</span></span><br><span class="line">    &#125;),</span><br><span class="line">    mounted() &#123;</span><br><span class="line">      <span class="comment">// 注意 $children 返回的是 Array</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.$children[<span class="number">0</span>].msg); <span class="comment">// Child say Hello</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>子组件 Child：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;Hello Boy&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">"child"</span>,</span><br><span class="line">    data: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">      msg: <span class="string">"Child say Hello"</span></span><br><span class="line">    &#125;),</span><br><span class="line">    mounted() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.$parent.message); <span class="comment">// Parent say Hi</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>节制地使用 $parent 和 $children - 它们的主要目的是作为访问组件的应急方法。更推荐用 props 和 events 实现父子组件通信。</p><hr><h3 id="attrs-listeners隔代组件通信"><a href="#attrs-listeners隔代组件通信" class="headerlink" title="$attrs/$listeners隔代组件通信"></a>$attrs/$listeners隔代组件通信</h3><p>Vue2.4 提供了$attrs , $listeners 来传递数据与事件，跨级组件之间的通讯变得更简单。</p><p>简单来说：$attrs与$listeners 是两个对象，$attrs 里存放的是父组件中绑定的非 Props 属性，$listeners里存放的是父组件中绑定的非原生事件。</p><p>$attrs：包含了父作用域中不被 prop 所识别 (且获取) 的特性绑定 ( class 和 style 除外 )。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 ( class 和 style 除外 )，并且可以通过 v-bind=”$attrs” 传入内部组件。通常配合 inheritAttrs 选项一起使用。<br>$listeners：包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器。它可以通过 v-on=”$listeners” 传入内部组件。</p><p>例子：跨级通信</p><p>Parent：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;child-a</span><br><span class="line">      :name=<span class="string">"name"</span></span><br><span class="line">      :age=<span class="string">"age"</span></span><br><span class="line">      :job=<span class="string">"job"</span></span><br><span class="line">      title=<span class="string">"This is a title"</span></span><br><span class="line">      @click=<span class="string">"postData"</span></span><br><span class="line">    &gt;<span class="xml"><span class="tag">&lt;/<span class="name">child-a</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">import</span> ChildA <span class="keyword">from</span> <span class="string">"./ChildA"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">"parent"</span>,</span><br><span class="line">    components: &#123;</span><br><span class="line">      ChildA</span><br><span class="line">    &#125;,</span><br><span class="line">    data: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">      name: <span class="string">"tao"</span>,</span><br><span class="line">      age: <span class="string">"28"</span>,</span><br><span class="line">      job: <span class="string">"worker"</span></span><br><span class="line">    &#125;),</span><br><span class="line">    methods: &#123;</span><br><span class="line">      postData() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>ChildA：通过v-bind=”$attrs”或v-on=”$listeners”进行传递</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;child-b v-bind=<span class="string">"$attrs"</span> v-on=<span class="string">"$listeners"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">child-b</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">import</span> ChildB <span class="keyword">from</span> <span class="string">"./ChildB"</span>;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">"child-a"</span>,</span><br><span class="line">    components: &#123;</span><br><span class="line">      ChildB</span><br><span class="line">    &#125;,</span><br><span class="line">    created() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.$attrs);</span><br><span class="line">      <span class="comment">// &#123;name: "tao", age: "28", job: "worker", title: "This is a title"&#125;</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.$listeners.click()); <span class="comment">// hello</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>ChildB：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;B-listeners: &#123;&#123; <span class="keyword">this</span>.$listeners.click() &#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">  export default &#123;</span></span><br><span class="line"><span class="regexp">    props: ["name"], /</span><span class="regexp">/ name 作为props属性绑定</span></span><br><span class="line"><span class="regexp">    inheritAttrs: false, /</span><span class="regexp">/ 可以关闭自动挂载到组件根元素上的没有在props声明的属性</span></span><br><span class="line"><span class="regexp">    created() &#123;</span></span><br><span class="line"><span class="regexp">      console.log(this.$attrs);</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ &#123;age: "28", job: "worker", title: "This is a title"&#125;</span></span><br><span class="line"><span class="regexp">      console.log(this.$listeners.click()); /</span><span class="regexp">/ hello</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><hr><h3 id="provide-inject隔代组件通信"><a href="#provide-inject隔代组件通信" class="headerlink" title="provide/inject隔代组件通信"></a>provide/inject隔代组件通信</h3><p>祖先组件中通过 provider 来提供变量，然后在子孙组件中通过 inject 来注入变量。</p><p>provide / inject 主要解决了跨级组件间的通信问题，不过它的使用场景，主要是子组件获取上级组件的状态，跨级组件间建立了一种主动提供与依赖注入的关系。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父级组件提供 'foo'</span></span><br><span class="line"><span class="keyword">var</span> Provider = &#123;</span><br><span class="line">  provide: &#123;</span><br><span class="line">    foo: <span class="string">"bar"</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件注入 'foo'</span></span><br><span class="line"><span class="keyword">var</span> Child = &#123;</span><br><span class="line">  inject: [<span class="string">"foo"</span>],</span><br><span class="line">  created() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo); <span class="comment">// =&gt; "bar"</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>provide 和 inject 主要在开发高阶插件/组件库时使用。并不推荐用于普通应用程序代码中。</p><h3 id="provide-与-inject-怎么实现数据响应式"><a href="#provide-与-inject-怎么实现数据响应式" class="headerlink" title="provide 与 inject 怎么实现数据响应式"></a>provide 与 inject 怎么实现数据响应式</h3><p>provide 和 inject 绑定并不是可响应的。这是刻意为之的。然而，如果你传入了一个可监听的对象，那么其对象的属性还是可响应的。— Vue 官方文档</p><p>一般来说，有两种办法：</p><p>provide 祖先组件的实例，然后在子孙组件中注入依赖，这样就可以在子孙组件中直接修改祖先组件的实例的属性，不过这种方法有个缺点就是这个实例上挂载很多没有必要的东西比如 props，methods。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父级组件</span></span><br><span class="line"><span class="keyword">var</span> Provider = &#123;</span><br><span class="line">  provide() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      theme: <span class="keyword">this</span> <span class="comment">// 提供实例</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件注入</span></span><br><span class="line"><span class="keyword">var</span> Child = &#123;</span><br><span class="line">  inject: &#123;</span><br><span class="line">    theme: &#123;</span><br><span class="line">      <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.theme);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>用法：让一个对象可响应。Vue 内部会用它来处理 data 函数返回的对象。返回的对象可以直接用于渲染函数和计算属性内，并且会在发生改变时触发相应的更新。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父级组件</span></span><br><span class="line"><span class="keyword">var</span> Provider = &#123;</span><br><span class="line">  provide() &#123;</span><br><span class="line">    <span class="keyword">this</span>.theme = Vue.observable(&#123;</span><br><span class="line">      color: <span class="keyword">this</span>.color</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      theme: <span class="keyword">this</span>.theme</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    changeColor() &#123;</span><br><span class="line">      <span class="keyword">this</span>.theme.color = <span class="keyword">this</span>.theme.color === <span class="string">"blue"</span> ? <span class="string">"red"</span> : <span class="string">"blue"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 子组件注入</span></span><br><span class="line"><span class="keyword">var</span> Child = &#123;</span><br><span class="line">  inject: &#123;</span><br><span class="line">    theme: &#123;</span><br><span class="line">      <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.theme);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="emit-on父子、隔代、兄弟组件通信"><a href="#emit-on父子、隔代、兄弟组件通信" class="headerlink" title="$emit/$on父子、隔代、兄弟组件通信"></a>$emit/$on父子、隔代、兄弟组件通信</h3><p>Bus，通过一个空的 Vue 实例作为中央事件总线（事件中心），用它来触发事件和监听事件，巧妙而轻量地实现了任何组件间的通信，包括父子、兄弟、跨级。</p><p>注意：记得销毁自定义事件，否则容易造成内存泄露。</p><p>基本使用<br>具体实现方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Bus = <span class="keyword">new</span> Vue();</span><br><span class="line"></span><br><span class="line">Bus.$emit(<span class="string">"add-todo"</span>, &#123; <span class="attr">text</span>: <span class="keyword">this</span>.newTodoText &#125;);</span><br><span class="line">Bus.$on(<span class="string">"add-todo"</span>, <span class="keyword">this</span>.addTodo);</span><br><span class="line">Bus.$off(<span class="string">"add-todo"</span>, <span class="keyword">this</span>.addTodo);</span><br></pre></td></tr></table></figure><p>使用 vue-bus：npm install vue-bus –save</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> VueBus <span class="keyword">from</span> <span class="string">"vue-bus"</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(VueBus);</span><br></pre></td></tr></table></figure><p>Listen and clean</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">created() &#123;</span><br><span class="line">  <span class="keyword">this</span>.$bus.on(<span class="string">'add-todo'</span>, <span class="keyword">this</span>.addTodo);</span><br><span class="line">  <span class="keyword">this</span>.$bus.once(<span class="string">'once'</span>, () =&gt; <span class="built_in">console</span>.log(<span class="string">'This listener will only fire once'</span>));</span><br><span class="line">&#125;,</span><br><span class="line">beforeDestroy() &#123;</span><br><span class="line">  <span class="keyword">this</span>.$bus.off(<span class="string">'add-todo'</span>, <span class="keyword">this</span>.addTodo);</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  addTodo(newTodo) &#123;</span><br><span class="line">    <span class="keyword">this</span>.todos.push(newTodo);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Trigger</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">methods: &#123;</span><br><span class="line">  addTodo() &#123;</span><br><span class="line">    <span class="keyword">this</span>.$bus.emit(<span class="string">'add-todo'</span>, &#123; <span class="attr">text</span>: <span class="keyword">this</span>.newTodoText &#125;);</span><br><span class="line">    <span class="keyword">this</span>.$bus.emit(<span class="string">'once'</span>);</span><br><span class="line">    <span class="keyword">this</span>.newTodoText = <span class="string">''</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举个栗子<br>假设兄弟组件有三个，分别是 A、B、C 组件，A 或 B 组件的向 C 组件发送数据。</p><p>组件 A：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div&gt;&#123;&#123;name&#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;button @click="postData"&gt;发给C&lt;/</span>button&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">"child-a"</span>,</span><br><span class="line">    data: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">      name: <span class="string">"AAA"</span></span><br><span class="line">    &#125;),</span><br><span class="line">    methods: &#123;</span><br><span class="line">      postData() &#123;</span><br><span class="line">        <span class="keyword">this</span>.$bus.emit(<span class="string">"child-a"</span>, <span class="keyword">this</span>.name);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>组件 B:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div&gt;&#123;&#123;name&#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;button @click="postData"&gt;发给C&lt;/</span>button&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">"child-b"</span>,</span><br><span class="line">    data: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">      name: <span class="string">"BBB"</span></span><br><span class="line">    &#125;),</span><br><span class="line">    methods: &#123;</span><br><span class="line">      postData() &#123;</span><br><span class="line">        <span class="keyword">this</span>.$bus.emit(<span class="string">"child-b"</span>, <span class="keyword">this</span>.name);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>组件 C：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div&gt;&#123;&#123; name.join(<span class="string">","</span>) &#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">  export default &#123;</span></span><br><span class="line"><span class="regexp">    name: "child-c",</span></span><br><span class="line"><span class="regexp">    data: () =&gt; (&#123;</span></span><br><span class="line"><span class="regexp">      name: ["CCC"]</span></span><br><span class="line"><span class="regexp">    &#125;),</span></span><br><span class="line"><span class="regexp">    created() &#123;</span></span><br><span class="line"><span class="regexp">      this.$bus.on("child-a", this.getData);</span></span><br><span class="line"><span class="regexp">      this.$bus.on("child-b", this.getData);</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    beforeDestroy() &#123;</span></span><br><span class="line"><span class="regexp">      this.$bus.off("child-a", this.getData);</span></span><br><span class="line"><span class="regexp">      this.$bus.off("child-b", this.getData);</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    methods: &#123;</span></span><br><span class="line"><span class="regexp">      getData(data) &#123;</span></span><br><span class="line"><span class="regexp">        this.name.push(data);</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>this.$bus.on 监听了自定义事件 child-a 和 child-b，因为有时不确定何时会触发事件，一般会在 created 钩子中来监听，然后 beforeDestroy 钩子中通过this.$bus.off注销自定义事件。</p><h3 id="vue-bus-实现源码"><a href="#vue-bus-实现源码" class="headerlink" title="vue-bus 实现源码"></a>vue-bus 实现源码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">VueBus</span>(<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> bus = <span class="keyword">new</span> Vue();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Object</span>.defineProperties(bus, &#123;</span><br><span class="line">    on: &#123;</span><br><span class="line">      <span class="keyword">get</span>: function <span class="keyword">get</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.$on.bind(<span class="keyword">this</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    once: &#123;</span><br><span class="line">      <span class="keyword">get</span>: function <span class="keyword">get</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.$once.bind(<span class="keyword">this</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    off: &#123;</span><br><span class="line">      <span class="keyword">get</span>: function <span class="keyword">get</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.$off.bind(<span class="keyword">this</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    emit: &#123;</span><br><span class="line">      <span class="keyword">get</span>: function <span class="keyword">get</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.$emit.bind(<span class="keyword">this</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(Vue, <span class="string">"bus"</span>, &#123;</span><br><span class="line">    <span class="keyword">get</span>: function <span class="keyword">get</span>() &#123;</span><br><span class="line">      <span class="keyword">return</span> bus;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(Vue.prototype, <span class="string">"$bus"</span>, &#123;</span><br><span class="line">    <span class="keyword">get</span>: function <span class="keyword">get</span>() &#123;</span><br><span class="line">      <span class="keyword">return</span> bus;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Vuex-父子、隔代、兄弟组件通信"><a href="#Vuex-父子、隔代、兄弟组件通信" class="headerlink" title="Vuex 父子、隔代、兄弟组件通信"></a>Vuex 父子、隔代、兄弟组件通信</h3><h4 id="Vuex-基本原理"><a href="#Vuex-基本原理" class="headerlink" title="Vuex 基本原理"></a>Vuex 基本原理</h4><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。</p><p>每一个 Vuex 应用的核心就是 store（仓库）。“store” 基本上就是一个容器，它包含着你的应用中大部分的状态 ( state )。</p><p>Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</p><p>改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化。</p><p>Mutation 同时提供了订阅者模式供外部插件调用获取 State 数据的更新。</p><p>而当所有异步操作(常见于调用后端接口异步获取更新数据)或批量的同步操作需要走 Action，但 Action 也是无法直接修改 State 的，还是需要通过 Mutation 来修改 State 的数据。最后，根据 State 的变化，渲染到视图上。</p><h4 id="各模块在流程中的功能"><a href="#各模块在流程中的功能" class="headerlink" title="各模块在流程中的功能"></a>各模块在流程中的功能</h4><img src="./1.png" style="width:500px;margin:40px 0"><p><code>Vue Components</code>：Vue 组件。HTML 页面上，负责接收用户操作等交互行为，执行 dispatch 方法触发对应 action 进行回应。</p><p><code>dispatch</code>：操作行为触发方法，是唯一能执行 action 的方法。</p><p><code>actions</code>：操作行为处理模块,由组件中的$store.dispatch(‘action name’, data1)来触发。然后由commit()来触发 mutation 的调用 , 间接更新 state。负责处理 Vue Components 接收到的所有交互行为。包含同步/异步操作，支持多个同名方法，按照注册的顺序依次触发。</p><p>向后台 API 请求的操作就在这个模块中进行，包括触发其他 action 以及提交 mutation 的操作。该模块提供了 Promise 的封装，以支持 action 的链式触发。</p><p><code>commit</code>：状态改变提交操作方法。对 mutation 进行提交，是唯一能执行 mutation 的方法。</p><p><code>mutations</code>：状态改变操作方法，由 actions 中的commit(‘mutation name’)来触发。是 Vuex 修改 state 的唯一推荐方法。</p><p>该方法只能进行同步操作，且方法名只能全局唯一。操作之中会有一些 hook 暴露出来，以进行 state 的监控等。</p><p><code>state</code>：页面状态管理容器对象。集中存储 Vue components 中 data 对象的零散数据，全局唯一，以进行统一的状态管理。</p><p>页面显示所需的数据从该对象中进行读取，利用 Vue 的细粒度数据响应机制来进行高效的状态更新。</p><p><code>getters</code>：state 对象读取方法。图中没有单独列出该模块，应该被包含在了 render 中，Vue Components 通过该方法读取全局 state 对象。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于Vuex的父子组件传值和状态管理&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="Vuex" scheme="https://kisky3.github.io/tags/Vuex/"/>
    
  </entry>
  
  <entry>
    <title>Basic Velocity</title>
    <link href="https://kisky3.github.io/2020/06/10/Velocity/"/>
    <id>https://kisky3.github.io/2020/06/10/Velocity/</id>
    <published>2020-06-10T14:28:46.000Z</published>
    <updated>2020-10-18T09:51:44.773Z</updated>
    
    <content type="html"><![CDATA[<p>关于Velocity的基础语法</p><a id="more"></a><p>Velocity是一个基于java的模板引擎（template engine），它允许任何人仅仅简单的使用模板语言（template language）来引用由java代码定义的对象。作为一个比较完善的模板引擎，Velocity的功能是比较强大的，但强大的同时也增加了应用复杂 性。这里简单Velocity脚本的基本语法：</p><h3 id="1、参数的设置"><a href="#1、参数的设置" class="headerlink" title="1、参数的设置"></a>1、参数的设置</h3><p>可以自定义参数。参数开始于$</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">写法       当值为空值当时候   使用方法</span><br><span class="line">$name      显示参数名     普通</span><br><span class="line">$&#123;name&#125;  显示参数名     在英文语义暧昧的时候</span><br><span class="line">$!name      不显示         当参数为空值的时候不显示</span><br></pre></td></tr></table></figure><p>参数所能使用的文字,参数只能使用下面的文字:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">・a-z A-Z</span><br><span class="line">・0-9</span><br><span class="line">・-</span><br><span class="line">・_</span><br></pre></td></tr></table></figure><p>参数的话就可以单纯用<code>$name</code>和使用花括号圈起来的写法<code>${name}</code>,如果在只是英文数字的文字列中间插入参数的话，必须使用花括号。</p><p>例：abc${D}efg</p><hr><h3 id="2-注释"><a href="#2-注释" class="headerlink" title="2.注释"></a>2.注释</h3><p>一行的注释：使用##</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">##comment</span><br><span class="line">Hello $value.</span><br><span class="line"></span><br><span class="line">Hello $value.##comment</span><br></pre></td></tr></table></figure><p>多行的注释：使用<code>#*</code>开始, 使用<code>#*</code>结束。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#*</span><br><span class="line">comment</span><br><span class="line">comment</span><br><span class="line">*#</span><br><span class="line"></span><br><span class="line">hello #*comment*# $value.</span><br></pre></td></tr></table></figure><hr><h3 id="3-读取别的文件"><a href="#3-读取别的文件" class="headerlink" title="3.读取别的文件"></a>3.读取别的文件</h3><ol><li>读取VM文件<br>在头部或尾部分别读取文件的话，使用<code>#parse</code>.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#parse(&quot;body_header.vm.html&quot;)</span><br><span class="line">$data</span><br><span class="line">#parse(&quot;body_footer.vm.html&quot;)</span><br></pre></td></tr></table></figure></li></ol><p>文件的位置是与该文件的相对位置。如果不是直接放置在根目录而是全部放置在template文件夹里的情况下，需要在Velocity初始化之前指定路径，否则可能会出现错误信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Velocity.setProperty(&quot;file.resource.loader.path&quot;,&quot;template&quot; );</span><br></pre></td></tr></table></figure><p>错误信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.apache.velocity.exception.ResourceNotFoundException: Unable to find resource</span><br></pre></td></tr></table></figure><hr><h3 id="3-读取一般的TEXT"><a href="#3-读取一般的TEXT" class="headerlink" title="3.读取一般的TEXT"></a>3.读取一般的TEXT</h3><p>如果是读取一般的普通文档的话，使用<code>#include</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#include(&quot;test.vm&quot;)</span><br></pre></td></tr></table></figure><hr><h3 id="4-循环"><a href="#4-循环" class="headerlink" title="4.循环"></a>4.循环</h3><p>循环使用<code>foreach</code>,值 in list名.在循环的最后必须要使用<code>#end</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#foreach ($data in $list)</span><br><span class="line">$data.name</span><br><span class="line">#end</span><br></pre></td></tr></table></figure><p>关于循环中的index号码，的话可以使用<code>velocityCount</code>来计算进入循环的次数.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#foreach( $title in [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;] )</span><br><span class="line">    $title $velocityCount $velocityHasNext</span><br><span class="line">#end</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a 1 true b 2 true c 3 false</span><br></pre></td></tr></table></figure><p>关于多重数列的index</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;table border=1&gt;</span><br><span class="line">#set($i=0)</span><br><span class="line">#foreach( $cells in [[&quot;a&quot;,&quot;b&quot;],[&quot;c&quot;,&quot;d&quot;]])</span><br><span class="line">&lt;tr&gt;&lt;td&gt;$velocityCount&lt;/td&gt;</span><br><span class="line">#set($j=0)</span><br><span class="line">#foreach($item in $cells)</span><br><span class="line">&lt;td&gt;$&#123;i&#125;-$j $item&lt;/td&gt;</span><br><span class="line">#set($j=$j + 1)</span><br><span class="line">#end</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line"> #set($i=$i + 1)</span><br><span class="line">#end</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 0-0 a 0-1 b</span><br><span class="line">2 1-0 c 1-1 d</span><br></pre></td></tr></table></figure><p>在循环的最初和途中和最后的分支.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#foreach( $value in [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;])</span><br><span class="line">#if($velocityCount==1)</span><br><span class="line">最初 $value</span><br><span class="line">#elseif($velocityHasNext)</span><br><span class="line">途中 $value</span><br><span class="line">#else</span><br><span class="line">最後 $value</span><br><span class="line">#end</span><br><span class="line">#end</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最初 a 途中 b 途中 c 最後 d</span><br></pre></td></tr></table></figure><p>从loop开始的break</p><p>Velocity1.6以后的版本允许在loop中使用break，来进跳出循环.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#foreach( $title in $titles )</span><br><span class="line">    #if( $velocityCount &gt; 1 )</span><br><span class="line">        #break</span><br><span class="line">    #end</span><br><span class="line">    $title</span><br><span class="line">#end</span><br></pre></td></tr></table></figure><hr><h3 id="4-条件文"><a href="#4-条件文" class="headerlink" title="4. 条件文"></a>4. 条件文</h3><p>if条件, 最后一定要写<code>#end</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#if($value &gt; 3)</span><br><span class="line">$value</span><br><span class="line">#end</span><br></pre></td></tr></table></figure><p>else if 和 else</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#if( $age &lt; 20 )</span><br><span class="line">    十代</span><br><span class="line">#elseif( $age &lt;30 )</span><br><span class="line">   二十台</span><br><span class="line">#elseif( $age &lt;40 )</span><br><span class="line">    三十台</span><br><span class="line">#else</span><br><span class="line">   その他</span><br><span class="line">#end</span><br></pre></td></tr></table></figure><p>null的条件文</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#if($value)</span><br><span class="line">nullでない時</span><br><span class="line">#end</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于Velocity的基础语法&lt;/p&gt;
    
    </summary>
    
      <category term="Back-end Knowledge" scheme="https://kisky3.github.io/categories/Back-end-Knowledge/"/>
    
    
      <category term="Velocity" scheme="https://kisky3.github.io/tags/Velocity/"/>
    
  </entry>
  
  <entry>
    <title>Git Push Error 403</title>
    <link href="https://kisky3.github.io/2020/06/05/GitPushError/"/>
    <id>https://kisky3.github.io/2020/06/05/GitPushError/</id>
    <published>2020-06-04T15:47:21.000Z</published>
    <updated>2020-09-30T16:30:27.479Z</updated>
    
    <content type="html"><![CDATA[<p>Git Push时返回403的异常</p><a id="more"></a><h2 id="错误内容"><a href="#错误内容" class="headerlink" title="错误内容"></a>错误内容</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master</span><br><span class="line">remote: Permission to アカウント1/リポジトリ名.git denied to アカウント2.</span><br><span class="line">fatal: unable to access &apos;https://アカウント1＠github.com/アカウント1/リポジトリ名.git&apos; : The requested URL returned error: 403</span><br></pre></td></tr></table></figure><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote set-url origin https://アカウント1＠github.com/アカウント1/リポジトリ名.git</span><br></pre></td></tr></table></figure><p>确认远程URL是否已经改变</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">origin: https://アカウント1＠github.com/アカウント1/リポジトリ名.git (fetch)</span><br><span class="line">origin: https://アカウント1＠github.com/アカウント1/リポジトリ名.git (push)</span><br></pre></td></tr></table></figure><p>再次Push</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master</span><br><span class="line">  ~一部省略~</span><br><span class="line">To https://github.com/アカウント1/リポジトリ名.git</span><br><span class="line"> * [new branch]      master -&gt; master</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Git Push时返回403的异常&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://kisky3.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>【Hexo ERROR】fatal in unpopulated submodule &#39;.deploy_git&#39;</title>
    <link href="https://kisky3.github.io/2020/06/01/HexoError/"/>
    <id>https://kisky3.github.io/2020/06/01/HexoError/</id>
    <published>2020-05-31T15:34:01.000Z</published>
    <updated>2020-10-06T10:38:36.566Z</updated>
    
    <content type="html"><![CDATA[<p>【Hexo异常】fatal: in unpopulated submodule ‘.deploy_git’</p><a id="more"></a><p>今天又重新弄了下hexo，好久不动它居然报了错。<br>这种情况可以先安装下相关的依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git –save</span><br></pre></td></tr></table></figure><p>实在不行，就把它删掉，然后重新生成和部署。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rm -rf .deploy_git</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h2 id="OK-DONE"><a href="#OK-DONE" class="headerlink" title="OK DONE!"></a>OK DONE!</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【Hexo异常】fatal: in unpopulated submodule ‘.deploy_git’&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="hexo" scheme="https://kisky3.github.io/tags/hexo/"/>
    
      <category term="blog" scheme="https://kisky3.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>How Marijuana Affects Your Mind and Body</title>
    <link href="https://kisky3.github.io/2020/05/13/AboutMarijuana/"/>
    <id>https://kisky3.github.io/2020/05/13/AboutMarijuana/</id>
    <published>2020-05-13T13:13:11.000Z</published>
    <updated>2020-09-30T15:59:22.521Z</updated>
    
    <content type="html"><![CDATA[<p>大麻是如何影响你的大脑和身体</p><a id="more"></a><h3 id="大麻简要历史和区别"><a href="#大麻简要历史和区别" class="headerlink" title="大麻简要历史和区别"></a>大麻简要历史和区别</h3><p>大麻在人类文明历史中已经存在了上千年了。<br>大麻植物中的有效成分如果作用于大脑来说，当DELTA-THC当含量大于0.3%的时候，它就是毒品，它会产生精神作用比如幻觉和一系列的感觉。另一种有效成分CBD它的作用正相反，不是毒品也不会产生幻觉。<br><img src="./1.png" style="width: 500px"></p><p>植物中的<code>DELTA9-THC毒品成分</code>跟人类<code>内源性大麻素</code>作用原理几乎一摸一样。两者都能激活体内CB1受体和CB2受体。<br>CB受体被激活后能产生放松心情的效果，可以抗焦虑和放松肌肉。</p><p>这套调节机制是地球上的哺乳动物通过亿万年的演化进化而来的。但是正常情况下人体只会分泌及其少量的内源性大麻素来调节情绪。</p><hr><h3 id="大麻THC与CB1受体脑内原理"><a href="#大麻THC与CB1受体脑内原理" class="headerlink" title="大麻THC与CB1受体脑内原理"></a>大麻THC与CB1受体脑内原理</h3><p><code>CB系列受体</code>是所有受体中最特殊的一种。一般的受体一般只存在突触后膜上，然而CB系列受体它存在突触前膜上,并且它存在在突触前膜的GPCR G蛋白偶联通道里。<br><img src="./2.png" style="width: 500px"></p><p>突触前膜上的受体一般会被认为上自身受体或者异身受体，它的权限比突触后膜上的受体要高一个数量级。我们的大脑中突触间隙的各种分子主要是靠突触前膜的胞吐效应”吐”到突触后膜的,然后突触后膜上的相应受体就会被激活。</p><p>但是有时这些分子可能会逆流，飘到突触前膜上，作用于突触前膜上的受体，这种特殊的受体叫做自身受体。</p><p>而还有一种更特殊的受体叫做异身受体。一般来说各个系统是不能接受别的系统传递过来的神经递值的，但异身受体是权限最高的受体，它能够接受别的神经元的突触前膜传过来的物质。</p><img src="./3.png" style="width: 500px"><p>这种受体相当于各个系统之间的协调。<code>大麻素CB1受体</code>就是这种异身受体,而且它被安装在了所有的系统的突触前膜上。不管是多巴胺系统，GABA系统还是谷氨酸系统等的突触前膜上都存在CB1受体。</p><p>并且它所安装的位置在GPCR G蛋白离子通道。</p><p>也就是说<code>内源性大麻素分子</code>可以激活<code>大麻素CB1受体</code>,而CB1受体存在于所有系统的突触前膜上，所以<code>内源性大麻素分子</code>就能激活大脑中所有系统的突触前膜上的CB1受体，相当于能够控制所有的一切。</p><p>CB1被激活后能够产生一连串的，覆盖所有系统所有的子分类的所有细胞的连锁反应。它会导致<code>GPCR G蛋白离子通道</code>的关闭，钙离子无法内流，那么这根神经元突触前膜上的胞吐效应也就停止了。胞吐效应停止的话任何一种信息递质就不会再分泌了。突触后膜的受体就没办法再被激活了。</p><p>CB1受体的传递虽然被阻断，但是它本身还介导了细胞级别的级联反应。它就直接给神经元本身下命令了。神经元甚至不需要任何的神经递质，也不需要突触后膜被激活了，直接一整根神经元它已经被CB1受体给控制了。</p><p>CB1受体独特的位置和它独特的异身受体的特性导致了这一特殊的情况。作用于作用会相互叠加，导致的结果总体上来说这种自我反馈调节机制的目的是让人放松下来，扭转焦虑的情绪。</p><p>不过由于它太过于底层，以至于它会干扰所有的感受，这就导致了它的作用不稳定。但是由于人体自动分泌出来的内源大麻素非常少，只是轻微的激活了CB1受体。但是一旦被激活，内部的级联反应是非常复杂无法统计的。</p><p>而内源性大麻素它对应到自然界的植物中的有效成分就是<code>DELTA9-THC</code>，虽然它们的化学式完全不相干。但是它们都激活CB1受体。</p><hr><h3 id="毒品大麻导致的闪回与严重幻觉"><a href="#毒品大麻导致的闪回与严重幻觉" class="headerlink" title="毒品大麻导致的闪回与严重幻觉"></a>毒品大麻导致的闪回与严重幻觉</h3><p>当毒品大麻被吸入时，由于DELTA9-THC它是脂溶性的，它几乎就是油脂。所以它特别容易进入脑血屏障，并且它很难代谢掉，也无法被单胺酶氧化，它几乎就一直卡在脑子里了。</p><p>而且由于它是外界摄入的，随着吸食数量的增多，它在脑子里的含量也越多。吸大麻的人三个月之后都依然能监测到身体中都DELTA9-THC成分。</p><p>而三个月并不一直产生幻觉是因为CB1受体的敏感度被下调了，CB1受体只能被激活几个小时，之后再受刺激也不能被激活了。而幻觉最多会维持大概8个小时左右就会消失。</p><p>但是过了几天之后，由于DELTA9-THC它依然卡在脑子里，所以可能会造成闪回，就是没有吸毒的人也会进入吸毒的状态。而且由于毒品大麻它的作用太多，以至于它不稳定，这次使用的时候可能是心情愉悦，下次使用的时候就可能天崩地裂，最麻烦的就是一些幻觉，自动浮现在脑海里，形成睁眼幻视和闭眼幻视。</p><p>大麻可能造成的精神效果：<br>色彩增强，抑制视力，亮度改变，几何形状，内部幻觉，外围信息误解，分析增强，概念思维，认知快感，创造力增强，妄想，增强情绪，增强焦虑或者抑制焦虑，即将到来的厄运的感觉，音乐欣赏程度增高，幽默感增强，正念，个人意义增强，精神病，嗜睡，思维联系，思维减速，时间扭曲。</p><p>它会造成的物理效应是：<br>镇静，自发的身体感觉，食欲增强，抑制食欲，味觉增强，身体压力，支气管扩张，感觉到重力变化，口干脱水出汗增加，肌肉松弛或者肌肉痉挛，恶心或者抑制恶心，止痛，身体轻盈，触觉增强，血管舒张。</p><hr><h3 id="大麻导致的大脑不可逆损伤"><a href="#大麻导致的大脑不可逆损伤" class="headerlink" title="大麻导致的大脑不可逆损伤"></a>大麻导致的大脑不可逆损伤</h3><p>毒品大麻的成瘾性跟毒品K粉也就是氯胺酮几乎完全一样，毒品大麻对大脑的伤害主要是针对神经元本身，它让神经元以一种过度的方式，过度运转或者过度不运转。</p><p>过度运转，这就跟受体没有关系了，受体是表层的，神经元是底层的。受体相当于只是神经元上的开关，而神经元出问题之后，以后开关再正常也是没有用的，因为开关背后的神经元已经瘫痪了。这个无法用受体敏感度，或者受体凋零的程度来形容。因为它真正的精神作用隐藏在受体背后的级联反应。本质上说跟受体的关系已经不大了。</p><p>大麻抽了3年以上之后，大脑基本上已经记不住事了，主要原因是因为它下调了胆碱能系统的运转功率，也就是损伤了记忆力，而且由于大麻涉及大脑里所有的神经元，范围太广，很可能导致神经元无法履行之前的职责。</p><p>比如说如果是gaba系统的话，就是人会失眠睡不着了。</p><p>如果是多巴胺系统的话，人就会失去内驱力。</p><p>如果是血清素系统的话，人就会抑郁。</p><hr><h3 id="科研进展"><a href="#科研进展" class="headerlink" title="科研进展"></a>科研进展</h3><p>而种植大麻的人一般让DELTA9-THC的含量尽量高，这样作用力就会猛。但是大麻里还有另一种成分CBD。</p><p>CBD会拮抗掉DELTA9-THC的效果,这两种物质都回去结合到CB1受体和CB2受体，但是它们结合到微店稍微偏差了一点，导致的结果是CBD分子虽然和CB系列受体结合了，但是它不去激活受体，并且让受体变得更不容易被激活，以至于THC再进来的时候，THC甚至都没办法产生幻觉。<br><img src="./4.png" style="width: 500px"></p><p>后来学术界分成了两派：<br>一派去研究DELTA9-THC都医疗用途，目的一般是给不治之症善后。</p><p>还有另一派去研究CBD这种成分，分化出了内用和外用。<br>外用就是皮肤调节，减少过敏和油脂分泌。<br><img src="./5.png" style="width: 500px"></p><p>内服就是服用CBD来达到抗癫痫抗肌肉痉挛的效果。<br>主要是针对一岁以上儿童的难治性肌肉痉挛。</p><p>目前该药物依然十分昂贵。</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.webmd.com/mental-health/addiction/marijuana-use-and-its-effects#1" target="_blank" rel="noopener">https://www.webmd.com/mental-health/addiction/marijuana-use-and-its-effects#1</a></p><p><a href="https://zhuanlan.zhihu.com/p/66258708" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/66258708</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大麻是如何影响你的大脑和身体&lt;/p&gt;
    
    </summary>
    
      <category term="About Me" scheme="https://kisky3.github.io/categories/About-Me/"/>
    
    
      <category term="weed" scheme="https://kisky3.github.io/tags/weed/"/>
    
      <category term="pot" scheme="https://kisky3.github.io/tags/pot/"/>
    
      <category term="dope" scheme="https://kisky3.github.io/tags/dope/"/>
    
      <category term="Marijuana" scheme="https://kisky3.github.io/tags/Marijuana/"/>
    
  </entry>
  
  <entry>
    <title>Create a PR Bot</title>
    <link href="https://kisky3.github.io/2020/05/10/CreatePRBot/"/>
    <id>https://kisky3.github.io/2020/05/10/CreatePRBot/</id>
    <published>2020-05-09T15:26:11.000Z</published>
    <updated>2020-10-03T10:52:29.444Z</updated>
    
    <content type="html"><![CDATA[<p>制造一个github自动通知的PR Bot</p><a id="more"></a><p>简单来说就是利用Github 的Github Hook，选择在PR生成并指定Reviwer的时候进行事件呼出。<br>而利用GAS的api生成功能接受Hook发来的信息，再往slack的频道里发送消息。</p><p>Github webhooks：<br>Github/Setting/Webhooks/Add Webhook<br>选择类型为json，url为gas生成的app的url<br><img src="./1.png" style="width:500px;margin:40px 0"></p><p>GAS：<br>deploy as a web app<br>然后选择Anyone,even anonymous can access to the app.<br><img src="./2.png" style="width:500px;margin:40px 0"></p><p>GAS的内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CHANNEL = <span class="string">"YOUR_CHSNNEL_NAME"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doPost</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    recievePayload(e.postData.getDataAsString());</span><br><span class="line">  &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">    notifyToSlack(CHANNEL, ex);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">recievePayload</span>(<span class="params">json</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> payload = <span class="built_in">JSON</span>.parse(json);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (payload.action === <span class="string">"opened"</span>) &#123;</span><br><span class="line">    notifyToSlack(CHANNEL, review_request(payload))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (payload.action === <span class="string">"submitted"</span>) &#123;</span><br><span class="line">    notifyToSlack(CHANNEL, approve(payload))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">approve</span> (<span class="params">payload</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> message = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">var</span> reviwers = <span class="string">""</span>;</span><br><span class="line">  payload.pull_request.requested_reviewers.forEach( <span class="function"><span class="params">i</span> =&gt;</span> &#123;</span><br><span class="line">    reviwers += i.login + <span class="string">"さん、"</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// PR Approvedされた時：</span></span><br><span class="line">    <span class="keyword">if</span> (payload.review.state === <span class="string">"approved"</span>) &#123;</span><br><span class="line">      message =  convert_user(payload.pull_request.user.login) + <span class="string">"さん、\n下記のPR :lgtm2: をもらいました！ \n"</span></span><br><span class="line">      + <span class="string">"問題なければマージしてね \n\n"</span></span><br><span class="line">      + <span class="string">"--------------------------------------------------\n "</span></span><br><span class="line">      + <span class="string">"■PR TITLE: \n"</span></span><br><span class="line">      + payload.pull_request.title + <span class="string">"\n\n"</span></span><br><span class="line">      + <span class="string">"■PR URL: \n"</span></span><br><span class="line">      + <span class="string">"\n"</span> + payload.pull_request.html_url + <span class="string">"\n\n"</span></span><br><span class="line">      + <span class="string">"--------------------------------------------------\n "</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> message;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">review_request</span>(<span class="params">payload</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> message = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">var</span> reviwers = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">  payload.pull_request.requested_reviewers.forEach( <span class="function"><span class="params">i</span> =&gt;</span> &#123;</span><br><span class="line">    reviwers += convert_user(i.login) + <span class="string">"さん  "</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// PR新規作成された時：</span></span><br><span class="line">    <span class="keyword">if</span> (payload.pull_request.state === <span class="string">"open"</span> &amp;&amp; reviwers !== <span class="string">""</span>) &#123;</span><br><span class="line">      message = reviwers + payload.pull_request.user.login + <span class="string">"からのPR依頼がきました！ \n"</span></span><br><span class="line">      + <span class="string">"手が空いてる時に、下記のPRのレビューをお願い致します〜 \n\n"</span></span><br><span class="line">      + <span class="string">"--------------------------------------------------\n "</span></span><br><span class="line">      + <span class="string">"■PR TITLE: \n"</span></span><br><span class="line">      + payload.pull_request.title + <span class="string">"\n\n"</span></span><br><span class="line">      + <span class="string">"■PR URL: \n"</span></span><br><span class="line">      + <span class="string">"\n"</span> + payload.pull_request.html_url + <span class="string">"\n\n"</span></span><br><span class="line">      + <span class="string">"--------------------------------------------------\n "</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">      <span class="comment">//message = payload.pull_request.user.login + "下記のPRにReviewerを指定してください \n" + payload.pull_request.title + "\n" + payload.pull_request.html_url;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> message;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convert_user</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span>(name) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"&lt;github-user-name&gt;"</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;slack-user-id&gt;"</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">notifyToSlack</span>(<span class="params">channel, message</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> prop = PropertiesService.getScriptProperties().getProperties();</span><br><span class="line">  <span class="keyword">var</span> slackApp = SlackApp.create(<span class="string">'xoxp-xxxxxxxxxxxxxx'</span>);</span><br><span class="line">  slackApp.chatPostMessage(channel, message, &#123;　</span><br><span class="line">    username: <span class="string">"PR_娘"</span>,</span><br><span class="line">    icon_emoji: <span class="string">":musume:"</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;制造一个github自动通知的PR Bot&lt;/p&gt;
    
    </summary>
    
      <category term="System Setting" scheme="https://kisky3.github.io/categories/System-Setting/"/>
    
    
      <category term="setting" scheme="https://kisky3.github.io/tags/setting/"/>
    
      <category term="slack bot" scheme="https://kisky3.github.io/tags/slack-bot/"/>
    
      <category term="slack" scheme="https://kisky3.github.io/tags/slack/"/>
    
      <category term="PRBot" scheme="https://kisky3.github.io/tags/PRBot/"/>
    
  </entry>
  
  <entry>
    <title>Create a PR Bot</title>
    <link href="https://kisky3.github.io/2020/05/10/pr-bot/"/>
    <id>https://kisky3.github.io/2020/05/10/pr-bot/</id>
    <published>2020-05-09T15:26:11.000Z</published>
    <updated>2020-09-30T16:03:45.994Z</updated>
    
    <content type="html"><![CDATA[<p>制造一个github的PR BOT</p><a id="more"></a><p>简单来说就是利用Github 的Github Hook，选择在PR生成并指定Reviwer的时候进行事件呼出。<br>而利用GAS的api生成功能接受Hook发来的信息，再往slack的频道里发送消息。</p><p>Github webhooks：<br>Github/Setting/Webhooks/Add Webhook<br>选择类型为json，url为gas生成的app的url<br><img src="./1.png" style="width:500px;margin:40px 0"></p><p>GAS：<br>deploy as a web app<br>然后选择Anyone,even anonymous can access to the app.<br><img src="./2.png" style="width:500px;margin:40px 0"></p><p>GAS的内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CHANNEL = <span class="string">"YOUR_CHSNNEL_NAME"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doPost</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    recievePayload(e.postData.getDataAsString());</span><br><span class="line">  &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">    notifyToSlack(CHANNEL, ex);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">recievePayload</span>(<span class="params">json</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> payload = <span class="built_in">JSON</span>.parse(json);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (payload.action === <span class="string">"opened"</span>) &#123;</span><br><span class="line">    notifyToSlack(CHANNEL, review_request(payload))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (payload.action === <span class="string">"submitted"</span>) &#123;</span><br><span class="line">    notifyToSlack(CHANNEL, approve(payload))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">approve</span> (<span class="params">payload</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> message = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">var</span> reviwers = <span class="string">""</span>;</span><br><span class="line">  payload.pull_request.requested_reviewers.forEach( <span class="function"><span class="params">i</span> =&gt;</span> &#123;</span><br><span class="line">    reviwers += i.login + <span class="string">"さん、"</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// PR Approvedされた時：</span></span><br><span class="line">    <span class="keyword">if</span> (payload.review.state === <span class="string">"approved"</span>) &#123;</span><br><span class="line">      message =  convert_user(payload.pull_request.user.login) + <span class="string">"さん、\n下記のPR :lgtm2: をもらいました！ \n"</span></span><br><span class="line">      + <span class="string">"問題なければマージしてね \n\n"</span></span><br><span class="line">      + <span class="string">"--------------------------------------------------\n "</span></span><br><span class="line">      + <span class="string">"■PR TITLE: \n"</span></span><br><span class="line">      + payload.pull_request.title + <span class="string">"\n\n"</span></span><br><span class="line">      + <span class="string">"■PR URL: \n"</span></span><br><span class="line">      + <span class="string">"\n"</span> + payload.pull_request.html_url + <span class="string">"\n\n"</span></span><br><span class="line">      + <span class="string">"--------------------------------------------------\n "</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> message;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">review_request</span>(<span class="params">payload</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> message = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">var</span> reviwers = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">  payload.pull_request.requested_reviewers.forEach( <span class="function"><span class="params">i</span> =&gt;</span> &#123;</span><br><span class="line">    reviwers += convert_user(i.login) + <span class="string">"さん  "</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// PR新規作成された時：</span></span><br><span class="line">    <span class="keyword">if</span> (payload.pull_request.state === <span class="string">"open"</span> &amp;&amp; reviwers !== <span class="string">""</span>) &#123;</span><br><span class="line">      message = reviwers + payload.pull_request.user.login + <span class="string">"からのPR依頼がきました！ \n"</span></span><br><span class="line">      + <span class="string">"手が空いてる時に、下記のPRのレビューをお願い致します〜 \n\n"</span></span><br><span class="line">      + <span class="string">"--------------------------------------------------\n "</span></span><br><span class="line">      + <span class="string">"■PR TITLE: \n"</span></span><br><span class="line">      + payload.pull_request.title + <span class="string">"\n\n"</span></span><br><span class="line">      + <span class="string">"■PR URL: \n"</span></span><br><span class="line">      + <span class="string">"\n"</span> + payload.pull_request.html_url + <span class="string">"\n\n"</span></span><br><span class="line">      + <span class="string">"--------------------------------------------------\n "</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">      <span class="comment">//message = payload.pull_request.user.login + "下記のPRにReviewerを指定してください \n" + payload.pull_request.title + "\n" + payload.pull_request.html_url;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> message;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convert_user</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span>(name) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"&lt;github-user-name&gt;"</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;slack-user-id&gt;"</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">notifyToSlack</span>(<span class="params">channel, message</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> prop = PropertiesService.getScriptProperties().getProperties();</span><br><span class="line">  <span class="keyword">var</span> slackApp = SlackApp.create(<span class="string">'xoxp-xxxxxxxxxxxxxx'</span>);</span><br><span class="line">  slackApp.chatPostMessage(channel, message, &#123;　</span><br><span class="line">    username: <span class="string">"PR_娘"</span>,</span><br><span class="line">    icon_emoji: <span class="string">":musume:"</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;制造一个github的PR BOT&lt;/p&gt;
    
    </summary>
    
      <category term="System Setting" scheme="https://kisky3.github.io/categories/System-Setting/"/>
    
    
      <category term="setting" scheme="https://kisky3.github.io/tags/setting/"/>
    
      <category term="slack bot" scheme="https://kisky3.github.io/tags/slack-bot/"/>
    
      <category term="slack" scheme="https://kisky3.github.io/tags/slack/"/>
    
      <category term="PRBot" scheme="https://kisky3.github.io/tags/PRBot/"/>
    
  </entry>
  
  <entry>
    <title>Create a Auto Mail Bot</title>
    <link href="https://kisky3.github.io/2020/05/05/mail-bot/"/>
    <id>https://kisky3.github.io/2020/05/05/mail-bot/</id>
    <published>2020-05-04T15:25:40.000Z</published>
    <updated>2020-09-30T16:03:13.910Z</updated>
    
    <content type="html"><![CDATA[<p>做一个GAS自动送信功能的bot</p><a id="more"></a><img src="./1.png" style="width: 400px"><img src="./2.png" style="width: 400px"><img src="./3.png" style="width: 400px"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mailSend</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">/* 名前を取得 */</span></span><br><span class="line">  <span class="keyword">var</span> activeSpreadsheet = SpreadsheetApp.getActiveSpreadsheet();</span><br><span class="line">  <span class="keyword">var</span> getName = activeSpreadsheet.getRange(<span class="string">"D2"</span>).getValue().trim();</span><br><span class="line">  <span class="keyword">var</span> masterName = getName.replace(<span class="regexp">/　/g</span>, <span class="string">""</span>); <span class="comment">//スペース削除</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* SD日報設定ファイルから情報を取得 */</span></span><br><span class="line">  <span class="keyword">var</span> settingUrl = <span class="string">"YOUR_SHEET"</span>;</span><br><span class="line">  <span class="keyword">var</span> settingSpreadsheet= SpreadsheetApp.openByUrl(settingUrl);</span><br><span class="line">  <span class="keyword">var</span> settingSheet = settingSpreadsheet.getSheetByName(<span class="string">"mail"</span>);</span><br><span class="line">  <span class="keyword">var</span> lastRow = settingSheet.getLastRow() + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>;i &lt; lastRow;i++)&#123;</span><br><span class="line">    <span class="keyword">var</span> setName = settingSheet.getRange(i,<span class="number">1</span>).getValue();</span><br><span class="line">    <span class="keyword">if</span>(setName == masterName)&#123;</span><br><span class="line">      <span class="keyword">var</span> strCc = settingSheet.getRange(i,<span class="number">4</span>).getValue(); <span class="comment">//宛先</span></span><br><span class="line">      <span class="keyword">var</span> strFrom = settingSheet.getRange(i,<span class="number">2</span>).getValue(); <span class="comment">//差出アドレス</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* メールデータの準備 */</span></span><br><span class="line">  <span class="keyword">var</span> strUrl = activeSpreadsheet.getUrl();</span><br><span class="line">  <span class="keyword">var</span> strGid = activeSpreadsheet.getSheetId();</span><br><span class="line">  <span class="keyword">var</span> strDate = Utilities.formatDate(<span class="keyword">new</span> <span class="built_in">Date</span>(),<span class="string">"JST"</span>,<span class="string">"MM/dd"</span>);</span><br><span class="line">  <span class="keyword">var</span> strSubject = <span class="string">"【業務日報】"</span> + strDate + <span class="string">" "</span> + masterName;</span><br><span class="line">  <span class="keyword">var</span> strBody = strUrl + <span class="string">"#gid="</span> + strGid;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* メールを送信 */</span></span><br><span class="line">  GmailApp.sendEmail(</span><br><span class="line">    <span class="string">""</span>,</span><br><span class="line">    strSubject,</span><br><span class="line">    strBody,</span><br><span class="line">    &#123;</span><br><span class="line">      cc:strCc,</span><br><span class="line">      <span class="keyword">from</span>:strFrom,</span><br><span class="line">      name: masterName</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;做一个GAS自动送信功能的bot&lt;/p&gt;
    
    </summary>
    
      <category term="System Setting" scheme="https://kisky3.github.io/categories/System-Setting/"/>
    
    
      <category term="setting" scheme="https://kisky3.github.io/tags/setting/"/>
    
      <category term="slack" scheme="https://kisky3.github.io/tags/slack/"/>
    
      <category term="Google Apps Script" scheme="https://kisky3.github.io/tags/Google-Apps-Script/"/>
    
  </entry>
  
  <entry>
    <title>Hamilton（musical 2020）</title>
    <link href="https://kisky3.github.io/2020/05/03/Hamilton/"/>
    <id>https://kisky3.github.io/2020/05/03/Hamilton/</id>
    <published>2020-05-03T14:45:37.000Z</published>
    <updated>2020-09-30T16:01:55.268Z</updated>
    
    <content type="html"><![CDATA[<p> 汉密尔顿 Hamilton（2020）</p><a id="more"></a><p>最近各种刷音乐剧<br>难得发现一部从头到尾作曲作词都非常不错的！<br>而且R&amp;B和Rap相得益彰，真是喜欢。</p><p>在下面总结一下有关这部音乐剧的知识。</p><p>这部剧是描写美国国父群体中最关键的一个人物–亚历山大・汉密尔顿充满传奇的一生。</p><h2 id="第一幕"><a href="#第一幕" class="headerlink" title="第一幕"></a>第一幕</h2><p>第一幕一开始的开场提示的欢迎词的声音是来自于18世纪大英帝国的国王乔治三世。<br>有些做作也有些可爱。<br>但是正是因为乔治三世的独裁和偏执的性格，才使得北美殖民地由最初的减税呼声，最终酿成改变世界历史的独立运动。</p><p>开场是由阿龙伯尔</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 汉密尔顿 Hamilton（2020）&lt;/p&gt;
    
    </summary>
    
      <category term="About Me" scheme="https://kisky3.github.io/categories/About-Me/"/>
    
    
      <category term="musical" scheme="https://kisky3.github.io/tags/musical/"/>
    
      <category term="Hamilton" scheme="https://kisky3.github.io/tags/Hamilton/"/>
    
  </entry>
  
  <entry>
    <title>Inside The Living Body</title>
    <link href="https://kisky3.github.io/2020/04/25/Recently/"/>
    <id>https://kisky3.github.io/2020/04/25/Recently/</id>
    <published>2020-04-25T09:52:51.000Z</published>
    <updated>2020-09-30T16:03:59.212Z</updated>
    
    <content type="html"><![CDATA[<p>人体内旅行</p><a id="more"></a><p>最近因为疫情的影响，呆在家的时间也增多了。<br>肆无忌惮地刷了好多剧。</p><p>今天聊一下人体内旅行这部。<br>因为开头就太硬核了，从体内到体表，从出生到死亡，全程高能。</p><p>想想每个人来到这个世界的第一秒，</p><p>心脏开始第一次的跳动，<br>肺开始苏醒，并接着开始了我们生命中最重要的第一次呼吸，<br>血液开始渗入空气中的氧气，由蓝色瞬间变为流动的红色<br>(原来红细胞在没有氧气的状态下是蓝色的)</p><img src="./1.png" style="width:400px;margin:40px 0"><img src="./2.png" style="width:400px;margin:40px 0"><p>一声啼哭，我们在地球上的旅程正式开始了。<br>那时我们的出厂配置都是最好最新鲜的，最好的皮肤，最好的听力系统，最少的自由基，真是很神奇。</p><p>而且伴随着细胞更新换代，我们的头骨两年更新完毕一次，<br>也可以说我们现在的脸和两年前其实是完全不一样的。</p><p>这就是为什么我们的样貌也会随着成长不断变化吧。</p><p>可惜伴随着旅程，衰老是一件令人难过并且不可逆的事情。<br>衰老并不是改变外表，长出皱纹，而是影响这我们体内每一个细胞的过程。</p><p>噪音对内耳毛细胞的不可逆损伤，紫外线和辐射对表皮的照射，<br>就连我们赖以生存的氧气，也在我们体内不断积累自由基使线粒体失去活力，并破坏着我们的细胞。</p><img src="./3.png" style="width:400px;margin:40px 0">DNA在我们一生内无数次的复制，产生的损耗和错误也在累积。<p>最终这些损伤和积累到达一定限度的时候，<br>细胞再也无法复制了，我们的身体再也不能把这些器官修好。<br>就是我们该离开这个世界的时候了。</p><p>死亡,和生存一样，都是不可思议的生命过程，是一个既定的程序。<br>死亡不是瞬间的，而是组织器官逐渐断开联系的过程。</p><p>心脏最后一次的馈赠，<br>是往我们的身体里注入了大量的内啡肽，所谓人体天然的止痛药，用于缓解我们对死亡的痛苦。<br><img src="./4.png" style="width:400px;margin:40px 0"></p><p>10秒内，我们的脑电活动急剧下降，<br>而37小时后我们最后一个脑细胞发出最后一个神经冲动。<br><img src="./5.png" style="width:400px;margin:40px 0"></p><p>从此体内再也没有神经电流的光芒，一切归于黑暗和寂静。</p><p>所有的旅行终有结束的一天，<br>What a wonderful trip it is!</p><img src="./6.png" style="width:400px;margin:40px 0"><p>通过这部片子，意外地获得了一些我以前对生命疑问的解答。</p><p>线粒体，神经递质，电流画面对我这个以前生物学得还不错的人来说，还是倍有亲切感的。</p><p>生育对女性的健康是有确确实实的损害的，所有的母亲为生命的延续都做了很大的牺牲，这真的很伟大也很不容易。</p><p>烟酒最好不要碰(摄入酒精后为了解读会导致体内缺水，记得补水💦)，<br><img src="./7.png" style="width:400px;margin:40px 0"></p><p>紫外线，肥胖这些因素是我们可以尽量避免的，</p><p>毕竟，说长不长说短不短的几十年，<br>体内数亿的细胞在不眠不休孜孜不倦地为你的身体工作,<br>我们理应对它们好点。(最近少运动多熬夜的我反省中)</p><p>最后感谢我体内所有的细胞们，其实我真觉得挺对不住你们的,<br>因为我好像都没有为你们做过什么。</p><p>生活还是要继续的，可能还需要你们和我一起努力个几十年，<br>今後ともよろしくお願いいたします〜</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;人体内旅行&lt;/p&gt;
    
    </summary>
    
      <category term="About Me" scheme="https://kisky3.github.io/categories/About-Me/"/>
    
    
      <category term="Documentary film" scheme="https://kisky3.github.io/tags/Documentary-film/"/>
    
      <category term="Humanbeing" scheme="https://kisky3.github.io/tags/Humanbeing/"/>
    
      <category term="Body" scheme="https://kisky3.github.io/tags/Body/"/>
    
  </entry>
  
  <entry>
    <title>AWS Amplify with Vue.js</title>
    <link href="https://kisky3.github.io/2020/04/21/AboutAWSAmplify/"/>
    <id>https://kisky3.github.io/2020/04/21/AboutAWSAmplify/</id>
    <published>2020-04-21T14:43:14.000Z</published>
    <updated>2020-11-01T08:36:29.375Z</updated>
    
    <content type="html"><![CDATA[<p>AWS Amplify 框架和Vue.js</p><a id="more"></a><h3 id="Amplify框架是什么"><a href="#Amplify框架是什么" class="headerlink" title="Amplify框架是什么"></a>Amplify框架是什么</h3><p>amplify 是aws几个月前开发的一款支持web和mobile 的无服务框架，具备身份验证，分析，API，GraphQL, 数据库，推送，机器学习等很多强大功能，可以理解为google firebase的加强版。。</p><hr><h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install vue</span><br><span class="line">$ vue create amplify-sample</span><br></pre></td></tr></table></figure><p>Vue Project</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vue CLI v3.11.0</span><br><span class="line">? Please pick a preset:</span><br><span class="line">  default (babel, eslint)</span><br><span class="line">❯ Manually select features</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed for your project: </span><br><span class="line"> ◉ Babel</span><br><span class="line"> ◯ TypeScript</span><br><span class="line"> ◯ Progressive Web App (PWA) Support</span><br><span class="line"> ◉ Router</span><br><span class="line">❯◉ Vuex</span><br><span class="line"> ◯ CSS Pre-processors</span><br><span class="line"> ◉ Linter / Formatter</span><br><span class="line"> ◯ Unit Testing</span><br><span class="line"> ◯ E2E Testing</span><br></pre></td></tr></table></figure><h3 id="Vue启动"><a href="#Vue启动" class="headerlink" title="Vue启动"></a>Vue启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd amplify-sample/</span><br><span class="line">$ npm run serve</span><br></pre></td></tr></table></figure><p>可以在localhost:8080看到Vue的主页面了。<br><img src="./1.png" style="width: 500px"></p><hr><h3 id="导入Amplify"><a href="#导入Amplify" class="headerlink" title="导入Amplify"></a>导入Amplify</h3><p>使用npm导入Amplify</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i aws-amplify</span><br><span class="line">$ npm i aws-amplify-vue</span><br></pre></td></tr></table></figure><p>设置amplify所使用的AWS</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ amplify configure</span><br></pre></td></tr></table></figure><p>sign in你的AWS之后回到命令行界面，按下enter</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Specify the AWS Region</span><br><span class="line">? region:  us-east-1</span><br></pre></td></tr></table></figure><p>选择你所在区域，并且设置好你的用户名<br><img src="./2.png" style="width: 500px"></p><img src="./3.png" style="width: 500px"><p>首先先将就着选择权限最强的AdministratorAccess吧，有需要的话之后再改也可以。<br>AccessKey和SecretKey要记好。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ amplify init</span><br><span class="line"></span><br><span class="line">Note: It is recommended to run this command from the root of your app directory</span><br><span class="line">? Enter a name for the project amplify-sample</span><br><span class="line">? Enter a name for the environment dev</span><br><span class="line">? Choose your default editor: Visual Studio Code</span><br><span class="line">? Choose the type of app that you&apos;re building javascript</span><br><span class="line">Please tell us about your project</span><br><span class="line">? What javascript framework are you using vue</span><br><span class="line">? Source Directory Path:  src</span><br><span class="line">? Distribution Directory Path: dist</span><br><span class="line">? Build Command:  npm run-script build</span><br><span class="line">? Start Command: npm run-script serve</span><br></pre></td></tr></table></figure><p>中途可能会出现让你选择环境的选项<code>? Enter a name for the environment</code><br>可以先输入dev</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">? Do you want to use an AWS profile? (Y/n) Y</span><br></pre></td></tr></table></figure><hr><h3 id="追加认证"><a href="#追加认证" class="headerlink" title="追加认证"></a>追加认证</h3><p>给Project追加认证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ amplify add auth</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Using service: Cognito, provided by: awscloudformation</span><br><span class="line"></span><br><span class="line"> The current configured provider is Amazon Cognito. </span><br><span class="line"></span><br><span class="line"> Do you want to use the default authentication and security configuration? (Use arrow keys)</span><br><span class="line">❯ Default configuration </span><br><span class="line">  Default configuration with Social Provider (Federation) </span><br><span class="line">  Manual configuration </span><br><span class="line">  I want to learn more.</span><br></pre></td></tr></table></figure><p>这次首先可以选择最基本的Default configuration，如果social provider的话，还可以使用Facebook, Google, Amazon等进行登陆。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> How do you want users to be able to sign in? </span><br><span class="line">  Username </span><br><span class="line">❯ Email </span><br><span class="line">  Phone Number </span><br><span class="line">  Email and Phone Number </span><br><span class="line">  I want to learn more.</span><br></pre></td></tr></table></figure><p>使用Email进行登陆。以后的设定都有默认配置就好。</p><p>如果只是这样的话实际的认证还是做不了的。<br>需要把本地的变更反映到服务器上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ amplify push</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">✔ Successfully pulled backend environment dev from the cloud.</span><br><span class="line"></span><br><span class="line">Current Environment: dev</span><br><span class="line"></span><br><span class="line">| Category | Resource name         | Operation | Provider plugin   |</span><br><span class="line">| -------- | --------------------- | --------- | ----------------- |</span><br><span class="line">| Auth     | amplifysample******** | Create    | awscloudformation |</span><br><span class="line">? Are you sure you want to continue? (Y/n)</span><br></pre></td></tr></table></figure><p>看第一行的话，首先pull到远程环境，然后检测出差别。<br>就像git一样！利用这个功能，其他的末端也好，从AWS的命令行也能通过pull，<br>来获取和远程一摸一样的环境。<br>(比如说当本地环境坏掉之后，可以用这个挽回！)</p><p>这次追加了新的Auth，应该能反应到服务器上。</p><p>这个上传可能会花一点时间，趁反映到服务器的间隙，来编辑一下main.js<br>main.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import App from &apos;./App.vue&apos;</span><br><span class="line">import router from &apos;./router&apos;</span><br><span class="line">import store from &apos;./store&apos;</span><br><span class="line"></span><br><span class="line">import Amplify, * as AmplifyModules from &apos;aws-amplify&apos;</span><br><span class="line">import &#123; AmplifyPlugin &#125; from &apos;aws-amplify-vue&apos;</span><br><span class="line">import awsconfig from &apos;./aws-exports&apos;</span><br><span class="line">Amplify.configure(awsconfig)</span><br><span class="line"></span><br><span class="line">Vue.use(AmplifyPlugin, AmplifyModules)</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  render: h =&gt; h(App)</span><br><span class="line">&#125;).$mount(&apos;#app&apos;)</span><br></pre></td></tr></table></figure><p>然后接着编辑 router/index.js<br>router/index.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import Router from &apos;vue-router&apos;</span><br><span class="line">import Home from &apos;../views/Home.vue&apos;</span><br><span class="line">import Login from &apos;../views/Login.vue&apos;</span><br><span class="line"></span><br><span class="line">import store from &apos;../store/index.js&apos;</span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Amplify読み込み</span><br><span class="line">import &#123; components, AmplifyEventBus &#125; from &apos;aws-amplify-vue&apos;</span><br><span class="line">import Amplify, * as AmplifyModules from &apos;aws-amplify&apos;</span><br><span class="line">import &#123; AmplifyPlugin &#125; from &apos;aws-amplify-vue&apos;</span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line">Vue.use(AmplifyPlugin, AmplifyModules)</span><br><span class="line"></span><br><span class="line">let user;</span><br><span class="line"></span><br><span class="line">// ユーザー管理</span><br><span class="line">getUser().then((user) =&gt; &#123;</span><br><span class="line">    if (user) &#123;</span><br><span class="line">        router.push(&#123;path: &apos;/&apos;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">function getUser() &#123;</span><br><span class="line">    return Vue.prototype.$Amplify.Auth.currentAuthenticatedUser().then((data) =&gt; &#123;</span><br><span class="line">        if (data &amp;&amp; data.signInUserSession) &#123;</span><br><span class="line">            store.commit(&apos;setUser&apos;, data);</span><br><span class="line">            return data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).catch(() =&gt; &#123;</span><br><span class="line">        store.commit(&apos;setUser&apos;, null);</span><br><span class="line">        return null;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// ログイン状態管理</span><br><span class="line">AmplifyEventBus.$on(&apos;authState&apos;, async (state) =&gt; &#123;</span><br><span class="line">    if (state === &apos;signedOut&apos;)&#123;</span><br><span class="line">        user = null;</span><br><span class="line">        store.commit(&apos;setUser&apos;, null);</span><br><span class="line">        router.push(&#123;path: &apos;/login&apos;&#125;);</span><br><span class="line">    &#125; else if (state === &apos;signedIn&apos;) &#123;</span><br><span class="line">        user = await getUser();</span><br><span class="line">        router.push(&#123;path: &apos;/&apos;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// ルーティング設定</span><br><span class="line">const router = new Router(&#123;</span><br><span class="line">    mode: &apos;history&apos;,</span><br><span class="line">    routes: [</span><br><span class="line">        &#123;</span><br><span class="line">            // ログインページ</span><br><span class="line">            path: &apos;/login&apos;,</span><br><span class="line">            name: &apos;login&apos;,</span><br><span class="line">            component: Login</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            // トップページ</span><br><span class="line">            path: &apos;/&apos;,</span><br><span class="line">            name: &apos;home&apos;,</span><br><span class="line">            component: Home,</span><br><span class="line">            meta: &#123; requiresAuth: true&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// リダイレクト設定</span><br><span class="line">router.beforeResolve(async (to, from, next) =&gt; &#123;</span><br><span class="line">    if (to.matched.some(record =&gt; record.meta.requiresAuth)) &#123;</span><br><span class="line">        user = await getUser();</span><br><span class="line">        if (!user) &#123;</span><br><span class="line">            return next(&#123;</span><br><span class="line">                path: &apos;/login&apos;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        return next()</span><br><span class="line">    &#125;</span><br><span class="line">    return next()</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export default router</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;AWS Amplify 框架和Vue.js&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="AWS" scheme="https://kisky3.github.io/tags/AWS/"/>
    
      <category term="Amplify" scheme="https://kisky3.github.io/tags/Amplify/"/>
    
      <category term="Amplify Vue" scheme="https://kisky3.github.io/tags/Amplify-Vue/"/>
    
  </entry>
  
  <entry>
    <title>About package-lock.json</title>
    <link href="https://kisky3.github.io/2020/04/20/package-lock/"/>
    <id>https://kisky3.github.io/2020/04/20/package-lock/</id>
    <published>2020-04-20T14:26:09.000Z</published>
    <updated>2020-09-30T16:03:34.479Z</updated>
    
    <content type="html"><![CDATA[<p>关于package-lock.json</p><a id="more"></a><p>当你进行<code>npm install</code>的时候，会自动生成package.json和package-lock.json.<br>这两个到底有什么区别呢。</p><hr><h1 id="什么是-Semantic-Versioning"><a href="#什么是-Semantic-Versioning" class="headerlink" title="什么是 Semantic Versioning"></a>什么是 Semantic Versioning</h1><p>Semantic Versioning就是版本的记录样式。比如像下面这样的形式的版本记录的话大家就很熟悉了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;2.3.2&quot;</span><br></pre></td></tr></table></figure><p>这种写法就是Semantic Versioning了。<br>X.Y.Z</p><p>X: ‎Major =&gt; 这个版本号变化了表示有了一个不可以和上个版本兼容的大更改。<br>Y: Minor =&gt; 这个版本号变化了表示有了增加了新的功能，并且可以向后兼容。<br>Z: Patch =&gt; 这个版本号变化了表示修复了bug，并且可以向后兼容。</p><p>因为major version变化表示可能会影响之前版本的兼容性，所以无论是波浪符号还是插入符号都不会自动去修改major version，因为这可能导致程序crush，可能需要手动修改代码。<br>根据这样的Semantic Versioning写法我们就可以更好地了解到更新的版本情报了。</p><h1 id="什么是-、（-）"><a href="#什么是-、（-）" class="headerlink" title="什么是(^)、（~）"></a>什么是(^)、（~）</h1><p>当我们查看package.json中已安装的库的时候，会发现他们的版本号之前都会加一个符号，有的是插入符号（^），有的是波浪符号（~）。那么他们到底有什么区别呢？</p><p>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;bluebird&quot;: &quot;^3.3.4&quot;,</span><br><span class="line">    &quot;body-parser&quot;: &quot;~1.15.2&quot;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>也就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bluebird的版本号：^3.3.4</span><br><span class="line">body-parse的版本号：~1.15.2</span><br></pre></td></tr></table></figure><p>当我们使用最新的Node运行<code>npm instal --save xxx</code>，的时候，他会优先考虑使用插入符号（^）而不是波浪符号（~）了。<br>这两个符号有什么分别呢？然后我试着整理了一下：</p><h3 id="波浪符号（-）："><a href="#波浪符号（-）：" class="headerlink" title="波浪符号（~）："></a>波浪符号（~）：</h3><p>他会更新到当前minor version（也就是中间的那位数字）中最新的版本。放到我们的例子中就是：body-parser:~1.15.2，这个库会去匹配更新到1.15.x的最新版本，如果出了一个新的版本为1.16.0，则不会自动升级。波浪符号是曾经npm安装时候的默认符号，现在已经变为了插入符号。</p><h3 id="插入符号（-）："><a href="#插入符号（-）：" class="headerlink" title="插入符号（^）："></a>插入符号（^）：</h3><p>这个符号就显得非常的灵活了，他将会把当前库的版本更新到当前major version（也就是第一位数字）中最新的版本。放到我们的例子中就是：bluebird:^3.3.4，这个库会去匹配3.x.x中最新的版本，但是他不会自动更新到4.0.0。</p><p>也就是说：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~1.15.2 :=  &gt;=1.15.2 &lt;1.16.0</span><br><span class="line"></span><br><span class="line">^3.3.4 := &gt;=3.3.4 &lt;4.0.0</span><br></pre></td></tr></table></figure><h1 id="package-lock-json的作用"><a href="#package-lock-json的作用" class="headerlink" title="package-lock.json的作用"></a>package-lock.json的作用</h1><p>其实用一句话来概括很简单，就是锁定安装时的包的版本号，并且需要上传到git，以保证其他人在npm install时大家的依赖能保证一致。</p><p>因为npm是开源世界，各库包的版本语义可能并不相同，有的库包开发者并不遵守严格这一原则：相同大版本号的同一个库包，其接口符合兼容要求。这时候用户就很头疼了：在完全相同的一个nodejs的代码库，在不同时间或者不同npm下载源之下，下到的各依赖库包版本可能有所不同，因此其依赖库包行为特征也不同有时候甚至完全不兼容。</p><p>原来package.json文件只能锁定大版本，也就是版本号的第一位，并不能锁定后面的小版本，你每次npm install都是拉取的该大版本下的最新的版本，为了稳定性考虑我们几乎是不敢随意升级依赖包的，这将导致多出来很多工作量，测试/适配等，所以package-lock.json文件出来了，当你每次安装一个依赖的时候就锁定在你安装的这个版本。</p><p>因此npm最新的版本就开始提供自动生成package-lock.json功能，为的是让开发者知道只要你保存了源文件，到一个新的机器上、或者新的下载源，只要按照这个package-lock.json所标示的具体版本下载依赖库包，就能确保所有库包与你上次安装的完全一样。</p><p>那如果我们安装时的包有bug，后面需要更新怎么办？</p><p>在以前可能就是直接改package.json里面的版本，然后再npm install了，但是5版本后就不支持这样做了，因为版本已经锁定在package-lock.json里了，所以我们只能npm install <a href="mailto:xxx@x.x.x" target="_blank" rel="noopener">xxx@x.x.x</a>  这样去更新我们的依赖，然后package-lock.json也能随之更新。</p><p>假如我已经安装了jquery 2.1.4这个版本，从git更新了package.json和package-lock.json，我npm install能覆盖掉node_modules里面的依赖吗?</p><p>其实我也有这个疑问，所以做了测试，在直接更新package.json和package-loc.json这两个文件后，npm install是可以直接覆盖掉原先的版本的，所以在协作开发时，这两个文件如果有更新，你的开发环境应该npm install一下才对。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于package-lock.json&lt;/p&gt;
    
    </summary>
    
      <category term="System Setting" scheme="https://kisky3.github.io/categories/System-Setting/"/>
    
    
      <category term="npm" scheme="https://kisky3.github.io/tags/npm/"/>
    
      <category term="package-lock" scheme="https://kisky3.github.io/tags/package-lock/"/>
    
  </entry>
  
  <entry>
    <title>Make My First Pr Animation Video</title>
    <link href="https://kisky3.github.io/2020/04/17/MakeMyFirstPrAnimationVideo/"/>
    <id>https://kisky3.github.io/2020/04/17/MakeMyFirstPrAnimationVideo/</id>
    <published>2020-04-17T10:01:37.000Z</published>
    <updated>2020-09-30T16:03:18.790Z</updated>
    
    <content type="html"><![CDATA[<p>使用Adobe Pr制作我的第一个动画</p><a id="more"></a><p>最近尝试使用Adobe XD和 Pr制作了一个简易的产品开发说明动画。</p><p>制作出来的效果像下面这样：<br><br></p><div class="video-container"><iframe src="https://kisky3.github.io/2020/04/17/MakeMyFirstPrAnimationVideo/video.mp4" frameborder="0" gesture="media" allow="encrypted-media" allowfullscreen></iframe></div><br><h1 id="参考视频："><a href="#参考视频：" class="headerlink" title="参考视频："></a>参考视频：</h1><ul><li><a href="https://www.bilibili.com/video/BV15b411q7zX?from=search&seid=12054323442701734548" target="_blank" rel="noopener">Adobe XD 25步从零到动效输出</a></li><li><a href="https://www.bilibili.com/video/BV1h7411U7BX" target="_blank" rel="noopener">10分钟快速上手premiere剪辑！</a></li><li><a href="https://www.bilibili.com/video/BV1nW411V7Vi" target="_blank" rel="noopener">（干货）2秒学会PR音频淡入淡出/PR如何让音频淡入淡出</a></li><li><a href="https://www.bilibili.com/video/BV1vJ411d7vy" target="_blank" rel="noopener">【Pr模板】1450个免费Pr模板，承包你一辈子的剪辑！</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用Adobe Pr制作我的第一个动画&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="Adobe Pr" scheme="https://kisky3.github.io/tags/Adobe-Pr/"/>
    
      <category term="Animation Video" scheme="https://kisky3.github.io/tags/Animation-Video/"/>
    
  </entry>
  
  <entry>
    <title>Setting Image Psth by :src=&quot;require(Var)&quot;</title>
    <link href="https://kisky3.github.io/2020/04/12/ImagePathOfVue/"/>
    <id>https://kisky3.github.io/2020/04/12/ImagePathOfVue/</id>
    <published>2020-04-12T09:42:16.000Z</published>
    <updated>2020-09-30T16:02:10.202Z</updated>
    
    <content type="html"><![CDATA[<p>使用:src=”require(Var)”指定图像路径</p><a id="more"></a><p>最近在写vue时被卡了一下。</p><h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><p>Vue的component里想引用图像文件。<br>首先把图像文件放在了assets里，并如下引用文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">src=<span class="string">"require('@/assets/hoge.jpg')"</span></span><br></pre></td></tr></table></figure><p>但是奇怪的是并取不到文件，并且显示<code>Cannot find module &#39;@/assets/hoge.jpg</code>的错误。</p><ul><li>hoge.vue</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;template lang=<span class="string">"pug"</span>&gt;</span><br><span class="line">  v-container(grid-list-lg fluid pa<span class="number">-0</span>)</span><br><span class="line">    v-layout(row wrap)</span><br><span class="line">      template(v-<span class="keyword">for</span>=<span class="string">"(pr, index) in prContents"</span>)</span><br><span class="line">        v-flex(xs12 md4 :key=<span class="string">"index"</span>)</span><br><span class="line">          v-card</span><br><span class="line">            v-img(:src=<span class="string">"require(pr.image)"</span> height=<span class="string">"300"</span>)</span><br><span class="line">            v-container(fill-height fluid pa<span class="number">-2</span>)</span><br><span class="line">              v-layout(fill-height)</span><br><span class="line">                v-flex(xs12 align-end flexbox)</span><br><span class="line">                  span(<span class="class"><span class="keyword">class</span></span>=<span class="string">"headline white--text"</span> v-text=<span class="string">"pr.title"</span>)</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">  name: 'HomeConcept',</span></span><br><span class="line"><span class="regexp">  data () &#123;</span></span><br><span class="line"><span class="regexp">    return &#123;</span></span><br><span class="line"><span class="regexp">      prContent: [</span></span><br><span class="line"><span class="regexp">        &#123;</span></span><br><span class="line"><span class="regexp">          title: 'タイトル1',</span></span><br><span class="line"><span class="regexp">          contents: 'コンテンツ',</span></span><br><span class="line"><span class="regexp">          image: '@/assets/hoge1.jpg'</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">       &#123;</span></span><br><span class="line"><span class="regexp">          title: 'タイトル2',</span></span><br><span class="line"><span class="regexp">          contents: 'コンテンツ',</span></span><br><span class="line"><span class="regexp">          image: '@/assets/hoge2.jpg'</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">       &#123;</span></span><br><span class="line"><span class="regexp">          title: 'タイトル3',</span></span><br><span class="line"><span class="regexp">          contents: 'コンテンツ',</span></span><br><span class="line"><span class="regexp">          image: '@/assets/hoge3.jpg'</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">      ]</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped  lang=<span class="string">"stylus"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br></pre></td></tr></table></figure><hr><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>require内，如果单纯使用文字列的话，@是无法识别的，所以require()要在data对象里实行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    prContents: [</span><br><span class="line">      &#123;</span><br><span class="line">        title: <span class="string">"タイトル1"</span>,</span><br><span class="line">        contents: <span class="string">"コンテンツ"</span>,</span><br><span class="line">        image: <span class="built_in">require</span>(<span class="string">"@/images/hoge.jpg"</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改后的hoge.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;template lang=<span class="string">"pug"</span>&gt;</span><br><span class="line">  v-container(grid-list-lg fluid pa<span class="number">-0</span>)</span><br><span class="line">    v-layout(row wrap)</span><br><span class="line">      template(v-<span class="keyword">for</span>=<span class="string">"(pr, index) in prContents"</span>)</span><br><span class="line">        v-flex(xs12 md4 :key=<span class="string">"index"</span>)</span><br><span class="line">          v-card</span><br><span class="line">            v-img(:src=<span class="string">"pr.image"</span> height=<span class="string">"300"</span>)</span><br><span class="line">            v-container(fill-height fluid pa<span class="number">-2</span>)</span><br><span class="line">              v-layout(fill-height)</span><br><span class="line">                v-flex(xs12 align-end flexbox)</span><br><span class="line">                  span(<span class="class"><span class="keyword">class</span></span>=<span class="string">"headline white--text"</span> v-text=<span class="string">"pr.title"</span>)</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">  name: 'HomeConcept',</span></span><br><span class="line"><span class="regexp">  data () &#123;</span></span><br><span class="line"><span class="regexp">    return &#123;</span></span><br><span class="line"><span class="regexp">      prContents: [</span></span><br><span class="line"><span class="regexp">        &#123;</span></span><br><span class="line"><span class="regexp">          title: 'タイトル1',</span></span><br><span class="line"><span class="regexp">          contents: 'コンテンツ',</span></span><br><span class="line"><span class="regexp">          image: require('@/assets/hoge1.jpg')</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        &#123;</span></span><br><span class="line"><span class="regexp">          title: 'タイトル2',</span></span><br><span class="line"><span class="regexp">          contents: 'コンテンツ',</span></span><br><span class="line"><span class="regexp">          image: require('@/assets/images/3pr-medical.jpg')</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        &#123;</span></span><br><span class="line"><span class="regexp">          title: 'タイトル3',</span></span><br><span class="line"><span class="regexp">          contents: 'コンテンツ',</span></span><br><span class="line"><span class="regexp">          image: require('@/assets/images/3pr-compassionate.jpg')</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">      ]</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped  lang=<span class="string">"stylus"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br></pre></td></tr></table></figure><p>如果只是一般的修改参数来引用图像的情况下，写成下面这样就可以了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;img</span><br><span class="line">  :src=<span class="string">"require('@/assets/img/' + domainName + '.png')"</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span></span>=<span class="string">"c-logo-takaku"</span></span><br><span class="line">  alt=<span class="string">""</span></span><br><span class="line">/&gt;</span><br><span class="line">...</span><br><span class="line">data(): Data &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      domainName: <span class="string">'xxxx'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用:src=”require(Var)”指定图像路径&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="Vue" scheme="https://kisky3.github.io/tags/Vue/"/>
    
      <category term=":src" scheme="https://kisky3.github.io/tags/src/"/>
    
      <category term="image path" scheme="https://kisky3.github.io/tags/image-path/"/>
    
  </entry>
  
  <entry>
    <title>Delete Amazon Cloud Front Cache(Invalidation)</title>
    <link href="https://kisky3.github.io/2020/03/18/DeleteAmazonCloudFrontCache/"/>
    <id>https://kisky3.github.io/2020/03/18/DeleteAmazonCloudFrontCache/</id>
    <published>2020-03-18T09:07:39.000Z</published>
    <updated>2020-09-30T16:00:47.221Z</updated>
    
    <content type="html"><![CDATA[<p>删除Amazon Cloud Front的缓存(Invalidation)</p><a id="more"></a><h1 id="什么是-Amazon-CloudFront"><a href="#什么是-Amazon-CloudFront" class="headerlink" title="什么是 Amazon CloudFront"></a>什么是 Amazon CloudFront</h1><p>Amazon CloudFront 是一种全球内容分发网络服务，可以安全地以低延迟和高传输速度向浏览者分发数据、视频、应用程序和 API。CloudFront 与 AWS 与多种 AWS 产品集成。</p><hr><h1 id="Amazon-CloudFront是怎么运作的"><a href="#Amazon-CloudFront是怎么运作的" class="headerlink" title="Amazon CloudFront是怎么运作的"></a>Amazon CloudFront是怎么运作的</h1><p>举例说明，当客户端发起对 <a href="http://www.customer.com" target="_blank" rel="noopener">www.customer.com</a> 的访问时，首先需要 DNS 系统解析出该域名对应的主机 IP，通过本地 ISP DNS 递归查询到 customer.com 的 DNS 域名服务器并了解到该域名是指向了 xxx.cloudfront.net ，进一步解析 xxx.cloudfront.net ，CloudFront 的 DNS 域名服务器会根据请求来源的 IP 等信息，返回适合当前该客户端访问的边缘节点的主机 IP 如 1.1.1.1，最终该客户端向 1.1.1.1 发出请求。如果该边缘节点已经缓存了该客户端请求的内容（图片、视频等静态文件），则直接返回给客户端，如果未缓存，则首先回源取回该内容，并存储在边缘节点，以便下次客户端对该内容请求时可以直接返回该内容。<br><br><br><img src="./1.png" style="width:500px"></p><hr><h1 id="什么是Invalidation"><a href="#什么是Invalidation" class="headerlink" title="什么是Invalidation"></a>什么是Invalidation</h1><p>Invalidation是用于删除CloudFront的边缘节点主机的缓存功能。</p><hr><h1 id="如何删除缓存"><a href="#如何删除缓存" class="headerlink" title="如何删除缓存"></a>如何删除缓存</h1><p>1.打开该CloudFront的控制台。<br><img src="./2.png" style="width:500px"></p><p>2.选择Invalidations，并点击「Create Invalidation」按钮。<br><img src="./3.png" style="width:500px"></p><p>3.指定你所想删除的对象的缓存路径。<br>能够使用wildcard，所以如果你想删除所有的缓存的时候可以使用wildcard，像下面这样输入<code>/*</code>就好,然后点击「Invalidate」按钮。<br><img src="./4.png" style="width:500px"></p><p>点击后就可以发现界面上被追加了一行，Status这一列的状态变成了<code>In Progress</code>。<br><img src="./5.png" style="width:500px"></p><p>如果缓存被删除完成，Status就会变成<code>Completed</code>.<br><img src="./6.png" style="width:500px"></p><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Invalidation删除功能是指删除你所指定的对象的缓存，并不影响缓存以后的保存。<br>Invalidation指定后，所显示的行是删除历史记录，这个历史记录是不能被删除的。<br>这个删除并不会改变该对象的缓存保存的设定，当缓存重新生成之后，还是会被重新保存的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;删除Amazon Cloud Front的缓存(Invalidation)&lt;/p&gt;
    
    </summary>
    
      <category term="System Setting" scheme="https://kisky3.github.io/categories/System-Setting/"/>
    
    
      <category term="Docker" scheme="https://kisky3.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Create Json By GAS and Deploy to S3</title>
    <link href="https://kisky3.github.io/2020/03/12/createJsonByGAS/"/>
    <id>https://kisky3.github.io/2020/03/12/createJsonByGAS/</id>
    <published>2020-03-12T08:13:07.000Z</published>
    <updated>2020-09-30T16:00:10.313Z</updated>
    
    <content type="html"><![CDATA[<p>用GAS造json数据并自动发布到S3上</p><a id="more"></a><p>最近在开发中需要造一堆相似的阶层似的json数据。<br>实在不想手动写，所以研究了一下如何用已经存在的文本文件来造出所需要的json数据，并能够自动deploy到S3上保存起来。</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>首先需要在S3上生成上传所需要的user,policy和保存数据用的bucket，<br>这能保证你在GAS中上传的时候能够使用改user，并且该user拥有上传json数据的权限和连接到你保存数据用的bucket.</p><h4 id="1-user和policy的生成："><a href="#1-user和policy的生成：" class="headerlink" title="1. user和policy的生成："></a>1. user和policy的生成：</h4><p>参照之前的文章<a href="https://kisky3.github.io/2020/02/10/UseServerlessFrameworkToCreateRESTAPI/">IAM用户的生成</a><br>在这里给user添加的policy要稍微修改一下，生成一个只能上传的policy<br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;Version&quot;: &quot;2012-10-17&quot;,</span><br><span class="line">    &quot;Statement&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;Sid&quot;: &quot;VisualEditor0&quot;,</span><br><span class="line">            &quot;Effect&quot;: &quot;Allow&quot;,</span><br><span class="line">            &quot;Action&quot;: &quot;s3:PutObject&quot;,</span><br><span class="line">            &quot;Resource&quot;: &quot;*&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-bucket的生成："><a href="#2-bucket的生成：" class="headerlink" title="2. bucket的生成："></a>2. bucket的生成：</h4><p>bucket就直接在S3新建就好了，但是在access权限上，最好是设置成只能取得这个bucket数据的权限。<br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;Version&quot;: &quot;2012-10-17&quot;,</span><br><span class="line">    &quot;Id&quot;: &quot;Policy1454907251774&quot;,</span><br><span class="line">    &quot;Statement&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;Sid&quot;: &quot;Stmt1454907246553&quot;,</span><br><span class="line">            &quot;Effect&quot;: &quot;Allow&quot;,</span><br><span class="line">            &quot;Principal&quot;: &quot;*&quot;,</span><br><span class="line">            &quot;Action&quot;: &quot;s3:GetObject&quot;, // 只能取得数据的Action</span><br><span class="line">            &quot;Resource&quot;: &quot;arn:aws:s3:::your_bucket_name/*&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并在Bucket Property的地方选择并如下图般设置Static website hosting,并保存<br><img src="./1.png" style="width:400px;margin:40px 0"></p><hr><h3 id="GAS的生成"><a href="#GAS的生成" class="headerlink" title="GAS的生成"></a>GAS的生成</h3><p>在准备工作做好之后就可以开始生成json数据的工作了。<br>首先整理出你所需要的文字版数据。<br><img src="./2.png" style="width:400px;margin:40px 0"></p><p>然后利用GAS的API来根据你文字版数据的sheet和内容生成你所需要的json。<br>写法基本和普通的js差不多，取得数据后编辑成你所需要的形式，<br>然后利用你刚刚生成的S3的user和bucket情报来进行数据的自动上传。</p><p>在这里GAS的内容就不说明了，大概在方法里都写了注释。<br>生成的是一个比较复杂的阶层式的json，写的比较粗糙。(sorry)</p><p>GAS例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* domainによってjsonを生成してS3上にUPする ***********************************************************/</span></span><br><span class="line"><span class="comment">// 個別のjsonを生成してS3上にUPする</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CreateAndUploadJson</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> domain = <span class="string">"xxxxxxxx"</span></span><br><span class="line">  createCategoryData(domain)</span><br><span class="line">  UploadJson(domain)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全てのjsonを一気に生成してUPする(重いので、こげる可能性がある)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CreateAndUploadAll</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> domain = [<span class="string">"audio-takakuureru"</span>, <span class="string">"beauty-takakuureru"</span>, <span class="string">"bicycle-takakuureru"</span>, <span class="string">"brand-takakuureru"</span>, <span class="string">"camera-takakuureru"</span>, <span class="string">"delivery-kaitori"</span>, <span class="string">"figure-takakuureru"</span>, <span class="string">"fishing-takakuureru"</span>, <span class="string">"g-takakuureru"</span>, <span class="string">"gakki-takakuureru"</span>, <span class="string">"guitar-kaitori"</span>, <span class="string">"gun-takakuureru"</span>, <span class="string">"kaden-takakuureru"</span>, <span class="string">"kagu-takakuureru"</span>, <span class="string">"kenki-takakuureru"</span>, <span class="string">"kougu-takakuureru"</span>, <span class="string">"navi-takakuureru"</span>, <span class="string">"noukigu-takakuureru"</span>, <span class="string">"pc-takakuureru"</span>, <span class="string">"sax-takakuureru"</span>, <span class="string">"sports-takakuureru"</span>, <span class="string">"syuttyou-kaitori"</span>, <span class="string">"tokei-takakuureru"</span>, <span class="string">"train-takakuureru"</span>, <span class="string">"tv-takakuureru"</span>]　</span><br><span class="line">  domain.forEach(<span class="function"><span class="params">json_domain</span> =&gt;</span> &#123;</span><br><span class="line">    createCategoryData(json_domain)</span><br><span class="line">    UploadJson(json_domain)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* S3上Upload用 ***********************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">UploadJson</span>(<span class="params">domain</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> accessKey = <span class="string">'xxxxxxxxxx'</span>;</span><br><span class="line">  <span class="keyword">var</span> secretKey = <span class="string">"xxxxxxxxxx"</span></span><br><span class="line">  <span class="keyword">var</span> bucketName = <span class="string">"xxxxxxxxx"</span></span><br><span class="line">  <span class="keyword">var</span> spreadsheetId = <span class="string">'xxxxxxxxxxxx'</span></span><br><span class="line">  <span class="keyword">var</span> sheetName = domain;</span><br><span class="line">  <span class="keyword">const</span> ss = SpreadsheetApp.getActiveSpreadsheet();</span><br><span class="line">  <span class="keyword">var</span> sheet = ss.getSheetByName(sheetName);</span><br><span class="line">  <span class="comment">// 生成されたシートからデータを取得</span></span><br><span class="line">  <span class="keyword">var</span> data = <span class="built_in">String</span>(sheet.getRange(<span class="string">'A:A'</span>).getValues());</span><br><span class="line">  <span class="comment">// もし文字列の最後「,」が存在する場合削除する</span></span><br><span class="line">  <span class="keyword">while</span> (data.charAt(data.length - <span class="number">1</span>) == <span class="string">','</span>) &#123;</span><br><span class="line">    data = data.substr(<span class="number">0</span>, data.length - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  json = Utilities.newBlob(data, <span class="string">"application/json"</span>);</span><br><span class="line">  <span class="keyword">var</span> s3 = S3.getInstance(accessKey, secretKey);</span><br><span class="line">  <span class="keyword">var</span> response = s3.putObject(bucketName, sheetName + <span class="string">'.json'</span>, json, &#123;</span><br><span class="line">    logRequests: <span class="literal">true</span></span><br><span class="line">  &#125;);</span><br><span class="line">  Logger.log(response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* サイト毎のメイン処理 **********************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCategoryData</span>(<span class="params">sheetName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> sheet = SpreadsheetApp.getActive().getSheetByName(sheetName + <span class="string">'-data'</span>);</span><br><span class="line">  <span class="comment">//dataへ変換</span></span><br><span class="line">  <span class="keyword">var</span> dataArray = convSheet(sheet);</span><br><span class="line">  <span class="comment">//dataをJsonに変換し、新規シート出力</span></span><br><span class="line">  creatNewSheet(dataArray, sheetName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//data（配列）へ変換関数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convSheet</span>(<span class="params">sheet</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> categoryJson = []</span><br><span class="line">  Logger.log(sheet)</span><br><span class="line">  <span class="comment">//領域</span></span><br><span class="line">  <span class="keyword">var</span> jsonRange = sheet.getRange(<span class="number">2</span>, <span class="number">2</span>, sheet.getLastRow() - <span class="number">1</span>, sheet.getLastColumn() - <span class="number">1</span>);</span><br><span class="line">  <span class="comment">// Logger.log('jsonRange:'+JSON.stringify(jsonRange));</span></span><br><span class="line">  <span class="keyword">var</span> jsonRowValues = jsonRange.getValues();</span><br><span class="line">  <span class="comment">// Logger.log('jsonRowValues:'+JSON.stringify(jsonRowValues));</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; jsonRowValues.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> catLvlObj = categoryJson.filter(<span class="function"><span class="params">cat0</span> =&gt;</span> cat0.title === jsonRowValues[i][<span class="number">0</span>])</span><br><span class="line">    <span class="comment">// 大カテゴリーは存在する場合、被るかどうかをチェック</span></span><br><span class="line">    <span class="keyword">if</span> (!!<span class="built_in">Object</span>.keys(catLvlObj).length) &#123;　</span><br><span class="line">      <span class="keyword">const</span> cat1LvlObj = catLvlObj[<span class="number">0</span>].options.filter(<span class="function"><span class="params">cat1</span> =&gt;</span> cat1.title === jsonRowValues[i][<span class="number">1</span>])</span><br><span class="line">      <span class="keyword">const</span> att = CreateJson(jsonRowValues[i][<span class="number">5</span>])</span><br><span class="line">      <span class="comment">// 中カテゴリーは存在する場合、被るかどうかをチェック</span></span><br><span class="line">      　　</span><br><span class="line">      <span class="keyword">if</span> (!!<span class="built_in">Object</span>.keys(cat1LvlObj).length) &#123;　　　　</span><br><span class="line">        cat1LvlObj[<span class="number">0</span>].options.push(&#123;</span><br><span class="line">          id: jsonRowValues[i][<span class="number">5</span>],</span><br><span class="line">          title: jsonRowValues[i][<span class="number">2</span>],</span><br><span class="line">          category: jsonRowValues[i][<span class="number">6</span>],</span><br><span class="line">          attributes: att</span><br><span class="line">        &#125;)　　　　</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 中カテゴリーは値がない場合　追加</span></span><br><span class="line">        catLvlObj[<span class="number">0</span>].options.push(&#123;</span><br><span class="line">          id: jsonRowValues[i][<span class="number">4</span>],</span><br><span class="line">          title: jsonRowValues[i][<span class="number">1</span>],</span><br><span class="line">          options: [&#123;</span><br><span class="line">            id: jsonRowValues[i][<span class="number">5</span>],</span><br><span class="line">            title: jsonRowValues[i][<span class="number">2</span>],</span><br><span class="line">            category: jsonRowValues[i][<span class="number">6</span>],</span><br><span class="line">            attributes: att</span><br><span class="line">          &#125;]</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 大カテゴリーは存在しない場合新規追加</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> catNew = <span class="keyword">new</span> <span class="built_in">Object</span></span><br><span class="line">      catNew.id = jsonRowValues[i][<span class="number">3</span>]</span><br><span class="line">      catNew.title = jsonRowValues[i][<span class="number">0</span>]</span><br><span class="line">      <span class="keyword">const</span> att = CreateJson(jsonRowValues[i][<span class="number">5</span>])</span><br><span class="line">      catNew.options = [&#123;</span><br><span class="line">        id: jsonRowValues[i][<span class="number">4</span>],</span><br><span class="line">        title: jsonRowValues[i][<span class="number">1</span>],</span><br><span class="line">        options: [&#123;</span><br><span class="line">          id: jsonRowValues[i][<span class="number">5</span>],</span><br><span class="line">          title: jsonRowValues[i][<span class="number">2</span>],</span><br><span class="line">          category: jsonRowValues[i][<span class="number">6</span>],</span><br><span class="line">          attributes: att</span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;]</span><br><span class="line">      categoryJson.push(catNew)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> categoryJson</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//新規シート作成関数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">creatNewSheet</span>(<span class="params">dataArray, sheetName</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//data(配列)よりJsonへ変換</span></span><br><span class="line">  <span class="keyword">var</span> json = <span class="built_in">JSON</span>.stringify(dataArray);</span><br><span class="line">  <span class="comment">//出力</span></span><br><span class="line">  <span class="keyword">var</span> newSheetName = sheetName;</span><br><span class="line">  <span class="comment">//新規シート初期化</span></span><br><span class="line">  <span class="keyword">var</span> newSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(newSheetName);</span><br><span class="line">  <span class="comment">//存在有無確認</span></span><br><span class="line">  <span class="comment">//存在しない場合</span></span><br><span class="line">  <span class="keyword">if</span> (!newSheet) &#123;</span><br><span class="line">    <span class="comment">//シート生成</span></span><br><span class="line">    newSheet = SpreadsheetApp.getActiveSpreadsheet();</span><br><span class="line">    newSheet.insertSheet(newSheetName);</span><br><span class="line">    <span class="comment">//データ入力</span></span><br><span class="line">    newSheet.getRange(<span class="string">"A1"</span>).setValue(json);</span><br><span class="line">    <span class="comment">//存在する場合</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//データの書換え</span></span><br><span class="line">    newSheet.getRange(<span class="string">"A1"</span>).setValue(<span class="built_in">String</span>(json));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 追加項目リスト作成関数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CreateJson</span>(<span class="params">cat2_id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ss = SpreadsheetApp.getActiveSpreadsheet();</span><br><span class="line">  <span class="keyword">const</span> fieldSheet = ss.getSheetByName(<span class="string">"抽出_format"</span>);</span><br><span class="line">  <span class="keyword">const</span> elementSheet = ss.getSheetByName(<span class="string">"m_format_element"</span>);</span><br><span class="line">  <span class="keyword">const</span> fieldData = fieldSheet.getDataRange().getValues();</span><br><span class="line">  <span class="keyword">const</span> elementData = elementSheet.getDataRange().getValues();</span><br><span class="line">  <span class="keyword">let</span> value = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt; fieldData.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> row = fieldData[i]</span><br><span class="line">    <span class="keyword">const</span> outputFlg = row[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> (outputFlg === <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">let</span> inputHint = row[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">const</span> sort = row[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">const</span> categoryId = row[<span class="number">6</span>];</span><br><span class="line">    <span class="keyword">const</span> formatId = row[<span class="number">7</span>];</span><br><span class="line">    <span class="keyword">const</span> name = row[<span class="number">9</span>];</span><br><span class="line">    <span class="keyword">const</span> formatType = row[<span class="number">13</span>];</span><br><span class="line">    <span class="keyword">const</span> fieldKey = row[<span class="number">14</span>];</span><br><span class="line">    <span class="comment">// validate rule</span></span><br><span class="line">    <span class="keyword">const</span> rules = []</span><br><span class="line">    <span class="keyword">const</span> required = row[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">const</span> maxLength = row[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">if</span> (required === <span class="number">1</span>) &#123;</span><br><span class="line">      rules.push(<span class="string">"required"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (maxLength !== <span class="string">""</span>) &#123;</span><br><span class="line">      rules.push(<span class="string">`max:<span class="subst">$&#123;maxLength&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// select, radioのoptions</span></span><br><span class="line">    <span class="keyword">let</span> elements;</span><br><span class="line">    <span class="keyword">if</span> (formatType === <span class="string">"select"</span> || formatType === <span class="string">"radio"</span>) &#123;</span><br><span class="line">      elements = elementData.filter(<span class="function"><span class="params">row</span> =&gt;</span> row[<span class="number">0</span>] === formatId).map(<span class="function"><span class="params">row</span> =&gt;</span> row[<span class="number">2</span>])</span><br><span class="line">      <span class="keyword">if</span> (formatType === <span class="string">"radio"</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> radioObj = []</span><br><span class="line">        elements.map(<span class="function"><span class="params">el</span> =&gt;</span> radioObj.push(&#123;</span><br><span class="line">          label: el,</span><br><span class="line">          value: el</span><br><span class="line">        &#125;))</span><br><span class="line">        elements = radioObj</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (row[<span class="number">6</span>] === <span class="built_in">Number</span>(cat2_id)) &#123;</span><br><span class="line">      value.push(&#123;</span><br><span class="line">        <span class="string">"field_name"</span>: name,</span><br><span class="line">        <span class="string">"field_key"</span>: fieldKey,</span><br><span class="line">        <span class="string">"type"</span>: formatType,</span><br><span class="line">        <span class="string">"required"</span>: <span class="string">`<span class="subst">$&#123;required === <span class="number">1</span>&#125;</span>`</span>,</span><br><span class="line">        <span class="string">"rules"</span>: <span class="string">`<span class="subst">$&#123;rules.length &gt; <span class="number">0</span> ? rules.join(<span class="string">"|"</span>) : <span class="string">""</span>&#125;</span>`</span>,</span><br><span class="line">        <span class="string">"options"</span>: elements === <span class="literal">null</span> ? <span class="string">""</span> : elements,</span><br><span class="line">        <span class="string">"hint"</span>: <span class="string">`<span class="subst">$&#123;inputHint === <span class="literal">null</span> ? <span class="string">""</span> : inputHint&#125;</span>`</span>,</span><br><span class="line">        <span class="string">"sort"</span>: sort,</span><br><span class="line">        <span class="string">"format_id"</span>: formatId</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="生成结果"><a href="#生成结果" class="headerlink" title="生成结果"></a>生成结果</h3><p>执行以上GAS的CreateAndUploadJson方法，就可以看到json数据被生成了sheet,并上传到了你指定的S3 Bucket上。<br><img src="./3.png" style="width:400px;margin:40px 0"></p><p>以上</p><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://dev.classmethod.jp/articles/csv-and-json-convert-between-s3-and-spreadsheet/" target="_blank" rel="noopener">多分保存版？S3とSpreadSheet間でのCSVとJSONのデータ読み書きを簡単なサンプルで網羅してみた</a></p><p><a href="https://dev.classmethod.jp/articles/google-apps-script-gss-to-s3-json/" target="_blank" rel="noopener">Google Apps Scriptを利用してGoogleスプレッドシートのデータをS3へJSONとして保存する</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用GAS造json数据并自动发布到S3上&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="google app script" scheme="https://kisky3.github.io/tags/google-app-script/"/>
    
      <category term="json" scheme="https://kisky3.github.io/tags/json/"/>
    
      <category term="s3" scheme="https://kisky3.github.io/tags/s3/"/>
    
      <category term="deploy" scheme="https://kisky3.github.io/tags/deploy/"/>
    
  </entry>
  
  <entry>
    <title>Set Repository-specific Username/Email</title>
    <link href="https://kisky3.github.io/2020/03/08/GitRepositoryCOmmitUserName/"/>
    <id>https://kisky3.github.io/2020/03/08/GitRepositoryCOmmitUserName/</id>
    <published>2020-03-08T14:48:44.000Z</published>
    <updated>2020-09-30T16:01:41.575Z</updated>
    
    <content type="html"><![CDATA[<p>给特定的Git Repojitory设定用户名和邮箱</p><a id="more"></a><p>我们知道config是配置的意思，那么git config命令就是对git进行一些配置。<br>git里面一共有3个配置文件</p><h3 id="1-仓库级配置文件："><a href="#1-仓库级配置文件：" class="headerlink" title="1.仓库级配置文件："></a>1.仓库级配置文件：</h3><h4 id="方法1：找到该文件，直接打开："><a href="#方法1：找到该文件，直接打开：" class="headerlink" title="方法1：找到该文件，直接打开："></a>方法1：找到该文件，直接打开：</h4><p>该文件位于当前仓库下，路径.git/，文件名为config<br>这个配置中的设置只对当前所在仓库（H:\MyGit目录下的test仓库）有效</p><h4 id="方法2："><a href="#方法2：" class="headerlink" title="方法2："></a>方法2：</h4><p>通过命令查看项目配置（仓库级配置）：git config –local -l</p><hr><h3 id="2-全局级配置文件："><a href="#2-全局级配置文件：" class="headerlink" title="2.全局级配置文件："></a>2.全局级配置文件：</h3><h4 id="方法1："><a href="#方法1：" class="headerlink" title="方法1："></a>方法1：</h4><p>以win10个人的PC机为例，在用户目录下，其路径为：C:\Users\Administrator，文件名为 .gitconfig</p><h4 id="方法2"><a href="#方法2" class="headerlink" title="方法2:"></a>方法2:</h4><p>通过命令查看全局级配置：git config –global -l</p><hr><h3 id="3-系统级配置文件："><a href="#3-系统级配置文件：" class="headerlink" title="3.系统级配置文件："></a>3.系统级配置文件：</h3><h4 id="方法1：-1"><a href="#方法1：-1" class="headerlink" title="方法1："></a>方法1：</h4><p>本地git的安装目录下，以我的git安装路径为例：F:\software\Git\mingw64\etc，文件名为：gitconfig</p><h4 id="方法2：-1"><a href="#方法2：-1" class="headerlink" title="方法2："></a>方法2：</h4><p>通过命令查看系统配置：git config –system -l</p><hr><p>对于git来说，配置文件的权重是仓库&gt;全局&gt;系统</p><h3 id="二、-用git-config命令查看配置文件"><a href="#二、-用git-config命令查看配置文件" class="headerlink" title="二、 用git config命令查看配置文件"></a>二、 用git config命令查看配置文件</h3><p>命令参数 –list, 简写 -l<br>格式：git config [–local|–global|–system] -l<br>查看仓库级的config，命令：git config –local -l<br>查看全局级的config，命令：git config –global -l<br>查看系统级的config，命令：git config –system -l<br>查看当前生效的配置，命令：git config -l，这个时候会显示最终三个配置文件计算后的配置信息</p><hr><h3 id="三、-使用git-config命令编辑配置文件"><a href="#三、-使用git-config命令编辑配置文件" class="headerlink" title="三、 使用git config命令编辑配置文件"></a>三、 使用git config命令编辑配置文件</h3><p>编辑的英文单词是什么，没错，edit</p><p>命令参数 –edit, 简写 -e</p><p>格式：git config [–local|–global|–system] -e</p><p>编辑仓库级的config，命令：git config –local -e，与–list参数不同的是，git config -e默认是编辑仓库级的配置文件。</p><p>编辑全局级的config，命令：git config –global -e</p><p>编辑系统级的config，命令：git config –system -e</p><p>注：执行这个命令的时候，git会用配置文件中设定的编辑器打开配置文件。</p><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git config user.name &quot;hogehoge&quot;</span><br><span class="line">$ git config user.email hoge@gmail.com</span><br><span class="line"></span><br><span class="line">$ git config --global user.name &quot;hogehoge&quot;</span><br><span class="line">$ git config --global user.email hoge@gmail.com</span><br><span class="line"></span><br><span class="line">$ git config --local user.name &quot;hogehoge&quot;</span><br><span class="line">$ git config --local user.email hoge@gmail.com</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给特定的Git Repojitory设定用户名和邮箱&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="Git" scheme="https://kisky3.github.io/tags/Git/"/>
    
      <category term="GitConfig" scheme="https://kisky3.github.io/tags/GitConfig/"/>
    
  </entry>
  
  <entry>
    <title>Setting Vue CLI Modes and Environment Variables</title>
    <link href="https://kisky3.github.io/2020/03/03/SettingVueCLI-env/"/>
    <id>https://kisky3.github.io/2020/03/03/SettingVueCLI-env/</id>
    <published>2020-03-03T10:15:13.000Z</published>
    <updated>2020-09-30T16:23:24.226Z</updated>
    
    <content type="html"><![CDATA[<p>设置Vue CLI的模式和环境变量</p><a id="more"></a><p>基本上参照官方文档设定就好 <a href="https://cli.vuejs.org/guide/mode-and-env.html#modes" target="_blank" rel="noopener">Vue 官方文档</a></p><hr><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>Vue CLI: 3.6.3</li></ul><hr><h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><p>本回创建本地local环境，开发环境，和生产环境</p><hr><h3 id="env文件的生成"><a href="#env文件的生成" class="headerlink" title=".env文件的生成"></a>.env文件的生成</h3><ul><li>.env.local</li><li>.env.development</li><li>.env.prod<br>在创建好的每个文件下写入相应的API Base URL.<br>本地环境的情况下 <code>.local</code>最好在.gitignore里添加，不要push到生产环境里。<br><code>VUE_APP_</code>这个接头词是必要的，漏掉的话build不成功的。。(之前卡在这了)</li></ul><p>例：<br>.env.local</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NODE_ENV=&apos;local&apos;</span><br><span class="line">VUE_APP_API_BASE_URL=&apos;https://localhost:8080/api/v1/xxx&apos;</span><br></pre></td></tr></table></figure><p>.env.development</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NODE_ENV=&apos;development&apos;</span><br><span class="line">VUE_APP_API_BASE_URL=&apos;https://development/api/v1/xxx&apos;</span><br></pre></td></tr></table></figure><p>.env.prod</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NODE_ENV=&apos;production&apos;</span><br><span class="line">VUE_APP_API_BASE_URL=&apos;https://production/api/v1/xxx&apos;</span><br></pre></td></tr></table></figure><hr><h3 id="package-json的设定"><a href="#package-json的设定" class="headerlink" title="package.json的设定"></a>package.json的设定</h3><p>在package.json里的scripts里设定你的模式</p><p>例：<br>package.json</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;local-serve&quot;: &quot;vue-cli-service serve --mode local&quot;,</span><br><span class="line">    &quot;dev-serve&quot;: &quot;vue-cli-service serve --mode development&quot;,</span><br><span class="line">    &quot;prod-serve&quot;: &quot;vue-cli-service serve --mode production&quot;,</span><br><span class="line">    &quot;dev-build&quot;: &quot;vue-cli-service build --mode development&quot;,</span><br><span class="line">    &quot;prod-build&quot;: &quot;vue-cli-service build --mode production&quot;,</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>根据你设定的package.json来运行<br>比如 yarn local-serve的时候，就会相应的获取.env.local里的环境变量。</p><p>这样你就能够根据不同的开发环境进行build,deploy了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;设置Vue CLI的模式和环境变量&lt;/p&gt;
    
    </summary>
    
      <category term="System Setting" scheme="https://kisky3.github.io/categories/System-Setting/"/>
    
    
      <category term="setting" scheme="https://kisky3.github.io/tags/setting/"/>
    
      <category term="Vue CLI" scheme="https://kisky3.github.io/tags/Vue-CLI/"/>
    
      <category term="Environment Variables" scheme="https://kisky3.github.io/tags/Environment-Variables/"/>
    
  </entry>
  
  <entry>
    <title>Create a Anonymous Bot for Slack</title>
    <link href="https://kisky3.github.io/2020/02/28/slackanonymousbot/"/>
    <id>https://kisky3.github.io/2020/02/28/slackanonymousbot/</id>
    <published>2020-02-28T14:50:23.000Z</published>
    <updated>2020-09-30T16:04:05.761Z</updated>
    
    <content type="html"><![CDATA[<p>做一个可以在slack匿名发言的机器人</p><a id="more"></a><p>运行环境</p><ul><li>Ubuntu16.04</li><li>node.js</li></ul><p>完成后的示意图<br><img src="./1.png" style="width:400px;margin:40px 0"></p><h3 id="添加Bot"><a href="#添加Bot" class="headerlink" title="添加Bot"></a>添加Bot</h3><p>首先点击下面的link在slack里添加bot</p><p><a href="https://my.slack.com/services/new/bot" target="_blank" rel="noopener">https://my.slack.com/services/new/bot</a></p><p>这里用了<code>anonymous</code>的bot名字，也可以输入其他的，然后点击「Add bot integration」按钮。</p><img src="./2.png" style="width:500px;margin:40px 0"><p>然后记下画面上显示的 「API Token」</p><h3 id="获取频道ID"><a href="#获取频道ID" class="headerlink" title="获取频道ID"></a>获取频道ID</h3><p><a href="https://slack.com/api/conversations.list?token=刚刚记录下的API_Token" target="_blank" rel="noopener">https://slack.com/api/conversations.list?token=刚刚记录下的API_Token</a></p><p>还可以取得用户ID和非公开频道ID</p><hr><h3 id="安装Botkit"><a href="#安装Botkit" class="headerlink" title="安装Botkit"></a>安装Botkit</h3><p>安装并使用Slack官方文档上的Bot框架<a href="https://github.com/howdyai/botkit" target="_blank" rel="noopener">Botkit</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//创建路径</span><br><span class="line">$ cd ~</span><br><span class="line">$ mkdir slack_anonymous_bot </span><br><span class="line">$ cd slack_anonymous_bot</span><br><span class="line"></span><br><span class="line">//botkit clone</span><br><span class="line">$ git clone https://github.com/howdyai/botkit.git</span><br><span class="line">$ cd botkit</span><br><span class="line"></span><br><span class="line">//branch 移动</span><br><span class="line">$ git checkout origin/legacy </span><br><span class="line"></span><br><span class="line">//安装</span><br><span class="line">$ npm install</span><br><span class="line"></span><br><span class="line">//如果安装失败・・・</span><br><span class="line">$ npm audit fix</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>如果生成了~/botkit/example/slack_bot.js就说明成功了</p><hr><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 移动到你生成的路径</span><br><span class="line">$ cd ~</span><br><span class="line">$ cd slack_anonymous_bot/botkit/</span><br><span class="line"></span><br><span class="line">//制作anonymous_bot.js</span><br><span class="line">$ touch anonymous_bot.js</span><br></pre></td></tr></table></figure><p>在anonymous_bot.js里粘贴下面的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">var Botkit = require(&quot;./lib/Botkit.js&quot;); // 注意path</span><br><span class="line">var os = require(&quot;os&quot;);</span><br><span class="line"></span><br><span class="line">var controller = Botkit.slackbot(&#123;</span><br><span class="line">    debug: true,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">var bot = controller.spawn(&#123;</span><br><span class="line">    token: &quot;刚刚记录下的API_TOKEN&quot;</span><br><span class="line">&#125;).startRTM();</span><br><span class="line"></span><br><span class="line">controller.on(&quot;direct_message&quot;, (bot, message) =&gt; &#123;</span><br><span class="line">    var now = new Date(); //获取时间</span><br><span class="line">    var user_name = &quot;名無しさん: &quot;+ now.getFullYear()+&quot;/&quot;+(now.getMonth()+1)+&quot;/&quot;+now.getDate()+&quot;/ &quot;+now.getHours()+&quot;:&quot;+now.getMinutes()+&quot;:&quot;+now.getSeconds();</span><br><span class="line"></span><br><span class="line">    bot.reply(message, &quot;匿名で投稿しました．&quot;);</span><br><span class="line"></span><br><span class="line">    bot.startConversation(&#123;  channel : &quot;刚刚取得的频道ID&quot; &#125;, (err, convo) =&gt; &#123;</span><br><span class="line">        var send_message = &#123;</span><br><span class="line">          type: &quot;message&quot;,</span><br><span class="line">          channel: &quot;刚刚取得的频道ID&quot;,</span><br><span class="line">          text: message.text,</span><br><span class="line">          username: user_name,</span><br><span class="line">          thread_ts: null,</span><br><span class="line">          reply_broadcast: null,</span><br><span class="line">          parse: null,</span><br><span class="line">          link_names: null,</span><br><span class="line">          attachments: null,</span><br><span class="line">          unfurl_links: null,</span><br><span class="line">          unfurl_media: null,</span><br><span class="line">          icon_url: null,</span><br><span class="line">          icon_emoji: &quot;:robot_face:&quot;,</span><br><span class="line">          as_user: true</span><br><span class="line">        &#125;</span><br><span class="line">        convo.say(send_message);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//debug环境</span><br><span class="line">$ cd ~/slack_anonymous_bot/botkit</span><br><span class="line">$ node anonymous_bot.js</span><br><span class="line"></span><br><span class="line">//通常一般环境</span><br><span class="line">$ cd ~/slack_anonymous_bot/botkit</span><br><span class="line">$ forever start slack_bot.js</span><br><span class="line">$ forever stop slack_bot.js // 停止bot</span><br></pre></td></tr></table></figure><hr><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p>如果bot运行成功了，bot前的灯会变绿色。<br><img src="./4.png" style="width:300px;margin:40px 0"></p><p>投稿时候首先会给你回信<br><img src="./5.png" style="width:300px;margin:40px 0"></p><p>然后你就可以看到匿名bot在你登陆的频道里代表你发言了<br><img src="./6.png" style="width:300px;margin:40px 0"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;做一个可以在slack匿名发言的机器人&lt;/p&gt;
    
    </summary>
    
      <category term="System Setting" scheme="https://kisky3.github.io/categories/System-Setting/"/>
    
    
      <category term="setting" scheme="https://kisky3.github.io/tags/setting/"/>
    
      <category term="slack bot" scheme="https://kisky3.github.io/tags/slack-bot/"/>
    
      <category term="slack" scheme="https://kisky3.github.io/tags/slack/"/>
    
      <category term="AnonymousBot" scheme="https://kisky3.github.io/tags/AnonymousBot/"/>
    
      <category term="BotKit" scheme="https://kisky3.github.io/tags/BotKit/"/>
    
  </entry>
  
</feed>
