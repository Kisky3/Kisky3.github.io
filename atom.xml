<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xiang Yu&#39;s Blog</title>
  
  <subtitle>Hello World, Hello Programming!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://kisky3.github.io/"/>
  <updated>2019-06-24T07:13:01.364Z</updated>
  <id>https://kisky3.github.io/</id>
  
  <author>
    <name>Xiang Yu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CSRF攻击及防范措施</title>
    <link href="https://kisky3.github.io/2018/10/14/CSRF%E6%94%BB%E5%87%BB%E5%8F%8A%E9%98%B2%E8%8C%83%E6%8E%AA%E6%96%BD/"/>
    <id>https://kisky3.github.io/2018/10/14/CSRF攻击及防范措施/</id>
    <published>2018-10-14T04:58:15.000Z</published>
    <updated>2019-06-24T07:13:01.364Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CSRF是什么"><a href="#CSRF是什么" class="headerlink" title="CSRF是什么"></a>CSRF是什么</h3><p>CSRF全称为跨站请求伪造（Cross-site request forgery），</p><a id="more"></a><p>是一种网络攻击方式，也被称为 one-click attack 或者 session riding。<br>简单说来就是已经利用登陆成功的User强制实行某些操作的恶意攻击行为。</p><hr><h3 id="CSRF攻击原理"><a href="#CSRF攻击原理" class="headerlink" title="CSRF攻击原理"></a>CSRF攻击原理</h3><p>其原理是攻击者构造网站后台某个功能接口的请求地址，诱导用户去点击或者用特殊方法让该请求地址自动加载。<br>用户在登录状态下这个请求被服务端接收后会被误以为是用户合法的操作。对于 GET 形式的接口地址可轻易被攻击，<br>对于 POST 形式的接口地址也不是百分百安全，攻击者可诱导用户进入带 Form 表单可用POST方式提交参数的页面。<br><img src="./1.png" width:400px></p><p>角色：</p><ul><li>正常浏览网页的用户： User</li><li>正规的但是具有漏洞的网站： WebA</li><li>利用CSRF进行攻击百度网站： WebB</li></ul><p>例子：<br>比如有shop.example.com这样一个购物网站，用户通过用户名和密码可以登录。其中有点击按钮重设密码的功能。<br>当用户点击按钮更改密码时，下图的送信请求将会被提交至WebA的服务器</p><p>URL：</p><ol><li><a href="http://shop.example.com/password/change" target="_blank" rel="noopener">http://shop.example.com/password/change</a></li><li>Parmeter:</li><li>new_pass:XXXXX</li><li>new_pass_conf:XXXXX</li></ol><p>说明：<br>1.User正常登陆网页WebA，WebA通过用户的认证并在User的浏览器中产生Cookie(证明是User本人登陆)</p><p>2.攻击者伪造能发送同样请求的网站WebB。利用简单的Javascript便可达到目的。</p><p>3.攻击者把该伪造的网站的URL放到img的src里上传，当User登陆后，打开网页时便会自动加载图片，WebB会利用用户的浏览器访问WebA。<br>由于User是在登录状态下，所以User的浏览器根据WebB的要求，带着1中生成的Cookie访问WebA。</p><p>4.WebA接收到User浏览器的请求，并带着用户的Cookie(如例子中的请求)，要求修改密码。</p><p>5.WebA误以为是用户的操作，响应修改密码的请求。User密码被盗。</p><p>以上Web便达到了在用户不知情的情况下，利用用户登陆后的Cookie进行用户的模拟操作过程。</p><hr><h3 id="CSRF防范措施"><a href="#CSRF防范措施" class="headerlink" title="CSRF防范措施"></a>CSRF防范措施</h3><p>1.服务端在收到路由请求时，生成一个随机数，在渲染请求页面时把随机数埋入页面<br>（一般埋入 form 表单内，）</p><p>2.服务端设置setCookie，把该随机数作为session种入用户浏览器。<br>(加入保存在Cookie中，旧Token消耗后，新的Token会被生成，造成用户混乱。而Session能避免此问题。)</p><p>3.当用户发送 GET 或者 POST 请求时带上_csrf_token参数<br>（对于 Form 表单直接提交即可，因为会自动把当前表单内所有的 input 提交给后台，包括_csrf_token）</p><p>4.后台在接受到请求后解析请求的cookie获取_csrf_token的值，然后和用户请求提交的_csrf_token做个比较，如果相等表示请求是合法的。</p><p>（下图是某电商网站的真实设置，这里页面上设置的 token和session里设置的token 虽然不直接相等，但 md5(‘1474357164624’) === ‘4bd4e512b0fbd9357150649adadedd4e’，后台还是很好计算的）</p><img src="./2.png" width:400px><img src="./3.png" width:400px><p>注意：尽量避免使用Get。因为能在发送请求时能在URL处暴露token信息。</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/22521378" target="_blank" rel="noopener">「每日一题」CSRF 是什么？</a>;</li><li><a href="https://www.jianshu.com/p/00fa457f6d3e" target="_blank" rel="noopener">CSRF攻击原理及防护</a>;</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;CSRF是什么&quot;&gt;&lt;a href=&quot;#CSRF是什么&quot; class=&quot;headerlink&quot; title=&quot;CSRF是什么&quot;&gt;&lt;/a&gt;CSRF是什么&lt;/h3&gt;&lt;p&gt;CSRF全称为跨站请求伪造（Cross-site request forgery），&lt;/p&gt;
    
    </summary>
    
      <category term="Back-end Knowledge" scheme="https://kisky3.github.io/categories/Back-end-Knowledge/"/>
    
    
      <category term="CSRF" scheme="https://kisky3.github.io/tags/CSRF/"/>
    
  </entry>
  
  <entry>
    <title>Hey,I&#39;m Xiang Yu. Welcome To My Blog</title>
    <link href="https://kisky3.github.io/2018/06/23/FirstBlog/"/>
    <id>https://kisky3.github.io/2018/06/23/FirstBlog/</id>
    <published>2018-06-23T13:14:53.000Z</published>
    <updated>2019-06-23T14:55:26.987Z</updated>
    
    <content type="html"><![CDATA[<p>你好，我是向宇！我今后的目标是成为会两门外语的高级前端开发工程师。<br>欢迎来到我的博客。我将在这里记录有关编程学习的知识，并不断更新完善这个博客。<br>谢谢你的观看与支持。欢迎你的意见与建议。</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;你好，我是向宇！我今后的目标是成为会两门外语的高级前端开发工程师。&lt;br&gt;欢迎来到我的博客。我将在这里记录有关编程学习的知识，并不断更新完善这个博客。&lt;br&gt;谢谢你的观看与支持。欢迎你的意见与建议。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
