<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xiang Yu&#39;s Blog</title>
  
  <subtitle>Hello World, Hello Programming!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://kisky3.github.io/"/>
  <updated>2021-02-16T15:15:02.538Z</updated>
  <id>https://kisky3.github.io/</id>
  
  <author>
    <name>Xiang Yu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>How to use var_dump and print_r into Cakephp</title>
    <link href="https://kisky3.github.io/2021/02/05/AboutCakephp/"/>
    <id>https://kisky3.github.io/2021/02/05/AboutCakephp/</id>
    <published>2021-02-05T01:14:41.000Z</published>
    <updated>2021-02-16T15:15:02.538Z</updated>
    
    <content type="html"><![CDATA[<p>如何在Cakephp里使用var_dump和print_r</p><a id="more"></a><h3 id="var-dump"><a href="#var-dump" class="headerlink" title="var_dump"></a>var_dump</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var_dump(参数)</span><br></pre></td></tr></table></figure><p>例子：</p><p>数值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;?php</span><br><span class="line">      $data = 70;</span><br><span class="line">      var_dump($data);</span><br><span class="line">    ?&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>结果：<br><img src="./1.png" style="width: 500px"></p><p>字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;?php</span><br><span class="line">      $data = &quot;abcde&quot;;</span><br><span class="line">      var_dump($data);</span><br><span class="line">    ?&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>结果：<br><img src="./2.png" style="width: 500px"></p><p>数列：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;?php</span><br><span class="line">      $data = array(&quot;one&quot;,2,3,&quot;four&quot;);</span><br><span class="line">      var_dump($data);</span><br><span class="line">    ?&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><img src="./3.png" style="width: 500px"><h1 id="与print-r的不同"><a href="#与print-r的不同" class="headerlink" title="与print_r的不同"></a>与print_r的不同</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;?php</span><br><span class="line">      $data = array(&quot;one&quot;,2,3,&quot;four&quot;);</span><br><span class="line">      var_dump($data);</span><br><span class="line">      echo &quot;&lt;br /&gt;&quot;;</span><br><span class="line">      print_r ($data);</span><br><span class="line">    ?&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><img src="./4.png" style="width: 500px">第一行为var_dump的输出内容、第二行为print_r的输出内容。print_r一般只打印内容。<hr><p>当是写在view(tpl)里面的时候，可以用下面的写法直接在view里显示数列的内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;$array|@debug_print_var&#125;</span><br><span class="line">&#123;$array|@print_r&#125;</span><br><span class="line">&#123;$array|@var_dump&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如何在Cakephp里使用var_dump和print_r&lt;/p&gt;
    
    </summary>
    
      <category term="Back-end Knowledge" scheme="https://kisky3.github.io/categories/Back-end-Knowledge/"/>
    
    
      <category term="php" scheme="https://kisky3.github.io/tags/php/"/>
    
      <category term="cakephp" scheme="https://kisky3.github.io/tags/cakephp/"/>
    
  </entry>
  
  <entry>
    <title>Git Pull Error【Please commit your changes or stash them before you merge】</title>
    <link href="https://kisky3.github.io/2021/01/08/gitpullerror/"/>
    <id>https://kisky3.github.io/2021/01/08/gitpullerror/</id>
    <published>2021-01-08T06:06:03.000Z</published>
    <updated>2021-02-14T14:37:53.389Z</updated>
    
    <content type="html"><![CDATA[<p>Git pull 时的错误【Please commit your changes or stash them before you merge】</p><a id="more"></a><p>当<code>git pull origin master</code>当时候发生以下的错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git pull origin master</span><br><span class="line">From https://github.com/user-name/app-name</span><br><span class="line">     * branch　     master       -&gt;   FETCH_HEAD </span><br><span class="line">Updating e05c05f..050505</span><br><span class="line">error: Your local changes to the following files would be overwritten by merge: </span><br><span class="line">         Gemfile.lock</span><br><span class="line">         config/initializers/devise.rb</span><br><span class="line">Please commit your changes or stash them before you merge.</span><br><span class="line">Aborting</span><br><span class="line">$</span><br></pre></td></tr></table></figure><h3 id="解决方法1-删除文件"><a href="#解决方法1-删除文件" class="headerlink" title="解决方法1: 删除文件"></a>解决方法1: 删除文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># ファイルのあるディレクトリへ移動</span><br><span class="line">$ rm Gemfile.lock</span><br><span class="line">$ git pull origin master</span><br></pre></td></tr></table></figure><hr><h3 id="解决方法2-stash回避"><a href="#解决方法2-stash回避" class="headerlink" title="解决方法2: stash回避"></a>解决方法2: stash回避</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 1) コンフり起こしてるファイルを一時退避</span><br><span class="line">$ git stash</span><br><span class="line"># 2) 退避したコミットしていないものが表示されるのでpullする</span><br><span class="line">$ git pull origin master</span><br><span class="line"># 3) スタッシュを戻す</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure><hr><h3 id="解决方法3-强制push"><a href="#解决方法3-强制push" class="headerlink" title="解决方法3: 强制push"></a>解决方法3: 强制push</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 1) リモートの最新を取ってきておいて・・</span><br><span class="line">$ git fetch origin master</span><br><span class="line"></span><br><span class="line"># 2) masterを、リモート追跡のmasterに強制的に合わせる</span><br><span class="line">$ git reset --hard origin/master</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Git pull 时的错误【Please commit your changes or stash them before you merge】&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="GitErrors" scheme="https://kisky3.github.io/tags/GitErrors/"/>
    
  </entry>
  
  <entry>
    <title>AWS CLF Lesson1〜3 Memo</title>
    <link href="https://kisky3.github.io/2020/12/01/lesson1/"/>
    <id>https://kisky3.github.io/2020/12/01/lesson1/</id>
    <published>2020-12-01T13:06:40.000Z</published>
    <updated>2020-12-07T14:55:27.046Z</updated>
    
    <content type="html"><![CDATA[<p>AWS 云从业者基础知识 学习笔记1 〜 3</p><a id="more"></a><p>AWSクラウドコンピューティングの６つのメリットは試験に出る内容：<br>1.固定費(設備投資費)が柔軟な変動費へ<br>2.スケールによる大きなコストメリット<br>3.キャパシティ予測が不要に<br>4.速度と俊敏性の向上<br>5.データセンターの運用と捕手への投資が不要に<br>6.わずか数分で世界中にデプロイ</p><p>時間が経てば故障する、ということを認識し、この考えをアーキテクチャに採り入れます。<br>このような考え方を<code>Design for Failure</code>といいます。</p><p>単一障害点(Single Point Of Failure、SPOF)という考え方があります。</p><p>Design for Failure = 単一障害点をなくそう<br>マネージドなサービスを利用すよう。AWSのマネージドなサービスは単一障害点にならないように考慮されている。</p><ul><li>1つのデータセンターのみ運用しない</li><li>単一のインスタンスのみ構成しない</li></ul><p>固定されたリソースでなく、クラウドの利点である弾力性を使って動的的にスケーリングを行う。<br>使い捨て可能なリソースとして、サーバーを考える。</p><p>ロードバランサーを組み合わせて、並列処理を行う。<br>スケーリングは弾力性を組み合わせて、高負荷時にはスケールアウト、低負荷時にはスケールインを行う。</p><p>静的コンテンツは外部に出して、エンドユーザーの近くに保管する。<br>動的に処理するデータは、クラウド上のコンピューティングリソースの近くに保管する。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;AWS 云从业者基础知识 学习笔记1 〜 3&lt;/p&gt;
    
    </summary>
    
    
      <category term="aws" scheme="https://kisky3.github.io/tags/aws/"/>
    
      <category term="AWS Certified Cloud Practitioner" scheme="https://kisky3.github.io/tags/AWS-Certified-Cloud-Practitioner/"/>
    
  </entry>
  
  <entry>
    <title>Basic Operations on DynamoDB Tables by js</title>
    <link href="https://kisky3.github.io/2020/09/16/Node-js%E3%81%A7DynamoDB%E3%81%AE%E6%93%8D%E4%BD%9C/"/>
    <id>https://kisky3.github.io/2020/09/16/Node-jsでDynamoDBの操作/</id>
    <published>2020-09-15T15:04:54.000Z</published>
    <updated>2021-02-21T03:48:37.143Z</updated>
    
    <content type="html"><![CDATA[<p>DynamoDB的基本操作</p><a id="more"></a><p>用js对DynamoDB进行数据操作的话有两种方法,<br>一种是使用AWS.DynamoDB,另一种是使用AWS.DynamoDB.DocumentClient(docClient)</p><p>例：AWS.DynamoDB</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dynamodb = <span class="keyword">new</span> AWS.DynamoDB();</span><br><span class="line"><span class="keyword">var</span> params = &#123;</span><br><span class="line">    TableName: <span class="string">'DogTable'</span>,</span><br><span class="line">    Item:&#123;</span><br><span class="line">        <span class="string">'dogId'</span>:&#123;<span class="attr">N</span>: <span class="string">'12'</span>&#125;, <span class="comment">// 数字的情况下需要指定N</span></span><br><span class="line">        <span class="string">'name'</span>:&#123;<span class="attr">S</span>: <span class="string">'项羽'</span>&#125; <span class="comment">// 字符串的情况下要指定S</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">dynamodb.putItem(params, callback);</span><br></pre></td></tr></table></figure><p>例：AWS.DynamoDB.DocumentClient</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> docClient = <span class="keyword">new</span> AWS.DynamoDB.DocumentClient();</span><br><span class="line"><span class="keyword">var</span> params = &#123;</span><br><span class="line">    TableName: <span class="string">'DogTable'</span>,</span><br><span class="line">    Item:&#123;</span><br><span class="line">         dogId: <span class="number">12</span>,</span><br><span class="line">         name: <span class="string">'项羽'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">docClient.put(params, callback);</span><br></pre></td></tr></table></figure><p>使用docClient的话,能够直接把原生的js代码转换成DynamoDB上的数据类型,代码相对简洁。<br>因此在此只讨论docClient的情况。</p><hr><h3 id="PUT-插入数据"><a href="#PUT-插入数据" class="headerlink" title="PUT (插入数据)"></a>PUT (插入数据)</h3><p>往SuperCarTable表里的主键(carId)里插入12这个项目。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> params = &#123;</span><br><span class="line">    TableName: <span class="string">'SuperCarTable'</span>,</span><br><span class="line">    Item:&#123;                               <span class="comment">// 主键是必须的（如果有排序键的话写上排序键）</span></span><br><span class="line">         carId: <span class="number">12</span>,                      <span class="comment">// 主键</span></span><br><span class="line">         name: <span class="string">'フェラーリ458'</span>,</span><br><span class="line">         price: <span class="number">28300000</span>,</span><br><span class="line">         engine: &#123;</span><br><span class="line">             type: <span class="string">'V型8気筒'</span>,</span><br><span class="line">             power: <span class="number">578</span></span><br><span class="line">         &#125;,</span><br><span class="line">         color:[<span class="string">'red'</span>, <span class="string">'black'</span>, <span class="string">'white'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">docClient.put(params, callback);</span><br></pre></td></tr></table></figure><hr><h3 id="GET（获取数据）"><a href="#GET（获取数据）" class="headerlink" title="GET（获取数据）"></a>GET（获取数据）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> params = &#123;</span><br><span class="line">    TableName: <span class="string">'SuperCarTable'</span>,</span><br><span class="line">    Key:&#123; <span class="comment">// 指定你想取得数据的主键(或者排序键)</span></span><br><span class="line">         carId: <span class="number">12</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">docClient.get(params, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data.Item.name);       <span class="comment">//'宝马458'</span></span><br><span class="line">        <span class="built_in">console</span>.log(data.Item.engine.type);<span class="comment">//'V型8号引擎'</span></span><br><span class="line">        <span class="built_in">console</span>.log(data.Item.color[<span class="number">2</span>]);   <span class="comment">//'白色'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h3 id="UPDATE-更新"><a href="#UPDATE-更新" class="headerlink" title="UPDATE(更新)"></a>UPDATE(更新)</h3><p>更新SuperCarTable表里主键(carId)为12的数据的其他属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> params = &#123;</span><br><span class="line">    TableName: <span class="string">'SuperCarTable'</span>,</span><br><span class="line">    Key:&#123;  <span class="comment">// 指定你想取得数据的主键(或者排序键)</span></span><br><span class="line">         carId: <span class="number">12</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 指定UpdateExpression的更新名</span></span><br><span class="line">    ExpressionAttributeNames: &#123;</span><br><span class="line">        <span class="string">'#n'</span>: <span class="string">'name'</span>,</span><br><span class="line">        <span class="string">'#d'</span>: <span class="string">'designer'</span></span><br><span class="line">        <span class="string">'#e'</span>: <span class="string">'engine'</span>,</span><br><span class="line">        <span class="string">'#t'</span>: <span class="string">'type'</span>,</span><br><span class="line">        <span class="string">'#p'</span>: <span class="string">'power'</span>,</span><br><span class="line">        <span class="string">'#c'</span>: <span class="string">'color'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 更新各属性的值</span></span><br><span class="line">    ExpressionAttributeValues: &#123;</span><br><span class="line">        <span class="string">':newName'</span>: <span class="string">'フェラーリ488GTB'</span>,</span><br><span class="line">        <span class="string">':newdesigner'</span>: <span class="string">'フラビオ・マンツォーニ'</span>,</span><br><span class="line">        <span class="string">':newType'</span>: <span class="string">'V型8気筒ツインターボ'</span>,</span><br><span class="line">        <span class="string">':addPower'</span>: <span class="number">92</span>,</span><br><span class="line">        <span class="string">':newColor'</span>: [<span class="string">'yellow'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    UpdateExpression: <span class="string">'SET #n = :newName, #d = :newDesigner, #e.#t = :newType, #e.#p = #e.#p + :addPower, #c = list_append(#c, :addPower)'</span></span><br><span class="line">&#125;;</span><br><span class="line">docClient.update(params, callback);</span><br></pre></td></tr></table></figure><h4 id="关于UpdateExpression"><a href="#关于UpdateExpression" class="headerlink" title="关于UpdateExpression"></a>关于UpdateExpression</h4><p>UpdateExpression是根据定义好的String的定义式来指定更新内容的。<br>必须要在UpdateExpression的最开始使用指定的action keyword,用逗号隔开的话可以同时执行多个指令。但是每个指定只能在一个UpdateExpression里使用一次。</p><p>例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UpdateExpression: <span class="string">'SET #a = :aval, #b = :bval REMOVE #c'</span></span><br></pre></td></tr></table></figure><h4 id="SET-ACTION"><a href="#SET-ACTION" class="headerlink" title="SET ACTION:"></a>SET ACTION:</h4><p>用于属性的追加和加工。比如对数值进行处理后追加,还可以在数列里添加数据。(数列时要使用[]将数据框起来)</p><h4 id="REMOVE-ACTION"><a href="#REMOVE-ACTION" class="headerlink" title="REMOVE ACTION:"></a>REMOVE ACTION:</h4><p>删除指定项目的指定属性, 也可以只删除指定数列内的数据。</p><p>例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ExpressionAttributeNames:&#123;</span><br><span class="line">    <span class="string">'#pr'</span>: <span class="string">'price'</span>,</span><br><span class="line">    <span class="string">'#c'</span>: <span class="string">'color'</span></span><br><span class="line">&#125;</span><br><span class="line">UpdateExpression: <span class="string">'REMOVE #pr, #c[1]'</span> <span class="comment">// 删除price属性和color数列的第二个值</span></span><br></pre></td></tr></table></figure><hr><h4 id="ADD-ACTION"><a href="#ADD-ACTION" class="headerlink" title="ADD ACTION:"></a>ADD ACTION:</h4><p>用于数值属性的加法处理,追加SET类型的值。(推荐用SET ACTION进行代替)<br>另外,SET类型是原生Javascirpt不存在的类型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ExpressionAttributeNames:&#123;</span><br><span class="line">    <span class="string">'#pr'</span>: <span class="string">'price'</span>,</span><br><span class="line">    <span class="string">'#c'</span>: <span class="string">'color'</span><span class="comment">// color属性为String Set型</span></span><br><span class="line">&#125;,</span><br><span class="line">ExpressionAttributeValues:&#123;</span><br><span class="line">    <span class="string">':addPrice'</span>: <span class="number">7400000</span>,  <span class="comment">// 为price属性加上7400000</span></span><br><span class="line">    <span class="string">':addColor'</span>: docClient.createSet([<span class="string">'Yellow'</span>, <span class="string">'Gray'</span>]) <span class="comment">// 为color属性添加Yellow和Gray的值</span></span><br><span class="line">&#125;,</span><br><span class="line">UpdateExpression: <span class="string">'ADD #pr :addPrice, #c :addColor'</span></span><br></pre></td></tr></table></figure><hr><h4 id="DELETE-ACTION"><a href="#DELETE-ACTION" class="headerlink" title="DELETE ACTION:"></a>DELETE ACTION:</h4><p>可以从SET型的属性删除指定的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ExpressionAttributeNames:&#123;</span><br><span class="line">    <span class="string">'#c'</span>: <span class="string">'color'</span> <span class="comment">// color属性为String Set型</span></span><br><span class="line">&#125;,</span><br><span class="line">ExpressionAttributeValues:&#123;</span><br><span class="line">    <span class="string">':deleteColor'</span>: docClient.createSet([<span class="string">'Red'</span>, <span class="string">'Blue'</span>])  <span class="comment">// 从color属性删除Red和Blue的值</span></span><br><span class="line">&#125;,</span><br><span class="line">UpdateExpression: <span class="string">'DELETE #pr :deletePrice'</span></span><br></pre></td></tr></table></figure><p>如果是删除指定的一列数据的话,可以直接使用delete。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> params = &#123;</span><br><span class="line">    TableName: <span class="string">'SuperCarTable'</span>,</span><br><span class="line">    Key:&#123;   <span class="comment">// 指定想删除项目的主键(或排序键)</span></span><br><span class="line">         carId: <span class="number">12</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">docClient.delete(params, callback);</span><br></pre></td></tr></table></figure><hr><h4 id="QUERY-检索-和SCAN-取得所有"><a href="#QUERY-检索-和SCAN-取得所有" class="headerlink" title="QUERY(检索)和SCAN(取得所有)"></a>QUERY(检索)和SCAN(取得所有)</h4><p>QUERY:<br>基本情况下,表的主键和排序键(或者两者同时)的情况下才能进行query。<br>但是如果使用了<em>GSI</em>的情况下,也可以利用其他的属性来进行检索。</p><p>GSI:</p><table><thead><tr><th>name(pk)</th><th>year(sk)</th><th>category</th><th>nation</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td></tr></tbody></table><p>例:</p><h4 id="对1980年前获奖的获奖者进行query。"><a href="#对1980年前获奖的获奖者进行query。" class="headerlink" title="对1980年前获奖的获奖者进行query。"></a>对1980年前获奖的获奖者进行query。</h4><p>这时query的对象是sort key,所以直接可以进行query</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> params = &#123;</span><br><span class="line">    TableName: <span class="string">'NovelPrizeTable'</span>,</span><br><span class="line">    ExpressionAttributeNames:&#123;<span class="string">'#y'</span>: <span class="string">'year'</span>&#125;,</span><br><span class="line">    ExpressionAttributeValues:&#123;<span class="string">':val'</span>: <span class="number">1980</span>&#125;,</span><br><span class="line">    KeyConditionExpression: <span class="string">'#y &lt;= :val'</span><span class="comment">//検索対象が満たすべき条件を指定</span></span><br><span class="line">&#125;;</span><br><span class="line">docClient.query(params, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">       data.Items.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">person, index</span>)</span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(person.name);<span class="comment">//1980年以前の受賞者の名前</span></span><br><span class="line">       &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h4 id="对获得经济学奖的获奖人进行query"><a href="#对获得经济学奖的获奖人进行query" class="headerlink" title="对获得经济学奖的获奖人进行query"></a>对获得经济学奖的获奖人进行query</h4><p>这时进行query的对象是category。所以要设置一个将category作为主键的GSI(Global secondary index)</p><ol><li>打开DynamoDB的控制台里的index tab.</li><li>生成index</li><li>主键里输入「category」,将数据类型选择为字符串.</li><li>sort key 可以不用填写.</li><li>index名可以设置为「category-index」</li><li>点击生成index.</li></ol><p>代码如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> params = &#123;</span><br><span class="line">    TableName: <span class="string">'NovelPrizeTable'</span>,</span><br><span class="line">    IndexName: <span class="string">'category-index'</span>,<span class="comment">//インデックス名を指定</span></span><br><span class="line">    ExpressionAttributeNames:&#123;<span class="string">'#c'</span>: <span class="string">'category'</span>&#125;,</span><br><span class="line">    ExpressionAttributeValues:&#123;<span class="string">':val'</span>: <span class="string">'economics'</span>&#125;,</span><br><span class="line">    KeyConditionExpression: <span class="string">'#c = :val'</span><span class="comment">//検索対象が満たすべき条件を指定</span></span><br><span class="line">&#125;;</span><br><span class="line">docClient.query(params, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">       data.Items.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">person, index</span>)</span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(person.name);<span class="comment">//経済学賞受賞者の名前</span></span><br><span class="line">       &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h3 id="GSI-query的时候对IAM-Role的设置"><a href="#GSI-query的时候对IAM-Role的设置" class="headerlink" title="GSI query的时候对IAM Role的设置"></a>GSI query的时候对IAM Role的设置</h3><p>为了获得对<code>NovelPrizeTable</code>的操作权限, <code>NovelPrizeTable</code>的ARN操作时要分配到可以拥有操作权限的IAMRole.<br>但是NovelPrizeTable的GSI进行query的时候，必须要追加对当前的GSI的ARN的操作权限的Resource.<br>这时IAM Role的设置如下(表名字的后面添加/index(index名))</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"Version"</span>: <span class="string">"2012-10-17"</span>,</span><br><span class="line">    <span class="string">"Statement"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"Effect"</span>: <span class="string">"Allow"</span>,</span><br><span class="line">            <span class="string">"Action"</span>: [</span><br><span class="line">                <span class="string">"dynamodb:Query"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"Resource"</span>: [</span><br><span class="line">                <span class="string">"arn:aws:dynamodb:ap-northeast-1:********:table/NovelPrizeTable"</span>,</span><br><span class="line">                <span class="string">"arn:aws:dynamodb:ap-northeast-1:********:table/NovelPrizeTable/index/category-index"</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DynamoDB的基本操作&lt;/p&gt;
    
    </summary>
    
    
      <category term="AWS" scheme="https://kisky3.github.io/tags/AWS/"/>
    
      <category term="DynamoDB" scheme="https://kisky3.github.io/tags/DynamoDB/"/>
    
      <category term="Node.js" scheme="https://kisky3.github.io/tags/Node-js/"/>
    
      <category term="DocumentClient" scheme="https://kisky3.github.io/tags/DocumentClient/"/>
    
  </entry>
  
  <entry>
    <title>AWS Lambda Dynamodb Access Error【AccessDeniedException】</title>
    <link href="https://kisky3.github.io/2020/09/15/AWSLambdaAccessError/"/>
    <id>https://kisky3.github.io/2020/09/15/AWSLambdaAccessError/</id>
    <published>2020-09-15T14:55:41.000Z</published>
    <updated>2021-02-14T15:42:53.669Z</updated>
    
    <content type="html"><![CDATA[<p>AWS Lambda和Dynamodb连接时的错误【AccessDeniedException】</p><a id="more"></a><p>当想在lambda里通过特定条件读取Dynamodb里的数据时，发生了以下的错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">2017-04-03T12:11:12.144Z    ******  Unable to delete item. Error JSON:</span><br><span class="line">&#123;</span><br><span class="line">    &quot;message&quot;: &quot;User: arn:aws:sts::******:assumed-role/******/****** is not authorized to perform: dynamodb:DeleteItem on resource: arn:aws:dynamodb:us-east-1:******:table/******&quot;,</span><br><span class="line">    &quot;code&quot;: &quot;AccessDeniedException&quot;,</span><br><span class="line">    &quot;time&quot;: &quot;2017-04-03T12:11:12.131Z&quot;,</span><br><span class="line">    &quot;requestId&quot;: &quot;******&quot;,</span><br><span class="line">    &quot;statusCode&quot;: 400,</span><br><span class="line">    &quot;retryable&quot;: false,</span><br><span class="line">    &quot;retryDelay&quot;: 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><p>lambda的policy里、添加可以允许Dynamodb连接的权限。</p><p>首先确认lambda的policy：<br><img src="./1.png" style="width: 500px"></p><hr><p>然后添加policy<br><img src="./2.png" style="width: 500px"></p><hr><p>这时候ARN这个修饰名是需要的，可以从dynamodb的overview里看到。<br><img src="./3.png" style="width: 500px"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;AWS Lambda和Dynamodb连接时的错误【AccessDeniedException】&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="AWS" scheme="https://kisky3.github.io/tags/AWS/"/>
    
      <category term="Lambda" scheme="https://kisky3.github.io/tags/Lambda/"/>
    
  </entry>
  
  <entry>
    <title>iOS Input Input Expansion Probleam</title>
    <link href="https://kisky3.github.io/2020/09/14/iOSInputExpansion/"/>
    <id>https://kisky3.github.io/2020/09/14/iOSInputExpansion/</id>
    <published>2020-09-14T14:16:05.000Z</published>
    <updated>2021-01-12T14:26:00.089Z</updated>
    
    <content type="html"><![CDATA[<p>iOS下输入时画面的放大问题</p><a id="more"></a><h2 id="解决方法1-禁止页面缩放"><a href="#解决方法1-禁止页面缩放" class="headerlink" title="解决方法1: 禁止页面缩放"></a>解决方法1: 禁止页面缩放</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,</span></span></span><br><span class="line"><span class="tag"><span class="string">initial-scale=1.0, maximum-scale=1.0, user-scalable=no"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- initial-scale     - 初始的缩放比例</span></span><br><span class="line"><span class="comment">   minimum-scale     - 允许用户缩放到的最小比例</span></span><br><span class="line"><span class="comment">   maximum-scale     - 允许用户缩放到的最大比例</span></span><br><span class="line"><span class="comment">   user-scalable     - 用户是否可以手动缩放 --&gt;</span></span><br></pre></td></tr></table></figure><p>但是这样会限制用户的手动放大。</p><hr><h2 id="解决方法2-input输入框中的字体不能小于16px"><a href="#解决方法2-input输入框中的字体不能小于16px" class="headerlink" title="解决方法2: input输入框中的字体不能小于16px"></a>解决方法2: input输入框中的字体不能小于16px</h2><p>例子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=text]</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(0.8);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="解决方法3-调整行高"><a href="#解决方法3-调整行高" class="headerlink" title="解决方法3: 调整行高"></a>解决方法3: 调整行高</h2><p>调整input框的行高与字体font-size的行高，一般是<em>input框的行高&gt;=字体font-size的行高</em></p><hr><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/weixin_40890907/article/details/82378873?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.control" target="_blank" rel="noopener">ios中点击input输入框光标变大，页面放大问题</a></p><p><a href="https://qiita.com/skwbr/items/b285cc312587c73a4812" target="_blank" rel="noopener">iOSでinputのフォーカス時に画面がズームするのを防ぐ</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;iOS下输入时画面的放大问题&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="Input" scheme="https://kisky3.github.io/tags/Input/"/>
    
      <category term="iOS" scheme="https://kisky3.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Vue TypeError:「Cannot read property ..... of undefined&quot;」</title>
    <link href="https://kisky3.github.io/2020/09/12/VueUndefinedError/"/>
    <id>https://kisky3.github.io/2020/09/12/VueUndefinedError/</id>
    <published>2020-09-12T14:36:05.000Z</published>
    <updated>2021-01-12T14:50:21.796Z</updated>
    
    <content type="html"><![CDATA[<p>Vue类型错误：无法阅读未定义属性</p><a id="more"></a><p>当我想取得<em>data[index][“hoge”]</em>这样当数据的时候，vue出现了一下当报错。<br>(但是在console里打出来看看又发现是可以取到数据的)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cannot read property &apos;hoge&apos; of undefined</span><br></pre></td></tr></table></figure><p>理由是因为data[index]为undefined的时候无法取得下一级的元素，<br>在vue上加上一个v-if条件就可以了。</p><p>例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">"data[index]"</span>&gt;</span>&#123;&#123;data[index]["hoge"]&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vue类型错误：无法阅读未定义属性&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="Vue" scheme="https://kisky3.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue iOS IME Input Probleam</title>
    <link href="https://kisky3.github.io/2020/08/14/VueInputIMEProbleam/"/>
    <id>https://kisky3.github.io/2020/08/14/VueInputIMEProbleam/</id>
    <published>2020-08-14T14:16:05.000Z</published>
    <updated>2021-01-12T14:34:38.214Z</updated>
    
    <content type="html"><![CDATA[<p>Vue Input 在iOS下的IME日语输入问题</p><a id="more"></a><h2 id="1-重复值的输入"><a href="#1-重复值的输入" class="headerlink" title="1.重复值的输入"></a>1.重复值的输入</h2><p>Vue的Input在网页输入时没啥问题 但是在iPhone的Sarari输入时会有输入值的重复输入</p><h5 id="理由"><a href="#理由" class="headerlink" title="理由"></a>理由</h5><p>重复输入的情况是因为使用了@input,导致数字还在输入过程中事件被触发导致多重重复输入。</p><h5 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h5><p>这个用@change,等到数字输入完毕之后再执行一次处理就可以了。</p><p>##2.日语输入时第一次输入时无法触发@change事件(input的type为number)</p><p>第一次输入日语的时候,default为null, 无论@change还是@input都无法将日语存储到state里。<br>如果需要监视输入值进行相关处理(Validation)之类的话,会出现bug。<br>但是奇怪的是一旦输入过一次数字之后,就不存在这个问题了。</p><h5 id="理由-1"><a href="#理由-1" class="headerlink" title="理由"></a>理由</h5><p>如果你用日语输入法IME输入日文的时候,vue的data是当作null处理的,而如果default是null的话,<br>则相当于没变化,@change事件是不被触发的。<br>但是数字的话是填入数字,相当于data被激活了,@change之后就是能够运行的。</p><h5 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h5><p>1.使用Element: compositionend Event</p><blockquote><p>compositionend イベントは、 IME などのテキスト編集システムが現在の編集セッションを完了またはキャンセルした時に発生します。</p></blockquote><p>也就是当你使用IME输入法的时候,输入时或者输入完成的时候这个事件将被触发。<br>所以可以考虑和@change一起配套使用。</p><img src="./1.gif" style="width: 300px"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">"number"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:value</span>=<span class="string">"item"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">change</span>=<span class="string">"createItem"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">compositionend</span>=<span class="string">"createItem"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">name</span>=<span class="string">"item"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure><p>2.不要使用input[type=”number”]</p><p>如果使用<code>number</code>的话键盘的上下键可以触发数字的大小变动,而且不能自动识别iPhone和Android的数字键盘。<br>可以考虑使用下面的方法,type依然为text,但是<code>inputmode=&quot;numeric&quot;</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; inputmode=&quot;numeric&quot; pattern=&quot;\d*&quot;&gt;</span><br></pre></td></tr></table></figure><p>这样不仅保证日语输入时候触发@change事件,并且能在使用iPhone和Android的时候自动打开数字键盘。<br><img src="./2.jpg" style="width: 500px"><br>而且不需要同时使用@change和@compositionend两个事件,用户体验也是比较好的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vue Input 在iOS下的IME日语输入问题&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="Vue" scheme="https://kisky3.github.io/tags/Vue/"/>
    
      <category term="Input" scheme="https://kisky3.github.io/tags/Input/"/>
    
      <category term="iOS" scheme="https://kisky3.github.io/tags/iOS/"/>
    
      <category term="IME" scheme="https://kisky3.github.io/tags/IME/"/>
    
  </entry>
  
  <entry>
    <title>Git Error 「fatal cannot lock ref ...」</title>
    <link href="https://kisky3.github.io/2020/08/05/giterrorfatal-cannotlockref/"/>
    <id>https://kisky3.github.io/2020/08/05/giterrorfatal-cannotlockref/</id>
    <published>2020-08-04T15:47:21.000Z</published>
    <updated>2020-11-24T14:45:20.926Z</updated>
    
    <content type="html"><![CDATA[<p>Git Error: 「fatal: cannot lock ref …」</p><a id="more"></a><h3 id="Error详情："><a href="#Error详情：" class="headerlink" title="Error详情："></a>Error详情：</h3><p>在Git新建branch的时候出现了error,如果在别人创建的<code>project/feature_name</code>下面创建了<code>project/feature_name/add_hoge</code>branch的话会出现下面的error:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">master</span><br><span class="line">* project/feature_name</span><br><span class="line"></span><br><span class="line">$ git checkout -b project/feature_name/add_hoge</span><br><span class="line">fatal: cannot lock ref &apos;project/feature_name/add_hoge&apos;:</span><br><span class="line">&apos;project/feature_name&apos; exists; cannot create &apos;project/feature_name/add_hoge&apos;</span><br></pre></td></tr></table></figure><hr><h3 id="Error原因："><a href="#Error原因：" class="headerlink" title="Error原因："></a>Error原因：</h3><p>如果在Git上试图创建<code>foo/bar</code>这样的分支的话,就会在<code>.git</code>路径的下面创建一个<code>foo</code>的路径。<br>而如果别人已经创建过<code>foo</code>分支的话说明<code>foo</code>路径已经存在,就会导致刚刚这样的错误。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git co -b hoge</span><br><span class="line">Switched to a new branch &apos;hoge&apos;</span><br><span class="line">$ git co -b hoge/fuga</span><br><span class="line">fatal: cannot lock ref &apos;refs/heads/hoge/fuga&apos;: &apos;refs/heads/hoge&apos; exists; cannot create &apos;refs/heads/hoge/fuga&apos;</span><br></pre></td></tr></table></figure><hr><h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><p>改变根分支的分支名:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NG: project/feature_name</span><br><span class="line">OK: project/feature_name/top</span><br></pre></td></tr></table></figure><p>不使用<code>/</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">例） project/feature_name_add_hoge</span><br><span class="line">例） project/feature_name--add_hoge</span><br><span class="line">例） project/feature_name__add_hoge</span><br></pre></td></tr></table></figure><p>或者干脆换一个不冲突的分支名就好了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Git Error: 「fatal: cannot lock ref …」&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://kisky3.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Vue Route Redirect on Refresh</title>
    <link href="https://kisky3.github.io/2020/08/03/VueRouterAlert/"/>
    <id>https://kisky3.github.io/2020/08/03/VueRouterAlert/</id>
    <published>2020-08-03T14:50:46.000Z</published>
    <updated>2020-11-21T11:39:33.653Z</updated>
    
    <content type="html"><![CDATA[<p>Vue Router的页面刷新处理</p><a id="more"></a><p>上一篇文章里我们写了如何利用Vue+Vuetify打造自定义的消息确认组件<br><a href="'https://kisky3.github.io/2020/07/14/VueAlert/'">Vue+Vuetify打造独自的消息确认组件</a></p><p>今天我们来利用打造好的组件来写一个常见的需求。<br>比如用户在输入数据时,刷新页面或者进行了页面跳转,为了防止数据丢失应该跳出弹窗提示问用户是否保存数据。</p><p>需求如下:(自定义消息组件已经可以使用)</p><p>1.从页面A跳转到页面B的时候进行页面B的自动刷新,以便获取最新的数据。<br>(包括浏览器上的返回和代码里a标签的返回)</p><p>2.从页面A跳转到页面B的时候,跳出自定义的弹窗,提示是否跳转页面。</p><p>3.在特定的编辑页面进行手动刷新(在浏览器上按刷新按钮)的时候,跳出系统自带弹窗提示是否刷新。</p><hr><h3 id="需求1"><a href="#需求1" class="headerlink" title="需求1"></a>需求1</h3><blockquote><p>1.从页面A跳转到页面B的时候进行页面B的自动刷新,以便获取最新的数据。<br>(包括浏览器上的返回和代码里a标签的返回)</p></blockquote><p>这个可以通过App.vue里对router的watch和页面跳转时动态路由匹配的判断来进行刷新。<br>刷新可以用<code>this.$router.go(0);</code> (当然也有别的写法)</p><p>※ 提醒一下,当使用路由参数时,例如从<code>foo</code>导航到<code>bar</code>,原来的组件实例会被复用。因为两个路由都渲染同个组件,比起销毁再创建,复用则显得更加高效。不过,这也意味着组件的生命周期钩子不会再被调用。</p><p>App.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">   $route(to, <span class="keyword">from</span>) &#123;</span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">from</span>.name === <span class="string">"foo"</span> &amp;&amp; to.name === <span class="string">"bar"</span>) &#123;</span><br><span class="line">       <span class="comment">// 在这里刷新</span></span><br><span class="line">       <span class="keyword">this</span>.$router.go(<span class="number">0</span>);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;,</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><hr><h3 id="需求2"><a href="#需求2" class="headerlink" title="需求2"></a>需求2</h3><blockquote><p>2.从页面A跳转到页面B的时候,跳出自定义的弹窗,提示是否跳转页面。<br>在A页面的component里定义<code>beforeRouteLeave</code>事件。</p></blockquote><p>你可以在路由组件内直接定义以下路由导航守卫,比如<code>beforeRouteEnter</code>,<code>beforeRouteUpdate (2.2 新增)</code>,<code>beforeRouteLeave</code>,比如具体的说明如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Foo = &#123;</span><br><span class="line">  template: <span class="string">`...`</span>,</span><br><span class="line">  beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="comment">// 在渲染该组件的对应路由被 confirm 前调用</span></span><br><span class="line">    <span class="comment">// 不！能！获取组件实例 `this`</span></span><br><span class="line">    <span class="comment">// 因为当守卫执行前，组件实例还没被创建</span></span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteUpdate (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="comment">// 在当前路由改变，但是该组件被复用时调用</span></span><br><span class="line">    <span class="comment">// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span></span><br><span class="line">    <span class="comment">// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span></span><br><span class="line">    <span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="comment">// 导航离开该组件的对应路由时调用</span></span><br><span class="line">    <span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了满足这个需求我们使用<code>beforeRouteLeave</code>来通过追加自己的条件和动态路由匹配来调出自定义弹窗。</p><p>实例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">beforeRouteLeave(to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="keyword">const</span> goback =</span><br><span class="line">      to.name === <span class="string">"foo"</span> &amp;&amp;</span><br><span class="line">      <span class="keyword">from</span>.name === <span class="string">"bar"</span> &amp;&amp;</span><br><span class="line">      !<span class="keyword">this</span>.isConfirm;</span><br><span class="line">    <span class="keyword">if</span> (goback) &#123;</span><br><span class="line">      <span class="comment">// 调用弹窗</span></span><br><span class="line">        <span class="keyword">this</span>.$confirm(&#123;</span><br><span class="line">          title: <span class="string">"このサイトを離れますか？"</span>,</span><br><span class="line">          message: <span class="string">"編集中のものは保存されませんが、よろしいですか"</span>,</span><br><span class="line">          option: <span class="string">"confirm"</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 取消浏览器自定义弹窗</span></span><br><span class="line">          <span class="keyword">this</span>.destoryBeforeUnload();</span><br><span class="line">          <span class="comment">// 点击确认的时候进行页面跳转</span></span><br><span class="line">          next();</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 点击确认的时候不进行页面跳转</span></span><br><span class="line">          next(<span class="literal">false</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      next();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><hr><h3 id="需求3"><a href="#需求3" class="headerlink" title="需求3"></a>需求3</h3><blockquote><p>3.在特定的编辑页面进行手动刷新(在浏览器上按刷新按钮)的时候,跳出系统自带弹窗提示是否刷新。</p></blockquote><p>我们可以考虑使用<code>beforeunload事件</code>:</p><blockquote><p><code>Window: beforeunload event</code>:当浏览器窗口关闭或者刷新时, 会触发beforeunload事件。当前页面不会直接关闭, 可以点击确定按钮关闭或刷新, 也可以取消关闭或刷新。但是请注意, 并非所有浏览器都支持此方法, 而有些浏览器需要事件处理程序实现两个遗留方法中的一个作为代替：</p></blockquote><blockquote><p>将字符串分配给事件的returnValue属性<br>从事件处理程序返回一个字符串。</p></blockquote><blockquote><p>某些浏览器过去在确认对话框中显示返回的字符串, 从而使事件处理程序能够向用户显示自定义消息。但是, 此方法已被弃用, 并且在大多数浏览器中不再支持。</p></blockquote><p>所以我们可以像下面这样给window添加或者移除弹窗:<br>在其他使用自定义弹出框的时候要记得将这个事件destory了(<code>destoryBeforeUnload</code>)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在按浏览器上的刷新按钮自动监视并弹出弹框</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"beforeunload"</span>, <span class="keyword">this</span>.handleBeforeUnload);</span><br><span class="line"></span><br><span class="line">destoryBeforeUnload() &#123;</span><br><span class="line">  <span class="comment">// 移除弹窗</span></span><br><span class="line">  <span class="built_in">window</span>.removeEventListener(<span class="string">"beforeunload"</span>, <span class="keyword">this</span>.handleBeforeUnload);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">handleBeforeUnload(e) &#123;</span><br><span class="line">  e.preventDefault();</span><br><span class="line">  <span class="keyword">const</span> message =</span><br><span class="line">  <span class="string">"このサイトを離れますか？\n行った変更が保存されない可能性があります。"</span>;</span><br><span class="line">  e.returnValue = message;</span><br><span class="line">  <span class="keyword">return</span> message;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>以上！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vue Router的页面刷新处理&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="Router" scheme="https://kisky3.github.io/tags/Router/"/>
    
      <category term="Vue" scheme="https://kisky3.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue+Vuetify Confirm and Alert Component</title>
    <link href="https://kisky3.github.io/2020/07/14/VueAlert/"/>
    <id>https://kisky3.github.io/2020/07/14/VueAlert/</id>
    <published>2020-07-14T14:50:46.000Z</published>
    <updated>2020-11-21T11:19:39.224Z</updated>
    
    <content type="html"><![CDATA[<p>Vue+Vuetify打造独自的消息确认组件</p><a id="more"></a><p> vue框架自己好像没有弹出框, 而vuetify有弹出框v-dialog, 没有确认框confirm, 虽然确认框本身就是弹出框, 但是弹出框的功能有个特点, 就是确定做一件事情, 而取消了就是做另一件事情, 类似一个Promise要做的事情。</p><p>今天主要就是要自定义一个确认框, 我们利用组件的思维, 先定义组件结构, 然后定义组件如何配合文档document工作, 最后声明和调用。按照这个思路, 我们分如下几步：</p><p>1.写一个confirm的自定义组件<br> src/components/atoms/Confirm.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"dialogwrapper"</span> v-<span class="keyword">if</span>=<span class="string">"show"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"overlay"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &lt;v-card <span class="class"><span class="keyword">class</span></span>=<span class="string">"dialog"</span>&gt;</span><br><span class="line">      &lt;v-card-title&gt;&#123;&#123; title &#125;&#125;&lt;<span class="regexp">/v-card-title&gt;</span></span><br><span class="line"><span class="regexp">      &lt;v-card-text&gt; &#123;&#123; message &#125;&#125; &lt;/</span>v-card-text&gt;</span><br><span class="line">      &lt;v-card-actions&gt;</span><br><span class="line">        &lt;v-btn @click=<span class="string">"ok"</span>&gt;確認&lt;<span class="regexp">/v-btn&gt;</span></span><br><span class="line"><span class="regexp">        &lt;v-btn v-if="option === 'confirm'" @click="cancel"&gt;キャンセル&lt;/</span>v-btn&gt;</span><br><span class="line">      &lt;<span class="regexp">/v-card-actions&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>v-card&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      promiseStatus: <span class="literal">null</span>,</span><br><span class="line">      show: <span class="literal">false</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    confirm() &#123;</span><br><span class="line">      <span class="keyword">this</span>.show = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.promiseStatus = &#123; resolve, reject &#125;;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    ok() &#123;</span><br><span class="line">      <span class="keyword">this</span>.show = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">this</span>.promiseStatus &amp;&amp; <span class="keyword">this</span>.promiseStatus.resolve();</span><br><span class="line">    &#125;,</span><br><span class="line">    cancel() &#123;</span><br><span class="line">      <span class="keyword">this</span>.show = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">this</span>.promiseStatus &amp;&amp; <span class="keyword">this</span>.promiseStatus.reject();</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp">.dialogwrapper &#123;</span></span><br><span class="line"><span class="regexp">  align-items: center;</span></span><br><span class="line"><span class="regexp">  display: flex;</span></span><br><span class="line"><span class="regexp">  height: 100%;</span></span><br><span class="line"><span class="regexp">  justify-content: center;</span></span><br><span class="line"><span class="regexp">  left: 0px;</span></span><br><span class="line"><span class="regexp">  pointer-events: none;</span></span><br><span class="line"><span class="regexp">  position: fixed;</span></span><br><span class="line"><span class="regexp">  top: 0px;</span></span><br><span class="line"><span class="regexp">  width: 100%;</span></span><br><span class="line"><span class="regexp">  z-index: 6;</span></span><br><span class="line"><span class="regexp">  transition: all 0.2s cubic-bezier(0.25, 0.8, 0.25, 1) 0s, z-index 1ms ease 0s;</span></span><br><span class="line"><span class="regexp">  outline: none;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">.dialog &#123;</span></span><br><span class="line"><span class="regexp">  overflow-y: auto;</span></span><br><span class="line"><span class="regexp">  pointer-events: auto;</span></span><br><span class="line"><span class="regexp">  width: 100%;</span></span><br><span class="line"><span class="regexp">  z-index: inherit;</span></span><br><span class="line"><span class="regexp">  box-shadow: rgba(0, 0, 0, 0.2) 0px 11px 15px -7px,</span></span><br><span class="line"><span class="regexp">    rgba(0, 0, 0, 0.14) 0px 24px 38px 3px, rgba(0, 0, 0, 0.12) 0px 9px 46px 8px;</span></span><br><span class="line"><span class="regexp">  border-radius: 4px;</span></span><br><span class="line"><span class="regexp">  margin: 24px;</span></span><br><span class="line"><span class="regexp">  transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1) 0s;</span></span><br><span class="line"><span class="regexp">  max-width: 290px;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">.overlay &#123;</span></span><br><span class="line"><span class="regexp">  align-items: center;</span></span><br><span class="line"><span class="regexp">  border-radius: inherit;</span></span><br><span class="line"><span class="regexp">  display: flex;</span></span><br><span class="line"><span class="regexp">  justify-content: center;</span></span><br><span class="line"><span class="regexp">  position: fixed;</span></span><br><span class="line"><span class="regexp">  top: 0;</span></span><br><span class="line"><span class="regexp">  left: 0;</span></span><br><span class="line"><span class="regexp">  right: 0;</span></span><br><span class="line"><span class="regexp">  bottom: 0;</span></span><br><span class="line"><span class="regexp">  pointer-events: auto;</span></span><br><span class="line"><span class="regexp">  background: #000;</span></span><br><span class="line"><span class="regexp">  opacity: 0.46;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">.v-card__actions &#123;</span></span><br><span class="line"><span class="regexp">  justify-content: space-evenly;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><p>2、定义插件src/plugins/confirm.ts<br>src/plugins/confirm.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> Confirm <span class="keyword">from</span> <span class="string">"../../src/components/atoms/Confirm.vue"</span>;</span><br><span class="line"><span class="keyword">const</span> VueComponent = Vue.extend(Confirm);</span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> VueComponent().$mount();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> init = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> confirm = <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">Object</span>.assign(vm, options, &#123;</span><br><span class="line">    type: <span class="string">"confirm"</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">if</span> (!init) &#123;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(vm.$el);</span><br><span class="line">    init = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (vm <span class="keyword">as</span> any).confirm();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> confirm;</span><br></pre></td></tr></table></figure><p>3、全局声明组件src/main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">import</span> vuetify <span class="keyword">from</span> <span class="string">'@/plugins/vuetify'</span></span><br><span class="line"><span class="keyword">import</span> confirm <span class="keyword">from</span> <span class="string">'@/plugins/confirm'</span></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line">Vue.prototype.$confirm = confirm</span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  vuetify,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>4.调用src/components/TestPage.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;v-card&gt;</span><br><span class="line">&lt;v-btn @click=<span class="string">"showConfirm"</span>&gt;open&lt;<span class="regexp">/v-btn&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>v-card&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">methods: &#123;</span></span><br><span class="line"><span class="regexp">showConfirm()&#123;</span></span><br><span class="line"><span class="regexp">  this.$confirm(&#123;</span></span><br><span class="line"><span class="regexp">          title: "このサイトを離れますか？",</span></span><br><span class="line"><span class="regexp">          message: "編集中のものは保存されませんが、よろしいですか",</span></span><br><span class="line"><span class="regexp">          option: "confirm",</span></span><br><span class="line"><span class="regexp">          /</span><span class="regexp">/没有取消按钮的时候用option: "alert"</span></span><br><span class="line"><span class="regexp">        &#125;)</span></span><br><span class="line"><span class="regexp">        .then(() =&gt; &#123;</span></span><br><span class="line"><span class="regexp">          next();</span></span><br><span class="line"><span class="regexp">        &#125;)</span></span><br><span class="line"><span class="regexp">        .catch(() =&gt; &#123;</span></span><br><span class="line"><span class="regexp">          next(false);</span></span><br><span class="line"><span class="regexp">        &#125;);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>5.在src/shims-tsx.d.ts里定义类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">type ConfirmOptions = &#123;</span><br><span class="line">  title: string;</span><br><span class="line">  message: string;</span><br><span class="line">  option: string;</span><br><span class="line">&#125;;</span><br><span class="line">declare <span class="built_in">module</span> <span class="string">"vue/types/vue"</span> &#123;</span><br><span class="line">  interface Vue &#123;</span><br><span class="line">    $confirm: <span class="function">(<span class="params">options: ConfirmOptions</span>) =&gt;</span> <span class="built_in">Promise</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终呈现的效果：<br><img src="./1.png" style="width:500px"></p><p>以上是一个简单的示例, 我们在需要使用的地方直接通过this.$confirm().then().catch()就可以把逻辑全部设置好, 可以看出this.$confirm是一个Promise, 而这个Promise是通过定义组件结构的时候confirm方法返回的。如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">confirm() &#123;</span><br><span class="line"><span class="keyword">let</span> _this = <span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">this</span>.show = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">_this.promiseStatus = &#123;resolve,reject&#125;;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在src/plugins/confirm.js中通过了一些方法找到了组件挂载点, 组件元素, 组件中的方法。</p><p>这个组件不比vuetify自带的v-dialog一开始就是长在文档中的, 而是需要我们手动appendChild的方式将元素插入文档中。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vue+Vuetify打造独自的消息确认组件&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="Vuex" scheme="https://kisky3.github.io/tags/Vuex/"/>
    
  </entry>
  
  <entry>
    <title>Vue Eslint Setting</title>
    <link href="https://kisky3.github.io/2020/07/06/vueeslintsetting/"/>
    <id>https://kisky3.github.io/2020/07/06/vueeslintsetting/</id>
    <published>2020-07-06T11:16:14.000Z</published>
    <updated>2020-11-07T12:16:57.614Z</updated>
    
    <content type="html"><![CDATA[<p>Vue的Eslint设定(自动修正)</p><a id="more"></a><p>因为经常要设置所以做个memo：</p><table><thead><tr><th>自动格式的对象文件</th><th>npm库(package.json)</th><th>.eslintrc.js的extends</th></tr></thead><tbody><tr><td>vue(template)</td><td>eslint-plugin-vue</td><td>plugin:vue/recommended</td></tr><tr><td>vue(script)</td><td>eslint</td><td>eslint:recommended</td></tr><tr><td>js</td><td>eslint</td><td>eslint:recommended</td></tr></tbody></table><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>package.json更新：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">   <span class="string">"lint"</span>: <span class="string">"eslint --ext .js,.vue src"</span>,</span><br><span class="line">   <span class="string">"lint:fix"</span>: <span class="string">"eslint --fix --ext .js,.vue src"</span></span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">   <span class="string">"babel-core"</span>: <span class="string">"^6.26.3"</span>,</span><br><span class="line">   <span class="string">"babel-eslint"</span>: <span class="string">"^10.0.1"</span>,</span><br><span class="line">   <span class="string">"babel-helper-vue-jsx-merge-props"</span>: <span class="string">"^2.0.3"</span>,</span><br><span class="line">   <span class="string">"babel-plugin-istanbul"</span>: <span class="string">"^5.1.0"</span>,</span><br><span class="line">   <span class="string">"babel-plugin-syntax-jsx"</span>: <span class="string">"^6.18.0"</span>,</span><br><span class="line">   <span class="string">"babel-plugin-transform-runtime"</span>: <span class="string">"^6.23.0"</span>,</span><br><span class="line">   <span class="string">"babel-plugin-transform-vue-jsx"</span>: <span class="string">"^3.7.0"</span>,</span><br><span class="line">   <span class="string">"eslint"</span>: <span class="string">"^5.12.1"</span>,</span><br><span class="line">   <span class="string">"eslint-config-standard"</span>: <span class="string">"^12.0.0"</span>,</span><br><span class="line">   <span class="string">"eslint-plugin-import"</span>: <span class="string">"^2.14.0"</span>,</span><br><span class="line">   <span class="string">"eslint-plugin-node"</span>: <span class="string">"^8.0.1"</span>,</span><br><span class="line">   <span class="string">"eslint-plugin-promise"</span>: <span class="string">"^4.0.1"</span>,</span><br><span class="line">   <span class="string">"eslint-plugin-standard"</span>: <span class="string">"^4.0.0"</span>,</span><br><span class="line">   <span class="string">"eslint-plugin-vue"</span>: <span class="string">"^5.1.0"</span></span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><p>更新后把package-lock.json和nodemodules删除后，重新安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>安装好后修改以下文件：</p><p>.eslintrc.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="string">"vue"</span></span><br><span class="line">  ],</span><br><span class="line">  env: &#123;</span><br><span class="line">    es6: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  extends: [</span><br><span class="line">    <span class="string">'eslint:recommended'</span>,</span><br><span class="line">    <span class="string">"plugin:vue/essential"</span>,</span><br><span class="line">  ],</span><br><span class="line">  rules: &#123;</span><br><span class="line">    <span class="string">"arrow-body-style"</span>: <span class="string">"error"</span>,</span><br><span class="line">    <span class="string">"arrow-parens"</span>: <span class="string">"error"</span>,</span><br><span class="line">    <span class="string">"arrow-spacing"</span>: <span class="string">"error"</span>,</span><br><span class="line">    <span class="string">"generator-star-spacing"</span>: <span class="string">"error"</span>,</span><br><span class="line">    <span class="string">"no-duplicate-imports"</span>: <span class="string">"error"</span>,</span><br><span class="line">    <span class="string">"no-useless-computed-key"</span>: <span class="string">"error"</span>,</span><br><span class="line">    <span class="string">"no-useless-constructor"</span>: <span class="string">"error"</span>,</span><br><span class="line">    <span class="string">"no-useless-rename"</span>: <span class="string">"error"</span>,</span><br><span class="line">    <span class="string">"no-var"</span>: <span class="string">"error"</span>,</span><br><span class="line">    <span class="string">"object-shorthand"</span>: <span class="string">"error"</span>,</span><br><span class="line">    <span class="string">"prefer-const"</span>: <span class="string">"error"</span>,</span><br><span class="line">    <span class="string">"prefer-rest-params"</span>: <span class="string">"error"</span>,</span><br><span class="line">    <span class="string">"prefer-spread"</span>: <span class="string">"error"</span>,</span><br><span class="line">    <span class="string">"prefer-template"</span>: <span class="string">"error"</span>,</span><br><span class="line">    <span class="string">"rest-spread-spacing"</span>: <span class="string">"error"</span>,</span><br><span class="line">    <span class="string">"template-curly-spacing"</span>: <span class="string">"error"</span>,</span><br><span class="line">    <span class="string">"yield-star-spacing"</span>: <span class="string">"error"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>./vscode/settings.json</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"eslint.validate"</span>: [</span><br><span class="line">        <span class="string">"javascript"</span>,</span><br><span class="line">        <span class="string">"javascriptreact"</span>,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"language"</span>: <span class="string">"vue"</span>,</span><br><span class="line">          <span class="string">"autoFix"</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    <span class="string">"eslint.autoFixOnSave"</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vue的Eslint设定(自动修正)&lt;/p&gt;
    
    </summary>
    
      <category term="System Setting" scheme="https://kisky3.github.io/categories/System-Setting/"/>
    
    
      <category term="eslintsrc" scheme="https://kisky3.github.io/tags/eslintsrc/"/>
    
      <category term="autosave" scheme="https://kisky3.github.io/tags/autosave/"/>
    
  </entry>
  
  <entry>
    <title>Add a live2d Character To Your Hexo Blog</title>
    <link href="https://kisky3.github.io/2020/07/01/Addlive2dCharacterToYourBlog/"/>
    <id>https://kisky3.github.io/2020/07/01/Addlive2dCharacterToYourBlog/</id>
    <published>2020-07-01T09:13:22.000Z</published>
    <updated>2020-11-02T00:26:08.877Z</updated>
    
    <content type="html"><![CDATA[<p>给你的Hexo博客加一只会动的live2d看板娘</p><a id="more"></a><p>实现效果:</p><p>先看一下实现效果，右下角的小可爱就是添加的live2d卡通人物，而且她还会眨眼睛，头会随着鼠标的移动而转动。<br><img src="./1.png" style="width:600px"></p><h4 id="1-安装hexo-helper-live2d"><a href="#1-安装hexo-helper-live2d" class="headerlink" title="1. 安装hexo-helper-live2d"></a>1. 安装hexo-helper-live2d</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure><hr><h5 id="2-安装live2d"><a href="#2-安装live2d" class="headerlink" title="2.安装live2d"></a>2.安装live2d</h5><p>其中<live2d-widget-model>替换成想要的，比如我安装的的是live2d-widget-model-hijiki(小黑猫)</live2d-widget-model></p><p>当然，还有很多的model可供选择:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">live2d-widget-model-chitose</span><br><span class="line">live2d-widget-model-epsilon2_1</span><br><span class="line">live2d-widget-model-gf</span><br><span class="line">live2d-widget-model-haru/01 (use npm install --save live2d-widget-model-haru)</span><br><span class="line">live2d-widget-model-haru/02 (use npm install --save live2d-widget-model-haru)</span><br><span class="line">live2d-widget-model-haruto</span><br><span class="line">live2d-widget-model-hibiki</span><br><span class="line">live2d-widget-model-hijiki</span><br><span class="line">live2d-widget-model-izumi</span><br><span class="line">live2d-widget-model-koharu</span><br><span class="line">live2d-widget-model-miku</span><br><span class="line">live2d-widget-model-ni-j</span><br><span class="line">live2d-widget-model-nico</span><br><span class="line">live2d-widget-model-nietzsche</span><br><span class="line">live2d-widget-model-nipsilon</span><br><span class="line">live2d-widget-model-nito</span><br><span class="line">live2d-widget-model-shizuku</span><br><span class="line">live2d-widget-model-tororo</span><br><span class="line">live2d-widget-model-tsumiki</span><br><span class="line">live2d-widget-model-unitychan</span><br><span class="line">live2d-widget-model-wanko</span><br><span class="line">live2d-widget-model-z16</span><br></pre></td></tr></table></figure><p>live2d所有模型展示图：<br><a href="https://www.cnblogs.com/strengthen/p/11112215.html" target="_blank" rel="noopener">https://www.cnblogs.com/strengthen/p/11112215.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// $ npm install &lt;live2d-widget-model&gt;</span><br><span class="line">// 例: 安装live2d-widget-model-hijiki</span><br><span class="line">$ npm install live2d-widget-model-hijiki</span><br></pre></td></tr></table></figure><hr><h4 id="3-配置"><a href="#3-配置" class="headerlink" title="3.配置"></a>3.配置</h4><p>在Hexo站点配置文件_config.yml，或者主题配置文件_config.yml中添加如下配置<br>至于每个配置项的作用看名字就很清楚，也可以修改值然后部署看下效果.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">live2d:</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  scriptFrom: local</span><br><span class="line">  pluginRootPath: live2dw/</span><br><span class="line">  pluginJsPath: lib/</span><br><span class="line">  pluginModelPath: assets/</span><br><span class="line">  tagMode: <span class="literal">false</span></span><br><span class="line">  log: <span class="literal">false</span></span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-hijiki</span><br><span class="line">  display:</span><br><span class="line">    position: right</span><br><span class="line">    width: <span class="number">150</span></span><br><span class="line">    height: <span class="number">300</span></span><br><span class="line">  mobile:</span><br><span class="line">    show: <span class="literal">true</span></span><br><span class="line">  react:</span><br><span class="line">    opacity: <span class="number">0.7</span></span><br></pre></td></tr></table></figure><p>如果是在主题下的话有时可能无法生效。<br>下载完之后，在Hexo根目录中新建文件夹<code>live2d_models</code>，然后在node_modules文件夹中找到刚刚下载的live2d模型，将其复制到live2d_models中，然后编辑配置文件中的model.use项，将其修改为live2d_models文件夹中的模型文件夹名称。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model:</span><br><span class="line">    use: live2d-widget-model-hijiki</span><br></pre></td></tr></table></figure><p>一切就绪之后，用hexo server命令启动服务器，稍等一下就可以看到右下角出现了你设置的看板娘了。</p><hr><h4 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h4><p>预览完成以后没问题的话就可以发布了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给你的Hexo博客加一只会动的live2d看板娘&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="hexo" scheme="https://kisky3.github.io/tags/hexo/"/>
    
      <category term="blog" scheme="https://kisky3.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>Vuex in parent-child communication</title>
    <link href="https://kisky3.github.io/2020/06/23/VueCommons/"/>
    <id>https://kisky3.github.io/2020/06/23/VueCommons/</id>
    <published>2020-06-23T12:49:49.000Z</published>
    <updated>2020-11-18T23:29:01.802Z</updated>
    
    <content type="html"><![CDATA[<p>关于Vuex的父子组件传值和状态管理</p><a id="more"></a><p>Vue 组件间通信主要有 3 类通信：父子组件通信、隔代组件通信、兄弟组件通信。</p><h3 id="props-emit父子组件通信"><a href="#props-emit父子组件通信" class="headerlink" title="props/$emit父子组件通信"></a>props/$emit父子组件通信</h3><p>父组件向子组件传递数据是通过 props，子组件向父组件传值是通过 events（$emit）（事件形式）。</p><h4 id="父组件向子组件传值"><a href="#父组件向子组件传值" class="headerlink" title="父组件向子组件传值"></a>父组件向子组件传值</h4><p>父组件 Parent：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;child :msg=<span class="string">"message"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">"./Child"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">"parent"</span>,</span><br><span class="line">    components: &#123;</span><br><span class="line">      Child</span><br><span class="line">    &#125;,</span><br><span class="line">    data: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">      message: <span class="string">"父组件信息"</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>子组件 Child：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;我是子组件，接收：&#123;&#123; msg &#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">"child"</span>,</span><br><span class="line">    props: [<span class="string">"msg"</span>]</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>父组件 Parent，通过 msg 向子组件 Child 信息，Child 通过 props 接收 msg，并渲染到页面上。</p><hr><h4 id="子组件向父组件传值"><a href="#子组件向父组件传值" class="headerlink" title="子组件向父组件传值"></a>子组件向父组件传值</h4><p>子组件向父组件传值是通过 events（$emit）（事件形式）。<br>子组件 Child：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=<span class="string">"clickHandle"</span>&gt;点击&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">"child"</span>,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      clickHandle() &#123;</span><br><span class="line">        <span class="keyword">this</span>.$emit(<span class="string">"myclick"</span>, <span class="string">"子组件数据"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>父组件 Parent：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div&gt;这是父组件，接收：&#123;&#123; message &#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;child @myclick="getChildData"&gt;&lt;/</span>child&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">"./Child"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">"parent"</span>,</span><br><span class="line">    components: &#123;</span><br><span class="line">      Child</span><br><span class="line">    &#125;,</span><br><span class="line">    data: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">      message: <span class="string">""</span></span><br><span class="line">    &#125;),</span><br><span class="line">    methods: &#123;</span><br><span class="line">      getChildData(data) &#123;</span><br><span class="line">        <span class="keyword">this</span>.message = data;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>子组件 Child 通过this.$emit(“myclick”, “子组件数据”);，绑定一个自定义事件 myclick，并赋值要传递的数据。</p><p>父组件监听自定义事件 myclick，点击则触发子组件this.$emit(“myclick”, “子组件数据”);，获取子组件的数据，并同时返回给父组件的 getChildData 方法。</p><p>点击触发，最终得到：这是父组件，接收：子组件数据。<br>注意：自定义事件名 myclick 始终使用 kebab-case 的事件名。</p><hr><h3 id="ref-与-parent-children父子组件通信"><a href="#ref-与-parent-children父子组件通信" class="headerlink" title="ref 与 $parent/$children父子组件通信"></a>ref 与 $parent/$children父子组件通信</h3><p>特点：</p><ul><li>ref：如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例</li><li>$parent 属性可以用来从一个子组件访问父组件的实例。它提供了一种机会，可以在后期随时触达父级组件，以替代将数据以 prop 的方式传入子组件的方式。</li><li>这两种都是直接得到组件实例，使用后可以直接调用组件的方法或访问数据</li><li>无法在跨级或兄弟间通信</li></ul><h4 id="ref-访问子组件实例或子元素"><a href="#ref-访问子组件实例或子元素" class="headerlink" title="ref 访问子组件实例或子元素"></a>ref 访问子组件实例或子元素</h4><p>ref 被用来给元素或子组件注册引用信息。引用信息将会注册在父组件的 $refs 对象上。如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- <span class="string">`vm.$refs.p`</span> will be the DOM node --&gt;</span><br><span class="line">&lt;p ref=<span class="string">"p"</span>&gt;hello&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;!-- `vm.$refs.child` will be the child component instance --&gt;</span></span><br><span class="line"><span class="regexp">&lt;child-component ref="child"&gt;&lt;/</span>child-component&gt;</span><br></pre></td></tr></table></figure><p>父组件 Parent：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=<span class="string">"sayHi"</span>&gt;打招呼&lt;<span class="regexp">/button&gt;&lt;br /</span>&gt;</span><br><span class="line">    &lt;button @click=<span class="string">"getChildMsg"</span>&gt;点击获取子组件信息&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;button @click="getChildValue"&gt;点击获取子组件 input 值&lt;/</span>button&gt;</span><br><span class="line">    &lt;child ref=<span class="string">"usernameInput"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></span><br><span class="line">    &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">  import Child from "./</span>Child<span class="string">";</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  export default &#123;</span></span><br><span class="line"><span class="string">    name: "</span>parent<span class="string">",</span></span><br><span class="line"><span class="string">    components: &#123;</span></span><br><span class="line"><span class="string">      Child</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    data: () =&gt; (&#123;</span></span><br><span class="line"><span class="string">      message: "</span><span class="string">"</span></span><br><span class="line"><span class="string">    &#125;),</span></span><br><span class="line"><span class="string">    methods: &#123;</span></span><br><span class="line"><span class="string">      // 如果用在子组件上，引用就指向组件实例</span></span><br><span class="line"><span class="string">      getChildMsg() &#123;</span></span><br><span class="line"><span class="string">        this.message = this.$refs.usernameInput.msg;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      sayHi() &#123;</span></span><br><span class="line"><span class="string">        this.message = this.$refs.usernameInput.sayHello();</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      getChildValue() &#123;</span></span><br><span class="line"><span class="string">        this.message = this.$refs.usernameInput.$refs.input.value;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>子组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    子组件：&lt;input</span><br><span class="line">      @focus=<span class="string">"focusHandle"</span></span><br><span class="line">      type=<span class="string">"text"</span></span><br><span class="line">      ref=<span class="string">"input"</span></span><br><span class="line">      value=<span class="string">"hello msg"</span></span><br><span class="line">    /&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">"child"</span>,</span><br><span class="line">    data: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">      msg: <span class="string">"子组件信息"</span></span><br><span class="line">    &#125;),</span><br><span class="line">    methods: &#123;</span><br><span class="line">      <span class="comment">// 用来从父级组件聚焦输入框</span></span><br><span class="line">      focusHandle() &#123;</span><br><span class="line">        <span class="comment">// 如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素</span></span><br><span class="line">        <span class="keyword">this</span>.$refs.input.focus();</span><br><span class="line">      &#125;,</span><br><span class="line">      sayHello() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello Vue!"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><hr><p>$parent 和 $children<br>父组件 Parent：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;child&gt;<span class="xml"><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">"./Child"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">"parent"</span>,</span><br><span class="line">    components: &#123;</span><br><span class="line">      Child</span><br><span class="line">    &#125;,</span><br><span class="line">    data: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">      message: <span class="string">"Parent say Hi"</span></span><br><span class="line">    &#125;),</span><br><span class="line">    mounted() &#123;</span><br><span class="line">      <span class="comment">// 注意 $children 返回的是 Array</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.$children[<span class="number">0</span>].msg); <span class="comment">// Child say Hello</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>子组件 Child：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;Hello Boy&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">"child"</span>,</span><br><span class="line">    data: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">      msg: <span class="string">"Child say Hello"</span></span><br><span class="line">    &#125;),</span><br><span class="line">    mounted() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.$parent.message); <span class="comment">// Parent say Hi</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>节制地使用 $parent 和 $children - 它们的主要目的是作为访问组件的应急方法。更推荐用 props 和 events 实现父子组件通信。</p><hr><h3 id="attrs-listeners隔代组件通信"><a href="#attrs-listeners隔代组件通信" class="headerlink" title="$attrs/$listeners隔代组件通信"></a>$attrs/$listeners隔代组件通信</h3><p>Vue2.4 提供了$attrs , $listeners 来传递数据与事件，跨级组件之间的通讯变得更简单。</p><p>简单来说：$attrs与$listeners 是两个对象，$attrs 里存放的是父组件中绑定的非 Props 属性，$listeners里存放的是父组件中绑定的非原生事件。</p><p>$attrs：包含了父作用域中不被 prop 所识别 (且获取) 的特性绑定 ( class 和 style 除外 )。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 ( class 和 style 除外 )，并且可以通过 v-bind=”$attrs” 传入内部组件。通常配合 inheritAttrs 选项一起使用。<br>$listeners：包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器。它可以通过 v-on=”$listeners” 传入内部组件。</p><p>例子：跨级通信</p><p>Parent：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;child-a</span><br><span class="line">      :name=<span class="string">"name"</span></span><br><span class="line">      :age=<span class="string">"age"</span></span><br><span class="line">      :job=<span class="string">"job"</span></span><br><span class="line">      title=<span class="string">"This is a title"</span></span><br><span class="line">      @click=<span class="string">"postData"</span></span><br><span class="line">    &gt;<span class="xml"><span class="tag">&lt;/<span class="name">child-a</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">import</span> ChildA <span class="keyword">from</span> <span class="string">"./ChildA"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">"parent"</span>,</span><br><span class="line">    components: &#123;</span><br><span class="line">      ChildA</span><br><span class="line">    &#125;,</span><br><span class="line">    data: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">      name: <span class="string">"tao"</span>,</span><br><span class="line">      age: <span class="string">"28"</span>,</span><br><span class="line">      job: <span class="string">"worker"</span></span><br><span class="line">    &#125;),</span><br><span class="line">    methods: &#123;</span><br><span class="line">      postData() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>ChildA：通过v-bind=”$attrs”或v-on=”$listeners”进行传递</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;child-b v-bind=<span class="string">"$attrs"</span> v-on=<span class="string">"$listeners"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">child-b</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">import</span> ChildB <span class="keyword">from</span> <span class="string">"./ChildB"</span>;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">"child-a"</span>,</span><br><span class="line">    components: &#123;</span><br><span class="line">      ChildB</span><br><span class="line">    &#125;,</span><br><span class="line">    created() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.$attrs);</span><br><span class="line">      <span class="comment">// &#123;name: "tao", age: "28", job: "worker", title: "This is a title"&#125;</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.$listeners.click()); <span class="comment">// hello</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>ChildB：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;B-listeners: &#123;&#123; <span class="keyword">this</span>.$listeners.click() &#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">  export default &#123;</span></span><br><span class="line"><span class="regexp">    props: ["name"], /</span><span class="regexp">/ name 作为props属性绑定</span></span><br><span class="line"><span class="regexp">    inheritAttrs: false, /</span><span class="regexp">/ 可以关闭自动挂载到组件根元素上的没有在props声明的属性</span></span><br><span class="line"><span class="regexp">    created() &#123;</span></span><br><span class="line"><span class="regexp">      console.log(this.$attrs);</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ &#123;age: "28", job: "worker", title: "This is a title"&#125;</span></span><br><span class="line"><span class="regexp">      console.log(this.$listeners.click()); /</span><span class="regexp">/ hello</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><hr><h3 id="provide-inject隔代组件通信"><a href="#provide-inject隔代组件通信" class="headerlink" title="provide/inject隔代组件通信"></a>provide/inject隔代组件通信</h3><p>祖先组件中通过 provider 来提供变量，然后在子孙组件中通过 inject 来注入变量。</p><p>provide / inject 主要解决了跨级组件间的通信问题，不过它的使用场景，主要是子组件获取上级组件的状态，跨级组件间建立了一种主动提供与依赖注入的关系。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父级组件提供 'foo'</span></span><br><span class="line"><span class="keyword">var</span> Provider = &#123;</span><br><span class="line">  provide: &#123;</span><br><span class="line">    foo: <span class="string">"bar"</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件注入 'foo'</span></span><br><span class="line"><span class="keyword">var</span> Child = &#123;</span><br><span class="line">  inject: [<span class="string">"foo"</span>],</span><br><span class="line">  created() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo); <span class="comment">// =&gt; "bar"</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>provide 和 inject 主要在开发高阶插件/组件库时使用。并不推荐用于普通应用程序代码中。</p><h3 id="provide-与-inject-怎么实现数据响应式"><a href="#provide-与-inject-怎么实现数据响应式" class="headerlink" title="provide 与 inject 怎么实现数据响应式"></a>provide 与 inject 怎么实现数据响应式</h3><p>provide 和 inject 绑定并不是可响应的。这是刻意为之的。然而，如果你传入了一个可监听的对象，那么其对象的属性还是可响应的。— Vue 官方文档</p><p>一般来说，有两种办法：</p><p>provide 祖先组件的实例，然后在子孙组件中注入依赖，这样就可以在子孙组件中直接修改祖先组件的实例的属性，不过这种方法有个缺点就是这个实例上挂载很多没有必要的东西比如 props，methods。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父级组件</span></span><br><span class="line"><span class="keyword">var</span> Provider = &#123;</span><br><span class="line">  provide() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      theme: <span class="keyword">this</span> <span class="comment">// 提供实例</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件注入</span></span><br><span class="line"><span class="keyword">var</span> Child = &#123;</span><br><span class="line">  inject: &#123;</span><br><span class="line">    theme: &#123;</span><br><span class="line">      <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.theme);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>用法：让一个对象可响应。Vue 内部会用它来处理 data 函数返回的对象。返回的对象可以直接用于渲染函数和计算属性内，并且会在发生改变时触发相应的更新。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父级组件</span></span><br><span class="line"><span class="keyword">var</span> Provider = &#123;</span><br><span class="line">  provide() &#123;</span><br><span class="line">    <span class="keyword">this</span>.theme = Vue.observable(&#123;</span><br><span class="line">      color: <span class="keyword">this</span>.color</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      theme: <span class="keyword">this</span>.theme</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    changeColor() &#123;</span><br><span class="line">      <span class="keyword">this</span>.theme.color = <span class="keyword">this</span>.theme.color === <span class="string">"blue"</span> ? <span class="string">"red"</span> : <span class="string">"blue"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 子组件注入</span></span><br><span class="line"><span class="keyword">var</span> Child = &#123;</span><br><span class="line">  inject: &#123;</span><br><span class="line">    theme: &#123;</span><br><span class="line">      <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.theme);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="emit-on父子、隔代、兄弟组件通信"><a href="#emit-on父子、隔代、兄弟组件通信" class="headerlink" title="$emit/$on父子、隔代、兄弟组件通信"></a>$emit/$on父子、隔代、兄弟组件通信</h3><p>Bus，通过一个空的 Vue 实例作为中央事件总线（事件中心），用它来触发事件和监听事件，巧妙而轻量地实现了任何组件间的通信，包括父子、兄弟、跨级。</p><p>注意：记得销毁自定义事件，否则容易造成内存泄露。</p><p>基本使用<br>具体实现方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Bus = <span class="keyword">new</span> Vue();</span><br><span class="line"></span><br><span class="line">Bus.$emit(<span class="string">"add-todo"</span>, &#123; <span class="attr">text</span>: <span class="keyword">this</span>.newTodoText &#125;);</span><br><span class="line">Bus.$on(<span class="string">"add-todo"</span>, <span class="keyword">this</span>.addTodo);</span><br><span class="line">Bus.$off(<span class="string">"add-todo"</span>, <span class="keyword">this</span>.addTodo);</span><br></pre></td></tr></table></figure><p>使用 vue-bus：npm install vue-bus –save</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> VueBus <span class="keyword">from</span> <span class="string">"vue-bus"</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(VueBus);</span><br></pre></td></tr></table></figure><p>Listen and clean</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">created() &#123;</span><br><span class="line">  <span class="keyword">this</span>.$bus.on(<span class="string">'add-todo'</span>, <span class="keyword">this</span>.addTodo);</span><br><span class="line">  <span class="keyword">this</span>.$bus.once(<span class="string">'once'</span>, () =&gt; <span class="built_in">console</span>.log(<span class="string">'This listener will only fire once'</span>));</span><br><span class="line">&#125;,</span><br><span class="line">beforeDestroy() &#123;</span><br><span class="line">  <span class="keyword">this</span>.$bus.off(<span class="string">'add-todo'</span>, <span class="keyword">this</span>.addTodo);</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  addTodo(newTodo) &#123;</span><br><span class="line">    <span class="keyword">this</span>.todos.push(newTodo);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Trigger</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">methods: &#123;</span><br><span class="line">  addTodo() &#123;</span><br><span class="line">    <span class="keyword">this</span>.$bus.emit(<span class="string">'add-todo'</span>, &#123; <span class="attr">text</span>: <span class="keyword">this</span>.newTodoText &#125;);</span><br><span class="line">    <span class="keyword">this</span>.$bus.emit(<span class="string">'once'</span>);</span><br><span class="line">    <span class="keyword">this</span>.newTodoText = <span class="string">''</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举个栗子<br>假设兄弟组件有三个，分别是 A、B、C 组件，A 或 B 组件的向 C 组件发送数据。</p><p>组件 A：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div&gt;&#123;&#123;name&#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;button @click="postData"&gt;发给C&lt;/</span>button&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">"child-a"</span>,</span><br><span class="line">    data: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">      name: <span class="string">"AAA"</span></span><br><span class="line">    &#125;),</span><br><span class="line">    methods: &#123;</span><br><span class="line">      postData() &#123;</span><br><span class="line">        <span class="keyword">this</span>.$bus.emit(<span class="string">"child-a"</span>, <span class="keyword">this</span>.name);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>组件 B:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div&gt;&#123;&#123;name&#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;button @click="postData"&gt;发给C&lt;/</span>button&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">"child-b"</span>,</span><br><span class="line">    data: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">      name: <span class="string">"BBB"</span></span><br><span class="line">    &#125;),</span><br><span class="line">    methods: &#123;</span><br><span class="line">      postData() &#123;</span><br><span class="line">        <span class="keyword">this</span>.$bus.emit(<span class="string">"child-b"</span>, <span class="keyword">this</span>.name);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>组件 C：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div&gt;&#123;&#123; name.join(<span class="string">","</span>) &#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">  export default &#123;</span></span><br><span class="line"><span class="regexp">    name: "child-c",</span></span><br><span class="line"><span class="regexp">    data: () =&gt; (&#123;</span></span><br><span class="line"><span class="regexp">      name: ["CCC"]</span></span><br><span class="line"><span class="regexp">    &#125;),</span></span><br><span class="line"><span class="regexp">    created() &#123;</span></span><br><span class="line"><span class="regexp">      this.$bus.on("child-a", this.getData);</span></span><br><span class="line"><span class="regexp">      this.$bus.on("child-b", this.getData);</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    beforeDestroy() &#123;</span></span><br><span class="line"><span class="regexp">      this.$bus.off("child-a", this.getData);</span></span><br><span class="line"><span class="regexp">      this.$bus.off("child-b", this.getData);</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    methods: &#123;</span></span><br><span class="line"><span class="regexp">      getData(data) &#123;</span></span><br><span class="line"><span class="regexp">        this.name.push(data);</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>this.$bus.on 监听了自定义事件 child-a 和 child-b，因为有时不确定何时会触发事件，一般会在 created 钩子中来监听，然后 beforeDestroy 钩子中通过this.$bus.off注销自定义事件。</p><h3 id="vue-bus-实现源码"><a href="#vue-bus-实现源码" class="headerlink" title="vue-bus 实现源码"></a>vue-bus 实现源码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">VueBus</span>(<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> bus = <span class="keyword">new</span> Vue();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Object</span>.defineProperties(bus, &#123;</span><br><span class="line">    on: &#123;</span><br><span class="line">      <span class="keyword">get</span>: function <span class="keyword">get</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.$on.bind(<span class="keyword">this</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    once: &#123;</span><br><span class="line">      <span class="keyword">get</span>: function <span class="keyword">get</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.$once.bind(<span class="keyword">this</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    off: &#123;</span><br><span class="line">      <span class="keyword">get</span>: function <span class="keyword">get</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.$off.bind(<span class="keyword">this</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    emit: &#123;</span><br><span class="line">      <span class="keyword">get</span>: function <span class="keyword">get</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.$emit.bind(<span class="keyword">this</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(Vue, <span class="string">"bus"</span>, &#123;</span><br><span class="line">    <span class="keyword">get</span>: function <span class="keyword">get</span>() &#123;</span><br><span class="line">      <span class="keyword">return</span> bus;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(Vue.prototype, <span class="string">"$bus"</span>, &#123;</span><br><span class="line">    <span class="keyword">get</span>: function <span class="keyword">get</span>() &#123;</span><br><span class="line">      <span class="keyword">return</span> bus;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Vuex-父子、隔代、兄弟组件通信"><a href="#Vuex-父子、隔代、兄弟组件通信" class="headerlink" title="Vuex 父子、隔代、兄弟组件通信"></a>Vuex 父子、隔代、兄弟组件通信</h3><h4 id="Vuex-基本原理"><a href="#Vuex-基本原理" class="headerlink" title="Vuex 基本原理"></a>Vuex 基本原理</h4><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。</p><p>每一个 Vuex 应用的核心就是 store（仓库）。“store” 基本上就是一个容器，它包含着你的应用中大部分的状态 ( state )。</p><p>Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</p><p>改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化。</p><p>Mutation 同时提供了订阅者模式供外部插件调用获取 State 数据的更新。</p><p>而当所有异步操作(常见于调用后端接口异步获取更新数据)或批量的同步操作需要走 Action，但 Action 也是无法直接修改 State 的，还是需要通过 Mutation 来修改 State 的数据。最后，根据 State 的变化，渲染到视图上。</p><h4 id="各模块在流程中的功能"><a href="#各模块在流程中的功能" class="headerlink" title="各模块在流程中的功能"></a>各模块在流程中的功能</h4><img src="./1.png" style="width:500px;margin:40px 0"><p><code>Vue Components</code>：Vue 组件。HTML 页面上，负责接收用户操作等交互行为，执行 dispatch 方法触发对应 action 进行回应。</p><p><code>dispatch</code>：操作行为触发方法，是唯一能执行 action 的方法。</p><p><code>actions</code>：操作行为处理模块,由组件中的$store.dispatch(‘action name’, data1)来触发。然后由commit()来触发 mutation 的调用 , 间接更新 state。负责处理 Vue Components 接收到的所有交互行为。包含同步/异步操作，支持多个同名方法，按照注册的顺序依次触发。</p><p>向后台 API 请求的操作就在这个模块中进行，包括触发其他 action 以及提交 mutation 的操作。该模块提供了 Promise 的封装，以支持 action 的链式触发。</p><p><code>commit</code>：状态改变提交操作方法。对 mutation 进行提交，是唯一能执行 mutation 的方法。</p><p><code>mutations</code>：状态改变操作方法，由 actions 中的commit(‘mutation name’)来触发。是 Vuex 修改 state 的唯一推荐方法。</p><p>该方法只能进行同步操作，且方法名只能全局唯一。操作之中会有一些 hook 暴露出来，以进行 state 的监控等。</p><p><code>state</code>：页面状态管理容器对象。集中存储 Vue components 中 data 对象的零散数据，全局唯一，以进行统一的状态管理。</p><p>页面显示所需的数据从该对象中进行读取，利用 Vue 的细粒度数据响应机制来进行高效的状态更新。</p><p><code>getters</code>：state 对象读取方法。图中没有单独列出该模块，应该被包含在了 render 中，Vue Components 通过该方法读取全局 state 对象。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于Vuex的父子组件传值和状态管理&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="Vuex" scheme="https://kisky3.github.io/tags/Vuex/"/>
    
  </entry>
  
  <entry>
    <title>Basic Velocity</title>
    <link href="https://kisky3.github.io/2020/06/10/Velocity/"/>
    <id>https://kisky3.github.io/2020/06/10/Velocity/</id>
    <published>2020-06-10T14:28:46.000Z</published>
    <updated>2020-10-18T09:51:44.773Z</updated>
    
    <content type="html"><![CDATA[<p>关于Velocity的基础语法</p><a id="more"></a><p>Velocity是一个基于java的模板引擎（template engine），它允许任何人仅仅简单的使用模板语言（template language）来引用由java代码定义的对象。作为一个比较完善的模板引擎，Velocity的功能是比较强大的，但强大的同时也增加了应用复杂 性。这里简单Velocity脚本的基本语法：</p><h3 id="1、参数的设置"><a href="#1、参数的设置" class="headerlink" title="1、参数的设置"></a>1、参数的设置</h3><p>可以自定义参数。参数开始于$</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">写法       当值为空值当时候   使用方法</span><br><span class="line">$name      显示参数名     普通</span><br><span class="line">$&#123;name&#125;  显示参数名     在英文语义暧昧的时候</span><br><span class="line">$!name      不显示         当参数为空值的时候不显示</span><br></pre></td></tr></table></figure><p>参数所能使用的文字,参数只能使用下面的文字:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">・a-z A-Z</span><br><span class="line">・0-9</span><br><span class="line">・-</span><br><span class="line">・_</span><br></pre></td></tr></table></figure><p>参数的话就可以单纯用<code>$name</code>和使用花括号圈起来的写法<code>${name}</code>,如果在只是英文数字的文字列中间插入参数的话，必须使用花括号。</p><p>例：abc${D}efg</p><hr><h3 id="2-注释"><a href="#2-注释" class="headerlink" title="2.注释"></a>2.注释</h3><p>一行的注释：使用##</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">##comment</span><br><span class="line">Hello $value.</span><br><span class="line"></span><br><span class="line">Hello $value.##comment</span><br></pre></td></tr></table></figure><p>多行的注释：使用<code>#*</code>开始, 使用<code>#*</code>结束。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#*</span><br><span class="line">comment</span><br><span class="line">comment</span><br><span class="line">*#</span><br><span class="line"></span><br><span class="line">hello #*comment*# $value.</span><br></pre></td></tr></table></figure><hr><h3 id="3-读取别的文件"><a href="#3-读取别的文件" class="headerlink" title="3.读取别的文件"></a>3.读取别的文件</h3><ol><li>读取VM文件<br>在头部或尾部分别读取文件的话，使用<code>#parse</code>.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#parse(&quot;body_header.vm.html&quot;)</span><br><span class="line">$data</span><br><span class="line">#parse(&quot;body_footer.vm.html&quot;)</span><br></pre></td></tr></table></figure></li></ol><p>文件的位置是与该文件的相对位置。如果不是直接放置在根目录而是全部放置在template文件夹里的情况下，需要在Velocity初始化之前指定路径，否则可能会出现错误信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Velocity.setProperty(&quot;file.resource.loader.path&quot;,&quot;template&quot; );</span><br></pre></td></tr></table></figure><p>错误信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.apache.velocity.exception.ResourceNotFoundException: Unable to find resource</span><br></pre></td></tr></table></figure><hr><h3 id="3-读取一般的TEXT"><a href="#3-读取一般的TEXT" class="headerlink" title="3.读取一般的TEXT"></a>3.读取一般的TEXT</h3><p>如果是读取一般的普通文档的话，使用<code>#include</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#include(&quot;test.vm&quot;)</span><br></pre></td></tr></table></figure><hr><h3 id="4-循环"><a href="#4-循环" class="headerlink" title="4.循环"></a>4.循环</h3><p>循环使用<code>foreach</code>,值 in list名.在循环的最后必须要使用<code>#end</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#foreach ($data in $list)</span><br><span class="line">$data.name</span><br><span class="line">#end</span><br></pre></td></tr></table></figure><p>关于循环中的index号码，的话可以使用<code>velocityCount</code>来计算进入循环的次数.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#foreach( $title in [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;] )</span><br><span class="line">    $title $velocityCount $velocityHasNext</span><br><span class="line">#end</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a 1 true b 2 true c 3 false</span><br></pre></td></tr></table></figure><p>关于多重数列的index</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;table border=1&gt;</span><br><span class="line">#set($i=0)</span><br><span class="line">#foreach( $cells in [[&quot;a&quot;,&quot;b&quot;],[&quot;c&quot;,&quot;d&quot;]])</span><br><span class="line">&lt;tr&gt;&lt;td&gt;$velocityCount&lt;/td&gt;</span><br><span class="line">#set($j=0)</span><br><span class="line">#foreach($item in $cells)</span><br><span class="line">&lt;td&gt;$&#123;i&#125;-$j $item&lt;/td&gt;</span><br><span class="line">#set($j=$j + 1)</span><br><span class="line">#end</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line"> #set($i=$i + 1)</span><br><span class="line">#end</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 0-0 a 0-1 b</span><br><span class="line">2 1-0 c 1-1 d</span><br></pre></td></tr></table></figure><p>在循环的最初和途中和最后的分支.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#foreach( $value in [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;])</span><br><span class="line">#if($velocityCount==1)</span><br><span class="line">最初 $value</span><br><span class="line">#elseif($velocityHasNext)</span><br><span class="line">途中 $value</span><br><span class="line">#else</span><br><span class="line">最後 $value</span><br><span class="line">#end</span><br><span class="line">#end</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最初 a 途中 b 途中 c 最後 d</span><br></pre></td></tr></table></figure><p>从loop开始的break</p><p>Velocity1.6以后的版本允许在loop中使用break，来进跳出循环.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#foreach( $title in $titles )</span><br><span class="line">    #if( $velocityCount &gt; 1 )</span><br><span class="line">        #break</span><br><span class="line">    #end</span><br><span class="line">    $title</span><br><span class="line">#end</span><br></pre></td></tr></table></figure><hr><h3 id="4-条件文"><a href="#4-条件文" class="headerlink" title="4. 条件文"></a>4. 条件文</h3><p>if条件, 最后一定要写<code>#end</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#if($value &gt; 3)</span><br><span class="line">$value</span><br><span class="line">#end</span><br></pre></td></tr></table></figure><p>else if 和 else</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#if( $age &lt; 20 )</span><br><span class="line">    十代</span><br><span class="line">#elseif( $age &lt;30 )</span><br><span class="line">   二十台</span><br><span class="line">#elseif( $age &lt;40 )</span><br><span class="line">    三十台</span><br><span class="line">#else</span><br><span class="line">   その他</span><br><span class="line">#end</span><br></pre></td></tr></table></figure><p>null的条件文</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#if($value)</span><br><span class="line">nullでない時</span><br><span class="line">#end</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于Velocity的基础语法&lt;/p&gt;
    
    </summary>
    
      <category term="Back-end Knowledge" scheme="https://kisky3.github.io/categories/Back-end-Knowledge/"/>
    
    
      <category term="Velocity" scheme="https://kisky3.github.io/tags/Velocity/"/>
    
  </entry>
  
  <entry>
    <title>Git Push Error 403</title>
    <link href="https://kisky3.github.io/2020/06/05/GitPushError/"/>
    <id>https://kisky3.github.io/2020/06/05/GitPushError/</id>
    <published>2020-06-04T15:47:21.000Z</published>
    <updated>2020-09-30T16:30:27.479Z</updated>
    
    <content type="html"><![CDATA[<p>Git Push时返回403的异常</p><a id="more"></a><h2 id="错误内容"><a href="#错误内容" class="headerlink" title="错误内容"></a>错误内容</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master</span><br><span class="line">remote: Permission to アカウント1/リポジトリ名.git denied to アカウント2.</span><br><span class="line">fatal: unable to access &apos;https://アカウント1＠github.com/アカウント1/リポジトリ名.git&apos; : The requested URL returned error: 403</span><br></pre></td></tr></table></figure><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote set-url origin https://アカウント1＠github.com/アカウント1/リポジトリ名.git</span><br></pre></td></tr></table></figure><p>确认远程URL是否已经改变</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">origin: https://アカウント1＠github.com/アカウント1/リポジトリ名.git (fetch)</span><br><span class="line">origin: https://アカウント1＠github.com/アカウント1/リポジトリ名.git (push)</span><br></pre></td></tr></table></figure><p>再次Push</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master</span><br><span class="line">  ~一部省略~</span><br><span class="line">To https://github.com/アカウント1/リポジトリ名.git</span><br><span class="line"> * [new branch]      master -&gt; master</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Git Push时返回403的异常&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://kisky3.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>【Hexo ERROR】fatal in unpopulated submodule &#39;.deploy_git&#39;</title>
    <link href="https://kisky3.github.io/2020/06/01/HexoError/"/>
    <id>https://kisky3.github.io/2020/06/01/HexoError/</id>
    <published>2020-05-31T15:34:01.000Z</published>
    <updated>2020-10-06T10:38:36.566Z</updated>
    
    <content type="html"><![CDATA[<p>【Hexo异常】fatal: in unpopulated submodule ‘.deploy_git’</p><a id="more"></a><p>今天又重新弄了下hexo，好久不动它居然报了错。<br>这种情况可以先安装下相关的依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git –save</span><br></pre></td></tr></table></figure><p>实在不行，就把它删掉，然后重新生成和部署。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rm -rf .deploy_git</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h2 id="OK-DONE"><a href="#OK-DONE" class="headerlink" title="OK DONE!"></a>OK DONE!</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【Hexo异常】fatal: in unpopulated submodule ‘.deploy_git’&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="hexo" scheme="https://kisky3.github.io/tags/hexo/"/>
    
      <category term="blog" scheme="https://kisky3.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>How Marijuana Affects Your Mind and Body</title>
    <link href="https://kisky3.github.io/2020/05/13/AboutMarijuana/"/>
    <id>https://kisky3.github.io/2020/05/13/AboutMarijuana/</id>
    <published>2020-05-13T13:13:11.000Z</published>
    <updated>2020-09-30T15:59:22.521Z</updated>
    
    <content type="html"><![CDATA[<p>大麻是如何影响你的大脑和身体</p><a id="more"></a><h3 id="大麻简要历史和区别"><a href="#大麻简要历史和区别" class="headerlink" title="大麻简要历史和区别"></a>大麻简要历史和区别</h3><p>大麻在人类文明历史中已经存在了上千年了。<br>大麻植物中的有效成分如果作用于大脑来说，当DELTA-THC当含量大于0.3%的时候，它就是毒品，它会产生精神作用比如幻觉和一系列的感觉。另一种有效成分CBD它的作用正相反，不是毒品也不会产生幻觉。<br><img src="./1.png" style="width: 500px"></p><p>植物中的<code>DELTA9-THC毒品成分</code>跟人类<code>内源性大麻素</code>作用原理几乎一摸一样。两者都能激活体内CB1受体和CB2受体。<br>CB受体被激活后能产生放松心情的效果，可以抗焦虑和放松肌肉。</p><p>这套调节机制是地球上的哺乳动物通过亿万年的演化进化而来的。但是正常情况下人体只会分泌及其少量的内源性大麻素来调节情绪。</p><hr><h3 id="大麻THC与CB1受体脑内原理"><a href="#大麻THC与CB1受体脑内原理" class="headerlink" title="大麻THC与CB1受体脑内原理"></a>大麻THC与CB1受体脑内原理</h3><p><code>CB系列受体</code>是所有受体中最特殊的一种。一般的受体一般只存在突触后膜上，然而CB系列受体它存在突触前膜上,并且它存在在突触前膜的GPCR G蛋白偶联通道里。<br><img src="./2.png" style="width: 500px"></p><p>突触前膜上的受体一般会被认为上自身受体或者异身受体，它的权限比突触后膜上的受体要高一个数量级。我们的大脑中突触间隙的各种分子主要是靠突触前膜的胞吐效应”吐”到突触后膜的,然后突触后膜上的相应受体就会被激活。</p><p>但是有时这些分子可能会逆流，飘到突触前膜上，作用于突触前膜上的受体，这种特殊的受体叫做自身受体。</p><p>而还有一种更特殊的受体叫做异身受体。一般来说各个系统是不能接受别的系统传递过来的神经递值的，但异身受体是权限最高的受体，它能够接受别的神经元的突触前膜传过来的物质。</p><img src="./3.png" style="width: 500px"><p>这种受体相当于各个系统之间的协调。<code>大麻素CB1受体</code>就是这种异身受体,而且它被安装在了所有的系统的突触前膜上。不管是多巴胺系统，GABA系统还是谷氨酸系统等的突触前膜上都存在CB1受体。</p><p>并且它所安装的位置在GPCR G蛋白离子通道。</p><p>也就是说<code>内源性大麻素分子</code>可以激活<code>大麻素CB1受体</code>,而CB1受体存在于所有系统的突触前膜上，所以<code>内源性大麻素分子</code>就能激活大脑中所有系统的突触前膜上的CB1受体，相当于能够控制所有的一切。</p><p>CB1被激活后能够产生一连串的，覆盖所有系统所有的子分类的所有细胞的连锁反应。它会导致<code>GPCR G蛋白离子通道</code>的关闭，钙离子无法内流，那么这根神经元突触前膜上的胞吐效应也就停止了。胞吐效应停止的话任何一种信息递质就不会再分泌了。突触后膜的受体就没办法再被激活了。</p><p>CB1受体的传递虽然被阻断，但是它本身还介导了细胞级别的级联反应。它就直接给神经元本身下命令了。神经元甚至不需要任何的神经递质，也不需要突触后膜被激活了，直接一整根神经元它已经被CB1受体给控制了。</p><p>CB1受体独特的位置和它独特的异身受体的特性导致了这一特殊的情况。作用于作用会相互叠加，导致的结果总体上来说这种自我反馈调节机制的目的是让人放松下来，扭转焦虑的情绪。</p><p>不过由于它太过于底层，以至于它会干扰所有的感受，这就导致了它的作用不稳定。但是由于人体自动分泌出来的内源大麻素非常少，只是轻微的激活了CB1受体。但是一旦被激活，内部的级联反应是非常复杂无法统计的。</p><p>而内源性大麻素它对应到自然界的植物中的有效成分就是<code>DELTA9-THC</code>，虽然它们的化学式完全不相干。但是它们都激活CB1受体。</p><hr><h3 id="毒品大麻导致的闪回与严重幻觉"><a href="#毒品大麻导致的闪回与严重幻觉" class="headerlink" title="毒品大麻导致的闪回与严重幻觉"></a>毒品大麻导致的闪回与严重幻觉</h3><p>当毒品大麻被吸入时，由于DELTA9-THC它是脂溶性的，它几乎就是油脂。所以它特别容易进入脑血屏障，并且它很难代谢掉，也无法被单胺酶氧化，它几乎就一直卡在脑子里了。</p><p>而且由于它是外界摄入的，随着吸食数量的增多，它在脑子里的含量也越多。吸大麻的人三个月之后都依然能监测到身体中都DELTA9-THC成分。</p><p>而三个月并不一直产生幻觉是因为CB1受体的敏感度被下调了，CB1受体只能被激活几个小时，之后再受刺激也不能被激活了。而幻觉最多会维持大概8个小时左右就会消失。</p><p>但是过了几天之后，由于DELTA9-THC它依然卡在脑子里，所以可能会造成闪回，就是没有吸毒的人也会进入吸毒的状态。而且由于毒品大麻它的作用太多，以至于它不稳定，这次使用的时候可能是心情愉悦，下次使用的时候就可能天崩地裂，最麻烦的就是一些幻觉，自动浮现在脑海里，形成睁眼幻视和闭眼幻视。</p><p>大麻可能造成的精神效果：<br>色彩增强，抑制视力，亮度改变，几何形状，内部幻觉，外围信息误解，分析增强，概念思维，认知快感，创造力增强，妄想，增强情绪，增强焦虑或者抑制焦虑，即将到来的厄运的感觉，音乐欣赏程度增高，幽默感增强，正念，个人意义增强，精神病，嗜睡，思维联系，思维减速，时间扭曲。</p><p>它会造成的物理效应是：<br>镇静，自发的身体感觉，食欲增强，抑制食欲，味觉增强，身体压力，支气管扩张，感觉到重力变化，口干脱水出汗增加，肌肉松弛或者肌肉痉挛，恶心或者抑制恶心，止痛，身体轻盈，触觉增强，血管舒张。</p><hr><h3 id="大麻导致的大脑不可逆损伤"><a href="#大麻导致的大脑不可逆损伤" class="headerlink" title="大麻导致的大脑不可逆损伤"></a>大麻导致的大脑不可逆损伤</h3><p>毒品大麻的成瘾性跟毒品K粉也就是氯胺酮几乎完全一样，毒品大麻对大脑的伤害主要是针对神经元本身，它让神经元以一种过度的方式，过度运转或者过度不运转。</p><p>过度运转，这就跟受体没有关系了，受体是表层的，神经元是底层的。受体相当于只是神经元上的开关，而神经元出问题之后，以后开关再正常也是没有用的，因为开关背后的神经元已经瘫痪了。这个无法用受体敏感度，或者受体凋零的程度来形容。因为它真正的精神作用隐藏在受体背后的级联反应。本质上说跟受体的关系已经不大了。</p><p>大麻抽了3年以上之后，大脑基本上已经记不住事了，主要原因是因为它下调了胆碱能系统的运转功率，也就是损伤了记忆力，而且由于大麻涉及大脑里所有的神经元，范围太广，很可能导致神经元无法履行之前的职责。</p><p>比如说如果是gaba系统的话，就是人会失眠睡不着了。</p><p>如果是多巴胺系统的话，人就会失去内驱力。</p><p>如果是血清素系统的话，人就会抑郁。</p><hr><h3 id="科研进展"><a href="#科研进展" class="headerlink" title="科研进展"></a>科研进展</h3><p>而种植大麻的人一般让DELTA9-THC的含量尽量高，这样作用力就会猛。但是大麻里还有另一种成分CBD。</p><p>CBD会拮抗掉DELTA9-THC的效果,这两种物质都回去结合到CB1受体和CB2受体，但是它们结合到微店稍微偏差了一点，导致的结果是CBD分子虽然和CB系列受体结合了，但是它不去激活受体，并且让受体变得更不容易被激活，以至于THC再进来的时候，THC甚至都没办法产生幻觉。<br><img src="./4.png" style="width: 500px"></p><p>后来学术界分成了两派：<br>一派去研究DELTA9-THC都医疗用途，目的一般是给不治之症善后。</p><p>还有另一派去研究CBD这种成分，分化出了内用和外用。<br>外用就是皮肤调节，减少过敏和油脂分泌。<br><img src="./5.png" style="width: 500px"></p><p>内服就是服用CBD来达到抗癫痫抗肌肉痉挛的效果。<br>主要是针对一岁以上儿童的难治性肌肉痉挛。</p><p>目前该药物依然十分昂贵。</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.webmd.com/mental-health/addiction/marijuana-use-and-its-effects#1" target="_blank" rel="noopener">https://www.webmd.com/mental-health/addiction/marijuana-use-and-its-effects#1</a></p><p><a href="https://zhuanlan.zhihu.com/p/66258708" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/66258708</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大麻是如何影响你的大脑和身体&lt;/p&gt;
    
    </summary>
    
      <category term="About Me" scheme="https://kisky3.github.io/categories/About-Me/"/>
    
    
      <category term="weed" scheme="https://kisky3.github.io/tags/weed/"/>
    
      <category term="pot" scheme="https://kisky3.github.io/tags/pot/"/>
    
      <category term="dope" scheme="https://kisky3.github.io/tags/dope/"/>
    
      <category term="Marijuana" scheme="https://kisky3.github.io/tags/Marijuana/"/>
    
  </entry>
  
  <entry>
    <title>Create a PR Bot</title>
    <link href="https://kisky3.github.io/2020/05/10/CreatePRBot/"/>
    <id>https://kisky3.github.io/2020/05/10/CreatePRBot/</id>
    <published>2020-05-09T15:26:11.000Z</published>
    <updated>2020-10-03T10:52:29.444Z</updated>
    
    <content type="html"><![CDATA[<p>制造一个github自动通知的PR Bot</p><a id="more"></a><p>简单来说就是利用Github 的Github Hook，选择在PR生成并指定Reviwer的时候进行事件呼出。<br>而利用GAS的api生成功能接受Hook发来的信息，再往slack的频道里发送消息。</p><p>Github webhooks：<br>Github/Setting/Webhooks/Add Webhook<br>选择类型为json，url为gas生成的app的url<br><img src="./1.png" style="width:500px;margin:40px 0"></p><p>GAS：<br>deploy as a web app<br>然后选择Anyone,even anonymous can access to the app.<br><img src="./2.png" style="width:500px;margin:40px 0"></p><p>GAS的内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CHANNEL = <span class="string">"YOUR_CHSNNEL_NAME"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doPost</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    recievePayload(e.postData.getDataAsString());</span><br><span class="line">  &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">    notifyToSlack(CHANNEL, ex);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">recievePayload</span>(<span class="params">json</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> payload = <span class="built_in">JSON</span>.parse(json);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (payload.action === <span class="string">"opened"</span>) &#123;</span><br><span class="line">    notifyToSlack(CHANNEL, review_request(payload))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (payload.action === <span class="string">"submitted"</span>) &#123;</span><br><span class="line">    notifyToSlack(CHANNEL, approve(payload))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">approve</span> (<span class="params">payload</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> message = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">var</span> reviwers = <span class="string">""</span>;</span><br><span class="line">  payload.pull_request.requested_reviewers.forEach( <span class="function"><span class="params">i</span> =&gt;</span> &#123;</span><br><span class="line">    reviwers += i.login + <span class="string">"さん、"</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// PR Approvedされた時：</span></span><br><span class="line">    <span class="keyword">if</span> (payload.review.state === <span class="string">"approved"</span>) &#123;</span><br><span class="line">      message =  convert_user(payload.pull_request.user.login) + <span class="string">"さん、\n下記のPR :lgtm2: をもらいました！ \n"</span></span><br><span class="line">      + <span class="string">"問題なければマージしてね \n\n"</span></span><br><span class="line">      + <span class="string">"--------------------------------------------------\n "</span></span><br><span class="line">      + <span class="string">"■PR TITLE: \n"</span></span><br><span class="line">      + payload.pull_request.title + <span class="string">"\n\n"</span></span><br><span class="line">      + <span class="string">"■PR URL: \n"</span></span><br><span class="line">      + <span class="string">"\n"</span> + payload.pull_request.html_url + <span class="string">"\n\n"</span></span><br><span class="line">      + <span class="string">"--------------------------------------------------\n "</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> message;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">review_request</span>(<span class="params">payload</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> message = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">var</span> reviwers = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">  payload.pull_request.requested_reviewers.forEach( <span class="function"><span class="params">i</span> =&gt;</span> &#123;</span><br><span class="line">    reviwers += convert_user(i.login) + <span class="string">"さん  "</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// PR新規作成された時：</span></span><br><span class="line">    <span class="keyword">if</span> (payload.pull_request.state === <span class="string">"open"</span> &amp;&amp; reviwers !== <span class="string">""</span>) &#123;</span><br><span class="line">      message = reviwers + payload.pull_request.user.login + <span class="string">"からのPR依頼がきました！ \n"</span></span><br><span class="line">      + <span class="string">"手が空いてる時に、下記のPRのレビューをお願い致します〜 \n\n"</span></span><br><span class="line">      + <span class="string">"--------------------------------------------------\n "</span></span><br><span class="line">      + <span class="string">"■PR TITLE: \n"</span></span><br><span class="line">      + payload.pull_request.title + <span class="string">"\n\n"</span></span><br><span class="line">      + <span class="string">"■PR URL: \n"</span></span><br><span class="line">      + <span class="string">"\n"</span> + payload.pull_request.html_url + <span class="string">"\n\n"</span></span><br><span class="line">      + <span class="string">"--------------------------------------------------\n "</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">      <span class="comment">//message = payload.pull_request.user.login + "下記のPRにReviewerを指定してください \n" + payload.pull_request.title + "\n" + payload.pull_request.html_url;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> message;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convert_user</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span>(name) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"&lt;github-user-name&gt;"</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;slack-user-id&gt;"</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">notifyToSlack</span>(<span class="params">channel, message</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> prop = PropertiesService.getScriptProperties().getProperties();</span><br><span class="line">  <span class="keyword">var</span> slackApp = SlackApp.create(<span class="string">'xoxp-xxxxxxxxxxxxxx'</span>);</span><br><span class="line">  slackApp.chatPostMessage(channel, message, &#123;　</span><br><span class="line">    username: <span class="string">"PR_娘"</span>,</span><br><span class="line">    icon_emoji: <span class="string">":musume:"</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;制造一个github自动通知的PR Bot&lt;/p&gt;
    
    </summary>
    
      <category term="System Setting" scheme="https://kisky3.github.io/categories/System-Setting/"/>
    
    
      <category term="setting" scheme="https://kisky3.github.io/tags/setting/"/>
    
      <category term="slack bot" scheme="https://kisky3.github.io/tags/slack-bot/"/>
    
      <category term="slack" scheme="https://kisky3.github.io/tags/slack/"/>
    
      <category term="PRBot" scheme="https://kisky3.github.io/tags/PRBot/"/>
    
  </entry>
  
  <entry>
    <title>Create a PR Bot</title>
    <link href="https://kisky3.github.io/2020/05/10/pr-bot/"/>
    <id>https://kisky3.github.io/2020/05/10/pr-bot/</id>
    <published>2020-05-09T15:26:11.000Z</published>
    <updated>2020-09-30T16:03:45.994Z</updated>
    
    <content type="html"><![CDATA[<p>制造一个github的PR BOT</p><a id="more"></a><p>简单来说就是利用Github 的Github Hook，选择在PR生成并指定Reviwer的时候进行事件呼出。<br>而利用GAS的api生成功能接受Hook发来的信息，再往slack的频道里发送消息。</p><p>Github webhooks：<br>Github/Setting/Webhooks/Add Webhook<br>选择类型为json，url为gas生成的app的url<br><img src="./1.png" style="width:500px;margin:40px 0"></p><p>GAS：<br>deploy as a web app<br>然后选择Anyone,even anonymous can access to the app.<br><img src="./2.png" style="width:500px;margin:40px 0"></p><p>GAS的内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CHANNEL = <span class="string">"YOUR_CHSNNEL_NAME"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doPost</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    recievePayload(e.postData.getDataAsString());</span><br><span class="line">  &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">    notifyToSlack(CHANNEL, ex);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">recievePayload</span>(<span class="params">json</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> payload = <span class="built_in">JSON</span>.parse(json);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (payload.action === <span class="string">"opened"</span>) &#123;</span><br><span class="line">    notifyToSlack(CHANNEL, review_request(payload))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (payload.action === <span class="string">"submitted"</span>) &#123;</span><br><span class="line">    notifyToSlack(CHANNEL, approve(payload))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">approve</span> (<span class="params">payload</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> message = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">var</span> reviwers = <span class="string">""</span>;</span><br><span class="line">  payload.pull_request.requested_reviewers.forEach( <span class="function"><span class="params">i</span> =&gt;</span> &#123;</span><br><span class="line">    reviwers += i.login + <span class="string">"さん、"</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// PR Approvedされた時：</span></span><br><span class="line">    <span class="keyword">if</span> (payload.review.state === <span class="string">"approved"</span>) &#123;</span><br><span class="line">      message =  convert_user(payload.pull_request.user.login) + <span class="string">"さん、\n下記のPR :lgtm2: をもらいました！ \n"</span></span><br><span class="line">      + <span class="string">"問題なければマージしてね \n\n"</span></span><br><span class="line">      + <span class="string">"--------------------------------------------------\n "</span></span><br><span class="line">      + <span class="string">"■PR TITLE: \n"</span></span><br><span class="line">      + payload.pull_request.title + <span class="string">"\n\n"</span></span><br><span class="line">      + <span class="string">"■PR URL: \n"</span></span><br><span class="line">      + <span class="string">"\n"</span> + payload.pull_request.html_url + <span class="string">"\n\n"</span></span><br><span class="line">      + <span class="string">"--------------------------------------------------\n "</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> message;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">review_request</span>(<span class="params">payload</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> message = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">var</span> reviwers = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">  payload.pull_request.requested_reviewers.forEach( <span class="function"><span class="params">i</span> =&gt;</span> &#123;</span><br><span class="line">    reviwers += convert_user(i.login) + <span class="string">"さん  "</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// PR新規作成された時：</span></span><br><span class="line">    <span class="keyword">if</span> (payload.pull_request.state === <span class="string">"open"</span> &amp;&amp; reviwers !== <span class="string">""</span>) &#123;</span><br><span class="line">      message = reviwers + payload.pull_request.user.login + <span class="string">"からのPR依頼がきました！ \n"</span></span><br><span class="line">      + <span class="string">"手が空いてる時に、下記のPRのレビューをお願い致します〜 \n\n"</span></span><br><span class="line">      + <span class="string">"--------------------------------------------------\n "</span></span><br><span class="line">      + <span class="string">"■PR TITLE: \n"</span></span><br><span class="line">      + payload.pull_request.title + <span class="string">"\n\n"</span></span><br><span class="line">      + <span class="string">"■PR URL: \n"</span></span><br><span class="line">      + <span class="string">"\n"</span> + payload.pull_request.html_url + <span class="string">"\n\n"</span></span><br><span class="line">      + <span class="string">"--------------------------------------------------\n "</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">      <span class="comment">//message = payload.pull_request.user.login + "下記のPRにReviewerを指定してください \n" + payload.pull_request.title + "\n" + payload.pull_request.html_url;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> message;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convert_user</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span>(name) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"&lt;github-user-name&gt;"</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;slack-user-id&gt;"</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">notifyToSlack</span>(<span class="params">channel, message</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> prop = PropertiesService.getScriptProperties().getProperties();</span><br><span class="line">  <span class="keyword">var</span> slackApp = SlackApp.create(<span class="string">'xoxp-xxxxxxxxxxxxxx'</span>);</span><br><span class="line">  slackApp.chatPostMessage(channel, message, &#123;　</span><br><span class="line">    username: <span class="string">"PR_娘"</span>,</span><br><span class="line">    icon_emoji: <span class="string">":musume:"</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;制造一个github的PR BOT&lt;/p&gt;
    
    </summary>
    
      <category term="System Setting" scheme="https://kisky3.github.io/categories/System-Setting/"/>
    
    
      <category term="setting" scheme="https://kisky3.github.io/tags/setting/"/>
    
      <category term="slack bot" scheme="https://kisky3.github.io/tags/slack-bot/"/>
    
      <category term="slack" scheme="https://kisky3.github.io/tags/slack/"/>
    
      <category term="PRBot" scheme="https://kisky3.github.io/tags/PRBot/"/>
    
  </entry>
  
</feed>
