<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xiang Yu&#39;s Blog</title>
  
  <subtitle>Hello World, Hello Programming!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://kisky3.github.io/"/>
  <updated>2019-10-02T15:36:57.243Z</updated>
  <id>https://kisky3.github.io/</id>
  
  <author>
    <name>Xiang Yu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Deploying React Applications to Github Pages</title>
    <link href="https://kisky3.github.io/2019/09/30/Pages/"/>
    <id>https://kisky3.github.io/2019/09/30/Pages/</id>
    <published>2019-09-29T16:46:01.000Z</published>
    <updated>2019-10-02T15:36:57.243Z</updated>
    
    <content type="html"><![CDATA[<p>把React项目部署到Github Page线上环境</p><a id="more"></a><h4 id="1-在github上新建仓库"><a href="#1-在github上新建仓库" class="headerlink" title="1. 在github上新建仓库"></a>1. 在github上新建仓库</h4><p>貌似必须要新建仓库，如果在已有仓库的分支下想预览不成功（因为并不是master，所以也会对别的分支有影响.</p><hr><h4 id="2-将本地代码同步"><a href="#2-将本地代码同步" class="headerlink" title="2. 将本地代码同步"></a>2. 将本地代码同步</h4><p>参照新建仓库里的说明初始化并push就好.</p><hr><h4 id="3-修改本地React项目的-package-json文件"><a href="#3-修改本地React项目的-package-json文件" class="headerlink" title="3. 修改本地React项目的 package.json文件"></a>3. 修改本地React项目的 package.json文件</h4><h5 id="配置homepage"><a href="#配置homepage" class="headerlink" title="配置homepage"></a>配置homepage</h5><p>这里需要把你的github仓库地址稍微修改一下，例如我的”homepage”: “<a href="https://Kisky3.github.io/react-todolist&quot;">https://Kisky3.github.io/react-todolist&quot;</a>.</p><h5 id="配置发布选项"><a href="#配置发布选项" class="headerlink" title="配置发布选项"></a>配置发布选项</h5><p>在scripts里添加以下两行</p><p>predeploy:是将你的项目预编译成静态文件放在build文件夹<br>deploy:是使用gh-pages 部署你的build文件夹下的内容.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="string">"predeploy"</span>: <span class="string">"npm run build"</span>,</span><br><span class="line">  <span class="string">"deploy"</span>: <span class="string">"gh-pages -d build"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>修改后的package.json</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"todolist"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"0.1.0"</span>,</span><br><span class="line">  <span class="string">"homepage"</span>: <span class="string">"https://Kisky3.github.io/react-todolist"</span>,</span><br><span class="line">  <span class="string">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"react"</span>: <span class="string">"^16.4.1"</span>,</span><br><span class="line">    <span class="string">"react-dom"</span>: <span class="string">"^16.4.1"</span>,</span><br><span class="line">    <span class="string">"react-scripts"</span>: <span class="string">"1.1.4"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"react-scripts start"</span>,</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"react-scripts build"</span>,</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"react-scripts test --env=jsdom"</span>,</span><br><span class="line">    <span class="string">"eject"</span>: <span class="string">"react-scripts eject"</span>,</span><br><span class="line">    <span class="string">"predeploy"</span>: <span class="string">"npm run build"</span>,</span><br><span class="line">    <span class="string">"deploy"</span>: <span class="string">"gh-pages -d build"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"gh-pages"</span>: <span class="string">"^2.0.1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"browserslist"</span>: &#123;</span><br><span class="line">    <span class="string">"production"</span>: [</span><br><span class="line">      <span class="string">"&gt;0.2%"</span>,</span><br><span class="line">      <span class="string">"not dead"</span>,</span><br><span class="line">      <span class="string">"not op_mini all"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"development"</span>: [</span><br><span class="line">      <span class="string">"last 1 chrome version"</span>,</span><br><span class="line">      <span class="string">"last 1 firefox version"</span>,</span><br><span class="line">      <span class="string">"last 1 safari version"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="安装-gh-pages"><a href="#安装-gh-pages" class="headerlink" title="安装 gh-pages"></a>安装 gh-pages</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gh-pages --save-dev</span><br></pre></td></tr></table></figure><h5 id="部署项目到github-page上"><a href="#部署项目到github-page上" class="headerlink" title="部署项目到github page上"></a>部署项目到github page上</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run deploy</span><br></pre></td></tr></table></figure><hr><h4 id="4-GIthub上的分支切换"><a href="#4-GIthub上的分支切换" class="headerlink" title="4. GIthub上的分支切换"></a>4. GIthub上的分支切换</h4><p>配置完之后，打开github上的仓库，你会发现原先的项目多了一个gh-pages分支，里面存放的是我们打包编译完成之后的静态文件。<br>一定要手动切换到gh-pages分支 而不是master！</p><img src="./1.png" style="width:500px;margin:40px 0"><p>再切换到setting下，我们可以看到现在项目已经被成功部署到 <a href="https://Kisky3.github.io/react-todolist">https://Kisky3.github.io/react-todolist</a> 上了</p><img src="./2.png" style="width:500px;margin:40px 0"><p>打开 <a href="https://Kisky3.github.io/react-todolist">https://Kisky3.github.io/react-todolist</a> 检验是否能预览</p><img src="./3.png" style="width:500px;margin:40px 0">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;把React项目部署到Github Page线上环境&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="react" scheme="https://kisky3.github.io/tags/react/"/>
    
      <category term="github pages" scheme="https://kisky3.github.io/tags/github-pages/"/>
    
  </entry>
  
  <entry>
    <title>Install homebrew</title>
    <link href="https://kisky3.github.io/2019/09/29/Homebrew/"/>
    <id>https://kisky3.github.io/2019/09/29/Homebrew/</id>
    <published>2019-09-29T14:03:54.000Z</published>
    <updated>2019-10-03T12:33:34.524Z</updated>
    
    <content type="html"><![CDATA[<p>安装homebrew</p><a id="more"></a><h3 id="1-AppStore下载Xcode"><a href="#1-AppStore下载Xcode" class="headerlink" title="1. AppStore下载Xcode"></a>1. AppStore下载Xcode</h3><h3 id="2-global-install"><a href="#2-global-install" class="headerlink" title="2. global install"></a>2. global install</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure><h3 id="3-安装Homebrew"><a href="#3-安装Homebrew" class="headerlink" title="3.安装Homebrew"></a>3.安装Homebrew</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure><h3 id="4-确认"><a href="#4-确认" class="headerlink" title="4. 确认"></a>4. 确认</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew doctor</span><br></pre></td></tr></table></figure><p>没有安装 yarn。create-react-app 需要你事先安装好了 yarn，如果你没有安装，那就需要去下载 安装即可。如果你没安装 yarn，会自动降级为 npm.<br>Mac 安装 yarn 的方式很简单: brew install yarn 即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;安装homebrew&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="tip" scheme="https://kisky3.github.io/tags/tip/"/>
    
      <category term="homebrew" scheme="https://kisky3.github.io/tags/homebrew/"/>
    
  </entry>
  
  <entry>
    <title>Elisabeth（musical 2005）</title>
    <link href="https://kisky3.github.io/2019/09/26/Elisabeth/"/>
    <id>https://kisky3.github.io/2019/09/26/Elisabeth/</id>
    <published>2019-09-26T13:24:32.000Z</published>
    <updated>2019-09-29T10:34:32.378Z</updated>
    
    <content type="html"><![CDATA[<p>音乐剧：伊丽莎白（德 2005年）</p><a id="more"></a><p>《伊丽莎白》是以巴伐利亚公主、奥地利皇后与匈牙利王后伊丽莎白·亚美莉·欧根妮（Elisabeth Amalie Eugenie）的一生为素材所创作的德语音乐剧。</p><p>这部音乐剧讲述了奥地利与匈牙利王后伊丽莎白（茜茜公主）的故事，从她1854年的订婚和结婚开始，直至她在1898年被刺杀为止。<br>通过对她对死亡越来越迷恋的刻画，反映出她的婚姻和她的帝国走向衰亡的过程。</p><h3 id="第一幕"><a href="#第一幕" class="headerlink" title="第一幕"></a>第一幕</h3><p>剧的开场为鲁凯尼在死后被审判。鲁凯尼声称自己刺杀伊丽莎白只是为了满足她的愿望，因为她与死亡（Der Tod）相爱。鲁凯尼把伊丽莎白生活的时代的亡魂叫来为他作证。自此拉开鲁凯尼讲述伊丽莎白一生的故事的序幕。</p><p>伊丽莎白在自由自在、无忧无虑的环境中长大。当一次因为大胆调皮而从高处坠下时，她首次与死亡相遇，开始了她一生中与死亡之间既爱又恨的关系。</p><img src="./1.jpg" style="width:500px;margin:40px 0"><img src="./6.jpg" style="width:500px;margin:40px 0">一开始就可以见到伊丽莎白想要的其实是做梦，写诗，顺风骑马般的自由，只可惜造化弄人<p>伊丽莎白的姐姐海伦娜被长辈们挑选为奥地利皇帝弗兰兹·约瑟夫的妻子，但弗兰兹·约瑟夫自己却选择了伊丽莎白。<br><img src="./2.jpg" style="width:500px;margin:40px 0"><br>婚礼的全程暗色调揭开了着从此灰暗婚姻的序幕</p><p>在婚礼时，死亡劝诱伊丽莎白，但被伊丽莎白拒绝。</p><img src="./3.jpg" style="width:500px;margin:40px 0">伊丽莎白在婚礼上与死神共舞，从此王朝终结故事转折开始<p>与皇帝成婚后，这段看似童话般的婚姻很快出现问题。伊丽莎白无法适应宫廷生活，感觉被禁锢，被弗兰兹·约瑟夫之母索菲精神虐待，并感觉缺少丈夫的关心。伊丽莎白与弗兰兹·约瑟夫的孩子鲁道夫出生后，因为孩子的养育问题，伊丽莎白与索菲再次发生剧烈冲突。弗兰兹·约瑟夫无法解开婆媳之间的不和。</p><p>与此同时，奥地利人民的生活陷入贫困，而伊丽莎白却过着骄奢的生活。（牛奶歌在此响起）鲁凯尼对此予以讽刺。</p><p>伊丽莎白与丈夫争执后，灵魂呼唤着自由.<br><img src="./4.jpg" style="width:500px;margin:40px 0"><br><img src="./5.jpg" style="width:500px;margin:40px 0"><br>（死神真的太魅惑）</p><hr><h3 id="第二幕"><a href="#第二幕" class="headerlink" title="第二幕"></a>第二幕</h3><p>（一开始的管风琴串戏到歌剧魅影…）<br>死神再次诱惑着伊丽莎白，伊丽莎白与其共舞，但最终拒绝了他。（当我想跳舞在此响起）<br><img src="./7.jpg" style="width:500px;margin:40px 0"><br><img src="./8.jpg" style="width:500px;margin:40px 0"></p><p>童年的鲁道夫被与母亲分离，在偌大宫殿的黑暗中只有死亡的陪伴，因此把死亡当作朋友。<br><img src="./9.jpg" style="width:500px;margin:40px 0"></p><p>伊丽莎白参观疯人院后深受触动，灵魂再次呼唤自由。</p><p>索菲和大臣们为了减弱伊丽莎白对弗兰兹·约瑟夫的影响力，设计让弗兰兹·约瑟夫接触别的女人。大臣前往妓院挑选女人。死亡扮成医生，告知伊丽莎白她已从丈夫处染上性病。弗兰兹·约瑟夫与索菲发生激烈争吵。<br>经历了一系列变化，伊丽莎白变成了冷酷的女人。她抛开了皇宫、责任、孩子、家人，经年在世界各地独自旅行。</p><img src="./10.jpg" style="width:500px;margin:40px 0">长大后的鲁道夫与父亲政见不合，死亡鼓励他对抗父亲。<p>鲁道夫与匈牙利人的合谋被弗兰兹·约瑟夫发现。鲁道夫向母亲伊丽莎白求助，但被伊丽莎白冷淡地忽略了。鲁道夫被死亡夺取了性命，自杀了。伊丽莎白对儿子的死非常伤心。</p><p>在沉没的世界之船的甲板上，弗兰兹·约瑟夫与伊丽莎白会面，双方取得谅解，但已经物是人非。世界也已大变，欧洲皇室贵族不断没落或被推翻。奥匈帝国大厦将倾。<br><img src="./11.jpg" style="width:500px;margin:40px 0"><br>鲁凯尼刺杀伊丽莎白。伊丽莎白终于投入死亡怀抱。故事完结！</p><img src="./12.jpg" style="width:500px;margin:40px 0"> （最后的死神之吻真的太帅了）<hr><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>伊丽莎白公主并不是人们一般理解意义上的规矩的贵族女性。</p><p>她并不美丽，瘦小且举止莽撞。（为什么画像和音乐剧选角这么美我也不知道）<br>她不会弹琴，早期也不知道如何祝酒干杯，甚至不参加人生第一场舞会而躲在自己的房间里写诗。<br>皇家对公主的礼仪要求是举止稳重，而茜茜公主则是步履如飞。</p><p>她乐于在自然天性中成长，妄想做梦，写诗，顺风骑马。<br>而她的家族则要求她成熟稳重、思虑周全、老成持重，他们不许茜茜公主笑，因为这会露出公主的黄牙。</p><p>这是为何伊丽莎白一生都在与死神抗争的原因，她企图放飞被囚禁的灵魂，奈何却越陷越深。</p><p>她倔强地一次次地拒绝死神的诱惑，但或许是因为那一份身不由己的责任感她从未成功摆脱过那份阴影。</p><p>最终她并非死于自杀，而是遭到了刺杀。鲁凯尼在最开始的声辩时就说了，她其实是渴望解脱的，而最终她解脱了。</p><p>Elisabeth的意义绝不止于一部人物传记音乐剧。这作品也蕴含了某种私人与历史的二重性的特质，将皇后个人的悲剧和世纪之交的奥匈帝国以至大德意志文化圈的悲剧隐秘地连为一体。</p><p>伊丽莎白之追求极致自由而不得、反被其追求而禁锢，和德奥文化中的精神洁癖式地追求自由，反而被民族主义裹挟、在一战前终于面临苦涩的失败，有某种异曲同工的相似性。</p><p>「Die Schatten werden laenger」这首歌就唱出了一切。死神也不仅仅是伊丽莎白的死神，也是奥匈帝国（乃至整个君主政体）被民族主义推翻、日薄西山的象征。</p><p>也就是说，一个人追求自由，最终成了自己的精神洁癖的奴隶；一个民族追逐自由和崛起（的意识形态），最后成了民族主义的奴隶，这两样东西某种程度上是相似的。</p><p>时代洪流 造化弄人 奈何奈何。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;音乐剧：伊丽莎白（德 2005年）&lt;/p&gt;
    
    </summary>
    
      <category term="About Me" scheme="https://kisky3.github.io/categories/About-Me/"/>
    
    
      <category term="musical" scheme="https://kisky3.github.io/tags/musical/"/>
    
      <category term="Elisabeth" scheme="https://kisky3.github.io/tags/Elisabeth/"/>
    
  </entry>
  
  <entry>
    <title>Webpack Getting Started</title>
    <link href="https://kisky3.github.io/2019/09/14/Started/"/>
    <id>https://kisky3.github.io/2019/09/14/Started/</id>
    <published>2019-09-14T09:28:10.000Z</published>
    <updated>2019-10-03T12:35:43.777Z</updated>
    
    <content type="html"><![CDATA[<p>Webpack的环境设置</p><a id="more"></a><p>2018年8月25日更新，目前 webpack 已经更新值 4.17.1！不用配置很复杂的config也能运行了!!今天搭建webpack环境时顺便记录一下.</p><h3 id="什么是webpack"><a href="#什么是webpack" class="headerlink" title="什么是webpack"></a>什么是webpack</h3><blockquote><p>webpack is used to compile JavaScript modules. Once installed, you can interface with webpack either from its CLI or API. If you’re still new to webpack, please read through the core concepts and this comparison to learn why you might use it over the other tools that are out in the community.</p></blockquote><br>WebPack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其转换和打包为合适的格式供浏览器使用。<hr><h3 id="为什么要使用webpack"><a href="#为什么要使用webpack" class="headerlink" title="为什么要使用webpack"></a>为什么要使用webpack</h3><p>很多人开发了各种优秀的 JavaScript 模块或组件，我们不想重复发明轮子，而是想直接利用别人的模块，就是类似 require 或 include 这样的机制，把别人的模块引入进来，这就是modules(模块化).<br>但是 JavaScript 又没有 类或包 这样的概念，那应该如何做呢？如何去引入别人的模块？引入之后保证各种依赖关系不出错？这就是 webpack 要解决的问题。<br>Webpack的处理速度更快更直接，能打包更多不同类型的文件。</p><p><a href="https://webpack.js.org/comparison/" target="_blank" rel="noopener">Webpack与其他打包工具的比较</a><br><a href="https://webpack.js.org/concepts/" target="_blank" rel="noopener">Webpack的核心原理</a></p><hr><h3 id="Webpack的安装（版本4-40-1）"><a href="#Webpack的安装（版本4-40-1）" class="headerlink" title="Webpack的安装（版本4.40.1）"></a>Webpack的安装（版本4.40.1）</h3><p>1.首先创建自己的文件夹，初始化npm，安装本地化webpack并安装webpack-cli(一个能在命令行运行webpack的工具)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir webpack-demo</span><br><span class="line">cd webpack-demo</span><br><span class="line">npm init -y</span><br><span class="line">npm install webpack --save-dev</span><br><span class="line">npm install webpack-cli --save-dev</span><br></pre></td></tr></table></figure><p>2.创建以下的文件结构以及内容</p><p>project:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  webpack-demo</span><br><span class="line">  |- package.json</span><br><span class="line">+ |- index.html</span><br><span class="line">+ |- <span class="regexp">/src</span></span><br><span class="line"><span class="regexp">+   |- index.js</span></span><br></pre></td></tr></table></figure><p>src/index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">component</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> element = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Lodash, currently included via a script, is required for this line to work</span></span><br><span class="line">  element.innerHTML = _.join([<span class="string">'Hello'</span>, <span class="string">'webpack'</span>], <span class="string">' '</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(component());</span><br></pre></td></tr></table></figure><p>imdex.html</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;Getting Started&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script src='https:/</span><span class="regexp">/unpkg.com/</span>lodash@<span class="number">4.16</span><span class="number">.6</span><span class="string">'&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">  &lt;/head&gt;</span></span><br><span class="line"><span class="string">  &lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;script src='</span>./src/index.js<span class="string">'&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">  &lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><p>我们还想需要编辑package.json文件，使其我们的package私有化，并同时移除main入口，防止代码误公开。</p><p>package.json</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"webpack-demo"</span>,</span><br><span class="line">    <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">    <span class="string">"description"</span>: <span class="string">""</span>,</span><br><span class="line">+   <span class="string">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">-   <span class="string">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">    <span class="string">"scripts"</span>: &#123;</span><br><span class="line">      <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"keywords"</span>: [],</span><br><span class="line">    <span class="string">"author"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">    <span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">      <span class="string">"webpack"</span>: <span class="string">"^4.20.2"</span>,</span><br><span class="line">      <span class="string">"webpack-cli"</span>: <span class="string">"^3.1.2"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"dependencies"</span>: &#123;&#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这个例子与&lt;script&gt;标签有默认依存关系，我们的index.js文件是依存于lodash并且在运行前是包含在网页里的.<br>这是因为index.js并没有明确声明需要lodash，它只是假定默认了全局变量’_’的存在.<br>所以我们需要创建打包.</p><hr><h3 id="创建打包"><a href="#创建打包" class="headerlink" title="创建打包"></a>创建打包</h3><p>在以上的步骤中我们微调整了文件树结构，将源代码从发布代码中分离开.<br>源代码就是我们可以直接编辑和修改的代码，发布代码就是通过压缩和最优化之后,在打包时最终输出的代码.它最终将会被加载到浏览器上.</p><p>project</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  webpack-demo</span><br><span class="line">  |- package.json</span><br><span class="line">+ |- <span class="regexp">/dist</span></span><br><span class="line"><span class="regexp">+   |- index.html</span></span><br><span class="line"><span class="regexp">- |- index.html</span></span><br><span class="line"><span class="regexp">  |- /</span>src</span><br><span class="line">    |- index.js</span><br></pre></td></tr></table></figure><p>为了打包依存于index.js的lodash，我们需要安装本地包.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save lodash</span><br></pre></td></tr></table></figure><p>然后引用lodash到我们的script里<br>src/index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+ <span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">'lodash'</span>;</span><br><span class="line">+</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">component</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> element = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line"></span><br><span class="line">-   <span class="comment">// Lodash, currently included via a script, is required for this line to work</span></span><br><span class="line">    element.innerHTML = _.join([<span class="string">'Hello'</span>, <span class="string">'webpack'</span>], <span class="string">' '</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(component());</span><br></pre></td></tr></table></figure><p>现在，因为我们已经打包了script,我们需要更新index.html文件，删除原有的lodash&lt;script&gt;并import之后加入另一个&lt;script&gt;来加载打包.(替换/src文件)</p><hr><p>dist/index.html</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  &lt;!doctype html&gt;</span><br><span class="line">  &lt;html&gt;</span><br><span class="line">   &lt;head&gt;</span><br><span class="line">     &lt;title&gt;Getting Started&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">-    &lt;script src="https:/</span><span class="regexp">/unpkg.com/</span>lodash@<span class="number">4.16</span><span class="number">.6</span><span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">   &lt;/head&gt;</span></span><br><span class="line"><span class="string">   &lt;body&gt;</span></span><br><span class="line"><span class="string">-    &lt;script src="</span>./src/index.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">+    &lt;script src="</span>main.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">   &lt;/body&gt;</span></span><br><span class="line"><span class="string">  &lt;/html&gt;</span></span><br></pre></td></tr></table></figure><p>在这个设置中，index.js 显式要求引入的 lodash 必须存在，然后将它绑定为 _（没有全局作用域污染）。通过声明模块所需的依赖，webpack 能够利用这些信息去构建依赖图，然后使用图生成一个会以正确顺序执行的优化 bundle。</p><p>可以这样说，执行 npx webpack，会将我们的脚本 src/index.js 作为 入口起点，也会生成 dist/main.js 作为 输出。Node 8.2/npm 5.2.0 以上版本提供的 npx 命令，可以运行在开始安装的 webpack package 中的 webpack 二进制文件（即 ./node_modules/.bin/webpack）</p><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">npx webpack</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">Built at: <span class="number">13</span>/<span class="number">06</span>/<span class="number">2018</span> <span class="number">11</span>:<span class="number">52</span>:<span class="number">07</span></span><br><span class="line">  Asset      Size  Chunks             Chunk Names</span><br><span class="line">main.js  <span class="number">70.4</span> KiB       <span class="number">0</span>  [emitted]  main</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">WARNING <span class="keyword">in</span> configuration(配置警告)</span><br><span class="line">The <span class="string">'mode'</span> option has not been <span class="keyword">set</span>, webpack will fallback to 'production' for this value. Set 'mode' option to 'development' or 'production' to enable defaults for each environment.</span><br><span class="line">You can also <span class="keyword">set</span> it to 'none' to disable any default behavior. Learn more: https://webpack.js.org/concepts/mode/('mode' 选项还未设置，webpack 会将其值回退至 'production'。将 'mode' 选项设置为 'development' 或 'production'，来启用对应环境的默认优化设置。)</span><br></pre></td></tr></table></figure><p>在浏览器中打开 index.html，如果一切正常，你应该能看到以下文本：’Hello webpack’</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Webpack的环境设置&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="webpack" scheme="https://kisky3.github.io/tags/webpack/"/>
    
      <category term="getting started" scheme="https://kisky3.github.io/tags/getting-started/"/>
    
  </entry>
  
  <entry>
    <title>About jQuery ajax &amp; jsonp</title>
    <link href="https://kisky3.github.io/2019/08/30/Ajax/"/>
    <id>https://kisky3.github.io/2019/08/30/Ajax/</id>
    <published>2019-08-30T11:22:41.000Z</published>
    <updated>2019-10-04T15:19:39.363Z</updated>
    
    <content type="html"><![CDATA[<p>关于jQuery ajax &amp; jsonp</p><a id="more"></a><h3 id="jQuery-ajax-settings"><a href="#jQuery-ajax-settings" class="headerlink" title="jQuery.ajax([settings])"></a>jQuery.ajax([settings])</h3><p>我们可以用ajax发送了请求(get/post)</p><p>ajax方法提供了几个常用的setting</p><ul><li><p>async：默认设置下，所有请求均为异步请求（也就是说这是默认设置为 true ）。如果需要发送同步请求，请将此选项设置为 false.</p></li><li><p>beforeSend：请求发送前的回调函数，用来修改请求发送前jqXHR对象，此功能用来设置自定义 HTTP 头信息，等等。该jqXHR和设置对象作为参数传递</p></li><li><p>cache：如果设置为 false ，浏览器将不缓存此页面。注意: 设置cache为 false将在 HEAD和GET请求中正常工作。它的工作原理是在GET请求参数中附加”timestamp”</p></li><li><p>context：这个对象用于设置Ajax相关回调函数的上下文。 默认情况下，这个上下文是一个ajax请求使用的参数设置对象.</p></li><li><p>data：发送到服务器的数据。将自动转换为请求字符串格式。GET 请求中将附加在 URL 后面，POST请求作为表单数据.</p></li><li><p>headers：一个额外的{键:值}对映射到请求一起发送。此设置会在beforeSend 函数调用之前被设置 ;因此，请求头中的设置值，会被beforeSend 函数内的设置覆盖</p></li><li><p>method：HTTP 请求方法 (比如：”POST”, “GET “, “PUT”，1.9之前使用“type”)。    </p></li></ul><p>了解了这些参数，使用jQuery处理ajax请求就简单了</p><p>例子:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  method: <span class="string">"POST"</span>,</span><br><span class="line">  url: <span class="string">"some.php"</span>,</span><br><span class="line">  data: &#123; <span class="attr">name</span>: <span class="string">"John"</span>, <span class="attr">location</span>: <span class="string">"Boston"</span> &#125;</span><br><span class="line">&#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params"> msg </span>) </span>&#123;</span><br><span class="line">  alert( <span class="string">"Data Saved: "</span> + msg );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h3 id="jQuery-get-settings-jQuery-post-settings"><a href="#jQuery-get-settings-jQuery-post-settings" class="headerlink" title="jQuery.get( [settings] ) / jQuery.post( [settings ] )"></a>jQuery.get( [settings] ) / jQuery.post( [settings ] )</h3><p>这两个方法专门用来处理get和post请求,<br>dataType：从服务器返回的预期的数据类型。默认：智能猜测（xml, json, script, 或 html）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  url: url,</span><br><span class="line">  data: data,</span><br><span class="line">  success: success,</span><br><span class="line">  dataType: dataType</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">  type: <span class="string">"POST"</span>,</span><br><span class="line">  url: url,</span><br><span class="line">  data: data,</span><br><span class="line">  success: success,</span><br><span class="line">  dataType: dataType</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h3 id="jQuery-getJSON-url-data-success-data-textStatus-jqXHR"><a href="#jQuery-getJSON-url-data-success-data-textStatus-jqXHR" class="headerlink" title="jQuery.getJSON( url [,data] [success(data, textStatus, jqXHR)])"></a>jQuery.getJSON( url [,data] [success(data, textStatus, jqXHR)])</h3><p>使用一个HTTP GET请求从服务器加载JSON编码的数据，这是一个Ajax函数的缩写，这相当于:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  dataType: <span class="string">"json"</span>,</span><br><span class="line">  url: url,</span><br><span class="line">  data: data,</span><br><span class="line">  success: success</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于jQuery ajax &amp;amp; jsonp&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="jQuery" scheme="https://kisky3.github.io/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>About jQuery animation</title>
    <link href="https://kisky3.github.io/2019/08/30/Animation/"/>
    <id>https://kisky3.github.io/2019/08/30/Animation/</id>
    <published>2019-08-30T10:37:21.000Z</published>
    <updated>2019-09-10T11:21:47.486Z</updated>
    
    <content type="html"><![CDATA[<p>关于jQuery动画API</p><a id="more"></a><h3 id="jQuery-主要的动画控制API"><a href="#jQuery-主要的动画控制API" class="headerlink" title="jQuery 主要的动画控制API"></a>jQuery 主要的动画控制API</h3><p>1 .show()<br>2 .hide()<br>3 .slideUp<br>4 .slideDown<br>5 .slideToggle<br>6 .fadeIn<br>7 .fadeOut<br>8 .animate</p><p>如上函数如何使用？演示使用方式</p><hr><h4 id="hide"><a href="#hide" class="headerlink" title=".hide()"></a>.hide()</h4><p>.hide([duration ] [,easing ] [,complete ])<br>用于隐藏元素，没有参数的时候等同于直接设置display属性,当我们给hide设置事件时：hide(2000)会有一个消失的过程<br>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  div &#123;</span><br><span class="line">    background:#ccc;</span><br><span class="line">    width: <span class="number">100</span>px;</span><br><span class="line">    height: <span class="number">100</span>px;</span><br><span class="line">    border: <span class="number">1</span>px solid;</span><br><span class="line">  &#125;</span><br><span class="line">  &lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt; </span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(<span class="string">'div'</span>).hide()  <span class="comment">// ==  $('.target').css('display', 'none')</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="show"><a href="#show" class="headerlink" title=".show()"></a>.show()</h4><p>.show( [duration ] [, easing ] [, complete ] )<br>用于显示元素，用法和hide类似给显示元素设置一个现实的时间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).hide(<span class="number">2000</span>)  <span class="comment">// 隐藏时间为2s</span></span><br><span class="line">$(<span class="string">'div'</span>).show(<span class="number">2000</span>) <span class="comment">//显示时间为2s</span></span><br></pre></td></tr></table></figure><h4 id="slideUp"><a href="#slideUp" class="headerlink" title=".slideUp"></a>.slideUp</h4><p>.slideUp( [duration ] [, easing ] [, complete ] )<br>用滑动动画隐藏一个匹配元素，方法将给匹配元素的高度的动画，这会导致页面的下面部分滑上去，当一个隐藏动画后，高度值达到0的时候，display 样式属性被设置为none，以确保该元素不再影响页面布局。<br>效果：（代码基于hide）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;div&apos;).slideUp()</span><br></pre></td></tr></table></figure><hr><h4 id="slideDown"><a href="#slideDown" class="headerlink" title=".slideDown"></a>.slideDown</h4><p>用滑动动画显示一个匹配元素，方法将给匹配元素的高度的动画，这会导致页面的下面部分滑下去，弥补了显示的方式<br>效果：（代码基于slideUp）</p><hr><h4 id="slideToggle"><a href="#slideToggle" class="headerlink" title=".slideToggle"></a>.slideToggle</h4><p>用滑动动画显示或隐藏一个匹配元素，方法将给匹配元素的高度的动画，这会导致页面中，在这个元素下面的内容往下或往上滑。display属性值保存在jQuery的数据缓存中，所以display可以方便以后可以恢复到其初始值。</p><p>如果一个元素的display属性值为inline，然后是隐藏和显示，这个元素将再次显示inline。当一个隐藏动画后，高度值达到0的时候，display 样式属性被设置为none，以确保该元素不再影响页面布局。</p><p>效果：<br>连续调用两次，和使用.slideUp()、.slideDown效果相同</p><hr><h4 id="fadeIn"><a href="#fadeIn" class="headerlink" title=".fadeIn"></a>.fadeIn</h4><p>.fadeIn( [duration ] [, easing ] [, complete ] )<br>通过淡入的方式显示匹配元素，参数含义和上面相同<br>给div的css属性设置display:none</p><p>$(‘div’).fadeIn(2000)</p><hr><h4 id="fadeOut"><a href="#fadeOut" class="headerlink" title=".fadeOut"></a>.fadeOut</h4><p>.fadeOut( [duration ] [, easing ] [, complete ] )<br>通过淡出的方式隐藏匹配元素<br>取消div的css中的display:none</p><hr><p>上面几个简单的动画不能满足需求的时候，jquery提供了自定义动画行为的方法</p><h4 id="animate"><a href="#animate" class="headerlink" title=".animate"></a>.animate</h4><p>.animate( properties [, duration ] [, easing ] [, complete ] )</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"clickme"</span>&gt;</span><br><span class="line">  Click here</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;img id="book" src="book.png" alt="" width="100" height="123"</span></span><br><span class="line"><span class="regexp">  style="position: relative; left: 10px;"&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$( <span class="string">"#clickme"</span> ).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  $( <span class="string">"#book"</span> ).animate(&#123;</span><br><span class="line">    opacity: <span class="number">0.25</span>,  <span class="comment">// 图片透明度  渐变</span></span><br><span class="line">    left: <span class="string">"+=50"</span>,   <span class="comment">//向左移动距离 -- 原基础上+50px;</span></span><br><span class="line">    height: <span class="string">"toggle"</span>  <span class="comment">// </span></span><br><span class="line">  &#125;, <span class="number">5000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Animation complete.</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>height属性的目标值是’toggle’。由于之前图像是可见的，因此动画会将高度缩小为0以隐藏它。第二次点击然后反转此转换</p><hr><h3 id="jQuery动画队列"><a href="#jQuery动画队列" class="headerlink" title="jQuery动画队列"></a>jQuery动画队列</h3><p>jQuery提供了以下几种方法来操作动画队列。</p><ul><li><p>stop([clearQuery],[gotoEnd]):停止当前jQuery对象里每个DOM元素上正在执行的动画。</p></li><li><p>queue([queueName,]callback):将callback动画数添加到当前jQuery对象里所有DOM元素的动画函数队列的尾部。</p></li><li><p>queue([queueName,]naeQueue):用newQueue动画函数队列代替当前jQuery对象里所的DOM元素的动画函数队列。</p></li><li><p>dequeue():执行动画函数队列头的第一个动画函数，并将该动画函数移出队列。</p></li><li><p>clearQueue([queueName]):清空动画函数队列中的所有动画函数。可选的 callback 参数是动画完成后所执行的函数名称。</p></li></ul><p>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;  </span><br><span class="line">    div &#123;  </span><br><span class="line">        width: <span class="number">60</span>px;   </span><br><span class="line">        height: <span class="number">60</span>px;  </span><br><span class="line">        position:absolute;  </span><br><span class="line">        top:<span class="number">60</span>px;   </span><br><span class="line">        background: #f0f;  </span><br><span class="line">        display:none;  </span><br><span class="line">    &#125;  </span><br><span class="line">    &lt;<span class="regexp">/style&gt;  </span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;  </span><br><span class="line">&lt;body&gt;  </span><br><span class="line">    &lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"../jquery-1.8.0.js"</span>&gt;  </span><br><span class="line">    &lt;<span class="regexp">/script&gt;  </span></span><br><span class="line"><span class="regexp">    &lt;p&gt;动画队列的长度是：&lt;span&gt;&lt;/</span>span&gt;&lt;/p&gt;  </span><br><span class="line">    &lt;div&gt;&lt;/div&gt;  </span><br><span class="line">    &lt;script type=<span class="string">"text/javascript"</span>&gt;  </span><br><span class="line">    <span class="keyword">var</span> div = $(<span class="string">"div"</span>);  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">runIt</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="comment">// 第1个动画：显示出来  </span></span><br><span class="line">        div.show(<span class="string">"slow"</span>);  </span><br><span class="line">        <span class="comment">// 第2个动画：自动动画，水平左移300px  </span></span><br><span class="line">        div.animate(&#123;<span class="attr">left</span>:<span class="string">'+=300'</span>&#125;,<span class="number">2000</span>);  </span><br><span class="line">        <span class="comment">// 第3个动画：卷起来  </span></span><br><span class="line">        div.slideToggle(<span class="number">1000</span>);  </span><br><span class="line">        <span class="comment">// 第4个动画：放下来  </span></span><br><span class="line">        div.slideToggle(<span class="string">"fast"</span>);  </span><br><span class="line">        <span class="comment">// 第5个动画：自动动画，水平右移300px  </span></span><br><span class="line">        div.animate(&#123;<span class="attr">left</span>:<span class="string">'-=300'</span>&#125;,<span class="number">1500</span>);  </span><br><span class="line">        <span class="comment">// 第6个动画：隐藏出来  </span></span><br><span class="line">        div.hide(<span class="string">"slow"</span>);  </span><br><span class="line">        <span class="comment">// 第7个动画：显示出来  </span></span><br><span class="line">        div.show(<span class="number">1200</span>);  </span><br><span class="line">        <span class="comment">// 第8个动画：卷起来，动画完成后回调runIt  </span></span><br><span class="line">        div.slideUp(<span class="string">"normal"</span>, runIt);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">// 控制每0.1秒调用一次该方法，该方法用于显示动画队列的长度  </span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">showIt</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="keyword">var</span> n = div.queue();  </span><br><span class="line">        $(<span class="string">"span"</span>).text(n.length);  </span><br><span class="line">        setTimeout(showIt, <span class="number">100</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    runIt();  </span><br><span class="line">    showIt();  </span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于jQuery动画API&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="jQuery" scheme="https://kisky3.github.io/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>jQuery event handlers</title>
    <link href="https://kisky3.github.io/2019/08/27/jQuery%E7%BB%91%E5%AE%9A%E4%BA%8B%E4%BB%B6/"/>
    <id>https://kisky3.github.io/2019/08/27/jQuery绑定事件/</id>
    <published>2019-08-27T13:39:01.000Z</published>
    <updated>2019-09-07T16:16:32.679Z</updated>
    
    <content type="html"><![CDATA[<p>关于jQuery事件绑定</p><a id="more"></a><hr><h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><p>事件处理中最头疼的就是浏览器兼容问题，jQuery封装了很好的API，可以方便的进行事件处理</p><p>在1.7之前的版本中jQuery处理事件有多个方法，后来统一的使用on/off方法.</p><hr><h4 id="on-events-selector-data-handler-eventObject"><a href="#on-events-selector-data-handler-eventObject" class="headerlink" title="on( events [,selector ] [,data ], handler(eventObject) )"></a>on( events [,selector ] [,data ], handler(eventObject) )</h4><ol><li><p>events：一个或多个空格分隔的事件类型和可选的命名空间，或仅仅是命名空间，比如”click”, “keydown.myPlugin”, 或者 “.myPlugin”</p></li><li><p>selector：一个选择器字符串，用于过滤出被选中的元素中能触发事件的后代元素。如果选择器是 null 或者忽略了该选择器，那么被选中的元素总是能触发事件</p></li><li><p>data：当一个事件被触发时，要传递给事件处理函数的event.data</p></li><li><p>handler(eventObject)：事件被触发时，执行的函数。若该函数只是要执行return false的话，那么该参数位置可以直接简写成 false</p></li></ol><p>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"box"</span>&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">1</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;2&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">3</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;4&lt;/</span>li&gt;</span><br><span class="line">  &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;input id=<span class="string">"ipt"</span> type=<span class="string">"text"</span>&gt; <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;div id=<span class="string">"wrap"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(<span class="string">'.box li'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">var</span> str = $(<span class="keyword">this</span>).text()</span><br><span class="line">  $(<span class="string">'#wrap'</span>).text(str)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 等同于 */</span></span><br><span class="line">$(<span class="string">'.box&gt;ul&gt;li'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">  <span class="keyword">var</span> str = $(<span class="keyword">this</span>).text()</span><br><span class="line">  $(<span class="string">'#wrap'</span>).text(str)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 也可以这样写 */</span></span><br><span class="line">$(<span class="string">'.box li'</span>).on(<span class="string">'click.hello'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">  <span class="keyword">var</span> str = $(<span class="keyword">this</span>).text()</span><br><span class="line">  $(<span class="string">'#wrap'</span>).text(str)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 命名空间没什么特别的作用，只不过在解绑事件时便于区分绑定的事件 */</span></span><br><span class="line">$(<span class="string">'.box li'</span>).off(<span class="string">'click.hello'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 可是用如下方法新增的元素是没绑定事件的 */</span></span><br><span class="line">$(<span class="string">'#btn'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> value = $(<span class="string">'#ipt'</span>).val()</span><br><span class="line">  $(<span class="string">'.box&gt;ul'</span>).append(<span class="string">'&lt;li&gt;'</span>+value+<span class="string">'&lt;/li&gt;'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 我们可以用事件代理 */</span></span><br><span class="line">$(<span class="string">'.box ul'</span>).on(<span class="string">'click'</span>, <span class="string">'li'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> str = $(<span class="keyword">this</span>).text()</span><br><span class="line">  $(<span class="string">'#wrap'</span>).text(str)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 上面代码相当于原生 js 的 */</span></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'.box ul'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(e.target.tagName.toLowerCase() === <span class="string">'li'</span>)&#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 绑定事件的时候我们也可以给事件附带些数据，只不过这种用法很少见 */</span></span><br><span class="line">$(<span class="string">'.box'</span>).on(<span class="string">'click'</span>, &#123;<span class="attr">name</span>: <span class="string">'hunger'</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h4 id="one-events-selector-data-handler-eventObject"><a href="#one-events-selector-data-handler-eventObject" class="headerlink" title=".one( events [, selector ] [, data ], handler(eventObject) )"></a>.one( events [, selector ] [, data ], handler(eventObject) )</h4><p>同 on，绑定事件，但只执行一次.</p><hr><h4 id="off-events-selector-handler"><a href="#off-events-selector-handler" class="headerlink" title=".off( events [, selector ] [, handler ] )"></a>.off( events [, selector ] [, handler ] )</h4><p>移除一个事件处理函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'.box li'</span>).off(<span class="string">'click'</span>)</span><br></pre></td></tr></table></figure><hr><h4 id="trigger-eventType-extraParameters"><a href="#trigger-eventType-extraParameters" class="headerlink" title=".trigger( eventType [, extraParameters ] )"></a>.trigger( eventType [, extraParameters ] )</h4><p>根据绑定到匹配元素的给定的事件类型执行所有的处理程序和行为.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#foo'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log($(<span class="keyword">this</span>).text())</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">'#foo'</span>).trigger(<span class="string">'click'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于jQuery事件绑定&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="jQuery" scheme="https://kisky3.github.io/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>The Cove</title>
    <link href="https://kisky3.github.io/2019/08/25/TheCove/"/>
    <id>https://kisky3.github.io/2019/08/25/TheCove/</id>
    <published>2019-08-25T10:12:52.000Z</published>
    <updated>2019-10-03T12:36:23.161Z</updated>
    
    <content type="html"><![CDATA[<p>This week I watched a 2009 documentary film named 「The Cove」 which analyzes and questions dolphin hunting in Japan Taiji.<br>It was awarded the 2010 Oscar for Best Documentary Feature in 2010. </p><p>Some brave people from Sea Shepherd etc tried hard to create this film cause this fact is quite sensitive and probably injurious to some fishermen’s interest.</p><p>They even used sensationalized techniques - including hidden cameras to tell us this problem.</p><a id="more"></a><img src="./2.jpg" style="width:400px;margin:40px 0"><p>Dolphin hunting takes place elsewhere in Japan but Taiji is the only place where “drive” hunting occurs.<br>This involves forcing dolphins into the now infamous cove, where they are then penned in by long nets.<br>The dolphins are then either sold on to aquariums to become performing exhibits or butchered for meat..</p><img src="./3.jpg" style="width:400px;margin:40px 0"><p>Some cruel scenes make me feel quite uncomfortable, especially when fishermen even try to kill baby dolphin. The dolphin’s blood stained the water red.<br><img src="./4.jpg" style="width:400px;margin:40px 0"></p><p>Tbh I don’t like killing animal in this ruthless way and do we have the moral right to kill animals in this way?  </p><p>Thanks to「The Cove」, it was a well-told story which tell us some truth was coverd for a long time though it was one-sided in some way.</p><p>As far as I see, Japan continue to do dolphin hunting just because of profit and tradition.<br>Even though consumption of dolphin meat has been declining steadily in Japan, to the point where many young people in Tokyo have never eaten it. </p><p>Tradition in Japan is something that is just handed down, whether it’s good or bad, whether it fits today’s world or not.</p><p>Maybe this is also a thing should be considered by Japanese under the this topic.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This week I watched a 2009 documentary film named 「The Cove」 which analyzes and questions dolphin hunting in Japan Taiji.&lt;br&gt;It was awarded the 2010 Oscar for Best Documentary Feature in 2010. &lt;/p&gt;
&lt;p&gt;Some brave people from Sea Shepherd etc tried hard to create this film cause this fact is quite sensitive and probably injurious to some fishermen’s interest.&lt;/p&gt;
&lt;p&gt;They even used sensationalized techniques - including hidden cameras to tell us this problem.&lt;/p&gt;
    
    </summary>
    
      <category term="About Me" scheme="https://kisky3.github.io/categories/About-Me/"/>
    
    
      <category term="Documentary film" scheme="https://kisky3.github.io/tags/Documentary-film/"/>
    
      <category term="Dolphin hunting" scheme="https://kisky3.github.io/tags/Dolphin-hunting/"/>
    
      <category term="Taiji" scheme="https://kisky3.github.io/tags/Taiji/"/>
    
  </entry>
  
  <entry>
    <title>Journey to the edge of the universe</title>
    <link href="https://kisky3.github.io/2019/08/17/UNIVERSE/"/>
    <id>https://kisky3.github.io/2019/08/17/UNIVERSE/</id>
    <published>2019-08-17T02:32:15.000Z</published>
    <updated>2019-09-09T10:40:36.427Z</updated>
    
    <content type="html"><![CDATA[<p>Recently, I am into something about our universe.<br>I even tried to read 「A Brief History Of Time」.</p><p>Hmmmm. Definitly it is far beyond my understanding. So I decided to start from some friendly space documentary films.</p><p>It seems good for me！</p><p>And 「JOURNEY TO THE EDGE OF THE UNIVERSE」is the one I want to recommend today. It shows us splendid images of the universe.<br>Taking us to the big endless universe and explore the science and history behind the distant celestial bodies in the solar system in two hours.</p><p>Yup！This is THE BEST space documentary I have ever seen in my life!！</p><a id="more"></a><img src="./1.jpg" style="width:400px;margin:40px 0"><p>They say that it’s so big we can’t really measure it.<br>The part we can see has a radius of 47 billion light years.<br>And I think about how in this universe, there are supposedly at least 100 million galaxies.<br>I can’t help but think to myself, “Wow. We live in just one of those galaxies.”</p><img src="./2.jpg" style="width:600px;margin:40px 0"><img src="./4.jpg" style="width:600px;margin:40px 0">There are so many amazing(or you can call them scary) powerful monsters in the universe. Some stronger monsters haven't been known by us now.<p>I really start thinking about name my cat 「Quasar」which seems more powerful than 「black hole」.<br>「Singularity」is also a good choice since it is so mistry and meaning of a new start.<br> Even tho I dont own a cat now but I am serious to pick a special name for my kitty XD.</p><p>This is the Quasar？<br>↓<img src="./3.jpg" style="width:600px;margin:40px 0"></p><p>After watching this documentary film you will feel humanbeing are so small and we are all the stuff of starts.</p><p>Another good thing is that I realized there is no need to take some little trouble things which bug our life sometimes too seriously.</p><p>Life is too short, so do whatever you like and enjoy the process of it.<br>Snatching the eternal out of the desperately fleeting is the great magic trick of human existence.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Recently, I am into something about our universe.&lt;br&gt;I even tried to read 「A Brief History Of Time」.&lt;/p&gt;
&lt;p&gt;Hmmmm. Definitly it is far beyond my understanding. So I decided to start from some friendly space documentary films.&lt;/p&gt;
&lt;p&gt;It seems good for me！&lt;/p&gt;
&lt;p&gt;And 「JOURNEY TO THE EDGE OF THE UNIVERSE」is the one I want to recommend today. It shows us splendid images of the universe.&lt;br&gt;Taking us to the big endless universe and explore the science and history behind the distant celestial bodies in the solar system in two hours.&lt;/p&gt;
&lt;p&gt;Yup！This is THE BEST space documentary I have ever seen in my life!！&lt;/p&gt;
    
    </summary>
    
      <category term="About Me" scheme="https://kisky3.github.io/categories/About-Me/"/>
    
    
      <category term="movie" scheme="https://kisky3.github.io/tags/movie/"/>
    
      <category term="universe" scheme="https://kisky3.github.io/tags/universe/"/>
    
  </entry>
  
  <entry>
    <title>jQuery Common API</title>
    <link href="https://kisky3.github.io/2019/07/16/API/"/>
    <id>https://kisky3.github.io/2019/07/16/API/</id>
    <published>2019-07-16T09:57:55.000Z</published>
    <updated>2019-08-17T07:41:20.730Z</updated>
    
    <content type="html"><![CDATA[<p>jQuery常用API</p><a id="more"></a><h2 id="jQuery常用DOM操作"><a href="#jQuery常用DOM操作" class="headerlink" title="jQuery常用DOM操作"></a>jQuery常用DOM操作</h2><h3 id="append"><a href="#append" class="headerlink" title=".append()"></a>.append()</h3><p>添加元素，通过$符号，生成一个dom元素并将它添加到页面，也可以添加jQuery对象，字符串等</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>你好！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'p'</span>).append(<span class="string">'小明和小红。'</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">/*执行结果*/</span><br><span class="line">/*<span class="tag">&lt;<span class="name">p</span>&gt;</span>你好！小明和小红。<span class="tag">&lt;/<span class="name">p</span>&gt;</span>*/</span><br></pre></td></tr></table></figure><hr><h3 id="prepend"><a href="#prepend" class="headerlink" title=".prepend()"></a>.prepend()</h3><p>在元素的前头添加字符串或元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>太郎<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>花子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>三郎<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">$('li').prepend('<span class="tag">&lt;<span class="name">strong</span>&gt;</span>ユーザー名：<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>');</span><br><span class="line">/* 执行结果*/</span><br><span class="line">/* <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>ユーザー名：<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>太郎<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>ユーザー名：<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>花子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>ユーザー名：<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>三郎<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span>*/</span><br></pre></td></tr></table></figure><hr><h3 id="before"><a href="#before" class="headerlink" title=".before()"></a>.before()</h3><p>在对象前面（不是内部而是外面，和对象同级）插入内容，参数和append相似。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> is what I said...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> is what you said too...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">$("p").before("<span class="tag">&lt;<span class="name">b</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">b</span>&gt;</span>");</span><br><span class="line">/* 执行结果 */</span><br><span class="line">/*</span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> is what I said...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> is what you said too...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">*/</span><br></pre></td></tr></table></figure><hr><h3 id="after"><a href="#after" class="headerlink" title=".after()"></a>.after()</h3><p>在对象后面（不是内部而是外面，和对象同级）插入内容，参数和append相似。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> is what I said...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> is what you said too...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">$("p").before("<span class="tag">&lt;<span class="name">b</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">b</span>&gt;</span>");</span><br><span class="line">/* 执行结果 */</span><br><span class="line">/*</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> is what I said...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> is what you said too...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">*/</span><br></pre></td></tr></table></figure><hr><h3 id="remove"><a href="#remove" class="headerlink" title=".remove()"></a>.remove()</h3><p>删除所选对象的元素或者子元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>sample1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"two"</span>&gt;</span>sample2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'.two'</span>).remove();</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">/* 执行结果*/</span><br><span class="line">/*</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>sample1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">*/</span><br></pre></td></tr></table></figure><hr><h3 id="empty"><a href="#empty" class="headerlink" title=".empty()"></a>.empty()</h3><p>删除指定元素内的所有子元素。该元素保留</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>子元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"button"</span>&gt;</span>删除子元素<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">$("#button").on("click", function()&#123;</span><br><span class="line">  $("#parent").empty();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/* 执行结果*/</span><br><span class="line">/*</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"button"</span>&gt;</span>删除子元素<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">*/</span><br></pre></td></tr></table></figure><hr><h3 id="html"><a href="#html" class="headerlink" title=".html()"></a>.html()</h3><p>实用html()能够任意的获取HTML元素，并进行添加或替换处理。<br>获取：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>你好<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>sample<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> result1 = $(<span class="string">'p'</span>).html();</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> result2 = $(<span class="string">'a'</span>).html();</span></span><br><span class="line"> </span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log( result1 );</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log( result2 );</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">/* 执行结果*/</span><br><span class="line">/*</span><br><span class="line">你好</span><br><span class="line">sample</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p>替换：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>sample text<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'div'</span>).html(<span class="string">'&lt;p&gt;Hello&lt;/p&gt;'</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">/* 执行结果*/</span><br><span class="line">/*</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>こんにちは<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p>添加：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>here is the link<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="xml">    $('p').html('<span class="tag">&lt;<span class="name">p</span>&gt;</span>link is<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>this one<span class="tag">&lt;/<span class="name">a</span>&gt;</span>!!<span class="tag">&lt;/<span class="name">p</span>&gt;</span>');</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">/* 执行结果*/</span><br><span class="line">/*</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>link is<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>this one<span class="tag">&lt;/<span class="name">a</span>&gt;</span>!!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">*/</span><br></pre></td></tr></table></figure><hr><h3 id="text"><a href="#text" class="headerlink" title=".text()"></a>.text()</h3><p>text()和html()十分相似，$node.text()和$node.html()的区别是text取得所有符合条件的元素进行处理，添加时只能添加字符串。<br>text()和html()的获取元素对比：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Good Morning<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> result1 = $(<span class="string">'p'</span>).html();</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> result2 = $(<span class="string">'p'</span>).text();</span></span><br><span class="line"> </span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log( result1 );</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log( result2 );</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">/* 执行结果*/</span><br><span class="line">/*</span><br><span class="line">Good Morning</span><br><span class="line">Good MorningHello</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p>text()插入字符串</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Good Morning<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'div'</span>).text(<span class="string">'&lt;h1&gt;Title&lt;/h1&gt;'</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">/* 执行结果*/</span><br><span class="line">/* 「<span class="tag">&lt;<span class="name">h1</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>」被当作字符串插入*/</span><br></pre></td></tr></table></figure><hr><h2 id="jQuery属性-amp-CSS操作"><a href="#jQuery属性-amp-CSS操作" class="headerlink" title="jQuery属性&amp;CSS操作"></a>jQuery属性&amp;CSS操作</h2><h3 id="属性相关"><a href="#属性相关" class="headerlink" title="属性相关"></a>属性相关</h3><h3 id="val"><a href="#val" class="headerlink" title=".val()"></a>.val()</h3><p>val()用于取得HTML元素的value，并可以对其进行修改和设定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn-a"</span> <span class="attr">value</span>=<span class="string">"a"</span>&gt;</span>Button A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$('#btn-a').val('value-a');</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/* 执行结果*/</span><br><span class="line">/*</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn-a"</span> <span class="attr">value</span>=<span class="string">"value-a"</span>&gt;</span>ボタンA<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h3 id="attr"><a href="#attr" class="headerlink" title=".attr()"></a>.attr()</h3><p>attr()用于获取HTML元素的属性，并对其进行修改和设定<br>获取元素的属性并修改：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"sample"</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> result = $(<span class="string">'p'</span>).attr(<span class="string">'id'</span>, <span class="string">'text'</span>);</span></span><br><span class="line"> </span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log( result[<span class="number">0</span>] );</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">/* 执行结果*/</span><br><span class="line">/*</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"text"</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p>添加元素的属性：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> result = $(<span class="string">'input'</span>).attr(&#123;</span></span><br><span class="line"><span class="javascript">    id: <span class="string">'text'</span>,</span></span><br><span class="line">    class: 'form',</span><br><span class="line"><span class="javascript">    type: <span class="string">'checkbox'</span>,</span></span><br><span class="line"><span class="javascript">    value: <span class="string">'one'</span>,</span></span><br><span class="line"><span class="javascript">    checked: <span class="literal">true</span></span></span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log( result[<span class="number">0</span>] );</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">/* 执行结果*/</span><br><span class="line">/*</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"one"</span> <span class="attr">checked</span>=<span class="string">"checked"</span>&gt;</span></span><br><span class="line">*/</span><br></pre></td></tr></table></figure><hr><h3 id="removeAttr"><a href="#removeAttr" class="headerlink" title=".removeAttr()"></a>.removeAttr()</h3><p>.removeAttr()用于删除对象元素的属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> result = $(<span class="string">'p'</span>).removeAttr(<span class="string">'class'</span>);</span></span><br><span class="line"> </span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log( result[<span class="number">0</span>] );</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/* 执行结果*/</span><br><span class="line">/*</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h3 id="prop"><a href="#prop" class="headerlink" title=".prop()"></a>.prop()</h3><p>prop()和removeAttr()十分相似，不同在于prop能够确认属性是否存在的状态。<br>当某个属性比如checked / disabled不存在时，和removeAttr()返回undefined,而prop返回false.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn1"</span>&gt;</span>Button1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn2"</span> <span class="attr">disabled</span>&gt;</span>Button1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> result1 = $(<span class="string">'.btn1'</span>).attr(<span class="string">'disabled'</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> result2 = $(<span class="string">'.btn2'</span>).attr(<span class="string">'disabled'</span>);</span></span><br><span class="line"> </span><br><span class="line"><span class="javascript"><span class="keyword">const</span> result3 = $(<span class="string">'.btn1'</span>).prop(<span class="string">'disabled'</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> result4 = $(<span class="string">'.btn2'</span>).prop(<span class="string">'disabled'</span>);</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log( result1 );</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log( result2 );</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log( result3 );</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log( result4 );</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">/* 执行结果*/</span><br><span class="line">/*</span><br><span class="line">undefined</span><br><span class="line">disabled</span><br><span class="line"> </span><br><span class="line">false</span><br><span class="line">true</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><hr><h3 id="css"><a href="#css" class="headerlink" title=".css()"></a>.css()</h3><p>.css()能够进行元素css的设定，添加，获取，修改等。<br>元素css的设定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>sample text<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    $('p').css('color', '#f00');</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">/* 执行结果</span><br><span class="line">   将p内的文字颜色变红（#f00）</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p>修改元素的css</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"font-size:12px"</span>&gt;</span>sample1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"font-size:16px"</span>&gt;</span>sample2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"font-size:20px"</span>&gt;</span>sample3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'p'</span>).css(<span class="string">'font-size'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">index, value</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> newValue = <span class="built_in">parseInt</span>(value) + <span class="number">6</span>;</span></span><br><span class="line">    </span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> newValue + <span class="string">'px'</span>;</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">/* 执行结果 */</span><br><span class="line">/* </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"font-size:18px"</span>&gt;</span>sample1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"font-size:22px"</span>&gt;</span>sample2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"font-size:26px"</span>&gt;</span>sample3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h3 id="addClass"><a href="#addClass" class="headerlink" title=".addClass()"></a>.addClass()</h3><p>用于给任何一个元素添加css</p><p>如果p元素没有任何的样式，则添加addRed样式。index为该对象HTML元素的下标，myclass为该元素最初自身拥有的class属性名</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"addBlue"</span>&gt;</span>Good Morning<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"addGreen"</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>こんばんは<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">$('p').addClass(function( index, myclass ) &#123;</span><br><span class="line"> </span><br><span class="line">    if( !myclass ) &#123;</span><br><span class="line">        return 'addRed';</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="removeClass"><a href="#removeClass" class="headerlink" title="removeClass()"></a>removeClass()</h3><p>removeClass()用于给任何元素删除css，有重复的情况下，删除所有匹配元素的css。<br>复数指定时用空格隔开，不传参则对象元素全部删除css。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span>list1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"sample"</span>&gt;</span>list2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span>list3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">$('li').removeClass('test sample');</span><br><span class="line"></span><br><span class="line">/* css为text和sample的list2，list3的css被删除 */</span><br></pre></td></tr></table></figure><h3 id="hasClass"><a href="#hasClass" class="headerlink" title=".hasClass()"></a>.hasClass()</h3><p>hasClass()用于查看对象元素是否存在某样式css。存在返回true，不存在返回false。<br>复数的情况下用空格隔开，并且要求搜索参数值与css值完全一致。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"red"</span>&gt;</span>リスト１<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"blue"</span>&gt;</span>リスト２<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"red green"</span>&gt;</span>リスト３<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var li = $('li').hasClass('red green');</span><br><span class="line"> </span><br><span class="line">console.log(li);</span><br><span class="line"></span><br><span class="line">/* 执行结果 */</span><br><span class="line"></span><br><span class="line">/* true */</span><br></pre></td></tr></table></figure><h3 id="toggleClass"><a href="#toggleClass" class="headerlink" title=".toggleClass()"></a>.toggleClass()</h3><p>toggleClass()可以操作对象的class属性，并进行添加，删除等循环操作。</p><p>利用toggleClass()进行mytoggle的显示/隐藏的切换：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.mytoggle &#123;</span><br><span class="line">    display: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'button'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'h1'</span>).toggleClass(<span class="string">'mytoggle'</span>);</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="each"><a href="#each" class="headerlink" title=".each()"></a>.each()</h3><p>.each()用于循环历遍每个元素。相当于forEach。</p><p>对HTML元素的操作：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>sample1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>sample2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>sample3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">$('li').each(function(index, element) &#123;</span><br><span class="line"> </span><br><span class="line">    console.log(index);</span><br><span class="line">    console.log($(element).text());</span><br><span class="line"> </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">/* 执行结果*/</span><br><span class="line"></span><br><span class="line">sample1 </span><br><span class="line">1 </span><br><span class="line">sample2 </span><br><span class="line">2 </span><br><span class="line">sample3</span><br></pre></td></tr></table></figure><p>对数列的操作：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var array = [3,6,2,8,6];</span><br><span class="line"> </span><br><span class="line">$.each(array, function(index, value) &#123;</span><br><span class="line"> </span><br><span class="line">    console.log(index + ': ' + value);</span><br><span class="line"> </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">/* 执行结果*/</span><br><span class="line">0: 3 </span><br><span class="line">1: 6 </span><br><span class="line">2: 2 </span><br><span class="line">3: 8 </span><br><span class="line">4: 6</span><br></pre></td></tr></table></figure><h3 id="extend"><a href="#extend" class="headerlink" title="$.extend()"></a>$.extend()</h3><p>$.extend()用与连结两个或多个对象，将其整合为一个对象。<br>无指定则在第一个传递的对象上进行覆盖，如果想保留原对象，则第一参数传空{}</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var user1 = &#123;</span><br><span class="line">  name: '太郎',</span><br><span class="line">  area: 'tokyo'</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">var user2 = &#123;</span><br><span class="line">  name: '花子',</span><br><span class="line">  age: 28</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var result = $.extend(&#123;&#125;, user1, user2);</span><br><span class="line"> </span><br><span class="line">console.log(result);</span><br><span class="line">console.log('------------');</span><br><span class="line">console.log(user1);</span><br><span class="line"></span><br><span class="line">/* 执行结果 */</span><br><span class="line">Object &#123; name: "花子", area: "tokyo", age: 28 &#125;</span><br><span class="line">------------</span><br><span class="line">Object &#123; name: "太郎", area: "tokyo" &#125;</span><br></pre></td></tr></table></figure><h3 id="clone"><a href="#clone" class="headerlink" title=".clone()"></a>.clone()</h3><p>.clone()用于复制对象和元素。参数要指定true，false时或不传参数时不能复制。</p><p>按键时按钮被复制：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">name</span>=<span class="string">"clone"</span>&gt;</span>Clone!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  $(<span class="string">'button[name=clone]'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="keyword">this</span>).clone(<span class="literal">true</span>).insertAfter(<span class="keyword">this</span>);</span></span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="index"><a href="#index" class="headerlink" title=".index()"></a>.index()</h3><p>.index()用于取得元素的下标</p><p>点击按钮时获取下标：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>北海道<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>東北<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>関東<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>東海<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>関西<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>中国<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>四国<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>九州<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"num"</span>&gt;</span>－<span class="tag">&lt;/<span class="name">span</span>&gt;</span>几个<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$(function() &#123;</span><br><span class="line"> </span><br><span class="line">  $('li').click(function() &#123;</span><br><span class="line"> </span><br><span class="line">    var i = $('li').index(this);</span><br><span class="line"></span><br><span class="line">    $('#num').text(i);</span><br><span class="line"> </span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="ready"><a href="#ready" class="headerlink" title=".ready()"></a>.ready()</h3><p>.ready()可以忽略浏览器默认加载，在DOM准备好后就立即执行这个函数。</p><p>下面的函数执行时，由于对h1的操作在body的h1生成之前，所以相当于无效。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'h1'</span>).text(<span class="string">'Hello World'</span>);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>こんにちは<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时使用.ready()，则可以在h1加载完成时再立马执行处理。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"> </span><br><span class="line"><span class="javascript">            $(<span class="string">'h1'</span>).text(<span class="string">'Hello World'</span>);</span></span><br><span class="line"> </span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>こんにちは<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>还可以简写成下面的形式:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$(function() &#123;</span><br><span class="line"> </span><br><span class="line">    //your coding</span><br><span class="line"> </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">or</span><br><span class="line"></span><br><span class="line">$(showLog);</span><br><span class="line"></span><br><span class="line">function showLog() &#123;</span><br><span class="line"> </span><br><span class="line">    console.log('Hey! Let's see log);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;jQuery常用API&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="jQuery" scheme="https://kisky3.github.io/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>About jQuery</title>
    <link href="https://kisky3.github.io/2019/07/12/jQuery/"/>
    <id>https://kisky3.github.io/2019/07/12/jQuery/</id>
    <published>2019-07-12T12:05:02.000Z</published>
    <updated>2019-08-17T07:41:14.600Z</updated>
    
    <content type="html"><![CDATA[<p>关于jQuery</p><a id="more"></a><h3 id="jQuery-1-x-版本和-2-x-版本有什么区别"><a href="#jQuery-1-x-版本和-2-x-版本有什么区别" class="headerlink" title="jQuery 1.x 版本和 2.x 版本有什么区别"></a>jQuery 1.x 版本和 2.x 版本有什么区别</h3><p>1.x：<br>兼容ie678,使用最为广泛的，官方只做BUG维护，功能不再新增。因此一般项目来说，使用1.x版本就可以了，最终版本：1.12.4 (2016年5月20日)</p><p>2.x：<br>不兼容ie678，很少有人使用，官方只做BUG维护，功能不再新增。如果不考虑兼容低版本的浏览器可以使用2.x，最终版本：2.2.4 (2016年5月20日)</p><hr><h3 id="jQuery-常见的选择器"><a href="#jQuery-常见的选择器" class="headerlink" title="jQuery 常见的选择器"></a>jQuery 常见的选择器</h3><p>例子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"ul"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"li3"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我被选中了<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="eq-index"><a href="#eq-index" class="headerlink" title=".eq(index)"></a>.eq(index)</h4><p>对于一个特定结果集，我们想获取到指定index的jQuery对象，可以使用eq方法<br><img src="./1.png" style="width:200px;margin:40px 0"></p><h4 id="next"><a href="#next" class="headerlink" title=".next()"></a>.next()</h4><p>next取得匹配的元素集合中每一个元素紧邻的后面同辈元素的元素集合。如果提供一个选择器，那么只有紧跟着的兄弟元素满足选择器时，才会返回此元素。<br><img src="./2.png" style="width:200px;margin:40px 0"></p><h4 id="prev"><a href="#prev" class="headerlink" title=".prev()"></a>.prev()</h4><p>prev正好相反，获取元素之前的同辈元素,如果同辈之前没有元素则返回空<br><img src="./3.png" style="width:200px;margin:40px 0"></p><h4 id="nextAll"><a href="#nextAll" class="headerlink" title=".nextAll()"></a>.nextAll()</h4><p>nextAll获得每个匹配元素集合中每个元素所有后面的同辈元素，选择性筛选的选择器<br><img src="./4.png" style="width:200px;margin:40px 0"></p><h4 id="prevAll"><a href="#prevAll" class="headerlink" title=".prevAll()"></a>.prevAll()</h4><p>prevAll与nextAll相反，获取元素前面的同辈元素<br><img src="./5.png" style="width:200px;margin:40px 0"></p><h4 id="siblings"><a href="#siblings" class="headerlink" title=".siblings()"></a>.siblings()</h4><p>获得匹配元素集合中每个元素的兄弟元素,可以提供一个可选的选择器<br><img src="./6.png" style="width:200px;margin:40px 0"></p><h4 id="parent"><a href="#parent" class="headerlink" title=".parent()"></a>.parent()</h4><p>取得匹配元素集合中，每个元素的父元素，可以提供一个可选的选择器<br><img src="./7.png" style="width:200px;margin:40px 0"></p><h4 id="parents"><a href="#parents" class="headerlink" title=".parents()"></a>.parents()</h4><p>获得集合中每个匹配元素的祖先元素，可以提供一个可选的选择器作为参数<br><img src="./8.png" style="width:200px;margin:40px 0"></p><h4 id="children"><a href="#children" class="headerlink" title=".children()"></a>.children()</h4><p>获得匹配元素集合中每个元素的子元素，选择器选择性筛选<br><img src="./9.png" style="width:200px;margin:40px 0"></p><h4 id="find"><a href="#find" class="headerlink" title=".find()"></a>.find()</h4><p>查找符合选择器的后代元素<br><img src="./10.png" style="width:200px;margin:40px 0"></p><h4 id="filter"><a href="#filter" class="headerlink" title=".filter()"></a>.filter()</h4><p>筛选当前结果集中符合条件的对象，参数可以是一个选择器或者一个函数<br><img src="./11.png" style="width:300px;margin:40px 0"></p><h4 id="has"><a href="#has" class="headerlink" title=".has()"></a>.has()</h4><p>筛选匹配元素集合中的那些有相匹配的选择器或DOM元素的后代元素<br><img src="./12.png" style="width:300px;margin:40px 0"></p><h4 id="is"><a href="#is" class="headerlink" title=".is()"></a>.is()</h4><p>判断当前匹配的元素集合中的元素，是否为一个选择器，DOM元素，或者jQuery对象，如果这些元素至少一个匹配给定的参数，那么返回true<br><img src="./13.png" style="width:300px;margin:40px 0"></p><hr><h3 id="DOM和jQuery的相互转换"><a href="#DOM和jQuery的相互转换" class="headerlink" title="DOM和jQuery的相互转换"></a>DOM和jQuery的相互转换</h3><p>jQuery对象与dom的区别<br>jQuery对象是一个类数组的对象，对象原型中封装了许多jQuery自定义的方法。在jQuery对象中无法使用DOM对象的任何方法。</p><ul><li><p>DOM对象===&gt;jQuery对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var dom =document.getElementById(&quot;id&quot;);  // DOM对象</span><br><span class="line">var $dom = $(dom);  // jQuery对象</span><br></pre></td></tr></table></figure></li><li><p>Query对象====&gt;DOM对象</p></li></ul><p>1.jQuery对象是一个数据对象，通过 [index] 的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var $dom = $(&quot;#id&quot;) ;  // jQuery对象</span><br><span class="line">var dom = $dom [0];   // DOM对象</span><br></pre></td></tr></table></figure><p>2.jQuery提供方法，通过 .get(index) 方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var $dom = $(&quot;#id&quot;);  // jQuery对象</span><br><span class="line">var dom = $dom.get(0); // DOM对象</span><br></pre></td></tr></table></figure><h3 id="window-onload和-document-ready有什么区别？document-onDOMContentLoaded呢"><a href="#window-onload和-document-ready有什么区别？document-onDOMContentLoaded呢" class="headerlink" title="window.onload和$(document).ready有什么区别？document.onDOMContentLoaded呢?"></a>window.onload和$(document).ready有什么区别？document.onDOMContentLoaded呢?</h3><p>window.onload是在dom文档树加载完和所有文件加载完之后执行一个函数document.ready原生中没有这个方法。<br>jquery中有$().ready(function),在dom文档树加载完之后执行一个函数（注意，这里面的文档树加载完全不代表全部文件加载完）。<br>$(document).ready要比winndow.onload先执行window.onload只能出来一次，$(document).ready可以出现多次。</p><p>当document.onDOMContentLoaded事件触发时，仅当DOM加载完成，不包括样式表，图片，flash。<br>两者触发时机不同，window.触发的更晚。<br>jQuery的$(document).ready就是利用了DOMContentLoaded来实现的，但是DOMContentLoaded在IE9以下不支持，需要对IE9以下版本进行兼容处理。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于jQuery&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="jQuery" scheme="https://kisky3.github.io/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>About React Virtual Dom And JSX</title>
    <link href="https://kisky3.github.io/2019/07/04/React-Virtual-Dom/"/>
    <id>https://kisky3.github.io/2019/07/04/React-Virtual-Dom/</id>
    <published>2019-07-04T13:47:43.000Z</published>
    <updated>2019-08-17T07:41:09.124Z</updated>
    
    <content type="html"><![CDATA[<p>关于React的虚拟Dom和JSX</p><a id="more"></a><h3 id="React的实行理念"><a href="#React的实行理念" class="headerlink" title="React的实行理念"></a>React的实行理念</h3><p>首先JS的DOM操作一般经历了从页面获取已存在的元素，进行修改操作，再渲染回页面这三个过程。<br>比如页面里有一个span标签，JS想要编辑的时候需要先从页面获取标签(利用id等),进行操作(数字加1),再将编辑后的数据返回页面（innerText等）。<br><img src="./1.png" style="width:600px;margin:40px 0"></p><p>而react有一种更先进的理念，也就相当于不从Dom获取数据，而是只是向页面更新数据。<br>比如一开始页面里什么都没有，react里有一个number变量，并且在JSX里生成一个span的对象（虚拟Dom),再将对象生同步成到页面中，JSX里进行span内容的修改操作，然后再一次自动更新到页面的span里。<br><img src="./2.png" style="width:600px;margin:40px 0"></p><p>react在生成新的虚拟Dom之后,会与旧的虚拟Dom的内容进行比较,再将有变化的那一部分,同步到页面中。<br>而进行内部对象span的更新速度远比JS直接更新Dom的速度要快很多,并且少了从页面获取元素的这一过程,导致react的效率和性能都高于普通JS。</p><h3 id="关于JSX"><a href="#关于JSX" class="headerlink" title="关于JSX"></a>关于JSX</h3><p>JSX不是html,而是相当于利用Html的形式来更简便地写JS。</p><p>JSX就是将下面的语法2翻译成上面的JS语法1，这相当于以简便的Html的形式来写JS，这里包含了几个虚拟Dom，也就是表示DOM节点的对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JS语法1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> h = React.createElement;</span><br><span class="line">  <span class="keyword">let</span> div = </span><br><span class="line">  h(<span class="string">'div'</span>,&#123;<span class="attr">className</span>:<span class="string">'parent'</span>&#125;,</span><br><span class="line">    h(<span class="string">'span'</span>,&#123;<span class="attr">className</span>:<span class="string">'red'</span>&#125;,number),</span><br><span class="line">    h(<span class="string">'button'</span>,&#123;<span class="attr">onClick</span>:onClickButton&#125;,<span class="string">'+'</span>),</span><br><span class="line">    h(<span class="string">'button'</span>,&#123;onClickButton&#125;,<span class="string">'-'</span>)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 语法2</span></span><br><span class="line">&lt;div className=<span class="string">"parent"</span>&gt;</span><br><span class="line">  &lt;span className=<span class="string">"red"</span>&gt;&#123;number&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">  &lt;button onClick = &#123;onClickButton&#125;&gt;+&lt;/</span>button&gt;</span><br><span class="line">  &lt;button onClick = &#123;onClickButton2&#125;&gt;-<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p>不同的是将对象和函数用括号括起来{},然后JS就会从当前作用域往上找相应的变量。</p><ul><li>class要写作className（有时两种写法都可以）。</li><li>在onClick = {onClickButton}时要向react传递一个对象而不是返回值，相当于React.createElement(‘button’,{onClick:onClickButton}),所以不加括号。</li></ul><p>完整代码例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> onClickButton = <span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">  number +=<span class="number">1</span></span><br><span class="line">  render();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> onClickButton2 = <span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">  number -= <span class="number">1</span></span><br><span class="line">  render();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// JS语法1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> h = React.createElement;</span><br><span class="line">  <span class="keyword">let</span> div = </span><br><span class="line">  h(<span class="string">'div'</span>,&#123;<span class="attr">className</span>:<span class="string">'parent'</span>&#125;,</span><br><span class="line">    h(<span class="string">'span'</span>,&#123;<span class="attr">className</span>:<span class="string">'red'</span>&#125;,number),</span><br><span class="line">    h(<span class="string">'button'</span>,&#123;<span class="attr">onClick</span>:onClickButton&#125;,<span class="string">'+'</span>),</span><br><span class="line">    h(<span class="string">'button'</span>,&#123;onClickButton&#125;,<span class="string">'-'</span>)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 语法2</span></span><br><span class="line">&lt;div className=<span class="string">"parent"</span>&gt;</span><br><span class="line">  &lt;span className=<span class="string">"red"</span>&gt;&#123;number&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">  &lt;button onClick = &#123;onClickButton&#125;&gt;+&lt;/</span>button&gt;</span><br><span class="line">  &lt;button onClick = &#123;onClickButton2&#125;&gt;-<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(div,document.querySelector('#root'));</span></span><br></pre></td></tr></table></figure><p>JSX的翻译机制<br>下面的左右代码是等价的。<br><img src="./3.png" style="width:800px;margin:40px 0"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于React的虚拟Dom和JSX&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="React" scheme="https://kisky3.github.io/tags/React/"/>
    
      <category term="Virtual Dom" scheme="https://kisky3.github.io/tags/Virtual-Dom/"/>
    
      <category term="JSX" scheme="https://kisky3.github.io/tags/JSX/"/>
    
  </entry>
  
  <entry>
    <title>Welcome To My Blog</title>
    <link href="https://kisky3.github.io/2019/06/23/FirstBlog/"/>
    <id>https://kisky3.github.io/2019/06/23/FirstBlog/</id>
    <published>2019-06-23T13:14:53.000Z</published>
    <updated>2019-09-07T11:59:46.163Z</updated>
    
    <content type="html"><![CDATA[<p>Hey, I am Xiang Yu! :D Welcome to my blog. </p><p>I want to be a good front-end developer who can speak two foreign languages<br>(English and Japanese) in the furture.</p><p>Indoor-outdoor, cat lover, has no sense of direction, like chanllenging something new in my way.</p><p>Learning foreign languages, programming, keyboard, painting etc by myself just for fun XD.<br>All are half-baked tho.</p><p>I will Continuously update this blog to record what I learned and experienced.</p><p>Thank you for taking the time to read it. Any helpful suggestions would be welcome！</p><a id="more"></a><p>(* ‘ᵕ’ )ｲ</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hey, I am Xiang Yu! :D Welcome to my blog. &lt;/p&gt;
&lt;p&gt;I want to be a good front-end developer who can speak two foreign languages&lt;br&gt;(English and Japanese) in the furture.&lt;/p&gt;
&lt;p&gt;Indoor-outdoor, cat lover, has no sense of direction, like chanllenging something new in my way.&lt;/p&gt;
&lt;p&gt;Learning foreign languages, programming, keyboard, painting etc by myself just for fun XD.&lt;br&gt;All are half-baked tho.&lt;/p&gt;
&lt;p&gt;I will Continuously update this blog to record what I learned and experienced.&lt;/p&gt;
&lt;p&gt;Thank you for taking the time to read it. Any helpful suggestions would be welcome！&lt;/p&gt;
    
    </summary>
    
      <category term="About Me" scheme="https://kisky3.github.io/categories/About-Me/"/>
    
    
  </entry>
  
  <entry>
    <title>About Closure</title>
    <link href="https://kisky3.github.io/2019/06/23/%E5%85%B3%E4%BA%8E%E9%97%AD%E5%8C%85/"/>
    <id>https://kisky3.github.io/2019/06/23/关于闭包/</id>
    <published>2019-06-23T10:14:57.000Z</published>
    <updated>2019-08-17T07:40:51.985Z</updated>
    
    <content type="html"><![CDATA[<p>关于闭包</p><a id="more"></a><h3 id="词法作用域（lexical-environment）"><a href="#词法作用域（lexical-environment）" class="headerlink" title="词法作用域（lexical environment）"></a>词法作用域（lexical environment）</h3><p>作用域链</p><ul><li>函数在执行的过程中，先从自己内部找变量</li><li>如果找不到，再从创造当前函数所在的作用域（词法作用域）去找，以此往上</li><li>注意找的是变量的当前状态</li></ul><p>函数连同它作用域链上的要找的这个变量，共同构成闭包<br>一般情况下使用闭包住要是为了</p><ol><li>封装数据</li><li>暂存数据</li></ol><p>例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fnArr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)&#123;</span><br><span class="line">  fnArr[i] = (<span class="function"><span class="keyword">function</span>(<span class="params">j</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> j</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;)(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fnArr[<span class="number">1</span>]() <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>这个例子里有两个闭包，<br>相当于可以将for循环拆开，等效于以下代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">fnArr[<span class="number">0</span>] = (<span class="function"><span class="keyword">function</span>(<span class="params">j</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">fnArr[<span class="number">1</span>] = (<span class="function"><span class="keyword">function</span>(<span class="params">j</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fnArr[<span class="number">1</span>]();</span><br></pre></td></tr></table></figure><p>再简化一下，写成a,b 函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = (<span class="function"><span class="keyword">function</span>(<span class="params">j</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = (<span class="function"><span class="keyword">function</span>(<span class="params">j</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">b();</span><br></pre></td></tr></table></figure><p>再同步一下，将var b里的立即执行函数单独拆出来，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = (<span class="function"><span class="keyword">function</span>(<span class="params">j</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params">j</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> j = <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = fn2(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">b();</span><br></pre></td></tr></table></figure><h3 id="其他的等效方法"><a href="#其他的等效方法" class="headerlink" title="其他的等效方法"></a>其他的等效方法</h3><p>方法1:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fnArr = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)&#123;</span><br><span class="line">  fnArr[i] = (<span class="function"><span class="keyword">function</span>(<span class="params">j</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">  &#125;)(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法2:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fnArr = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="number">2</span>; i++)&#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">    fnArr[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法3:（使用ES6）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fnArr = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">  fnArr[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> i;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="闭包例题"><a href="#闭包例题" class="headerlink" title="闭包例题"></a>闭包例题</h3><h4 id="封装一个Car对象"><a href="#封装一个Car对象" class="headerlink" title="封装一个Car对象"></a>封装一个Car对象</h4><p>可以将其封装成一个对象返回，由于形成闭包，当调用方法时，不会对原有的参数speed进行影响。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Car = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> speed = <span class="number">0</span>;</span><br><span class="line">   </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setSpeed</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">    speed = s;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getSpeed</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> speed</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">speedUp</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    speed++</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">speedDown</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    speed --;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">      setSpeed: setSpeed,</span><br><span class="line">      getSpeed: getSpeed,</span><br><span class="line">      speedUp: speedUp,</span><br><span class="line">      speedDown: speedDown</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于闭包&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="JS" scheme="https://kisky3.github.io/tags/JS/"/>
    
      <category term="Closure" scheme="https://kisky3.github.io/tags/Closure/"/>
    
  </entry>
  
  <entry>
    <title>Created A StyleGuide For SPACE CLOUD Servive</title>
    <link href="https://kisky3.github.io/2019/06/20/%E7%B3%BB%E7%BB%9F%E5%BC%8F%E6%A0%B7%E7%BB%9F%E4%B8%80%E9%A1%B5%E9%9D%A2%E7%9A%84%E5%88%B6%E4%BD%9C/"/>
    <id>https://kisky3.github.io/2019/06/20/系统式样统一页面的制作/</id>
    <published>2019-06-20T01:18:50.000Z</published>
    <updated>2019-08-18T15:09:11.236Z</updated>
    
    <content type="html"><![CDATA[<h3 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h3><a id="more"></a><p>みなさん、こんにちは！!</p><p>フロントエンドエンジニアの向宇(こう　う)と申します。 開発経験はまだ浅いですが、毎日楽しんで開発をチャレンジしています。</p><p>今回はSPACE CLOUDのスタイルガイドの開発について、お話しさせていただきますね。</p><h3 id="開発目的"><a href="#開発目的" class="headerlink" title="開発目的"></a>開発目的</h3><p>私気づいた問題点は、フロントの書き方と全体スタイルの統一性はよくないと感じました。</p><p>例えば、入力ボックスを実装する時に、 Reactを利用してComponentを作る人もいるし、 CakePHPのテンプレートで直接実装する人もいます。</p><p>書き方を統一して、コピペだけですぐ実装できるスタイルガイドがあると統一感を持たせることができると考え、 SPACE CLOUD専用のスタイルガイドを作成始めました。</p><h3 id="開発流れ"><a href="#開発流れ" class="headerlink" title="開発流れ"></a>開発流れ</h3><h4 id="スタイルガイドのトップページについて"><a href="#スタイルガイドのトップページについて" class="headerlink" title="スタイルガイドのトップページについて"></a>スタイルガイドのトップページについて</h4><p>まずはHTMLとCSSを利用して、トップページをオシャレにしました〜</p><p>出来上がったものはこんな感じです！ ちょっとだけアニメーションも追加しました。</p><img src="./1.png" style="width:600px"><hr><h4 id="スタイルガイドの各ページについて"><a href="#スタイルガイドの各ページについて" class="headerlink" title="スタイルガイドの各ページについて"></a>スタイルガイドの各ページについて</h4><p>まずReactを利用して、各ページの枠を作ります。 ソース構造と主なフォルダー説明は下記でございます〜</p><div class="alert danger no-icon"><p>Atomic: SPACE CLOUD専用のReactコンポーネントのベースです</p></div><div class="alert danger no-icon"><p>Component: スタイルガイドの各ページ用のコンポーネントです</p></div><div class="alert danger no-icon"><p>Component/Pages: 最後各コンポーネントをまとめて表示するためのコンポーネント</p></div><br><img src="./2.png" style="width:600px"><hr><h4 id="アップロードのForm部品の例"><a href="#アップロードのForm部品の例" class="headerlink" title="アップロードのForm部品の例"></a>アップロードのForm部品の例</h4><p>Formの画像アップロードを例として説明しますね〜 </p><p>下記はForm ImgUploadのReactコンポーネントの一部です。利用しているのはReactのライブラリ<span class="highlight-text" style="background-color:#FFCCCC;">react-dropzone</span>です。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;div</span><br><span class="line">  onMouseEnter=&#123;() =&gt; <span class="keyword">this</span>.onMouseEnter(<span class="keyword">this</span>.state.uploadStatus)&#125;</span><br><span class="line">  onMouseLeave=&#123;() =&gt; <span class="keyword">this</span>.onMouseLeave(<span class="keyword">this</span>.state.uploadStatus)&#125;</span><br><span class="line">&gt;</span><br><span class="line">  &lt;Dropzone</span><br><span class="line">    type=&#123;<span class="string">"field"</span>&#125;</span><br><span class="line">    accept=&#123;<span class="string">"image/jpeg,image/png,image/jpg"</span>&#125;</span><br><span class="line">    onDrop=&#123;<span class="keyword">this</span>.onDrop&#125;</span><br><span class="line">    multiple=&#123;<span class="literal">false</span>&#125; <span class="comment">// 個別アップロード</span></span><br><span class="line">    style=&#123;&#123; <span class="attr">border</span>: <span class="number">0</span> &#125;&#125;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;div&gt;&#123;<span class="keyword">this</span>.getContent()&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>Dropzone&gt;</span><br><span class="line">  &lt;div&gt;&#123;<span class="keyword">this</span>.getModifyModal()&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p>マウスホバーする時に画像変更と削除処理ができるように、onMouseEnterとonMouseLeaveを作りました。 プラス画像アップロードの進捗を表示するために下記の処理も追加しました。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ファイルの読み込み進捗を取得</span></span><br><span class="line">reader.onprogress = <span class="function"><span class="params">files</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.setState(&#123; <span class="attr">loadPercentage</span>: files.loaded / files.total * <span class="number">100</span> &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>プレビュー状態を表示する時に、ProgressBarコンポーネントに渡します。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// プレビュー状態を表示</span></span><br><span class="line"><span class="keyword">if</span> (</span><br><span class="line">  <span class="keyword">this</span>.state &amp;&amp;</span><br><span class="line">  <span class="keyword">this</span>.state.file &amp;&amp;</span><br><span class="line">  <span class="keyword">this</span>.state.file.image.preview !== <span class="string">""</span> &amp;&amp;</span><br><span class="line">  <span class="keyword">this</span>.state.file.image.dataURL !== <span class="string">""</span> &amp;&amp;</span><br><span class="line">  <span class="keyword">this</span>.state.error === <span class="string">""</span></span><br><span class="line">) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div</span><br><span class="line">      className=&#123;imageWrapper + imageActive&#125;</span><br><span class="line">      style=&#123;&#123; <span class="attr">backgroundImage</span>: <span class="string">`url(<span class="subst">$&#123;<span class="keyword">this</span>.state.file.image.dataURL&#125;</span>)`</span> &#125;&#125;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;ProgressBar percentage=&#123;<span class="keyword">this</span>.state.loadPercentage&#125;&gt;</span><br><span class="line">        アップロード中・・・</span><br><span class="line">      &lt;<span class="regexp">/ProgressBar&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後はImgUploadDefaultの中でImgUploadコンポーネントを呼び出します。 実用性を考え、コピー機能のコンポーネントも作りました〜</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=&#123;<span class="string">"c-item__container"</span>&#125;&gt;</span><br><span class="line">&lt;h2&gt;Image Upload 【画像アップロード】&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">&lt;div</span></span><br><span class="line"><span class="regexp">  className=&#123;"c-click-box"&#125;</span></span><br><span class="line"><span class="regexp">  role="button"</span></span><br><span class="line"><span class="regexp">  onClick=&#123;() =&gt; this.onChangeState(FormText.ImgUploadText)&#125;</span></span><br><span class="line"><span class="regexp">&gt;</span></span><br><span class="line"><span class="regexp">&lt;div className=&#123;"c-item-line"&#125;&gt;</span></span><br><span class="line"><span class="regexp">    &lt;ImgUpload showUploadImage=&#123;true&#125; /</span>&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;div id=<span class="string">"button-item-text"</span> className=&#123;<span class="string">"c-button-item-text"</span>&#125;&gt;</span><br><span class="line">  &lt;CopyButton text=&#123;<span class="keyword">this</span>.state.text&#125; /&gt;</span><br><span class="line">  &lt;pre&gt;&#123;<span class="keyword">this</span>.state.text&#125;&lt;<span class="regexp">/pre&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p>出来上がったものはこんな感じです。<br><img src="./3.png" style="width:600px"></p><hr><h4 id="その他のコンポーネント"><a href="#その他のコンポーネント" class="headerlink" title="その他のコンポーネント"></a>その他のコンポーネント</h4><p>他の要素とページも上記と同じ感じで実装しました。 最後、一部のイメージ図を載せておきますね〜</p><ul><li>ボタン<img src="./4.png" style="width:600px"></li></ul><hr><ul><li>フォーム<img src="./5.png" style="width:600px"></li></ul><hr><ul><li>カラー<img src="./6.png" style="width:600px"></li></ul><hr><h3 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h3><p>SPACE CLOUDは多くのコンポーネントが必要で、統一感のある実装が困難な状況でしたが、 スタイルガイドによって今後は統一することができるようになったと思います。</p><p>スタイルガイドの実装を通じて、本当に色々勉強になりました〜 やっとReactコンポーネントの基本とライブラリの使い方とかの基礎知識が分かってきましたと気がします。</p><p>今後の開発によって、スタイルガイドを変更したり、追加したりする可能性もありますが、 その時にまた記事を更新しますね〜</p><p>最後まで読んでいただきまして、誠にありがとうございました！！</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h3&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="JS" scheme="https://kisky3.github.io/tags/JS/"/>
    
      <category term="React" scheme="https://kisky3.github.io/tags/React/"/>
    
      <category term="Redux" scheme="https://kisky3.github.io/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>About Same Origin Policy And How To Deal With It</title>
    <link href="https://kisky3.github.io/2019/06/10/%E5%85%B3%E4%BA%8Ejs%E8%B7%A8%E5%9F%9F%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>https://kisky3.github.io/2019/06/10/关于js跨域及解决方法/</id>
    <published>2019-06-10T08:23:16.000Z</published>
    <updated>2019-08-17T07:40:45.675Z</updated>
    
    <content type="html"><![CDATA[<p>关于跨域</p><a id="more"></a><h3 id="同源策略（Same-origin-Policy）和跨域"><a href="#同源策略（Same-origin-Policy）和跨域" class="headerlink" title="同源策略（Same origin Policy）和跨域"></a>同源策略（Same origin Policy）和跨域</h3><p>浏览器处于安全方面的考虑，只允许与本域下的接口进行交互。<br>不同源的客户端脚本在没有明确授权的情况下。不能读写对方的资源。</p><p>简而言之就是你当前网页的协议名，域名和端口名与你请求的接口地址的各项是否相同，如果不相同则浏览器将会对返回的数据进行拦截。<br>这是隔离潜在恶意文件的关键安全机制。</p><p>本域指的是：</p><ul><li>同协议： 比如都是http或者https</li><li>同域名： 比如都是<a href="http://kisky3.com/a" target="_blank" rel="noopener">http://kisky3.com/a</a> 和 <a href="http://kisky3.com/b" target="_blank" rel="noopener">http://kisky3.com/b</a></li><li>同端口： 比如都是80端口</li></ul><p>注意：对于当前页面来说页面存放的JS文件的域不重要，而是指当前页面的URL，也就是加载JS页面所在的域。</p><p>而跨域就是绕过浏览器的同源策略，让前端能够获取到数据。</p><h3 id="跨域的几种方法"><a href="#跨域的几种方法" class="headerlink" title="跨域的几种方法"></a>跨域的几种方法</h3><h4 id="JSONP（JSON-with-padding）"><a href="#JSONP（JSON-with-padding）" class="headerlink" title="JSONP（JSON with padding）"></a>JSONP（JSON with padding）</h4><p>JSONP就是通过script标签加载数据的方式去获取数据当作JS代码来执行。<br>提前在页面上声明一个函数。函数名通过接口传参的方式传给候梯，后台解析道函数名后在原始数据上包裹这个函数名，发送给前端。<br>换句话说，JSONP需要对应接口的后端的配合才能实现。</p><p>例如</p><p>后端服务器server.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/getNews'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> news = [</span><br><span class="line"><span class="string">"this is a test message 1"</span>,</span><br><span class="line"><span class="string">"this is a test message 2"</span>,</span><br><span class="line"><span class="string">"this is a test message 3"</span>,</span><br><span class="line"><span class="string">"this is a test message 4"</span>,</span><br><span class="line"><span class="string">"this is a test message 5"</span>,</span><br><span class="line"><span class="string">"this is a test message 6"</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)&#123;</span><br><span class="line"><span class="keyword">var</span> index = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random()*news.length);</span><br><span class="line">data.push(news[index]);</span><br><span class="line">news.splice(index, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This is the point!! Backend has to check whether front request ask for a callback date or not</span></span><br><span class="line">    <span class="comment">// If so retuen a callback object contains JSON data =&gt; cb + '('+ JSON.stringify(data) + ')'</span></span><br><span class="line"><span class="keyword">var</span> cb = req.query.callback;</span><br><span class="line"><span class="keyword">if</span>(cb)&#123;</span><br><span class="line">res.send(cb + <span class="string">'('</span>+ <span class="built_in">JSON</span>.stringify(data) + <span class="string">')'</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">res.send(data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>前端页面 index.html</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Front created a script with callback object and require date to backend server.js </span></span><br><span class="line"> $(<span class="string">'.change'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">    script.src = <span class="string">'http://127.0.0.1/getNews?callback=appendHtml'</span>;</span><br><span class="line">    <span class="built_in">document</span>.head.appendChild(script);</span><br><span class="line">    <span class="built_in">document</span>.head.removeChild(script);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>JSONP的特性：</p><ul><li>它不像XMLHttpRequest对象实现的Ajax请求那样受到同源策略的限制；它的兼容性更好，在更加古老的浏览器中都可以运行。</li><li>它只支持 GET 请求，而不支持 POST 请求等其他类型的 HTTP 请求。</li></ul><h4 id="CORS-Cross-Origin-Resource-Sharing"><a href="#CORS-Cross-Origin-Resource-Sharing" class="headerlink" title="CORS(Cross-Origin Resource Sharing)"></a>CORS(Cross-Origin Resource Sharing)</h4><p>CORS全称是跨域资源共享,是一种ajax跨域请求资源的方式，支持现代浏览器，IE支持10以上。<br>实现方法很简单，当你从XMLHttpRequest发送请求时，浏览器发现该请求不符合同源策略，会给改请求加一个请求头：Origin，<br>后台进行一系列处理，如果确定接受请求则在返回结果中加入一个响应头：Access-Control-Origin;<br>浏览器判断相应头中事都包含Origin的值，如果有则浏览器会处理响应，我们就可以拿到响应数据，如果不包含则浏览器直接驳回，这时我们无法拿到响应数据。所以CORS的表象是让你觉得它与同源的ajax请求没啥区别，代码完全一样。</p><p>前端和平常一样，利用ajax发送数据。<br>后端服务器 server.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/getNews'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> news = [</span><br><span class="line"><span class="string">"this is a test message 1"</span>,</span><br><span class="line"><span class="string">"this is a test message 2"</span>,</span><br><span class="line"><span class="string">"this is a test message 3"</span>,</span><br><span class="line"><span class="string">"this is a test message 4"</span>,</span><br><span class="line"><span class="string">"this is a test message 5"</span>,</span><br><span class="line"><span class="string">"this is a test message 6"</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)&#123;</span><br><span class="line"><span class="keyword">var</span> index = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random()*news.length);</span><br><span class="line">data.push(news[index]);</span><br><span class="line">news.splice(index, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This is the point!! Backend has to add this to response header. So that front can get data</span></span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Allow-Origin'</span>,<span class="string">'http://localhost:8080'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This is the point!! Allow anybody to get date</span></span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Allow-Origin'</span>,<span class="string">'*'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>CORS的特性：</p><ul><li>JSONP 只能实现 GET 请求，而 CORS 支持所有类型的 HTTP 请求</li><li>使用 CORS ，开发者可以是使用普通的 XMLHttpRequest 发起请求和获取数据，比起 JSONP 有更好的错误处理</li><li>虽然绝大多数现代的浏览器都已经支持 CORS，但是 CORS 的兼容性比不上 JSONP，IE10以下的浏览器不支持CORS</li></ul><h3 id="服务端中转跨域"><a href="#服务端中转跨域" class="headerlink" title="服务端中转跨域"></a>服务端中转跨域</h3><p>JSONP、CORS 这两种跨域请求方式都需要对方服务器支持。假设对方服务器不提供支持怎么办？还有一个必杀技，自己搭建 server 中请求中转。</p><p>假设 我们的页面为 <a href="https://jirengu.github.io/weather/weather.html，" target="_blank" rel="noopener">https://jirengu.github.io/weather/weather.html，</a> 需要向 <a href="https://weather.com/now" target="_blank" rel="noopener">https://weather.com/now</a> 这个接口发送请求获取数据，但此接口不支持JSONP 和 CORS跨域。</p><p>我们可以这样做</p><ul><li>搭建服务器，创建接口，如 <a href="https://api.jirengu.com/weather" target="_blank" rel="noopener">https://api.jirengu.com/weather</a></li><li>设置这个接口允许 CORS 跨域</li><li>我们的页面向自己的这个接口发请求</li><li>接口收到请求后，在服务器端向<a href="https://weather.com/now" target="_blank" rel="noopener">https://weather.com/now</a> 这个接口要数据（在服务端不存在同源策略限制），拿到数据后，返回给前端页面。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于跨域&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="JS" scheme="https://kisky3.github.io/tags/JS/"/>
    
      <category term="CORS" scheme="https://kisky3.github.io/tags/CORS/"/>
    
  </entry>
  
  <entry>
    <title>What is Ajax</title>
    <link href="https://kisky3.github.io/2019/06/05/%E4%BB%80%E4%B9%88%E6%98%AFajax/"/>
    <id>https://kisky3.github.io/2019/06/05/什么是ajax/</id>
    <published>2019-06-05T08:04:23.000Z</published>
    <updated>2019-08-17T07:40:40.590Z</updated>
    
    <content type="html"><![CDATA[<p>什么是Ajax</p><a id="more"></a><h3 id="什么是ajax"><a href="#什么是ajax" class="headerlink" title="什么是ajax"></a>什么是ajax</h3><p>ajax是一种技术方案，但并不是一种新技术。</p><p>它依赖的是现有的CSS/HTML/Javascript，而其中最核心的依赖是浏览器提供的XMLHttpRequest对象，是这个对象使得浏览器可以发出HTTP请求与接收HTTP响应。<br>实现在页面不刷新的情况下和服务端进行数据交互。</p><p>ajax可以理解就是，以前向服务器请求资源，必须对这个页面资源进行请求以获得这个信息资源（以这个页面资源为载体来携带信息资源），这必然会对页面进行刷新（因为是请求服务器后会同步返回一个页面进行刷新）。<br>现在页面可以通过浏览器脚本编程语言调用一个隐藏请求装置（也就是XMLHttpRequest），由这个请求向服务器请求资源，然后返回一个资源载体（可能是一个页面，也可能是一个xml或json文段），然后由编程语言去处理这个信息。与此同时，页面是不会发生刷新行为的（也就是没有向服务器请求这个页面资源）。这就是异步原理了。“AJA”就是异步JavaScript的缩写，其基础就是浏览器脚本编程语言JavaScript和XMLHttpRequest对象，X就是作为信息载体的XML，不过现在多数用JSON代替。</p><p>作用就是可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</p><h3 id="ajax范例"><a href="#ajax范例" class="headerlink" title="ajax范例"></a>ajax范例</h3><p>GET</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'http://api.jirengu.com/weather.php'</span>, <span class="literal">true</span>)</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status == <span class="number">304</span>)&#123;</span><br><span class="line">            <span class="comment">//成功了</span></span><br><span class="line">            <span class="built_in">console</span>.log(xhr.responseText)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'服务器异常'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'服务器异常'</span>)</span><br><span class="line">&#125;</span><br><span class="line">xhr.send()</span><br></pre></td></tr></table></figure><p>POST</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">  xhr.timeout = <span class="number">3000</span>        <span class="comment">//可选，设置xhr请求的超时时间</span></span><br><span class="line">  xhr.open(<span class="string">'POST'</span>, <span class="string">'/register'</span>, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">  xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status == <span class="number">304</span>)&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.responseText)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="comment">//可选</span></span><br><span class="line">  xhr.ontimeout = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'请求超时'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//可选</span></span><br><span class="line">  xhr.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'连接失败'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//可选</span></span><br><span class="line">  xhr.upload.onprogress = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="comment">//如果是上传文件，可以获取上传进度</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  xhr.send(<span class="string">'username=jirengu&amp;password=123456'</span>)</span><br></pre></td></tr></table></figure><p>封装一个ajax</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">opts</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> url = opts.url</span><br><span class="line">    <span class="keyword">var</span> type = opts.type || <span class="string">'GET'</span></span><br><span class="line">    <span class="keyword">var</span> dataType = opts.dataType || <span class="string">'json'</span></span><br><span class="line">    <span class="keyword">var</span> onsuccess = opts.onsuccess || <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">var</span> onerror = opts.onerror || <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">var</span> data = opts.data || &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> dataStr = []</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> data)&#123;</span><br><span class="line">        dataStr.push(key + <span class="string">'='</span> + data[key])</span><br><span class="line">    &#125;</span><br><span class="line">    dataStr = dataStr.join(<span class="string">'&amp;'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(type === <span class="string">'GET'</span>)&#123;</span><br><span class="line">        url += <span class="string">'?'</span> + dataStr</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">    xhr.open(type, url, <span class="literal">true</span>)</span><br><span class="line">    xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status == <span class="number">304</span>)&#123;</span><br><span class="line">            <span class="comment">//成功了</span></span><br><span class="line">            <span class="keyword">if</span>(dataType === <span class="string">'json'</span>)&#123;</span><br><span class="line">                onsuccess( <span class="built_in">JSON</span>.parse(xhr.responseText))</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                onsuccess( xhr.responseText)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            onerror()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    xhr.onerror = onerror</span><br><span class="line">    <span class="keyword">if</span>(type === <span class="string">'POST'</span>)&#123;</span><br><span class="line">        xhr.send(dataStr)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        xhr.send()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ajax(&#123;</span><br><span class="line">    url: <span class="string">'http://api.jirengu.com/weather.php'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        city: <span class="string">'北京'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    onsuccess: <span class="function"><span class="keyword">function</span>(<span class="params">ret</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(ret)</span><br><span class="line">    &#125;,</span><br><span class="line">    onerror: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'服务器异常'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;什么是Ajax&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="JS" scheme="https://kisky3.github.io/tags/JS/"/>
    
      <category term="ajax" scheme="https://kisky3.github.io/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>So Easy! Let&#39;s Start Your Blog With Hexo And Github From Zero</title>
    <link href="https://kisky3.github.io/2019/05/28/%E8%B6%85%E7%AE%80%E5%8D%95%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://kisky3.github.io/2019/05/28/超简单用hexo和github搭建个人博客/</id>
    <published>2019-05-28T11:30:05.000Z</published>
    <updated>2019-08-17T07:40:33.906Z</updated>
    
    <content type="html"><![CDATA[<p>超简单! 教你从零用Hexo和Github搭建个人博客 </p><a id="more"></a><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Hexo是高效的静态站点生成框架，它基于Node.js搭建博客，并可以托管于github服务器上。<br>之后便可以用markdown语法进行你的博客记录了。<br>生成上传命令行简便快捷，值得推荐！</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="1-下载node-js"><a href="#1-下载node-js" class="headerlink" title="1. 下载node.js"></a>1. 下载node.js</h4><p> <a href="https://nodejs.org/ja/download/" target="_blank" rel="noopener">点击下载安装Node.js</a></p><p> 无特殊要求可以一路默认点击Next直到安装完成。</p><hr><h4 id="2-安装Git"><a href="#2-安装Git" class="headerlink" title="2. 安装Git"></a>2. 安装Git</h4><p><a href="https://git-scm.com/download/win" target="_blank" rel="noopener">点击下载Git</a></p><p>以上两步完成后可以在命令行输入以下命令来确认node.js和git安装是否成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br><span class="line">git --version</span><br></pre></td></tr></table></figure><hr><h4 id="3-在github上新建项目"><a href="#3-在github上新建项目" class="headerlink" title="3. 在github上新建项目"></a>3. 在github上新建项目</h4><img src="./1.png" style="width:600px"><p>输入你的Github用户名+.github.io，例子：Kisky3.github.io</p><p>注意勾选下面的生成README选项</p><img src="./2.png" style="width:600px"><p>在新项目的setting里，添加生成可视化page</p><img src="./3.png" style="width:600px"><hr><h4 id="4-安装Hexo"><a href="#4-安装Hexo" class="headerlink" title="4. 安装Hexo"></a>4. 安装Hexo</h4><p>新建文件夹用来存放博客文章。比如MyBlog</p><p>然后在该文件夹下执行一下命令行安装Hexo<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g  </span><br><span class="line">$ hexo init </span><br><span class="line">$ npm install  </span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></p><p> 当启动hexo server后，打开 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 就可以看到生成的默认页面了！</p> <img src="./5.png" style="width:600px"><h4 id="5-推送至Github"><a href="#5-推送至Github" class="headerlink" title="5.推送至Github"></a>5.推送至Github</h4><p>在博客文件夹MyBlog下的_config.yml配置文件的url换成你的项目主URL¥，否则后续图片的显示会出问题</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span><br><span class="line">url: https://kisky3.github.io/</span><br></pre></td></tr></table></figure><p>之后在deploy里修改type为git,并且写入你在Github生成的项目地址</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/Kisky3/Kisky3.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>并在MyBlog文件夹下运行以下命令行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git –save //下载hexo-deployer-git，否则deploy会出现error</span><br><span class="line">hexo g // 生成本地静态文件</span><br><span class="line">hexo d // 将本地文件deploy到Github上</span><br></pre></td></tr></table></figure><p>此时访问项目的主页http://你的Github名.github.io，就可以看到初始页面了</p><hr><h4 id="6-更新博文"><a href="#6-更新博文" class="headerlink" title="6. 更新博文"></a>6. 更新博文</h4><p>并在MyBlog文件夹下运行以下命令行来写博文</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new 你的博文题目 // 生成博文</span><br></pre></td></tr></table></figure><p>用markdown语法完成博客记录后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g // 生成本地静态文件</span><br><span class="line">hexo d // 将本地文件deploy到Github上</span><br></pre></td></tr></table></figure><h4 id="7-更换主题"><a href="#7-更换主题" class="headerlink" title="7. 更换主题"></a>7. 更换主题</h4><p>默认主题太没个性了，可以在网上下载自己喜欢的主题</p><p>例：<br><img src="./4.png" style="width:600px"></p><ul><li><a href="https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak" target="_blank" rel="noopener">下载地址</a></li><li><a href="https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak/blob/master/DOCUMENTATION.md" target="_blank" rel="noopener">参考文档</a></li></ul><h4 id="8-部分翻译"><a href="#8-部分翻译" class="headerlink" title="8. 部分翻译"></a>8. 部分翻译</h4><h5 id="主题安装"><a href="#主题安装" class="headerlink" title="主题安装"></a>主题安装</h5><ol><li>下载最新版本</li><li>重命名下载文件夹为 tranquilpeak,并将其放置于你MyBlog/theme文件夹下</li><li>修改_config.yml文件夹的theme为tranquilpeak</li><li>执行hexo clean删除public文件夹、并再次执行hexo generate重新生成。</li></ol><h5 id="博文内配置解释"><a href="#博文内配置解释" class="headerlink" title="博文内配置解释"></a>博文内配置解释</h5><p>例子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 超简单! 用Hexo和Github搭建个人博客</span><br><span class="line">date: 2019-05-28 20:30:05</span><br><span class="line">tags:</span><br><span class="line">- hexo</span><br><span class="line">- blog</span><br><span class="line">- github</span><br><span class="line">clearReading: true</span><br><span class="line">thumbnailImage: 20190528.jpg</span><br><span class="line">thumbnailImagePosition: left</span><br><span class="line">coverImage: 20190528.jpg</span><br><span class="line">coverCaption: "Hello World, Hello Programming"</span><br><span class="line">coverSize: partial</span><br><span class="line">comments: false</span><br><span class="line">categories: Front-end Knowledge</span><br><span class="line">---</span><br><span class="line">这里是文章的概览，显示在主页缩略内容上面</span><br><span class="line"><span class="comment">&lt;!-- more --&gt;</span></span><br><span class="line"></span><br><span class="line">这里是自动生成的文章目录</span><br><span class="line"><span class="comment">&lt;!-- toc --&gt;</span></span><br><span class="line"></span><br><span class="line"># 这是大标题</span><br><span class="line"></span><br><span class="line">## 这是二级标题</span><br><span class="line"></span><br><span class="line">## 这里有个本地图片</span><br><span class="line"><span class="comment">&lt;!-- 图片需要放置于你生成博文名字的文件夹里面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./1.png"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>博文内常用配置设定说明:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">・ tags: </span><br><span class="line">   定义该文章的标签，定义之后可以在分类里面查看自动建立的索引</span><br><span class="line"></span><br><span class="line">・ thumbnailImage:</span><br><span class="line">   首页的文章标题旁边图片</span><br><span class="line"></span><br><span class="line">・ thumbnailImagePosition:</span><br><span class="line">   首页的文章图片位置</span><br><span class="line"></span><br><span class="line">・ coverImage:</span><br><span class="line">   文章打开时顶部的封面图片</span><br><span class="line"></span><br><span class="line">・ &lt;!-- more --&gt;</span><br><span class="line">   这个标志之前的内容将会自动生成首页的概览,如果不写thumbnailImagePosition的设置将不起作用</span><br><span class="line"></span><br><span class="line">・ &lt;!-- toc --&gt;</span><br><span class="line">   这个标志的位置将会自动生成文章目录</span><br></pre></td></tr></table></figure><hr><h5 id="文章置顶"><a href="#文章置顶" class="headerlink" title="文章置顶"></a>文章置顶</h5><p>修改node_modules/hexo-generator-index/lib/generator.js</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> 'use strict';</span><br><span class="line">var pagination = require('hexo-pagination');</span><br><span class="line">module.exports = function(locals)&#123;</span><br><span class="line">  var config = this.config;</span><br><span class="line">  var posts = locals.posts;</span><br><span class="line">    posts.data = posts.data.sort(function(a, b) &#123;</span><br><span class="line">        if(a.top &amp;&amp; b.top) &#123; // 两篇文章top都有定义</span><br><span class="line">            if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排</span><br><span class="line">            else return b.top - a.top; // 否则按照top值降序排</span><br><span class="line">        &#125;</span><br><span class="line">        else if(a.top &amp;&amp; !b.top) &#123; // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span><br><span class="line">            return -1;</span><br><span class="line">        &#125;</span><br><span class="line">        else if(!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">            return 1;</span><br><span class="line">        &#125;</span><br><span class="line">        else return b.date - a.date; // 都没定义按照文章日期降序排</span><br><span class="line">    &#125;);</span><br><span class="line">  var paginationDir = config.pagination_dir || 'page';</span><br><span class="line">  return pagination('', posts, &#123;</span><br><span class="line">    perPage: config.index_generator.per_page,</span><br><span class="line">    layout: ['index', 'archive'],</span><br><span class="line">    format: paginationDir + '/%d/',</span><br><span class="line">    data: &#123;</span><br><span class="line">      __index: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在文章Front-matter中添加top值，数值越大文章越靠前，如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo </span><br><span class="line">date: 2019-05-28 21:49:33</span><br><span class="line">tags:</span><br><span class="line">- Hexo</span><br><span class="line">categories: Front-end Knowledge</span><br><span class="line">top: 10</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>注意:</p><p>这里的github推送地址和当前Hexo项目地址是分开的，也就是说，github.io的地址上面是没有hexo源码的，只有生成的静态页面。</p><p>所以最好将源文件夹做一个备份，以防更换机子或者文件丢失时无法维护博客</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;超简单! 教你从零用Hexo和Github搭建个人博客 &lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="hexo" scheme="https://kisky3.github.io/tags/hexo/"/>
    
      <category term="blog" scheme="https://kisky3.github.io/tags/blog/"/>
    
      <category term="github" scheme="https://kisky3.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Data Mocking – Ways To Fake A Backend</title>
    <link href="https://kisky3.github.io/2019/05/21/%E5%85%B3%E4%BA%8E%E5%89%8D%E7%AB%AFmock%E6%95%B0%E6%8D%AE/"/>
    <id>https://kisky3.github.io/2019/05/21/关于前端mock数据/</id>
    <published>2019-05-21T10:52:09.000Z</published>
    <updated>2019-08-17T07:40:28.789Z</updated>
    
    <content type="html"><![CDATA[<p>关于mock数据 - 怎样模拟后端数据</p><a id="more"></a> <h3 id="1-搭建一个静态服务器"><a href="#1-搭建一个静态服务器" class="headerlink" title="1. 搭建一个静态服务器"></a>1. 搭建一个静态服务器</h3><h4 id="http-server"><a href="#http-server" class="headerlink" title="http-server"></a>http-server</h4><p>比如在本地写一个http-server，可以在本地将需要的数据，做成一个文件，然后将该数据返回。</p><p>也可以在github上建立一个项目，创建首页，之后再创建一个json文件，将我们需要的数据写入此文件。</p><p>例：</p><img src="./1.png" style="width:500px"><br><img src="./2.png" style="width:500px"><p>之后打开页面就可以看到我们所取得的json数据了</p><img src="./3.png" style="width:500px"><h3 id="2-线上mock数据"><a href="#2-线上mock数据" class="headerlink" title="2. 线上mock数据"></a>2. 线上mock数据</h3><p>在下面的网站里添加接口和数据，再将生成的数据URL写入ajax即可取得在线模拟的数据</p><p>1.使用<a href="http://easy-mock.com" target="_blank" rel="noopener">http://easy-mock.com</a></p><p>2.使用<a href="http://rapapi.org/org/index.do" target="_blank" rel="noopener">http://rapapi.org/org/index.do</a></p><p>3.使用server-mock</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于mock数据 - 怎样模拟后端数据&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="Mock" scheme="https://kisky3.github.io/tags/Mock/"/>
    
  </entry>
  
  <entry>
    <title>About DOM Event Flow</title>
    <link href="https://kisky3.github.io/2019/05/20/%E5%85%B3%E4%BA%8E%E4%BA%8B%E4%BB%B6%E4%BC%A0%E6%92%AD%E6%9C%BA%E5%88%B6/"/>
    <id>https://kisky3.github.io/2019/05/20/关于事件传播机制/</id>
    <published>2019-05-20T12:41:07.000Z</published>
    <updated>2019-08-17T07:40:02.866Z</updated>
    
    <content type="html"><![CDATA[<p>关于事件传播机制</p><a id="more"></a><h3 id="事件："><a href="#事件：" class="headerlink" title="事件："></a>事件：</h3><p>JavaScript 和 HTML的交互是通过事件实现的。</p><h4 id="事件是某个行为或触发，比如点击，鼠标移动："><a href="#事件是某个行为或触发，比如点击，鼠标移动：" class="headerlink" title="事件是某个行为或触发，比如点击，鼠标移动："></a>事件是某个行为或触发，比如点击，鼠标移动：</h4><ul><li>当用户点击鼠标时</li><li>当网页已加载时</li><li>当图像已经加载时</li><li>当鼠标移动到元素上时</li><li>当用户触发按键时</li></ul><hr><h4 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h4><h5 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h5><p>点击div区域时，从下往上往父元素传播</p><img src="./1.png" style="width:500px"><h5 id="事件捕获"><a href="#事件捕获" class="headerlink" title="事件捕获"></a>事件捕获</h5><p>点击div时先从树根Document开始捕获，再一层层传给子元素</p><img src="./2.png" style="width:500px"><h5 id="DOM事件流"><a href="#DOM事件流" class="headerlink" title="DOM事件流"></a>DOM事件流</h5><p>DOM2级事件规定事件流包括3个阶段，事件捕获阶段，处于目标阶段，时间冒泡阶段，首先发生的是事件捕获，为截取事件提供机会，然后是世纪目标接受事件，最后是冒泡阶段。<br>相当于先进行一次捕获阶段，再到冒泡阶段</p><img src="./3.png" style="width:500px"><h5 id="阻止传播"><a href="#阻止传播" class="headerlink" title="阻止传播"></a>阻止传播</h5><p>阻止传播一般使用stopPropagation取消事件的进一步冒泡或者捕获 也就是取消进一步的事件捕获或冒泡，防止再触发定义在别的节点上的监听函数，但不包括再当前节点上新定义的事件监听函数。 例： 我们可以在button的事件处理程序中调用stopPropagation()从而避免注册在body上的事件发生。 若是注释掉e.stopPropagation()；在点击button的时候，由于事件冒泡，body的click事件也会触发，但是调用后这句后，事件会停止传播。 undefined ##### 取消默认行为 preventDefault方法取消浏览器对当前事件的默认行为，<br>比如点击链接后，浏览器跳转到指定页面，或者按一下空格键，页面向下滚动一段距离。<br>该方法生效的前提是，事件的cancleable属性为true， 如果为false，则该方法没有效果。<br>该方法不会阻止事件的进一步传播，只是该事件的默认方法不会执行。</p><p>例：<br>可以为文本框设置校验条件。如果用户的输入不符合条件，就无法将字符输入文本框。<br>keypress监听函数，只能输入小写字母，否则输入事件的默认事件（写入文本框）将本取消。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkName</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(e.charCode &lt; <span class="number">97</span> || e.charCode &gt; <span class="number">122</span>)&#123;</span><br><span class="line">        e.preventDafault();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="事件代理"><a href="#事件代理" class="headerlink" title="事件代理"></a>事件代理</h5><p>事件代理就是利用事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件。(delegation)。<br>我们知道当一个元素上的事件被触发时，比如说点击了一个按钮，同样的事件将会在那个元素的所有祖先元素中被触发。（事件冒泡）<br>因此我们可以给父元素田间事件监听器，子元素添加事件，事件触发冒泡上来，可以把多个子元素的事件进行统一处理。<br>这叫做事件的代理。</p><p>例：<br>上面代码的click事件的监听函数定义在ul节点，但是实际上，它处理的是子节点li的click事件。这样的好处是，只要定义一个监听函数，就能处理多个子节点的事件，且以后再添加子节点，监听函数依然有效。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">'ul'</span>);</span><br><span class="line">ul.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(event.target.tagName.toLowerCase() === <span class="string">'li'</span>)&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="事件传播过程的DEMO，演示阻止传播的效果"><a href="#事件传播过程的DEMO，演示阻止传播的效果" class="headerlink" title="事件传播过程的DEMO，演示阻止传播的效果"></a>事件传播过程的DEMO，演示阻止传播的效果</h5><img src="./4.png" style="width:500px"><p><a href="http://js.jirengu.com/foban/2/edit" target="_blank" rel="noopener">演示地址</a></p><p>HTML</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span> = <span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>Homework<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">      container</span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        box</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"target"</span>&gt;</span></span><br><span class="line">          target</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>,</span><br><span class="line"><span class="selector-class">.box</span>,</span><br><span class="line"><span class="selector-class">.target</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="attribute">border</span>: <span class="number">2px</span> solid pink;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JS</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">'#btn'</span>);</span><br><span class="line"></span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>,</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// EVENT CAPTURING</span></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'.container'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'container click.. in 捕获阶段'</span>);</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'.box'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'box click.. in 捕获阶段'</span>);</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'.target'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'target click.. in 捕获阶段'</span>);</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// DUBBED BUBBLING</span></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'.container'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'container click.. in 冒泡阶段'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'.box'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// STOP EVENT HERE</span></span><br><span class="line">  e.stopPropagation();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'box click.. in 冒泡阶段'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'.target'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'target click.. in 冒泡阶段'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于事件传播机制&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="JS" scheme="https://kisky3.github.io/tags/JS/"/>
    
      <category term="Event Flow" scheme="https://kisky3.github.io/tags/Event-Flow/"/>
    
      <category term="Event  Capturing" scheme="https://kisky3.github.io/tags/Event-Capturing/"/>
    
      <category term="Dubbed Bubbling" scheme="https://kisky3.github.io/tags/Dubbed-Bubbling/"/>
    
  </entry>
  
</feed>
