<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xiang Yu&#39;s Blog</title>
  
  <subtitle>Hello World, Hello Programming!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://kisky3.github.io/"/>
  <updated>2019-11-11T16:22:43.294Z</updated>
  <id>https://kisky3.github.io/</id>
  
  <author>
    <name>Xiang Yu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Create PHP Environment With Docker</title>
    <link href="https://kisky3.github.io/2019/11/11/CreatePhpEnvironmentInDocker/"/>
    <id>https://kisky3.github.io/2019/11/11/CreatePhpEnvironmentInDocker/</id>
    <published>2019-11-11T14:05:48.000Z</published>
    <updated>2019-11-11T16:22:43.294Z</updated>
    
    <content type="html"><![CDATA[<p>用docker构建PHP开发环境（mysql、nginx）</p><a id="more"></a><h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><ul><li>Mac OS Mojave Version 10.14</li><li>Docker for Mac</li></ul><hr><h3 id="利用Docker构建开发环境的方法"><a href="#利用Docker构建开发环境的方法" class="headerlink" title="利用Docker构建开发环境的方法"></a>利用Docker构建开发环境的方法</h3><p>首先，利用Docker构建PHP开发环境的时候，至少要具备Web服务器，PHP，和数据库这三个主要要素。<br>其次，用Docker准备你所需要的东西的话有两个方法：</p><ul><li>Docker Registory(DockerHub)开始一个一个的安装并build</li><li>docker-compose.yml里写入你需要的条件，然后一口气安装</li></ul><p>明显docker-compose会比较简单明了。</p><hr><h3 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h3><p>首先安装Docker Compose</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://github.com/docker/compose/releases/download/1.3.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p>注意：如果出现这个错误，Permission denied则说明/usr/lical/bin路径没有读写权限。<br>要使用superuser来执行。这个情况下执行sudo -i 之后再执行上面两个命令。</p><p>确认docker compose安装情况及版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose version</span><br></pre></td></tr></table></figure><hr><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>Docker Compose会根据你写在docker-compose.yml文件里的内容来进行容器的管理。<br>首先新建一个文件夹，文件结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">├── docker-compose.yml</span><br><span class="line">├── nginx</span><br><span class="line">│   └── nginx.conf</span><br><span class="line">├── php</span><br><span class="line">│   ├── Dockerfile</span><br><span class="line">│   └── php.ini</span><br><span class="line">├── mysql</span><br><span class="line">│   └── data</span><br><span class="line">└── www</span><br><span class="line">    └── html</span><br><span class="line">        └── index.php</span><br></pre></td></tr></table></figure><hr><h3 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h3><p>然后就是制作作为地基的docker-compose.yml。<br>docker-compose.yml</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">'3'</span></span><br><span class="line">services:</span><br><span class="line">  nginx:</span><br><span class="line">    image: nginx:latest</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="number">.8080</span>:<span class="number">8080</span></span><br><span class="line">    volumes:</span><br><span class="line">      - ./nginx/nginx.conf:<span class="regexp">/etc/</span>nginx/conf.d/<span class="keyword">default</span>.conf</span><br><span class="line">      - ./www/html:<span class="regexp">/var/</span>www/html</span><br><span class="line">    depends_on:</span><br><span class="line">      - php</span><br><span class="line"></span><br><span class="line">  php:</span><br><span class="line">    build: ./php</span><br><span class="line">    volumes:</span><br><span class="line">      - ./www/html:<span class="regexp">/var/</span>www/html</span><br><span class="line">    depends_on:</span><br><span class="line">      - db</span><br><span class="line"></span><br><span class="line">  db:</span><br><span class="line">    image: mysql:<span class="number">5.7</span></span><br><span class="line">    ports:</span><br><span class="line">      - <span class="number">13306</span>:<span class="number">3306</span></span><br><span class="line">    volumes:</span><br><span class="line">      - ./mysql/data:<span class="regexp">/var/</span>lib/mysql</span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_ROOT_PASSWORD: secret</span><br><span class="line"></span><br><span class="line">  phpmyadmin:</span><br><span class="line">    image: phpmyadmin/phpmyadmin:latest</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="number">8888</span>:<span class="number">80</span></span><br><span class="line">    depends_on:</span><br><span class="line">      - db</span><br></pre></td></tr></table></figure><p>nginx/nginx.conf</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">8080</span>;</span><br><span class="line">    server_name _;</span><br><span class="line"></span><br><span class="line">    root  /<span class="keyword">var</span>/www/html;</span><br><span class="line">    index index.php index.html;</span><br><span class="line"></span><br><span class="line">    access_log /<span class="keyword">var</span>/log/nginx/access.log;</span><br><span class="line">    error_log  /<span class="keyword">var</span>/log/nginx/error.log;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        try_files $uri $uri/ <span class="regexp">/index.php$is_args$args;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    location ~ \.php$ &#123;</span></span><br><span class="line"><span class="regexp">        fastcgi_pass php:9000;</span></span><br><span class="line"><span class="regexp">        fastcgi_index index.php;    </span></span><br><span class="line"><span class="regexp">        fastcgi_param SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span></span><br><span class="line"><span class="regexp">        include       fastcgi_params;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>php/Dockerfile</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FROM php:<span class="number">7.2</span>-fpm</span><br><span class="line">COPY php.ini /usr/local/etc/php/</span><br></pre></td></tr></table></figure><p>php.ini</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date.timezone = &quot;Asia/Tokyo&quot;</span><br></pre></td></tr></table></figure><p>www/html/index.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;php</span><br><span class="line">phpinfo();</span><br></pre></td></tr></table></figure><hr><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><br><img src="./1.png" style="width:600px"><p>打开localhost:8080就可以看到php的设置画面了。</p><br><img src="./2.png" style="width:600px"><br><h3 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose down</span><br></pre></td></tr></table></figure><hr><h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用docker构建PHP开发环境（mysql、nginx）&lt;/p&gt;
    
    </summary>
    
      <category term="Back-end Knowledge" scheme="https://kisky3.github.io/categories/Back-end-Knowledge/"/>
    
    
      <category term="docker" scheme="https://kisky3.github.io/tags/docker/"/>
    
      <category term="php" scheme="https://kisky3.github.io/tags/php/"/>
    
      <category term="mysql" scheme="https://kisky3.github.io/tags/mysql/"/>
    
      <category term="nginx" scheme="https://kisky3.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>About SSH Login And How To Connect To Cyberduck</title>
    <link href="https://kisky3.github.io/2019/11/11/ssh/"/>
    <id>https://kisky3.github.io/2019/11/11/ssh/</id>
    <published>2019-11-11T08:48:10.000Z</published>
    <updated>2019-11-19T14:23:35.742Z</updated>
    
    <content type="html"><![CDATA[<p>关于SSH登陆以及如何连接Cyberduck</p><a id="more"></a><h3 id="什么是SSH"><a href="#什么是SSH" class="headerlink" title="什么是SSH"></a>什么是SSH</h3><p>SSH（Secure Shell）是一种网络协议，用于计算机之间的加密登录。如果一个用户从本地计算机，使用SSH协议登录另一台远程计算机，我们就可以认为，这种登录是安全的，即使被中途截获，密码也不会泄露。</p><h3 id="什么是FTP"><a href="#什么是FTP" class="headerlink" title="什么是FTP"></a>什么是FTP</h3><p>FTP（File Transfer Protocol）就是就是专门用来传输文件的协议。<br>FTP服务器（File Transfer Protocol Server）是在互联网上提供文件存储和访问服务的计算机，它们依照FTP协议提供服务。</p><h3 id="什么是SFTP"><a href="#什么是SFTP" class="headerlink" title="什么是SFTP"></a>什么是SFTP</h3><p>SFTP（SSH File Transfer Protocol），安全文件传送协议。<br>可以为传输文件提供一种安全的加密方法。sftp 与 ftp 有着几乎一样的语法和功能。SFTP 为 SSH的一部分，是一种传输档案至 Blogger 伺服器的安全方式。其实在SSH软件包中，已经包含了一个叫作SFTP(Secure File Transfer Protocol)的安全文件传输子系统</p><h3 id="FTP与SFTP的区别"><a href="#FTP与SFTP的区别" class="headerlink" title="FTP与SFTP的区别"></a>FTP与SFTP的区别</h3><p>FTP是一种文件传输协议，一般是为了方便数据共享的。包括一个FTP服务器和多个FTP客户端。FTP客户端通过FTP协议在服务器上下载资源。而SFTP协议是在FTP的基础上对数据进行加密，使得传输的数据相对来说更安全。但是这种安全是以牺牲效率为代价的，也就是说SFTP的传输效率比FTP要低(不过现实使用当中，没有发现多大差别)。<br>总结：<br>1.FTP要安装，SFTP不要安装。当我们需要传输文件到Linux服务器当中，我们习惯用ftp来传输，其实Linux默认是不提供ftp的，需要你额外安装FTP服务器。而SFTP不需要单独配置，开启SSH默认就开启了SFTP。<br>2.SFTP使用加密传输认证信息和传输数据更安全，但更安全带来副作用就是的效率比FTP要低。</p><h3 id="SFTP-SSH登录及命令行用法"><a href="#SFTP-SSH登录及命令行用法" class="headerlink" title="SFTP/SSH登录及命令行用法"></a>SFTP/SSH登录及命令行用法</h3><p>SFTP：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">get xxx.txt 下载xxx文件</span><br><span class="line">put xxx.txt 上传xxx文件</span><br><span class="line">quit / bye / exit 退出sftp</span><br><span class="line">sftp  xxx.xxx.xxx.xxx   登录root用户</span><br><span class="line">sftp zygf@xxx.xxx.xxx.xxx  进行登录zygf用户</span><br></pre></td></tr></table></figure><p>例子：<br>1.首先如果要登陆你需要「远程服务器的秘密键」，「用户名」和「邮件地址」<br>2.在本地存在公开键的情况下，你需要将远程服务器的秘密键保存在本地<br>  生成一个秘密键文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">　cd ~/.ssh</span><br><span class="line">　cp kou_id_rsa wordpress_rsa</span><br><span class="line">vim wordpress_rsa</span><br></pre></td></tr></table></figure><img src="./1.png" style="width:500px"><p>3.登陆服务器并且传送你生成的秘密键,不用写端口号!(默认为22)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh ユーザー名@IPアドレス -i ~/.ssh/wordpress_rsa(生成した秘密鍵ファイル名)</span><br></pre></td></tr></table></figure><p>4.有问题则回答yes，然后就可以看到登陆成功了<br><img src="./2.png" style="width:500px"></p><h3 id="使用FTP软件进行登陆及文件操作"><a href="#使用FTP软件进行登陆及文件操作" class="headerlink" title="使用FTP软件进行登陆及文件操作"></a>使用FTP软件进行登陆及文件操作</h3><p>mac可以使用免费的FTP软件<a href="https://cyberduck.io/download/" target="_blank" rel="noopener">Cyberduck</a><br>就是这个小黄鸭！<br><img src="./7.png" style="width:500px"></p><p>1.点击新建连接<br><img src="./3.png" style="width:500px"></p><p>2.在界面上选择SFTP连接<br><img src="./4.png" style="width:500px"></p><p>3.输入用户名。密码以及选择本地秘密键文件，点击连接。<br><img src="./5.png" style="width:500px"></p><p>成功！<br><img src="./6.png" style="width:500px"></p><h3 id="可能发生的错误"><a href="#可能发生的错误" class="headerlink" title="可能发生的错误"></a>可能发生的错误</h3><p>1.没有给ssh文件夹权限<br>解决方法：<br>给下面的ssh文件夹以及你生成的秘密键权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 600 ~/.ssh/wordpress_rsa</span><br><span class="line">chmod 700 ~/.ssh</span><br></pre></td></tr></table></figure><p>2.复制秘密键的时候转换软件导致字符改变<br>解决方法：<br>下载之后用记事本打开再进行复制粘贴</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于SSH登陆以及如何连接Cyberduck&lt;/p&gt;
    
    </summary>
    
      <category term="Back-end Knowledge" scheme="https://kisky3.github.io/categories/Back-end-Knowledge/"/>
    
    
      <category term="SSH" scheme="https://kisky3.github.io/tags/SSH/"/>
    
      <category term="Cyberduck" scheme="https://kisky3.github.io/tags/Cyberduck/"/>
    
      <category term="FTP" scheme="https://kisky3.github.io/tags/FTP/"/>
    
      <category term="SFTP" scheme="https://kisky3.github.io/tags/SFTP/"/>
    
  </entry>
  
  <entry>
    <title>Docker Basic and Commands</title>
    <link href="https://kisky3.github.io/2019/11/07/dockercommand/"/>
    <id>https://kisky3.github.io/2019/11/07/dockercommand/</id>
    <published>2019-11-06T15:10:07.000Z</published>
    <updated>2019-11-11T14:56:22.697Z</updated>
    
    <content type="html"><![CDATA[<p>docker的基础知识以及常用命令行</p><a id="more"></a><h3 id="1-Docker-简介"><a href="#1-Docker-简介" class="headerlink" title="1.Docker 简介"></a>1.Docker 简介</h3><p>Docker 两个主要部件：</p><ul><li>Docker: 开源的容器虚拟化平台</li><li>Docker Hub: 用于分享、管理 Docker 容器的 Docker SaaS 平台 – <a href="https://link.jianshu.com/?t=https://registry.hub.docker.com/search?q=library" target="_blank" rel="noopener">Docker Hub</a></li></ul><hr><h3 id="2-Docker内部"><a href="#2-Docker内部" class="headerlink" title="2.Docker内部"></a>2.Docker内部</h3><p>要理解 Docker 内部构建，需要理解以下三种部件：</p><ul><li>Docker 镜像 - Docker images</li><li>Docker 仓库 - Docker registeries</li><li>Docker 容器 - Docker containers</li></ul><hr><h6 id="Docker-镜像"><a href="#Docker-镜像" class="headerlink" title="Docker 镜像"></a>Docker 镜像</h6><p>Docker 镜像是 Docker 容器运行时的只读模板。每一个镜像由一系列的层 (layers) 组成。<br>如果我们想要在本地运行容器，就必须保证本地存在对应的镜像。所以，第一步，我们需要下载镜像。当我们尝试下载镜像时，Docker 会尝试先从默认的镜像仓库（默认使用 Docker Hub 公共仓库）去下载，当然了，用户也可以自定义配置想要下载的镜像仓库。</p><hr><h6 id="Docker-仓库"><a href="#Docker-仓库" class="headerlink" title="Docker 仓库"></a>Docker 仓库</h6><p>Docker 仓库用来保存镜像，可以理解为代码控制中的代码仓库。同样的，Docker 仓库也有公有和私有的概念。公有的 Docker 仓库名字是 Docker Hub。Docker Hub 提供了庞大的镜像集合供使用。这些镜像可以是自己创建，或者在别人的镜像基础上创建。Docker 仓库是 Docker 的分发部分。</p><hr><h6 id="Docker-容器"><a href="#Docker-容器" class="headerlink" title="Docker 容器"></a>Docker 容器</h6><p>Docker 容器和文件夹很类似，一个Docker容器包含了所有的某个应用运行所需要的环境。每一个 Docker 容器都是从 Docker 镜像创建的。Docker 容器可以运行、开始、停止、移动和删除。每一个 Docker 容器都是独立和安全的应用平台，Docker 容器是 Docker 的运行部分。</p><hr><h6 id="Docker-File"><a href="#Docker-File" class="headerlink" title="Docker File"></a>Docker File</h6><p>当获得docker镜像时，还不能就这样使用，大多数情况下我们要根据自身所需要的条件（比如版本号啊，端口号啊之类的）来将docker镜像设置成我们所需要的开发环境。<br>实际上，docker file一般写成下面这样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FROM centos:7               # ①</span><br><span class="line">RUN yum install -y java     # ②</span><br><span class="line">ADD files/apache-tomcat-9.0.6.tar.gz /opt/  # ③</span><br><span class="line">CMD [ &quot;/opt/apache-tomcat-9.0.6/bin/catalina.sh&quot;, &quot;run&quot; ]  # ④</span><br></pre></td></tr></table></figure><p>① FROM是指定你所需要的docker镜像（作为最基层）。比如这里就是将centos:7的docker镜像为基础来执行之后的指令。<br>在执行时哪怕没有事先通过docker pull获取镜像，它也能自动获取相应的镜像供你使用。</p><p>② RUN是指在OS命令行执行时使用。在这里是指下载java，并加上了-y 的选项默认确认安装</p><p>③ ADD是指将 tar.gz文件的容器copy到你的指定的路径内，并同时解压展开tar文件。<br>写成这样：「ADD &lt;copy源文件&gt; &lt;复制到Docker镜像内・并展开<br>这里就是在与docker file同阶层的地方生成一个「file」的路径，并将tomcat放置其中</p><p>④ CMD是指容器启动时所执行的命令行</p><p>我们现在利用做好的Dockerfile来生成Docker镜像。移动到Docker所在的路径，然后使用生成Docker镜像的命令：build</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># cd &lt;Dockerfile所在路径&gt;</span><br><span class="line"># docker build -t tomcat:1 .</span><br><span class="line">　(docker build -t &lt;Docker镜像名&gt; &lt;Dockerfile所在路径&gt;)</span><br><span class="line"># docker images</span><br><span class="line">REPOSITORY   TAG   IMAGE ID       CREATED         SIZE</span><br><span class="line">tomcat       1     10af894cf09a   1 minutes ago   456MB</span><br></pre></td></tr></table></figure><p>通过这样我们就生成了自己的Docker镜像。然后我们使用Docker镜像来启动docker容器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># docker run -it -d --name tomcat-1 -p 8081:8080 tomcat:1</span><br></pre></td></tr></table></figure><p>然后打开「http://&lt;IP地址&gt;:8081/」就能看到启动成功的画面了。</p><p>可以使用下面的命令来查看log</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># docker logs -f tomcat-1</span><br></pre></td></tr></table></figure><hr><h6 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h6><p>就是对于有好几个容器构成的服务来说，可以使用Docker Compose来控制多个Docker镜像的生成（build）和多个容器的启动和停止</p><p>上面几个概念的整体关系如图所示：<br><img src="./1.png"></p><hr><h3 id="Docker基础用法"><a href="#Docker基础用法" class="headerlink" title="Docker基础用法"></a>Docker基础用法</h3><p><a href="https://link.jianshu.com/?t=https://registry.hub.docker.com/search?q=library" target="_blank" rel="noopener">Docker Hub</a>: Docker镜像首页，包括官方镜像和其它公开镜像</p><p>镜像搜索</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker search ubuntu # 搜索ubuntu官方镜像</span><br></pre></td></tr></table></figure><p>获取镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker pull ubuntu # 获取ubuntu官方镜像</span><br><span class="line">$ sudo docker images # 查看当前镜像列表</span><br></pre></td></tr></table></figure><p>删除镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi IMAGE [IMAGE...]</span><br></pre></td></tr></table></figure><p>运行容器<br>・docker run - 运行一个容器<br>・-t - 分配一个（伪）tty (link is external)<br>・-i - 交互模式 (so we can interact with it)<br>・ubuntu:14.04 - 使用 ubuntu 基础镜像 14.04<br>・/bin/bash - 运行命令 bash shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -i -t ubuntu:14.04 /bin/bash</span><br></pre></td></tr></table></figure><p>查看当前所有容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker ps # 查看当前运行的容器, ps -a 列出当前系统所有的容器</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">6c9129e9df10        ubuntu:14.04        /bin/bash           6 minutes ago       Up 6 minutes                            cranky_babbage</span><br></pre></td></tr></table></figure><p>进入指定容器（运行中）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker attach CONTAINER</span><br><span class="line">docker exec -it CONTAINER /bin/bash</span><br></pre></td></tr></table></figure><p>删除所有容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm $(docker ps -aq)</span><br></pre></td></tr></table></figure><hr><h5 id="Docker-compose"><a href="#Docker-compose" class="headerlink" title="Docker-compose"></a>Docker-compose</h5><p>启动所有的容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>进入启动中的某个容器内</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose + exec ( or run )  + サービス名 + 実行したいコマンド</span><br></pre></td></tr></table></figure><p>停止全部容器或某个容器的运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose stop</span><br><span class="line">docker-compose stop nginx</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;docker的基础知识以及常用命令行&lt;/p&gt;
    
    </summary>
    
      <category term="Back-end Knowledge" scheme="https://kisky3.github.io/categories/Back-end-Knowledge/"/>
    
    
      <category term="Docker" scheme="https://kisky3.github.io/tags/Docker/"/>
    
      <category term="Command" scheme="https://kisky3.github.io/tags/Command/"/>
    
  </entry>
  
  <entry>
    <title>About CMS</title>
    <link href="https://kisky3.github.io/2019/11/02/AboutCMS/"/>
    <id>https://kisky3.github.io/2019/11/02/AboutCMS/</id>
    <published>2019-11-02T01:30:56.000Z</published>
    <updated>2019-11-05T14:27:19.567Z</updated>
    
    <content type="html"><![CDATA[<p>关于CMS</p><a id="more"></a><h4 id="什么是CMS"><a href="#什么是CMS" class="headerlink" title="什么是CMS"></a>什么是CMS</h4><p>CMS是英语Content Management System的缩写，按英语的字面翻译就是内容管理系统，顾名思义，它主要是为了方便发布网络内容而存在的一体化Web管理系统。</p><hr><h3 id="CMS的基本作用"><a href="#CMS的基本作用" class="headerlink" title="CMS的基本作用"></a>CMS的基本作用</h3><p>很久很久以前，人们做网站很多用静态HTML+CSS+Javascript直接写，也就是静态页面。</p><p>但是如果有一组页面要维护，对于静态页面来说是一件很麻烦的事，比如我有一个人的Email地址变更了，这一组页面上所有出现的地方都要改，于是就有了适合Web的动态语言，如ASP，PHP，JAVA，.NET等等，它们把数据保存在数据库中，可以动态的引用，这样就能生产出较大规模的网站了。</p><p>当时诞生了一批大型网站，叫做门户网站，比如新浪，网易，搜狐，他们的内容很丰富，很多。他们有一大批编辑来搜集整理网站的文章，但是总不可能让程序员帮他们把内容上传吧。</p><p>于是CMS诞生了，通常CMS有一个后台，编辑通过登录后台进入一个可视化的操作界面，把文章录入进去，然后通过上一级的总编审核后发布到网站中。</p><hr><h3 id="CMS的主要功能模块"><a href="#CMS的主要功能模块" class="headerlink" title="CMS的主要功能模块"></a>CMS的主要功能模块</h3><p>上面说的文章发布只是CMS的一个功能模块，通常还会有一个会员管理系统，这是最基本的2个功能模块。文章发布会带有一个富文本编辑器，可以直接插入和上传媒体文件，如图片和视频；还有分类以及排序，发布以及更新的时间戳，Tag标签等等，更有强大的CMS会添加自定义的字段，比如加入文章出处，原创作者等。</p><p>会员系统会分级人员的权限，比如超级管理员能做所有后台能做的事情，而编辑只能添加和编辑删除某个分类下的文章，甚至只能看到这个分类，其他分类对于他是隐藏的。但是一个功能较强大的CMS远不止如此，他们会有各种各样奇奇怪怪的功能模块，比如留言板，评论系统，预约系统，多语言模块等等。博客系统也是一种CMS，只是它们更侧重于发布博客。</p><hr><h3 id="流行的CMS框架"><a href="#流行的CMS框架" class="headerlink" title="流行的CMS框架"></a>流行的CMS框架</h3><p>CMS最擅长的就是建设网站，最流行的CMS有：国外的：Wordpress，Drupal，Joomla，这是国外最流行的3大CMS。国内则是DedeCMS和帝国，PHPCMS等。国内的CMS会追求大而全，而国外的CMS更注重生态，更注重友好的接口，更多的功能留给第三方开发插件来实现。</p><p>推荐几个比较新的：ProcessWire，OctoberCMS，CraftCMS每个CMS都有自己的一套管理组织方法，这个需要多读官网的文档。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于CMS&lt;/p&gt;
    
    </summary>
    
      <category term="Back-end Knowledge" scheme="https://kisky3.github.io/categories/Back-end-Knowledge/"/>
    
    
      <category term="CMS" scheme="https://kisky3.github.io/tags/CMS/"/>
    
  </entry>
  
  <entry>
    <title>Install Modx Revolution With Docker</title>
    <link href="https://kisky3.github.io/2019/10/31/createDockerModx/"/>
    <id>https://kisky3.github.io/2019/10/31/createDockerModx/</id>
    <published>2019-10-31T01:22:48.000Z</published>
    <updated>2019-11-07T14:10:32.387Z</updated>
    
    <content type="html"><![CDATA[<p>用docker构建modx安装环境</p><a id="more"></a><h3 id="什么是Modx"><a href="#什么是Modx" class="headerlink" title="什么是Modx"></a>什么是Modx</h3><p>MODx 是一个完全开源免费的 php 内容管理系统（CMS）. 是一个PHP 应用框架，可以帮助使用者控制自己的网上内容。<br>它是开发人员和高级用户理想的控制系统，任何人都可以使用 MODx 发布、更新、维护动态网站，或 html 静态页面的网站内容。</p><hr><h3 id="使用docker构建环境"><a href="#使用docker构建环境" class="headerlink" title="使用docker构建环境"></a>使用docker构建环境</h3><p>环境可自行定义，本例的环境参照下面：</p><ul><li>server: nginx:1.12.2</li><li>DB: mysql:5.6.34</li><li>Modx Revolition :modx-2.7.2-pl</li><li>php</li></ul><h4 id="1-从GitLab下载modx-docker"><a href="#1-从GitLab下载modx-docker" class="headerlink" title="1.从GitLab下载modx-docker"></a>1.从GitLab下载modx-docker</h4><p><a href="https://gitlab.com/EUsipov/modx-docker" target="_blank" rel="noopener">modx-docker Repo</a></p><hr><h4 id="2-设置nginx服务器"><a href="#2-设置nginx服务器" class="headerlink" title="2.设置nginx服务器"></a>2.设置nginx服务器</h4><p>在nginx/site.conf文件里修改服务器名以及监听窗口号。记得不要漏了分号！否则之后无法启动的！</p><p>nginx/site.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    index index.php index.html;</span><br><span class="line">    server_name localhost;</span><br><span class="line">    listen 8899;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><hr><h4 id="3-设置docker启动时的配置"><a href="#3-设置docker启动时的配置" class="headerlink" title="3. 设置docker启动时的配置"></a>3. 设置docker启动时的配置</h4><p>docker-compose可以理解可以让你一条命令运行多个配置的容器。docker-compose.yml就是配置文件。<br>下面将nginx的端口号设置成和ngin配置文件里一样：8899，记得这里要加上本地机默认域名，写成这样！ =&gt; “127.0.0.1:8899:8899”<br>然后写上mysql的用户名和密码，mysql的端口号为了避免重复，这里使用’13306:3306’<br>最后如下文所示：</p><p>docker-compose.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">nginx:</span><br><span class="line">   image: nginx:1.12.2</span><br><span class="line">   container_name: nginx</span><br><span class="line">   restart: always</span><br><span class="line">   ports:</span><br><span class="line">      - &quot;127.0.0.1:8899:8899&quot;</span><br><span class="line">   volumes:</span><br><span class="line">      - ./code:/code</span><br><span class="line">      - ./nginx/site.conf:/etc/nginx/conf.d/site.conf</span><br><span class="line">   links:</span><br><span class="line">      - php</span><br><span class="line"></span><br><span class="line">php:</span><br><span class="line">   build: ./php</span><br><span class="line">   container_name: php</span><br><span class="line">   restart: always</span><br><span class="line">   volumes:</span><br><span class="line">      - ./code:/code:rw</span><br><span class="line">   links:</span><br><span class="line">      - mysql</span><br><span class="line"></span><br><span class="line">mysql:</span><br><span class="line">   image: mysql:5.6.34</span><br><span class="line">   environment:</span><br><span class="line">      MYSQL_ROOT_PASSWORD: mysql</span><br><span class="line">      MYSQL_DATABASE: modx</span><br><span class="line">      MYSQL_USER: modx</span><br><span class="line">      MYSQL_PASSWORD: modx</span><br><span class="line">   ports:</span><br><span class="line">      - &apos;13306:3306&apos;</span><br><span class="line">   command: mysqld --sql-mode=NO_ENGINE_SUBSTITUTION</span><br><span class="line">   volumes:</span><br><span class="line">      - &apos;./mysql:/var/lib/mysql&apos;</span><br></pre></td></tr></table></figure><hr><h4 id="创建DB数据储存文件夹"><a href="#创建DB数据储存文件夹" class="headerlink" title="创建DB数据储存文件夹"></a>创建DB数据储存文件夹</h4><p>在根目录下创建mysql文件夹，用于储存数据库数据。这里的文件夹名与docker-compose.yml里mysql的volumes对应：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">volumes:</span><br><span class="line">      - &apos;./mysql:/var/lib/mysql&apos;</span><br></pre></td></tr></table></figure><hr><h4 id="创建code文件夹"><a href="#创建code文件夹" class="headerlink" title="创建code文件夹"></a>创建code文件夹</h4><p>用于存放modx相关文件</p><hr><h4 id="安装modx"><a href="#安装modx" class="headerlink" title="安装modx"></a>安装modx</h4><p>移动到code文件夹并在该路径内安装所需的modx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd code</span><br><span class="line">wget http://modx.com/download/direct/modx-2.7.2-pl.zip</span><br></pre></td></tr></table></figure><p>解压安装包并重命名文件夹，修改权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">unzip modx-2.7.2-pl.zip</span><br><span class="line">mv modx-2.7.2-pl modx</span><br><span class="line">chmod -R 775 modx</span><br></pre></td></tr></table></figure><p>修改路径回到上层菜单并启动docker容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>这时打开/modx/setup就可以看到modx的安装页面了<br><img src="./1.png" style="width:500px"></p><hr><h3 id="安装Modx"><a href="#安装Modx" class="headerlink" title="安装Modx"></a>安装Modx</h3><p>安装页面选择语言，点击下一步<br><img src="./2.png" style="width:500px"><br><br><br><img src="./3.png" style="width:500px"><br>设置mysql，将之前设定的用户名密码输入，注意在host处写入mysql，点击验证<br>在本地连接登陆mysql数据库可以使用下面的命令行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u modx -h 127.0.0.1 -P 13306 --protocol=tcp -p</span><br></pre></td></tr></table></figure><br>也可以用SequelPro打开<img src="./12.png" style="width:500px"><br><img src="./4.png" style="width:500px"><br>验证成功后选择文字编码,并验证<img src="./5.png" style="width:500px"><br>写入用户名和密码点击下一步<img src="./6.png" style="width:500px"><br>全部检查项目显示绿色，通过之后就可以安装了<img src="./7.png" style="width:500px"><br>安装成功后输入刚刚设定的用户名和密码进行登陆<img src="./8.png" style="width:500px"><br><img src="./9.png" style="width:500px"><br><img src="./10.png" style="width:500px"><br><p>大功告成！<br>进入管理页面之后就可以进行你自己的CMS页面开发了！<br><br><br><img src="./11.png" style="width:500px"><br><br></p><h3 id="遗留课题"><a href="#遗留课题" class="headerlink" title="遗留课题"></a>遗留课题</h3><p>如何将现存的数据导入数据库并在本地进行开发</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用docker构建modx安装环境&lt;/p&gt;
    
    </summary>
    
      <category term="Back-end Knowledge" scheme="https://kisky3.github.io/categories/Back-end-Knowledge/"/>
    
    
      <category term="Docker" scheme="https://kisky3.github.io/tags/Docker/"/>
    
      <category term="Modx" scheme="https://kisky3.github.io/tags/Modx/"/>
    
      <category term="Modx-docker" scheme="https://kisky3.github.io/tags/Modx-docker/"/>
    
  </entry>
  
  <entry>
    <title>Miss Saigon (Musical 2014)</title>
    <link href="https://kisky3.github.io/2019/10/20/MissSaigon/"/>
    <id>https://kisky3.github.io/2019/10/20/MissSaigon/</id>
    <published>2019-10-20T01:01:43.000Z</published>
    <updated>2019-10-28T14:23:46.991Z</updated>
    
    <content type="html"><![CDATA[<p>音乐剧：西贡小姐（英国/美国 2014年）</p><a id="more"></a><p>「西贡小姐」是西方现代四大音乐名剧之一, 也是在80年代是百老汇上受欧洲影响的剧目之一，与「歌剧魅影」，「悲惨世界」和「猫」齐名. 据说是翻「蝴蝶夫人」.</p><h3 id="第一幕"><a href="#第一幕" class="headerlink" title="第一幕"></a>第一幕</h3><p>故事发生在1975年西贡的一间夜总会，就在西贡解放前几天。今天是金（Kim)做妓女的第一天，工程师（Engineer）向她问候。工程师是一个法国裔越南皮条，有一家迎合美国士兵需要的夜总会.<br>在后台，所有的女孩子们都准备着晚上的节目，她们一边帮金穿上戏服一边取笑她的幼稚.</p><p>夜总会的节目开始了，所有的美国大兵和越南妓女们一起狂欢（The Heat is on in Saigon）.</p><p>士兵们都知道他们已经节节败退，只想在离开越南以前再玩一下子. 我们认识了克里斯（Chris）— 一个年轻的、却不幻想的陆军作战队士兵 和他的朋友约翰(John).<br><img src="./1.jpg" style="width:500px;margin:40px 0"></p><p>女孩子们在大兵面前骚手弄姿，都想争夺“西贡小姐”的称号. 得主将被作为奖品被大兵们抽奖，而妓女们认为，这就表示她们可能会被带到美国去，从此过上好日子. 每一个妓女都用自己上场的机会使出浑身解数取悦大兵们，而轮到金时，她的纯洁与天真吸引了克里斯的注意.</p><img src="./2.jpg" style="width:500px;margin:40px 0"><p>约翰注意到了克里斯对金的迷恋，他与工程师谈了价钱，给克里斯买下了金的处女之夜（The Transaction”）.</p><img src="./3.jpg" style="width:500px;margin:40px 0"><p>克里斯痛恨越南的一切，然而他完完全全为金迷恋，他问上帝为什么他一定要在临走之前才遇到这个人（Why God Why”）。<br>金醒来之后，克里斯想给她钱，被她回绝了,他告诉她她不需要在夜总会卖身，因为他想让她跟他一起生活。两个人疯狂地相爱了（Sun and Moon”）。<br><img src="./4.jpg" style="width:500px;margin:40px 0"></p><p>金和其他的女孩子们为克里斯和金准备了婚礼（“婚礼 - Dju Vui Vai”）。在婚礼上，金的表兄岁（Thuy），也是金的父母为以前她订下的丈夫，闯进来要救金离开这里。<br>当他得知金是要嫁给另一个人的时候，他十分伤心 （“岁的到来 - Thuy’s Arrival”）。<br><img src="./5.jpg" style="width:500px;margin:40px 0"></p><p>金为此十分难过，她认为克里斯也会离开她，克里斯说他是要离开越南，但是他会带金一起走。克里斯与金拥抱在一起，跟着一首夜总会的庸俗歌曲“世界的最后一晚”一起跳舞。然而这首歌在这里非比寻常，因为对金和克里斯来说，这一晚，的确就是她们的世界里的最后一晚。（“世界的最后一晚 - Last Night of the World”)。<br><img src="./6.jpg" style="width:500px;margin:40px 0"></p><p>故事向后跳跃三年，我们到了1978年。西贡（现已经改名为“胡志明市”）人都走到街头，举城欢庆打败美国、越南统一三周年的纪念活动（“龙之晨 - Morning of the Dragon”）。</p><p>岁现在是新政府的官员，他命令他手下的士兵去把工程师找来,命令工程师去把在共产党入城时就没了踪影的金找到，并把她带到他那里去。</p><p>金被克里斯留在了越南，她一直生活在贫民窟里。她依然深深地爱着克里斯，而且坚信他会回来救她出去。</p><p>与此同时，我们看到克里斯与他的新美国人妻子，艾伦(Ellen），躺在一起。艾伦很爱克里斯，但是她很渴望知道一直缠绕他内心的阴影究竟是什么。他突然从睡梦中惊醒，坐起来叫着金的名字，艾伦安慰他重新躺下。<br>两个身处地球两端的女人不约而同地表白她们对克里斯的爱情。（“我依然相信 - I Still Believe”）。<br><img src="./7.jpg" style="width:500px;margin:40px 0"></p><p>工程师找到金，把她带到岁那里。岁解释说他寻找金已经找了三年了，而且，他仍然想把金带回家做他的妻子。她拒绝了，哪怕克里斯不在她也全心全意地爱着他。金把她与克里斯的两岁的儿子，谭（Tam），介绍给岁，令岁大为震惊。<br><img src="./9.jpg" style="width:500px;margin:40px 0"></p><p>岁愤怒已极，他骂金是叛国者，谭则是国家的敌人，他企图用刀杀了谭。金抽出克里斯留下的手枪，被迫朝岁开了一枪。岁死在了金的怀中。<br><img src="./8.jpg" style="width:500px;margin:40px 0"></p><p>金跑到工程师那里，告诉他所发生的事情（“假如你愿意死在温床上 - If You Want to Die in Bed”）. 金吐露克里斯是谭的父亲，他立刻兴高采烈把这小孩看成自己去美国的签证。他告诉金从现在起他就是孩子的叔叔了，而他将带她们去曼谷。金向谭保证，哪怕是牺牲她的性命，她也要让谭过上好的日子。他们三人随着其他饱受坚辛的难民一起，登上了去曼谷的船（“为了你我可以付出生命 - I’d Give My Life for You”）。<br><img src="./10.jpg" style="width:500px;margin:40px 0"></p><hr><h3 id="第二幕"><a href="#第二幕" class="headerlink" title="第二幕"></a>第二幕</h3><p>1978年，乔治亚州的亚特兰大市。约翰现在为一家帮助”Bui-Doi”（指越战期间美国士兵与越南女人所生的小孩）寻找美国父亲的机构工作。<br>在越南，这些混血儿因为外貌特称明显，经常受到很大程度的歧视。</p><p>约翰把克里斯拉到一边，说他有很重要的消息要告诉他。约翰告诉克里斯金还活着，这让克里斯十分欣慰，因为他几年来一直做着金死去的梦魇。<br><img src="./11.jpg" style="width:500px;margin:40px 0"></p><p>1978年，曼谷。工程师现在已经沦落到招揽游客进下等酒吧的皮条客，而金则是酒吧里的舞女（“真是浪费 - What a Waste”）。<br>克里斯、艾伦和约翰来到曼谷寻找金的下落，约翰走进酒吧，见到了金和工程师。金见了约翰十分惊讶，等听说了克里斯也在曼谷的消息更是欣喜不已。<br><img src="./12.jpg" style="width:500px;margin:40px 0"></p><p>约翰去找克里斯的时候，工程师让金自己去找克里斯，因为他不相信克里斯真的会来（Chris is Here）。在金准备出门去找克里斯的时候，岁的鬼魂出现了。他恐吓金，说克里斯会跟西贡解放那晚一样，遗弃金。金的思绪，立刻被带回到那一夜（“金的梦魇 - Kim’s Nightmare”）。<br><img src="./13.jpg" style="width:500px;margin:40px 0"></p><p>1975年，西贡。在越共逐渐逼近、西贡日益混乱的时候，克里斯和金作好了逃离越南的准备。克里斯被招回去保护大使馆，他把枪留给她，让她在家收拾行李，说他们会有充足的时间离开。<br>几乎就在克里斯走进大使馆的那一瞬间，大使馆的门关闭了。大使命令不许放任何越南进入大使馆。<br>听说了这个消息，金挤到大使馆门口，但她不过是无数企图收买、乞求、爬进大使馆的越南人中间的一个罢了。<br><img src="./14.jpg" style="width:500px;margin:40px 0"><br>与此同时，美国人不许克里斯出去。约翰最后不得不打他的脸，让他停止无谓的挣扎。克里斯坐上了最后一班离开西贡的直升飞机，金从大门口看着他离开，她绝望地向他表白着她对他的忠贞。直升飞机在克里斯呼唤金的声音里起飞了。<br><img src="./15.jpg" style="width:500px;margin:40px 0"></p><p>1978年，曼谷。回忆结束了.<br>金来到克里斯的旅馆房间，但当她走进屋里的时候，那里只有一个女人，艾伦。而当艾伦告诉她他们不可能带谭去美国时，她所有那些希望儿子过上好日子的梦想也破灭了。艾伦说他们可以从美国寄钱来救济她们。金仍不能相信，她愤怒地要求克里斯当面告诉她这些话（Room 317）<br><img src="./16.jpg" style="width:500px;margin:40px 0"></p><p>克里斯和约翰没找到金，回到旅馆。克里斯听艾伦讲述了和金的激烈会面，惊恐万分。他决定让金和谭留在曼谷，他们会从美国寄钱来保证她们的生活，他们认为金是个好人，她“很聪明，她会理解的”（“对质 - The Confrontation”）。工程师仍把谭看做自己去美国的船票，他梦想着自己在美国的崭新生活。他、克里斯、艾伦一起来到金的房间（The American Dream）。<br><img src="./17.jpg" style="width:500px;margin:40px 0"></p><p>在金的房间里，金告诉谭他应该高兴，因为他现在有爸爸了。看到克里斯、艾伦、约翰和工程师从远处走过来，她对谭说了再见，吻着他的额头。她走到帘子后面，开枪自尽了。</p><p>克里斯、艾伦、约翰和工程师听到枪响立刻冲进房间，看到金倒在地上奄奄一息。克里斯跑到金旁边抱她起来，他心碎地问金为什么要这样做，但她只是求他再抱她最后一次。<br>她再次重复当初两人坠入爱河时说过的话：“为什么一夜之间我们改变了这么多？”在其他人震惊的目光里，金在克里斯的怀里死去了。而艾伦跪下来，朝谭伸开了双臂（Finale）。<br><img src="./18.jpg" style="width:500px;margin:40px 0"></p><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>「西贡小姐」虽然借助了一个「蝴蝶夫人」的老套故事，极尽一切歌唱和宣泄，嘲讽整个时代人性的虚伪，悲天悯人的大情感收纳着一个小小女人的辛酸之泪.<br>假借中西悲催恋情演绎的他乡故事不过是一个西方意淫的东方爱情和充满嘲讽的所谓的美国梦的结合罢了。</p><p>西贡小姐中，金比蝴蝶夫人巧巧桑更加立体，有血有肉、柔中带刚，会为维护真爱而勇敢杀人，会为内心自由而怒斥情敌，会为孩子再度沦落风尘，表现在Sun and moon中那种婉约，在I’d give my life for you中那种坚毅的在Please中那种渴望和坚守。虽然两者皆以自杀收场，金是悲壮睿智且义无返顾的。</p><p>如果这部风靡全球的歌剧曾经给以无数西方观众以灵魂震撼，在全球化的视野下，他们将如何定位他们的东方，他们将如何想象这朵“东方美学”的西方救赎意味。<br>当然，或许我们不必纠结于这种文化矛盾和生命哲学气息，于音乐来说不应该受精神的绑架；让故事安于它们被叙述的语境吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;音乐剧：西贡小姐（英国/美国 2014年）&lt;/p&gt;
    
    </summary>
    
      <category term="About Me" scheme="https://kisky3.github.io/categories/About-Me/"/>
    
    
      <category term="musical" scheme="https://kisky3.github.io/tags/musical/"/>
    
      <category term="Miss Saigon" scheme="https://kisky3.github.io/tags/Miss-Saigon/"/>
    
  </entry>
  
  <entry>
    <title>Mac iTerm2 powerlevel9k Theme</title>
    <link href="https://kisky3.github.io/2019/10/06/iTerm2/"/>
    <id>https://kisky3.github.io/2019/10/06/iTerm2/</id>
    <published>2019-10-06T14:56:14.000Z</published>
    <updated>2019-11-01T13:26:35.975Z</updated>
    
    <content type="html"><![CDATA[<p>Mac iTerm2的个性主题设置</p><a id="more"></a><h3 id="安装对象"><a href="#安装对象" class="headerlink" title="安装对象"></a>安装对象</h3><p>iTerm2：号称 Mac 下最好的终端工具（嗯，我也这么认为，毕竟我不会别的了）<br>zsh：一款强大的终端工具，能帮助你更高效地编写和执行命令</p><hr><h3 id="安装-iTerm2"><a href="#安装-iTerm2" class="headerlink" title="安装 iTerm2"></a>安装 iTerm2</h3><p>前提：已经安装了 Homebrew.<br>如果你从来没有运行过 brew cask 命令，可以先执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew tap caskroom/cask</span><br></pre></td></tr></table></figure><p>然后开始安装 iTerm2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install iterm2</span><br></pre></td></tr></table></figure><p>安装成功后在 Launchpad 中可以看到有一个新图标出现，打开 iTerm2</p><hr><h3 id="代码配色"><a href="#代码配色" class="headerlink" title="代码配色"></a>代码配色</h3><p>默认的界面还是略显丑陋的，我们来设置一下代码配色吧<br>先检查下终端颜色配置为 xterm-256color，位置在 iTerm2 -&gt; Preferences -&gt; Profiles -&gt; Terminal<br><br><br><img src="./1.png"><br><br><br>然后就可以设置配色了，默认情况下 iTerm2 只有 7 种自带的配色，当然满足不了我们高颜值的需求了.<br>有人就开源了一款叫 iTerm2-Color-Schemes 的配色合集，里面有各种经典、常用的配色方案.<br>这里我在Desktop创建了一个iterm2的目录,再来将配色使用 Git 下载到本地.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir iterm2 &amp;&amp; cd iterm2</span><br><span class="line"></span><br><span class="line">git clone https://github.com/mbadolato/iTerm2-Color-Schemes</span><br></pre></td></tr></table></figure><p>下面需要导入配色方案，选择 schemes 文件夹内的所有配色方案<br><br><br><img src="./2.png"><br><br><br><img src="./3.png"><br><br><br>导入成功后就可以选择一些流行的配色方案了，目前使用的是「Bright Lights」.并且把亮度调暗了一点.</p><hr><h3 id="安装字体"><a href="#安装字体" class="headerlink" title="安装字体"></a>安装字体</h3><p>为什么要安装字体呢？我们电脑的字体其实是可以用的，但是想要图标的这种字体就没法儿了.<br>图标字体其实是非 ASCII 码字体，在 iTerm2 中可以进行配置，所以先要安装这个字体。这款字体叫 nerd-fonts</p><p>使用 brew 安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew tap homebrew/cask-fonts</span><br><span class="line">brew cask install font-hack-nerd-font</span><br></pre></td></tr></table></figure><p>安装成功后需要在 iTerm2 中配置一下:<br>在 iTerm2 -&gt; Preferences -&gt; Profiles -&gt; Text -&gt; Font -&gt; Change Font 栏位中，<br>Text 下面勾选 Use a different font for non-ASCII text，然后在 Non-ASCII font 点击 Change font 修改<br><br><br><img src="./4.png"><br><br><br><img src="./5.png"><br><br><br><img src="./6.png"><br><br></p><p>这里选择的字体是非 ASCII 码字符的字体，不要设置错了！选择好之后关闭即可</p><hr><h3 id="安装-zsh"><a href="#安装-zsh" class="headerlink" title="安装 zsh"></a>安装 zsh</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install zsh</span><br></pre></td></tr></table></figure><br><img src="./7.png"><p>默认的 shell 是 bash，需要修改为 zsh：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo sh -c &quot;echo $(which zsh) &gt;&gt; /etc/shells&quot;</span><br><span class="line">chsh -s $(which zsh)</span><br></pre></td></tr></table></figure><p>修改时会提示你输入密码.</p><p>现在 zsh 安装完成了，安装虽简单，可配置麻烦啊，这你能忍吗？？当然不能！</p><p>于是，oh-my-zsh 出现了，有了它 zsh 配置起来就方便多了，来安装一下它<br><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure><br><img src="./8.png"><br>安装好之后可以看到界面发生了一点点变化，同时会产生一个名为 .zshrc 的配置文件，在用户家目录下面，我们以后主要就是修改它了<hr><h3 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h3><p>上面看到界面发生变化是因为 oh-my-zsh 默认帮我们配置了一个终端主题，你可以打开 ~/.zshrc 文件看看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZSH_THEME=&quot;robbyrussell&quot;</span><br></pre></td></tr></table></figure><p>这些主题文件存储在 ~/.oh-my-zsh/themes 目录下，你也可以使用其他的。</p><p>为了实现前面想要的酷炫的终端主题，有人写了一个名为 powerlevel9k 的高颜值主题。</p><p>先将主题下载到本地的主题目录中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/custom/themes/powerlevel9k</span><br></pre></td></tr></table></figure><p>然后修改 zsh 主题配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ZSH_THEME=&quot;powerlevel9k/powerlevel9k&quot;</span><br><span class="line">POWERLEVEL9K_MODE=&quot;nerdfont-complete&quot;</span><br><span class="line"># Customise the Powerlevel9k prompts</span><br><span class="line">POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(ssh dir vcs newline status)</span><br><span class="line">POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=()</span><br><span class="line">POWERLEVEL9K_PROMPT_ADD_NEWLINE=true</span><br></pre></td></tr></table></figure><ul><li>POWERLEVEL9K_MODE：设置 powerlevel9k 的字体是我们前面下载的</li><li>POWERLEVEL9K_LEFT_PROMPT_ELEMENTS：将前面居右的几个元素放在左边了</li><li>POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS：右边不放置任何元素（如果你喜欢在右边也可以加）</li><li>POWERLEVEL9K_PROMPT_ADD_NEWLINE：在每个提示之前添加换行符</li></ul><p>修改配置文件后一定要记得让配置生效，使用 source 命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure><p>现在来看看终端变成什么样子了！<br><br><br><img src="./9.png"><br><br><br>大功告成！！！</p><hr><h3 id="踩的坑"><a href="#踩的坑" class="headerlink" title="踩的坑"></a>踩的坑</h3><p>安装了oh-my-zsh插件后发现之前在.bash_profile自定义的一些内容都失效了,hexo无法启动报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zsh: command not found: hexo</span><br></pre></td></tr></table></figure><p>问题分析:<br>oh-my-zsh有自己的配置文件，覆盖了.bash_profile的内容</p><p>解决方法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.zshrc</span><br></pre></td></tr></table></figure><p>在最后一行加入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><p>这样就可以”继承”.bash_profile的配置了<br>执行source ~/.zshrc，让配置生效，重新使用，一切OK！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Mac iTerm2的个性主题设置&lt;/p&gt;
    
    </summary>
    
      <category term="System Setting" scheme="https://kisky3.github.io/categories/System-Setting/"/>
    
    
      <category term="setting" scheme="https://kisky3.github.io/tags/setting/"/>
    
      <category term="iTerm2" scheme="https://kisky3.github.io/tags/iTerm2/"/>
    
      <category term="powerlevel9k" scheme="https://kisky3.github.io/tags/powerlevel9k/"/>
    
  </entry>
  
  <entry>
    <title>About VSCode Extension （Plus Tips）</title>
    <link href="https://kisky3.github.io/2019/10/05/Extension/"/>
    <id>https://kisky3.github.io/2019/10/05/Extension/</id>
    <published>2019-10-05T10:53:42.000Z</published>
    <updated>2019-10-06T06:50:48.612Z</updated>
    
    <content type="html"><![CDATA[<p>关于VSCode常用的扩展插件（以及设定技巧）</p><a id="more"></a><h3 id="1-vscode-icons"><a href="#1-vscode-icons" class="headerlink" title="1. vscode-icons"></a>1. <a href="https://marketplace.visualstudio.com/items?itemName=vscode-icons-team.vscode-icons" target="_blank" rel="noopener">vscode-icons</a></h3><p>给项目文件添加icon.</p><img src="./1.gif"><hr><h3 id="2-GitLens"><a href="#2-GitLens" class="headerlink" title="2. GitLens"></a>2. <a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens" target="_blank" rel="noopener">GitLens</a></h3><p>能够以commit为单位在文件内将修改标示出来.甩锅必备.</p><img src="./2.gif"><hr><h3 id="3-Prettier"><a href="#3-Prettier" class="headerlink" title="3. Prettier"></a>3. <a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode" target="_blank" rel="noopener">Prettier</a></h3><p>自动调整code的format，默认快捷键是alt（option） + shift + f</p><img src="./3.jpg"><hr><h3 id="4-Git-History"><a href="#4-Git-History" class="headerlink" title="4.Git History"></a>4.<a href="https://marketplace.visualstudio.com/items?itemName=donjayamanne.githistory" target="_blank" rel="noopener">Git History</a></h3><p>方便看git log</p><img src="./4.gif"><hr><h3 id="5-Bracket-Pair-Colorizer"><a href="#5-Bracket-Pair-Colorizer" class="headerlink" title="5.Bracket Pair Colorizer"></a>5.<a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer" target="_blank" rel="noopener">Bracket Pair Colorizer</a></h3><p>能够为括号标注出不同的颜色！</p><img src="./5.jpg"><hr><h3 id="6-TODO-Highlight"><a href="#6-TODO-Highlight" class="headerlink" title="6. TODO Highlight"></a>6. <a href="https://marketplace.visualstudio.com/items?itemName=wayou.vscode-todo-highlight" target="_blank" rel="noopener">TODO Highlight</a></h3><p>为你的TODO和FIXME之类的comment添加高亮，系统只能帮你到这份上了，记得以后要修复啊！</p><img src="./6.png"><hr><h3 id="7-Path-Autocomplete"><a href="#7-Path-Autocomplete" class="headerlink" title="7.  Path Autocomplete"></a>7. <a href="https://marketplace.visualstudio.com/items?itemName=ionutvmi.path-autocomplete" target="_blank" rel="noopener"> Path Autocomplete</a></h3><p>为你补全path<br><img src="./7.gif"></p><hr><h3 id="8-Trailing-Spaces"><a href="#8-Trailing-Spaces" class="headerlink" title="8. Trailing Spaces"></a>8. <a href="https://marketplace.visualstudio.com/items?itemName=shardulm94.trailing-spaces" target="_blank" rel="noopener">Trailing Spaces</a></h3><p>强调行内不要的space.</p><img src="./8.jpg"><hr><h3 id="9-indent-rainbow"><a href="#9-indent-rainbow" class="headerlink" title="9. indent-rainbow"></a>9. <a href="https://marketplace.visualstudio.com/items?itemName=oderwat.indent-rainbow" target="_blank" rel="noopener">indent-rainbow</a></h3><p> 给你的缩进添加颜色！</p> <img src="./9.png"><hr><h3 id="其他设定"><a href="#其他设定" class="headerlink" title="其他设定"></a>其他设定</h3><p>[Code] =&gt; [Preferences] =&gt; [Settings] ,直接编辑json 或者从GUI搜索</p><h5 id="1-最终行的自动改行"><a href="#1-最终行的自动改行" class="headerlink" title="1.最终行的自动改行"></a>1.最终行的自动改行</h5><p>settings.json</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"files.insertFinalNewline"</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure><hr><h5 id="2-特殊字符的显示"><a href="#2-特殊字符的显示" class="headerlink" title="2.特殊字符的显示"></a>2.特殊字符的显示</h5><p>用于防止向github提交README时产生乱码的现象</p><p>settings.json</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"editor.renderControlCharacters"</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure><hr><h5 id="3-关于自动换行"><a href="#3-关于自动换行" class="headerlink" title="3.关于自动换行"></a>3.关于自动换行</h5><p>过长的时候进行自动换行显示</p><p>settings.json</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"editor.wordWrap"</span>: <span class="string">"on"</span></span><br></pre></td></tr></table></figure><hr><h5 id="4-自动删除不需要的行"><a href="#4-自动删除不需要的行" class="headerlink" title="4.自动删除不需要的行"></a>4.自动删除不需要的行</h5><p>settings.json</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"files.trimFinalNewlines"</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于VSCode常用的扩展插件（以及设定技巧）&lt;/p&gt;
    
    </summary>
    
      <category term="System Setting" scheme="https://kisky3.github.io/categories/System-Setting/"/>
    
    
      <category term="setting" scheme="https://kisky3.github.io/tags/setting/"/>
    
      <category term="extension" scheme="https://kisky3.github.io/tags/extension/"/>
    
      <category term="VSCode" scheme="https://kisky3.github.io/tags/VSCode/"/>
    
  </entry>
  
  <entry>
    <title>Deploying React Applications to Github Pages</title>
    <link href="https://kisky3.github.io/2019/09/30/Pages/"/>
    <id>https://kisky3.github.io/2019/09/30/Pages/</id>
    <published>2019-09-29T16:46:01.000Z</published>
    <updated>2019-11-10T14:54:36.778Z</updated>
    
    <content type="html"><![CDATA[<p>把React项目部署到Github Page线上环境</p><a id="more"></a><h4 id="1-在github上新建仓库"><a href="#1-在github上新建仓库" class="headerlink" title="1. 在github上新建仓库"></a>1. 在github上新建仓库</h4><p>貌似必须要新建仓库，如果在已有仓库的分支下想预览不成功（因为并不是master，所以也会对别的分支有影响.</p><hr><h4 id="2-将本地代码同步"><a href="#2-将本地代码同步" class="headerlink" title="2. 将本地代码同步"></a>2. 将本地代码同步</h4><p>参照新建仓库里的说明初始化并push就好.</p><hr><h4 id="3-修改本地React项目的-package-json文件"><a href="#3-修改本地React项目的-package-json文件" class="headerlink" title="3. 修改本地React项目的 package.json文件"></a>3. 修改本地React项目的 package.json文件</h4><h5 id="配置homepage"><a href="#配置homepage" class="headerlink" title="配置homepage"></a>配置homepage</h5><p>这里需要把你的github仓库地址稍微修改一下，例如我的”homepage”: “<a href="https://Kisky3.github.io/react-todolist&quot;">https://Kisky3.github.io/react-todolist&quot;</a>.</p><h5 id="配置发布选项"><a href="#配置发布选项" class="headerlink" title="配置发布选项"></a>配置发布选项</h5><p>在scripts里添加以下两行</p><p>predeploy:是将你的项目预编译成静态文件放在build文件夹<br>deploy:是使用gh-pages 部署你的build文件夹下的内容.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="string">"predeploy"</span>: <span class="string">"npm run build"</span>,</span><br><span class="line">  <span class="string">"deploy"</span>: <span class="string">"gh-pages -d build"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>修改后的package.json</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"todolist"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"0.1.0"</span>,</span><br><span class="line">  <span class="string">"homepage"</span>: <span class="string">"https://Kisky3.github.io/react-todolist"</span>,</span><br><span class="line">  <span class="string">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"react"</span>: <span class="string">"^16.4.1"</span>,</span><br><span class="line">    <span class="string">"react-dom"</span>: <span class="string">"^16.4.1"</span>,</span><br><span class="line">    <span class="string">"react-scripts"</span>: <span class="string">"1.1.4"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"react-scripts start"</span>,</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"react-scripts build"</span>,</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"react-scripts test --env=jsdom"</span>,</span><br><span class="line">    <span class="string">"eject"</span>: <span class="string">"react-scripts eject"</span>,</span><br><span class="line">    <span class="string">"predeploy"</span>: <span class="string">"npm run build"</span>,</span><br><span class="line">    <span class="string">"deploy"</span>: <span class="string">"gh-pages -d build"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"gh-pages"</span>: <span class="string">"^2.0.1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"browserslist"</span>: &#123;</span><br><span class="line">    <span class="string">"production"</span>: [</span><br><span class="line">      <span class="string">"&gt;0.2%"</span>,</span><br><span class="line">      <span class="string">"not dead"</span>,</span><br><span class="line">      <span class="string">"not op_mini all"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"development"</span>: [</span><br><span class="line">      <span class="string">"last 1 chrome version"</span>,</span><br><span class="line">      <span class="string">"last 1 firefox version"</span>,</span><br><span class="line">      <span class="string">"last 1 safari version"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="安装-gh-pages"><a href="#安装-gh-pages" class="headerlink" title="安装 gh-pages"></a>安装 gh-pages</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gh-pages --save-dev</span><br></pre></td></tr></table></figure><h5 id="部署项目到github-page上"><a href="#部署项目到github-page上" class="headerlink" title="部署项目到github page上"></a>部署项目到github page上</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run deploy</span><br></pre></td></tr></table></figure><hr><h4 id="4-GIthub上的分支切换"><a href="#4-GIthub上的分支切换" class="headerlink" title="4. GIthub上的分支切换"></a>4. GIthub上的分支切换</h4><p>配置完之后，打开github上的仓库，你会发现原先的项目多了一个gh-pages分支，里面存放的是我们打包编译完成之后的静态文件。<br>一定要手动切换到gh-pages分支 而不是master！</p><img src="./1.png" style="width:500px;margin:40px 0"><p>再切换到setting下，我们可以看到现在项目已经被成功部署到 <a href="https://Kisky3.github.io/react-todolist">https://Kisky3.github.io/react-todolist</a> 上了</p><img src="./2.png" style="width:500px;margin:40px 0"><p>打开 <a href="https://Kisky3.github.io/react-todolist">https://Kisky3.github.io/react-todolist</a> 检验是否能预览</p><img src="./3.png" style="width:500px;margin:40px 0">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;把React项目部署到Github Page线上环境&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="react" scheme="https://kisky3.github.io/tags/react/"/>
    
      <category term="github pages" scheme="https://kisky3.github.io/tags/github-pages/"/>
    
  </entry>
  
  <entry>
    <title>Install homebrew</title>
    <link href="https://kisky3.github.io/2019/09/29/Homebrew/"/>
    <id>https://kisky3.github.io/2019/09/29/Homebrew/</id>
    <published>2019-09-29T14:03:54.000Z</published>
    <updated>2019-10-05T17:31:37.267Z</updated>
    
    <content type="html"><![CDATA[<p>安装homebrew</p><a id="more"></a><h3 id="1-AppStore下载Xcode"><a href="#1-AppStore下载Xcode" class="headerlink" title="1. AppStore下载Xcode"></a>1. AppStore下载Xcode</h3><h3 id="2-global-install"><a href="#2-global-install" class="headerlink" title="2. global install"></a>2. global install</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure><h3 id="3-安装Homebrew"><a href="#3-安装Homebrew" class="headerlink" title="3.安装Homebrew"></a>3.安装Homebrew</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure><h3 id="4-确认"><a href="#4-确认" class="headerlink" title="4. 确认"></a>4. 确认</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew doctor</span><br></pre></td></tr></table></figure><p>没有安装 yarn。create-react-app 需要你事先安装好了 yarn，如果你没有安装，那就需要去下载 安装即可。如果你没安装 yarn，会自动降级为 npm.<br>Mac 安装 yarn 的方式很简单: brew install yarn 即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;安装homebrew&lt;/p&gt;
    
    </summary>
    
      <category term="System Setting" scheme="https://kisky3.github.io/categories/System-Setting/"/>
    
    
      <category term="tip" scheme="https://kisky3.github.io/tags/tip/"/>
    
      <category term="homebrew" scheme="https://kisky3.github.io/tags/homebrew/"/>
    
  </entry>
  
  <entry>
    <title>Elisabeth（musical 2005）</title>
    <link href="https://kisky3.github.io/2019/09/26/Elisabeth/"/>
    <id>https://kisky3.github.io/2019/09/26/Elisabeth/</id>
    <published>2019-09-26T13:24:32.000Z</published>
    <updated>2019-09-29T10:34:32.378Z</updated>
    
    <content type="html"><![CDATA[<p>音乐剧：伊丽莎白（德 2005年）</p><a id="more"></a><p>《伊丽莎白》是以巴伐利亚公主、奥地利皇后与匈牙利王后伊丽莎白·亚美莉·欧根妮（Elisabeth Amalie Eugenie）的一生为素材所创作的德语音乐剧。</p><p>这部音乐剧讲述了奥地利与匈牙利王后伊丽莎白（茜茜公主）的故事，从她1854年的订婚和结婚开始，直至她在1898年被刺杀为止。<br>通过对她对死亡越来越迷恋的刻画，反映出她的婚姻和她的帝国走向衰亡的过程。</p><h3 id="第一幕"><a href="#第一幕" class="headerlink" title="第一幕"></a>第一幕</h3><p>剧的开场为鲁凯尼在死后被审判。鲁凯尼声称自己刺杀伊丽莎白只是为了满足她的愿望，因为她与死亡（Der Tod）相爱。鲁凯尼把伊丽莎白生活的时代的亡魂叫来为他作证。自此拉开鲁凯尼讲述伊丽莎白一生的故事的序幕。</p><p>伊丽莎白在自由自在、无忧无虑的环境中长大。当一次因为大胆调皮而从高处坠下时，她首次与死亡相遇，开始了她一生中与死亡之间既爱又恨的关系。</p><img src="./1.jpg" style="width:500px;margin:40px 0"><img src="./6.jpg" style="width:500px;margin:40px 0">一开始就可以见到伊丽莎白想要的其实是做梦，写诗，顺风骑马般的自由，只可惜造化弄人<p>伊丽莎白的姐姐海伦娜被长辈们挑选为奥地利皇帝弗兰兹·约瑟夫的妻子，但弗兰兹·约瑟夫自己却选择了伊丽莎白。<br><img src="./2.jpg" style="width:500px;margin:40px 0"><br>婚礼的全程暗色调揭开了着从此灰暗婚姻的序幕</p><p>在婚礼时，死亡劝诱伊丽莎白，但被伊丽莎白拒绝。</p><img src="./3.jpg" style="width:500px;margin:40px 0">伊丽莎白在婚礼上与死神共舞，从此王朝终结故事转折开始<p>与皇帝成婚后，这段看似童话般的婚姻很快出现问题。伊丽莎白无法适应宫廷生活，感觉被禁锢，被弗兰兹·约瑟夫之母索菲精神虐待，并感觉缺少丈夫的关心。伊丽莎白与弗兰兹·约瑟夫的孩子鲁道夫出生后，因为孩子的养育问题，伊丽莎白与索菲再次发生剧烈冲突。弗兰兹·约瑟夫无法解开婆媳之间的不和。</p><p>与此同时，奥地利人民的生活陷入贫困，而伊丽莎白却过着骄奢的生活。（牛奶歌在此响起）鲁凯尼对此予以讽刺。</p><p>伊丽莎白与丈夫争执后，灵魂呼唤着自由.<br><img src="./4.jpg" style="width:500px;margin:40px 0"><br><img src="./5.jpg" style="width:500px;margin:40px 0"><br>（死神真的太魅惑）</p><hr><h3 id="第二幕"><a href="#第二幕" class="headerlink" title="第二幕"></a>第二幕</h3><p>（一开始的管风琴串戏到歌剧魅影…）<br>死神再次诱惑着伊丽莎白，伊丽莎白与其共舞，但最终拒绝了他。（当我想跳舞在此响起）<br><img src="./7.jpg" style="width:500px;margin:40px 0"><br><img src="./8.jpg" style="width:500px;margin:40px 0"></p><p>童年的鲁道夫被与母亲分离，在偌大宫殿的黑暗中只有死亡的陪伴，因此把死亡当作朋友。<br><img src="./9.jpg" style="width:500px;margin:40px 0"></p><p>伊丽莎白参观疯人院后深受触动，灵魂再次呼唤自由。</p><p>索菲和大臣们为了减弱伊丽莎白对弗兰兹·约瑟夫的影响力，设计让弗兰兹·约瑟夫接触别的女人。大臣前往妓院挑选女人。死亡扮成医生，告知伊丽莎白她已从丈夫处染上性病。弗兰兹·约瑟夫与索菲发生激烈争吵。<br>经历了一系列变化，伊丽莎白变成了冷酷的女人。她抛开了皇宫、责任、孩子、家人，经年在世界各地独自旅行。</p><img src="./10.jpg" style="width:500px;margin:40px 0">长大后的鲁道夫与父亲政见不合，死亡鼓励他对抗父亲。<p>鲁道夫与匈牙利人的合谋被弗兰兹·约瑟夫发现。鲁道夫向母亲伊丽莎白求助，但被伊丽莎白冷淡地忽略了。鲁道夫被死亡夺取了性命，自杀了。伊丽莎白对儿子的死非常伤心。</p><p>在沉没的世界之船的甲板上，弗兰兹·约瑟夫与伊丽莎白会面，双方取得谅解，但已经物是人非。世界也已大变，欧洲皇室贵族不断没落或被推翻。奥匈帝国大厦将倾。<br><img src="./11.jpg" style="width:500px;margin:40px 0"><br>鲁凯尼刺杀伊丽莎白。伊丽莎白终于投入死亡怀抱。故事完结！</p><img src="./12.jpg" style="width:500px;margin:40px 0"> （最后的死神之吻真的太帅了）<hr><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>伊丽莎白公主并不是人们一般理解意义上的规矩的贵族女性。</p><p>她并不美丽，瘦小且举止莽撞。（为什么画像和音乐剧选角这么美我也不知道）<br>她不会弹琴，早期也不知道如何祝酒干杯，甚至不参加人生第一场舞会而躲在自己的房间里写诗。<br>皇家对公主的礼仪要求是举止稳重，而茜茜公主则是步履如飞。</p><p>她乐于在自然天性中成长，妄想做梦，写诗，顺风骑马。<br>而她的家族则要求她成熟稳重、思虑周全、老成持重，他们不许茜茜公主笑，因为这会露出公主的黄牙。</p><p>这是为何伊丽莎白一生都在与死神抗争的原因，她企图放飞被囚禁的灵魂，奈何却越陷越深。</p><p>她倔强地一次次地拒绝死神的诱惑，但或许是因为那一份身不由己的责任感她从未成功摆脱过那份阴影。</p><p>最终她并非死于自杀，而是遭到了刺杀。鲁凯尼在最开始的声辩时就说了，她其实是渴望解脱的，而最终她解脱了。</p><p>Elisabeth的意义绝不止于一部人物传记音乐剧。这作品也蕴含了某种私人与历史的二重性的特质，将皇后个人的悲剧和世纪之交的奥匈帝国以至大德意志文化圈的悲剧隐秘地连为一体。</p><p>伊丽莎白之追求极致自由而不得、反被其追求而禁锢，和德奥文化中的精神洁癖式地追求自由，反而被民族主义裹挟、在一战前终于面临苦涩的失败，有某种异曲同工的相似性。</p><p>「Die Schatten werden laenger」这首歌就唱出了一切。死神也不仅仅是伊丽莎白的死神，也是奥匈帝国（乃至整个君主政体）被民族主义推翻、日薄西山的象征。</p><p>也就是说，一个人追求自由，最终成了自己的精神洁癖的奴隶；一个民族追逐自由和崛起（的意识形态），最后成了民族主义的奴隶，这两样东西某种程度上是相似的。</p><p>时代洪流 造化弄人 奈何奈何。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;音乐剧：伊丽莎白（德 2005年）&lt;/p&gt;
    
    </summary>
    
      <category term="About Me" scheme="https://kisky3.github.io/categories/About-Me/"/>
    
    
      <category term="musical" scheme="https://kisky3.github.io/tags/musical/"/>
    
      <category term="Elisabeth" scheme="https://kisky3.github.io/tags/Elisabeth/"/>
    
  </entry>
  
  <entry>
    <title>Webpack Getting Started</title>
    <link href="https://kisky3.github.io/2019/09/14/Started/"/>
    <id>https://kisky3.github.io/2019/09/14/Started/</id>
    <published>2019-09-14T09:28:10.000Z</published>
    <updated>2019-10-05T11:09:38.969Z</updated>
    
    <content type="html"><![CDATA[<p>Webpack的环境设置</p><a id="more"></a><p>2018年8月25日更新，目前 webpack 已经更新值 4.17.1！不用配置很复杂的config也能运行了!!今天搭建webpack环境时顺便记录一下.</p><h3 id="什么是webpack"><a href="#什么是webpack" class="headerlink" title="什么是webpack"></a>什么是webpack</h3><blockquote><p>webpack is used to compile JavaScript modules. Once installed, you can interface with webpack either from its CLI or API. If you’re still new to webpack, please read through the core concepts and this comparison to learn why you might use it over the other tools that are out in the community.</p></blockquote><br>WebPack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其转换和打包为合适的格式供浏览器使用。<hr><h3 id="为什么要使用webpack"><a href="#为什么要使用webpack" class="headerlink" title="为什么要使用webpack"></a>为什么要使用webpack</h3><p>很多人开发了各种优秀的 JavaScript 模块或组件，我们不想重复发明轮子，而是想直接利用别人的模块，就是类似 require 或 include 这样的机制，把别人的模块引入进来，这就是modules(模块化).<br>但是 JavaScript 又没有 类或包 这样的概念，那应该如何做呢？如何去引入别人的模块？引入之后保证各种依赖关系不出错？这就是 webpack 要解决的问题。<br>Webpack的处理速度更快更直接，能打包更多不同类型的文件。</p><p><a href="https://webpack.js.org/comparison/" target="_blank" rel="noopener">Webpack与其他打包工具的比较</a><br><a href="https://webpack.js.org/concepts/" target="_blank" rel="noopener">Webpack的核心原理</a></p><hr><h3 id="Webpack的安装（版本4-40-1）"><a href="#Webpack的安装（版本4-40-1）" class="headerlink" title="Webpack的安装（版本4.40.1）"></a>Webpack的安装（版本4.40.1）</h3><p>1.首先创建自己的文件夹，初始化npm，安装本地化webpack并安装webpack-cli(一个能在命令行运行webpack的工具)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir webpack-demo</span><br><span class="line">cd webpack-demo</span><br><span class="line">npm init -y</span><br><span class="line">npm install webpack --save-dev</span><br><span class="line">npm install webpack-cli --save-dev</span><br></pre></td></tr></table></figure><p>2.创建以下的文件结构以及内容</p><p>project:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  webpack-demo</span><br><span class="line">  |- package.json</span><br><span class="line">+ |- index.html</span><br><span class="line">+ |- <span class="regexp">/src</span></span><br><span class="line"><span class="regexp">+   |- index.js</span></span><br></pre></td></tr></table></figure><p>src/index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">component</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> element = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Lodash, currently included via a script, is required for this line to work</span></span><br><span class="line">  element.innerHTML = _.join([<span class="string">'Hello'</span>, <span class="string">'webpack'</span>], <span class="string">' '</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(component());</span><br></pre></td></tr></table></figure><p>imdex.html</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;Getting Started&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script src='https:/</span><span class="regexp">/unpkg.com/</span>lodash@<span class="number">4.16</span><span class="number">.6</span><span class="string">'&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">  &lt;/head&gt;</span></span><br><span class="line"><span class="string">  &lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;script src='</span>./src/index.js<span class="string">'&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">  &lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><p>我们还想需要编辑package.json文件，使其我们的package私有化，并同时移除main入口，防止代码误公开。</p><p>package.json</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"webpack-demo"</span>,</span><br><span class="line">    <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">    <span class="string">"description"</span>: <span class="string">""</span>,</span><br><span class="line">+   <span class="string">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">-   <span class="string">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">    <span class="string">"scripts"</span>: &#123;</span><br><span class="line">      <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"keywords"</span>: [],</span><br><span class="line">    <span class="string">"author"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">    <span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">      <span class="string">"webpack"</span>: <span class="string">"^4.20.2"</span>,</span><br><span class="line">      <span class="string">"webpack-cli"</span>: <span class="string">"^3.1.2"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"dependencies"</span>: &#123;&#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这个例子与&lt;script&gt;标签有默认依存关系，我们的index.js文件是依存于lodash并且在运行前是包含在网页里的.<br>这是因为index.js并没有明确声明需要lodash，它只是假定默认了全局变量’_’的存在.<br>所以我们需要创建打包.</p><hr><h3 id="创建打包"><a href="#创建打包" class="headerlink" title="创建打包"></a>创建打包</h3><p>在以上的步骤中我们微调整了文件树结构，将源代码从发布代码中分离开.<br>源代码就是我们可以直接编辑和修改的代码，发布代码就是通过压缩和最优化之后,在打包时最终输出的代码.它最终将会被加载到浏览器上.</p><p>project</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  webpack-demo</span><br><span class="line">  |- package.json</span><br><span class="line">+ |- <span class="regexp">/dist</span></span><br><span class="line"><span class="regexp">+   |- index.html</span></span><br><span class="line"><span class="regexp">- |- index.html</span></span><br><span class="line"><span class="regexp">  |- /</span>src</span><br><span class="line">    |- index.js</span><br></pre></td></tr></table></figure><p>为了打包依存于index.js的lodash，我们需要安装本地包.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save lodash</span><br></pre></td></tr></table></figure><p>然后引用lodash到我们的script里<br>src/index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+ <span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">'lodash'</span>;</span><br><span class="line">+</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">component</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> element = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line"></span><br><span class="line">-   <span class="comment">// Lodash, currently included via a script, is required for this line to work</span></span><br><span class="line">    element.innerHTML = _.join([<span class="string">'Hello'</span>, <span class="string">'webpack'</span>], <span class="string">' '</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(component());</span><br></pre></td></tr></table></figure><p>现在，因为我们已经打包了script,我们需要更新index.html文件，删除原有的lodash&lt;script&gt;并import之后加入另一个&lt;script&gt;来加载打包.(替换/src文件)</p><hr><p>dist/index.html</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  &lt;!doctype html&gt;</span><br><span class="line">  &lt;html&gt;</span><br><span class="line">   &lt;head&gt;</span><br><span class="line">     &lt;title&gt;Getting Started&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">-    &lt;script src="https:/</span><span class="regexp">/unpkg.com/</span>lodash@<span class="number">4.16</span><span class="number">.6</span><span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">   &lt;/head&gt;</span></span><br><span class="line"><span class="string">   &lt;body&gt;</span></span><br><span class="line"><span class="string">-    &lt;script src="</span>./src/index.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">+    &lt;script src="</span>main.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">   &lt;/body&gt;</span></span><br><span class="line"><span class="string">  &lt;/html&gt;</span></span><br></pre></td></tr></table></figure><p>在这个设置中，index.js 显式要求引入的 lodash 必须存在，然后将它绑定为 _（没有全局作用域污染）。通过声明模块所需的依赖，webpack 能够利用这些信息去构建依赖图，然后使用图生成一个会以正确顺序执行的优化 bundle。</p><p>可以这样说，执行 npx webpack，会将我们的脚本 src/index.js 作为 入口起点，也会生成 dist/main.js 作为 输出。Node 8.2/npm 5.2.0 以上版本提供的 npx 命令，可以运行在开始安装的 webpack package 中的 webpack 二进制文件（即 ./node_modules/.bin/webpack）</p><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">npx webpack</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">Built at: <span class="number">13</span>/<span class="number">06</span>/<span class="number">2018</span> <span class="number">11</span>:<span class="number">52</span>:<span class="number">07</span></span><br><span class="line">  Asset      Size  Chunks             Chunk Names</span><br><span class="line">main.js  <span class="number">70.4</span> KiB       <span class="number">0</span>  [emitted]  main</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">WARNING <span class="keyword">in</span> configuration(配置警告)</span><br><span class="line">The <span class="string">'mode'</span> option has not been <span class="keyword">set</span>, webpack will fallback to 'production' for this value. Set 'mode' option to 'development' or 'production' to enable defaults for each environment.</span><br><span class="line">You can also <span class="keyword">set</span> it to 'none' to disable any default behavior. Learn more: https://webpack.js.org/concepts/mode/('mode' 选项还未设置，webpack 会将其值回退至 'production'。将 'mode' 选项设置为 'development' 或 'production'，来启用对应环境的默认优化设置。)</span><br></pre></td></tr></table></figure><p>在浏览器中打开 index.html，如果一切正常，你应该能看到以下文本：’Hello webpack’</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Webpack的环境设置&lt;/p&gt;
    
    </summary>
    
      <category term="System Setting" scheme="https://kisky3.github.io/categories/System-Setting/"/>
    
    
      <category term="webpack" scheme="https://kisky3.github.io/tags/webpack/"/>
    
      <category term="getting started" scheme="https://kisky3.github.io/tags/getting-started/"/>
    
  </entry>
  
  <entry>
    <title>About jQuery ajax &amp; jsonp</title>
    <link href="https://kisky3.github.io/2019/08/30/Ajax/"/>
    <id>https://kisky3.github.io/2019/08/30/Ajax/</id>
    <published>2019-08-30T11:22:41.000Z</published>
    <updated>2019-10-04T15:19:39.363Z</updated>
    
    <content type="html"><![CDATA[<p>关于jQuery ajax &amp; jsonp</p><a id="more"></a><h3 id="jQuery-ajax-settings"><a href="#jQuery-ajax-settings" class="headerlink" title="jQuery.ajax([settings])"></a>jQuery.ajax([settings])</h3><p>我们可以用ajax发送了请求(get/post)</p><p>ajax方法提供了几个常用的setting</p><ul><li><p>async：默认设置下，所有请求均为异步请求（也就是说这是默认设置为 true ）。如果需要发送同步请求，请将此选项设置为 false.</p></li><li><p>beforeSend：请求发送前的回调函数，用来修改请求发送前jqXHR对象，此功能用来设置自定义 HTTP 头信息，等等。该jqXHR和设置对象作为参数传递</p></li><li><p>cache：如果设置为 false ，浏览器将不缓存此页面。注意: 设置cache为 false将在 HEAD和GET请求中正常工作。它的工作原理是在GET请求参数中附加”timestamp”</p></li><li><p>context：这个对象用于设置Ajax相关回调函数的上下文。 默认情况下，这个上下文是一个ajax请求使用的参数设置对象.</p></li><li><p>data：发送到服务器的数据。将自动转换为请求字符串格式。GET 请求中将附加在 URL 后面，POST请求作为表单数据.</p></li><li><p>headers：一个额外的{键:值}对映射到请求一起发送。此设置会在beforeSend 函数调用之前被设置 ;因此，请求头中的设置值，会被beforeSend 函数内的设置覆盖</p></li><li><p>method：HTTP 请求方法 (比如：”POST”, “GET “, “PUT”，1.9之前使用“type”)。    </p></li></ul><p>了解了这些参数，使用jQuery处理ajax请求就简单了</p><p>例子:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  method: <span class="string">"POST"</span>,</span><br><span class="line">  url: <span class="string">"some.php"</span>,</span><br><span class="line">  data: &#123; <span class="attr">name</span>: <span class="string">"John"</span>, <span class="attr">location</span>: <span class="string">"Boston"</span> &#125;</span><br><span class="line">&#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params"> msg </span>) </span>&#123;</span><br><span class="line">  alert( <span class="string">"Data Saved: "</span> + msg );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h3 id="jQuery-get-settings-jQuery-post-settings"><a href="#jQuery-get-settings-jQuery-post-settings" class="headerlink" title="jQuery.get( [settings] ) / jQuery.post( [settings ] )"></a>jQuery.get( [settings] ) / jQuery.post( [settings ] )</h3><p>这两个方法专门用来处理get和post请求,<br>dataType：从服务器返回的预期的数据类型。默认：智能猜测（xml, json, script, 或 html）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  url: url,</span><br><span class="line">  data: data,</span><br><span class="line">  success: success,</span><br><span class="line">  dataType: dataType</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">  type: <span class="string">"POST"</span>,</span><br><span class="line">  url: url,</span><br><span class="line">  data: data,</span><br><span class="line">  success: success,</span><br><span class="line">  dataType: dataType</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h3 id="jQuery-getJSON-url-data-success-data-textStatus-jqXHR"><a href="#jQuery-getJSON-url-data-success-data-textStatus-jqXHR" class="headerlink" title="jQuery.getJSON( url [,data] [success(data, textStatus, jqXHR)])"></a>jQuery.getJSON( url [,data] [success(data, textStatus, jqXHR)])</h3><p>使用一个HTTP GET请求从服务器加载JSON编码的数据，这是一个Ajax函数的缩写，这相当于:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  dataType: <span class="string">"json"</span>,</span><br><span class="line">  url: url,</span><br><span class="line">  data: data,</span><br><span class="line">  success: success</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于jQuery ajax &amp;amp; jsonp&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="jQuery" scheme="https://kisky3.github.io/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>About jQuery animation</title>
    <link href="https://kisky3.github.io/2019/08/30/Animation/"/>
    <id>https://kisky3.github.io/2019/08/30/Animation/</id>
    <published>2019-08-30T10:37:21.000Z</published>
    <updated>2019-09-10T11:21:47.486Z</updated>
    
    <content type="html"><![CDATA[<p>关于jQuery动画API</p><a id="more"></a><h3 id="jQuery-主要的动画控制API"><a href="#jQuery-主要的动画控制API" class="headerlink" title="jQuery 主要的动画控制API"></a>jQuery 主要的动画控制API</h3><p>1 .show()<br>2 .hide()<br>3 .slideUp<br>4 .slideDown<br>5 .slideToggle<br>6 .fadeIn<br>7 .fadeOut<br>8 .animate</p><p>如上函数如何使用？演示使用方式</p><hr><h4 id="hide"><a href="#hide" class="headerlink" title=".hide()"></a>.hide()</h4><p>.hide([duration ] [,easing ] [,complete ])<br>用于隐藏元素，没有参数的时候等同于直接设置display属性,当我们给hide设置事件时：hide(2000)会有一个消失的过程<br>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  div &#123;</span><br><span class="line">    background:#ccc;</span><br><span class="line">    width: <span class="number">100</span>px;</span><br><span class="line">    height: <span class="number">100</span>px;</span><br><span class="line">    border: <span class="number">1</span>px solid;</span><br><span class="line">  &#125;</span><br><span class="line">  &lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt; </span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(<span class="string">'div'</span>).hide()  <span class="comment">// ==  $('.target').css('display', 'none')</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="show"><a href="#show" class="headerlink" title=".show()"></a>.show()</h4><p>.show( [duration ] [, easing ] [, complete ] )<br>用于显示元素，用法和hide类似给显示元素设置一个现实的时间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).hide(<span class="number">2000</span>)  <span class="comment">// 隐藏时间为2s</span></span><br><span class="line">$(<span class="string">'div'</span>).show(<span class="number">2000</span>) <span class="comment">//显示时间为2s</span></span><br></pre></td></tr></table></figure><h4 id="slideUp"><a href="#slideUp" class="headerlink" title=".slideUp"></a>.slideUp</h4><p>.slideUp( [duration ] [, easing ] [, complete ] )<br>用滑动动画隐藏一个匹配元素，方法将给匹配元素的高度的动画，这会导致页面的下面部分滑上去，当一个隐藏动画后，高度值达到0的时候，display 样式属性被设置为none，以确保该元素不再影响页面布局。<br>效果：（代码基于hide）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;div&apos;).slideUp()</span><br></pre></td></tr></table></figure><hr><h4 id="slideDown"><a href="#slideDown" class="headerlink" title=".slideDown"></a>.slideDown</h4><p>用滑动动画显示一个匹配元素，方法将给匹配元素的高度的动画，这会导致页面的下面部分滑下去，弥补了显示的方式<br>效果：（代码基于slideUp）</p><hr><h4 id="slideToggle"><a href="#slideToggle" class="headerlink" title=".slideToggle"></a>.slideToggle</h4><p>用滑动动画显示或隐藏一个匹配元素，方法将给匹配元素的高度的动画，这会导致页面中，在这个元素下面的内容往下或往上滑。display属性值保存在jQuery的数据缓存中，所以display可以方便以后可以恢复到其初始值。</p><p>如果一个元素的display属性值为inline，然后是隐藏和显示，这个元素将再次显示inline。当一个隐藏动画后，高度值达到0的时候，display 样式属性被设置为none，以确保该元素不再影响页面布局。</p><p>效果：<br>连续调用两次，和使用.slideUp()、.slideDown效果相同</p><hr><h4 id="fadeIn"><a href="#fadeIn" class="headerlink" title=".fadeIn"></a>.fadeIn</h4><p>.fadeIn( [duration ] [, easing ] [, complete ] )<br>通过淡入的方式显示匹配元素，参数含义和上面相同<br>给div的css属性设置display:none</p><p>$(‘div’).fadeIn(2000)</p><hr><h4 id="fadeOut"><a href="#fadeOut" class="headerlink" title=".fadeOut"></a>.fadeOut</h4><p>.fadeOut( [duration ] [, easing ] [, complete ] )<br>通过淡出的方式隐藏匹配元素<br>取消div的css中的display:none</p><hr><p>上面几个简单的动画不能满足需求的时候，jquery提供了自定义动画行为的方法</p><h4 id="animate"><a href="#animate" class="headerlink" title=".animate"></a>.animate</h4><p>.animate( properties [, duration ] [, easing ] [, complete ] )</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"clickme"</span>&gt;</span><br><span class="line">  Click here</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;img id="book" src="book.png" alt="" width="100" height="123"</span></span><br><span class="line"><span class="regexp">  style="position: relative; left: 10px;"&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$( <span class="string">"#clickme"</span> ).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  $( <span class="string">"#book"</span> ).animate(&#123;</span><br><span class="line">    opacity: <span class="number">0.25</span>,  <span class="comment">// 图片透明度  渐变</span></span><br><span class="line">    left: <span class="string">"+=50"</span>,   <span class="comment">//向左移动距离 -- 原基础上+50px;</span></span><br><span class="line">    height: <span class="string">"toggle"</span>  <span class="comment">// </span></span><br><span class="line">  &#125;, <span class="number">5000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Animation complete.</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>height属性的目标值是’toggle’。由于之前图像是可见的，因此动画会将高度缩小为0以隐藏它。第二次点击然后反转此转换</p><hr><h3 id="jQuery动画队列"><a href="#jQuery动画队列" class="headerlink" title="jQuery动画队列"></a>jQuery动画队列</h3><p>jQuery提供了以下几种方法来操作动画队列。</p><ul><li><p>stop([clearQuery],[gotoEnd]):停止当前jQuery对象里每个DOM元素上正在执行的动画。</p></li><li><p>queue([queueName,]callback):将callback动画数添加到当前jQuery对象里所有DOM元素的动画函数队列的尾部。</p></li><li><p>queue([queueName,]naeQueue):用newQueue动画函数队列代替当前jQuery对象里所的DOM元素的动画函数队列。</p></li><li><p>dequeue():执行动画函数队列头的第一个动画函数，并将该动画函数移出队列。</p></li><li><p>clearQueue([queueName]):清空动画函数队列中的所有动画函数。可选的 callback 参数是动画完成后所执行的函数名称。</p></li></ul><p>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;  </span><br><span class="line">    div &#123;  </span><br><span class="line">        width: <span class="number">60</span>px;   </span><br><span class="line">        height: <span class="number">60</span>px;  </span><br><span class="line">        position:absolute;  </span><br><span class="line">        top:<span class="number">60</span>px;   </span><br><span class="line">        background: #f0f;  </span><br><span class="line">        display:none;  </span><br><span class="line">    &#125;  </span><br><span class="line">    &lt;<span class="regexp">/style&gt;  </span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;  </span><br><span class="line">&lt;body&gt;  </span><br><span class="line">    &lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"../jquery-1.8.0.js"</span>&gt;  </span><br><span class="line">    &lt;<span class="regexp">/script&gt;  </span></span><br><span class="line"><span class="regexp">    &lt;p&gt;动画队列的长度是：&lt;span&gt;&lt;/</span>span&gt;&lt;/p&gt;  </span><br><span class="line">    &lt;div&gt;&lt;/div&gt;  </span><br><span class="line">    &lt;script type=<span class="string">"text/javascript"</span>&gt;  </span><br><span class="line">    <span class="keyword">var</span> div = $(<span class="string">"div"</span>);  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">runIt</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="comment">// 第1个动画：显示出来  </span></span><br><span class="line">        div.show(<span class="string">"slow"</span>);  </span><br><span class="line">        <span class="comment">// 第2个动画：自动动画，水平左移300px  </span></span><br><span class="line">        div.animate(&#123;<span class="attr">left</span>:<span class="string">'+=300'</span>&#125;,<span class="number">2000</span>);  </span><br><span class="line">        <span class="comment">// 第3个动画：卷起来  </span></span><br><span class="line">        div.slideToggle(<span class="number">1000</span>);  </span><br><span class="line">        <span class="comment">// 第4个动画：放下来  </span></span><br><span class="line">        div.slideToggle(<span class="string">"fast"</span>);  </span><br><span class="line">        <span class="comment">// 第5个动画：自动动画，水平右移300px  </span></span><br><span class="line">        div.animate(&#123;<span class="attr">left</span>:<span class="string">'-=300'</span>&#125;,<span class="number">1500</span>);  </span><br><span class="line">        <span class="comment">// 第6个动画：隐藏出来  </span></span><br><span class="line">        div.hide(<span class="string">"slow"</span>);  </span><br><span class="line">        <span class="comment">// 第7个动画：显示出来  </span></span><br><span class="line">        div.show(<span class="number">1200</span>);  </span><br><span class="line">        <span class="comment">// 第8个动画：卷起来，动画完成后回调runIt  </span></span><br><span class="line">        div.slideUp(<span class="string">"normal"</span>, runIt);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">// 控制每0.1秒调用一次该方法，该方法用于显示动画队列的长度  </span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">showIt</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="keyword">var</span> n = div.queue();  </span><br><span class="line">        $(<span class="string">"span"</span>).text(n.length);  </span><br><span class="line">        setTimeout(showIt, <span class="number">100</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    runIt();  </span><br><span class="line">    showIt();  </span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于jQuery动画API&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="jQuery" scheme="https://kisky3.github.io/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>jQuery event handlers</title>
    <link href="https://kisky3.github.io/2019/08/27/jQuery%E7%BB%91%E5%AE%9A%E4%BA%8B%E4%BB%B6/"/>
    <id>https://kisky3.github.io/2019/08/27/jQuery绑定事件/</id>
    <published>2019-08-27T13:39:01.000Z</published>
    <updated>2019-09-07T16:16:32.679Z</updated>
    
    <content type="html"><![CDATA[<p>关于jQuery事件绑定</p><a id="more"></a><hr><h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><p>事件处理中最头疼的就是浏览器兼容问题，jQuery封装了很好的API，可以方便的进行事件处理</p><p>在1.7之前的版本中jQuery处理事件有多个方法，后来统一的使用on/off方法.</p><hr><h4 id="on-events-selector-data-handler-eventObject"><a href="#on-events-selector-data-handler-eventObject" class="headerlink" title="on( events [,selector ] [,data ], handler(eventObject) )"></a>on( events [,selector ] [,data ], handler(eventObject) )</h4><ol><li><p>events：一个或多个空格分隔的事件类型和可选的命名空间，或仅仅是命名空间，比如”click”, “keydown.myPlugin”, 或者 “.myPlugin”</p></li><li><p>selector：一个选择器字符串，用于过滤出被选中的元素中能触发事件的后代元素。如果选择器是 null 或者忽略了该选择器，那么被选中的元素总是能触发事件</p></li><li><p>data：当一个事件被触发时，要传递给事件处理函数的event.data</p></li><li><p>handler(eventObject)：事件被触发时，执行的函数。若该函数只是要执行return false的话，那么该参数位置可以直接简写成 false</p></li></ol><p>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"box"</span>&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">1</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;2&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">3</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;4&lt;/</span>li&gt;</span><br><span class="line">  &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;input id=<span class="string">"ipt"</span> type=<span class="string">"text"</span>&gt; <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;div id=<span class="string">"wrap"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(<span class="string">'.box li'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">var</span> str = $(<span class="keyword">this</span>).text()</span><br><span class="line">  $(<span class="string">'#wrap'</span>).text(str)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 等同于 */</span></span><br><span class="line">$(<span class="string">'.box&gt;ul&gt;li'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">  <span class="keyword">var</span> str = $(<span class="keyword">this</span>).text()</span><br><span class="line">  $(<span class="string">'#wrap'</span>).text(str)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 也可以这样写 */</span></span><br><span class="line">$(<span class="string">'.box li'</span>).on(<span class="string">'click.hello'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">  <span class="keyword">var</span> str = $(<span class="keyword">this</span>).text()</span><br><span class="line">  $(<span class="string">'#wrap'</span>).text(str)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 命名空间没什么特别的作用，只不过在解绑事件时便于区分绑定的事件 */</span></span><br><span class="line">$(<span class="string">'.box li'</span>).off(<span class="string">'click.hello'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 可是用如下方法新增的元素是没绑定事件的 */</span></span><br><span class="line">$(<span class="string">'#btn'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> value = $(<span class="string">'#ipt'</span>).val()</span><br><span class="line">  $(<span class="string">'.box&gt;ul'</span>).append(<span class="string">'&lt;li&gt;'</span>+value+<span class="string">'&lt;/li&gt;'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 我们可以用事件代理 */</span></span><br><span class="line">$(<span class="string">'.box ul'</span>).on(<span class="string">'click'</span>, <span class="string">'li'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> str = $(<span class="keyword">this</span>).text()</span><br><span class="line">  $(<span class="string">'#wrap'</span>).text(str)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 上面代码相当于原生 js 的 */</span></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'.box ul'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(e.target.tagName.toLowerCase() === <span class="string">'li'</span>)&#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 绑定事件的时候我们也可以给事件附带些数据，只不过这种用法很少见 */</span></span><br><span class="line">$(<span class="string">'.box'</span>).on(<span class="string">'click'</span>, &#123;<span class="attr">name</span>: <span class="string">'hunger'</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h4 id="one-events-selector-data-handler-eventObject"><a href="#one-events-selector-data-handler-eventObject" class="headerlink" title=".one( events [, selector ] [, data ], handler(eventObject) )"></a>.one( events [, selector ] [, data ], handler(eventObject) )</h4><p>同 on，绑定事件，但只执行一次.</p><hr><h4 id="off-events-selector-handler"><a href="#off-events-selector-handler" class="headerlink" title=".off( events [, selector ] [, handler ] )"></a>.off( events [, selector ] [, handler ] )</h4><p>移除一个事件处理函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'.box li'</span>).off(<span class="string">'click'</span>)</span><br></pre></td></tr></table></figure><hr><h4 id="trigger-eventType-extraParameters"><a href="#trigger-eventType-extraParameters" class="headerlink" title=".trigger( eventType [, extraParameters ] )"></a>.trigger( eventType [, extraParameters ] )</h4><p>根据绑定到匹配元素的给定的事件类型执行所有的处理程序和行为.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#foo'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log($(<span class="keyword">this</span>).text())</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">'#foo'</span>).trigger(<span class="string">'click'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于jQuery事件绑定&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="jQuery" scheme="https://kisky3.github.io/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>The Cove</title>
    <link href="https://kisky3.github.io/2019/08/25/TheCove/"/>
    <id>https://kisky3.github.io/2019/08/25/TheCove/</id>
    <published>2019-08-25T10:12:52.000Z</published>
    <updated>2019-10-03T12:36:23.161Z</updated>
    
    <content type="html"><![CDATA[<p>This week I watched a 2009 documentary film named 「The Cove」 which analyzes and questions dolphin hunting in Japan Taiji.<br>It was awarded the 2010 Oscar for Best Documentary Feature in 2010. </p><p>Some brave people from Sea Shepherd etc tried hard to create this film cause this fact is quite sensitive and probably injurious to some fishermen’s interest.</p><p>They even used sensationalized techniques - including hidden cameras to tell us this problem.</p><a id="more"></a><img src="./2.jpg" style="width:400px;margin:40px 0"><p>Dolphin hunting takes place elsewhere in Japan but Taiji is the only place where “drive” hunting occurs.<br>This involves forcing dolphins into the now infamous cove, where they are then penned in by long nets.<br>The dolphins are then either sold on to aquariums to become performing exhibits or butchered for meat..</p><img src="./3.jpg" style="width:400px;margin:40px 0"><p>Some cruel scenes make me feel quite uncomfortable, especially when fishermen even try to kill baby dolphin. The dolphin’s blood stained the water red.<br><img src="./4.jpg" style="width:400px;margin:40px 0"></p><p>Tbh I don’t like killing animal in this ruthless way and do we have the moral right to kill animals in this way?  </p><p>Thanks to「The Cove」, it was a well-told story which tell us some truth was coverd for a long time though it was one-sided in some way.</p><p>As far as I see, Japan continue to do dolphin hunting just because of profit and tradition.<br>Even though consumption of dolphin meat has been declining steadily in Japan, to the point where many young people in Tokyo have never eaten it. </p><p>Tradition in Japan is something that is just handed down, whether it’s good or bad, whether it fits today’s world or not.</p><p>Maybe this is also a thing should be considered by Japanese under the this topic.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This week I watched a 2009 documentary film named 「The Cove」 which analyzes and questions dolphin hunting in Japan Taiji.&lt;br&gt;It was awarded the 2010 Oscar for Best Documentary Feature in 2010. &lt;/p&gt;
&lt;p&gt;Some brave people from Sea Shepherd etc tried hard to create this film cause this fact is quite sensitive and probably injurious to some fishermen’s interest.&lt;/p&gt;
&lt;p&gt;They even used sensationalized techniques - including hidden cameras to tell us this problem.&lt;/p&gt;
    
    </summary>
    
      <category term="About Me" scheme="https://kisky3.github.io/categories/About-Me/"/>
    
    
      <category term="Documentary film" scheme="https://kisky3.github.io/tags/Documentary-film/"/>
    
      <category term="Dolphin hunting" scheme="https://kisky3.github.io/tags/Dolphin-hunting/"/>
    
      <category term="Taiji" scheme="https://kisky3.github.io/tags/Taiji/"/>
    
  </entry>
  
  <entry>
    <title>Journey to the edge of the universe</title>
    <link href="https://kisky3.github.io/2019/08/17/UNIVERSE/"/>
    <id>https://kisky3.github.io/2019/08/17/UNIVERSE/</id>
    <published>2019-08-17T02:32:15.000Z</published>
    <updated>2019-09-09T10:40:36.427Z</updated>
    
    <content type="html"><![CDATA[<p>Recently, I am into something about our universe.<br>I even tried to read 「A Brief History Of Time」.</p><p>Hmmmm. Definitly it is far beyond my understanding. So I decided to start from some friendly space documentary films.</p><p>It seems good for me！</p><p>And 「JOURNEY TO THE EDGE OF THE UNIVERSE」is the one I want to recommend today. It shows us splendid images of the universe.<br>Taking us to the big endless universe and explore the science and history behind the distant celestial bodies in the solar system in two hours.</p><p>Yup！This is THE BEST space documentary I have ever seen in my life!！</p><a id="more"></a><img src="./1.jpg" style="width:400px;margin:40px 0"><p>They say that it’s so big we can’t really measure it.<br>The part we can see has a radius of 47 billion light years.<br>And I think about how in this universe, there are supposedly at least 100 million galaxies.<br>I can’t help but think to myself, “Wow. We live in just one of those galaxies.”</p><img src="./2.jpg" style="width:600px;margin:40px 0"><img src="./4.jpg" style="width:600px;margin:40px 0">There are so many amazing(or you can call them scary) powerful monsters in the universe. Some stronger monsters haven't been known by us now.<p>I really start thinking about name my cat 「Quasar」which seems more powerful than 「black hole」.<br>「Singularity」is also a good choice since it is so mistry and meaning of a new start.<br> Even tho I dont own a cat now but I am serious to pick a special name for my kitty XD.</p><p>This is the Quasar？<br>↓<img src="./3.jpg" style="width:600px;margin:40px 0"></p><p>After watching this documentary film you will feel humanbeing are so small and we are all the stuff of starts.</p><p>Another good thing is that I realized there is no need to take some little trouble things which bug our life sometimes too seriously.</p><p>Life is too short, so do whatever you like and enjoy the process of it.<br>Snatching the eternal out of the desperately fleeting is the great magic trick of human existence.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Recently, I am into something about our universe.&lt;br&gt;I even tried to read 「A Brief History Of Time」.&lt;/p&gt;
&lt;p&gt;Hmmmm. Definitly it is far beyond my understanding. So I decided to start from some friendly space documentary films.&lt;/p&gt;
&lt;p&gt;It seems good for me！&lt;/p&gt;
&lt;p&gt;And 「JOURNEY TO THE EDGE OF THE UNIVERSE」is the one I want to recommend today. It shows us splendid images of the universe.&lt;br&gt;Taking us to the big endless universe and explore the science and history behind the distant celestial bodies in the solar system in two hours.&lt;/p&gt;
&lt;p&gt;Yup！This is THE BEST space documentary I have ever seen in my life!！&lt;/p&gt;
    
    </summary>
    
      <category term="About Me" scheme="https://kisky3.github.io/categories/About-Me/"/>
    
    
      <category term="movie" scheme="https://kisky3.github.io/tags/movie/"/>
    
      <category term="universe" scheme="https://kisky3.github.io/tags/universe/"/>
    
  </entry>
  
  <entry>
    <title>jQuery Common API</title>
    <link href="https://kisky3.github.io/2019/07/16/API/"/>
    <id>https://kisky3.github.io/2019/07/16/API/</id>
    <published>2019-07-16T09:57:55.000Z</published>
    <updated>2019-08-17T07:41:20.730Z</updated>
    
    <content type="html"><![CDATA[<p>jQuery常用API</p><a id="more"></a><h2 id="jQuery常用DOM操作"><a href="#jQuery常用DOM操作" class="headerlink" title="jQuery常用DOM操作"></a>jQuery常用DOM操作</h2><h3 id="append"><a href="#append" class="headerlink" title=".append()"></a>.append()</h3><p>添加元素，通过$符号，生成一个dom元素并将它添加到页面，也可以添加jQuery对象，字符串等</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>你好！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'p'</span>).append(<span class="string">'小明和小红。'</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">/*执行结果*/</span><br><span class="line">/*<span class="tag">&lt;<span class="name">p</span>&gt;</span>你好！小明和小红。<span class="tag">&lt;/<span class="name">p</span>&gt;</span>*/</span><br></pre></td></tr></table></figure><hr><h3 id="prepend"><a href="#prepend" class="headerlink" title=".prepend()"></a>.prepend()</h3><p>在元素的前头添加字符串或元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>太郎<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>花子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>三郎<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">$('li').prepend('<span class="tag">&lt;<span class="name">strong</span>&gt;</span>ユーザー名：<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>');</span><br><span class="line">/* 执行结果*/</span><br><span class="line">/* <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>ユーザー名：<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>太郎<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>ユーザー名：<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>花子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>ユーザー名：<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>三郎<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span>*/</span><br></pre></td></tr></table></figure><hr><h3 id="before"><a href="#before" class="headerlink" title=".before()"></a>.before()</h3><p>在对象前面（不是内部而是外面，和对象同级）插入内容，参数和append相似。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> is what I said...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> is what you said too...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">$("p").before("<span class="tag">&lt;<span class="name">b</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">b</span>&gt;</span>");</span><br><span class="line">/* 执行结果 */</span><br><span class="line">/*</span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> is what I said...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> is what you said too...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">*/</span><br></pre></td></tr></table></figure><hr><h3 id="after"><a href="#after" class="headerlink" title=".after()"></a>.after()</h3><p>在对象后面（不是内部而是外面，和对象同级）插入内容，参数和append相似。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> is what I said...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> is what you said too...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">$("p").before("<span class="tag">&lt;<span class="name">b</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">b</span>&gt;</span>");</span><br><span class="line">/* 执行结果 */</span><br><span class="line">/*</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> is what I said...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> is what you said too...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">*/</span><br></pre></td></tr></table></figure><hr><h3 id="remove"><a href="#remove" class="headerlink" title=".remove()"></a>.remove()</h3><p>删除所选对象的元素或者子元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>sample1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"two"</span>&gt;</span>sample2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'.two'</span>).remove();</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">/* 执行结果*/</span><br><span class="line">/*</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>sample1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">*/</span><br></pre></td></tr></table></figure><hr><h3 id="empty"><a href="#empty" class="headerlink" title=".empty()"></a>.empty()</h3><p>删除指定元素内的所有子元素。该元素保留</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>子元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"button"</span>&gt;</span>删除子元素<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">$("#button").on("click", function()&#123;</span><br><span class="line">  $("#parent").empty();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/* 执行结果*/</span><br><span class="line">/*</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"button"</span>&gt;</span>删除子元素<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">*/</span><br></pre></td></tr></table></figure><hr><h3 id="html"><a href="#html" class="headerlink" title=".html()"></a>.html()</h3><p>实用html()能够任意的获取HTML元素，并进行添加或替换处理。<br>获取：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>你好<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>sample<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> result1 = $(<span class="string">'p'</span>).html();</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> result2 = $(<span class="string">'a'</span>).html();</span></span><br><span class="line"> </span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log( result1 );</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log( result2 );</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">/* 执行结果*/</span><br><span class="line">/*</span><br><span class="line">你好</span><br><span class="line">sample</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p>替换：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>sample text<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'div'</span>).html(<span class="string">'&lt;p&gt;Hello&lt;/p&gt;'</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">/* 执行结果*/</span><br><span class="line">/*</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>こんにちは<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p>添加：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>here is the link<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="xml">    $('p').html('<span class="tag">&lt;<span class="name">p</span>&gt;</span>link is<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>this one<span class="tag">&lt;/<span class="name">a</span>&gt;</span>!!<span class="tag">&lt;/<span class="name">p</span>&gt;</span>');</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">/* 执行结果*/</span><br><span class="line">/*</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>link is<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>this one<span class="tag">&lt;/<span class="name">a</span>&gt;</span>!!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">*/</span><br></pre></td></tr></table></figure><hr><h3 id="text"><a href="#text" class="headerlink" title=".text()"></a>.text()</h3><p>text()和html()十分相似，$node.text()和$node.html()的区别是text取得所有符合条件的元素进行处理，添加时只能添加字符串。<br>text()和html()的获取元素对比：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Good Morning<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> result1 = $(<span class="string">'p'</span>).html();</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> result2 = $(<span class="string">'p'</span>).text();</span></span><br><span class="line"> </span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log( result1 );</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log( result2 );</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">/* 执行结果*/</span><br><span class="line">/*</span><br><span class="line">Good Morning</span><br><span class="line">Good MorningHello</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p>text()插入字符串</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Good Morning<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'div'</span>).text(<span class="string">'&lt;h1&gt;Title&lt;/h1&gt;'</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">/* 执行结果*/</span><br><span class="line">/* 「<span class="tag">&lt;<span class="name">h1</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>」被当作字符串插入*/</span><br></pre></td></tr></table></figure><hr><h2 id="jQuery属性-amp-CSS操作"><a href="#jQuery属性-amp-CSS操作" class="headerlink" title="jQuery属性&amp;CSS操作"></a>jQuery属性&amp;CSS操作</h2><h3 id="属性相关"><a href="#属性相关" class="headerlink" title="属性相关"></a>属性相关</h3><h3 id="val"><a href="#val" class="headerlink" title=".val()"></a>.val()</h3><p>val()用于取得HTML元素的value，并可以对其进行修改和设定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn-a"</span> <span class="attr">value</span>=<span class="string">"a"</span>&gt;</span>Button A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$('#btn-a').val('value-a');</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/* 执行结果*/</span><br><span class="line">/*</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn-a"</span> <span class="attr">value</span>=<span class="string">"value-a"</span>&gt;</span>ボタンA<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h3 id="attr"><a href="#attr" class="headerlink" title=".attr()"></a>.attr()</h3><p>attr()用于获取HTML元素的属性，并对其进行修改和设定<br>获取元素的属性并修改：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"sample"</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> result = $(<span class="string">'p'</span>).attr(<span class="string">'id'</span>, <span class="string">'text'</span>);</span></span><br><span class="line"> </span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log( result[<span class="number">0</span>] );</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">/* 执行结果*/</span><br><span class="line">/*</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"text"</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p>添加元素的属性：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> result = $(<span class="string">'input'</span>).attr(&#123;</span></span><br><span class="line"><span class="javascript">    id: <span class="string">'text'</span>,</span></span><br><span class="line">    class: 'form',</span><br><span class="line"><span class="javascript">    type: <span class="string">'checkbox'</span>,</span></span><br><span class="line"><span class="javascript">    value: <span class="string">'one'</span>,</span></span><br><span class="line"><span class="javascript">    checked: <span class="literal">true</span></span></span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log( result[<span class="number">0</span>] );</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">/* 执行结果*/</span><br><span class="line">/*</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"one"</span> <span class="attr">checked</span>=<span class="string">"checked"</span>&gt;</span></span><br><span class="line">*/</span><br></pre></td></tr></table></figure><hr><h3 id="removeAttr"><a href="#removeAttr" class="headerlink" title=".removeAttr()"></a>.removeAttr()</h3><p>.removeAttr()用于删除对象元素的属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> result = $(<span class="string">'p'</span>).removeAttr(<span class="string">'class'</span>);</span></span><br><span class="line"> </span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log( result[<span class="number">0</span>] );</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/* 执行结果*/</span><br><span class="line">/*</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h3 id="prop"><a href="#prop" class="headerlink" title=".prop()"></a>.prop()</h3><p>prop()和removeAttr()十分相似，不同在于prop能够确认属性是否存在的状态。<br>当某个属性比如checked / disabled不存在时，和removeAttr()返回undefined,而prop返回false.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn1"</span>&gt;</span>Button1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn2"</span> <span class="attr">disabled</span>&gt;</span>Button1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> result1 = $(<span class="string">'.btn1'</span>).attr(<span class="string">'disabled'</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> result2 = $(<span class="string">'.btn2'</span>).attr(<span class="string">'disabled'</span>);</span></span><br><span class="line"> </span><br><span class="line"><span class="javascript"><span class="keyword">const</span> result3 = $(<span class="string">'.btn1'</span>).prop(<span class="string">'disabled'</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> result4 = $(<span class="string">'.btn2'</span>).prop(<span class="string">'disabled'</span>);</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log( result1 );</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log( result2 );</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log( result3 );</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log( result4 );</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">/* 执行结果*/</span><br><span class="line">/*</span><br><span class="line">undefined</span><br><span class="line">disabled</span><br><span class="line"> </span><br><span class="line">false</span><br><span class="line">true</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><hr><h3 id="css"><a href="#css" class="headerlink" title=".css()"></a>.css()</h3><p>.css()能够进行元素css的设定，添加，获取，修改等。<br>元素css的设定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>sample text<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    $('p').css('color', '#f00');</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">/* 执行结果</span><br><span class="line">   将p内的文字颜色变红（#f00）</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p>修改元素的css</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"font-size:12px"</span>&gt;</span>sample1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"font-size:16px"</span>&gt;</span>sample2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"font-size:20px"</span>&gt;</span>sample3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'p'</span>).css(<span class="string">'font-size'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">index, value</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> newValue = <span class="built_in">parseInt</span>(value) + <span class="number">6</span>;</span></span><br><span class="line">    </span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> newValue + <span class="string">'px'</span>;</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">/* 执行结果 */</span><br><span class="line">/* </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"font-size:18px"</span>&gt;</span>sample1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"font-size:22px"</span>&gt;</span>sample2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"font-size:26px"</span>&gt;</span>sample3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h3 id="addClass"><a href="#addClass" class="headerlink" title=".addClass()"></a>.addClass()</h3><p>用于给任何一个元素添加css</p><p>如果p元素没有任何的样式，则添加addRed样式。index为该对象HTML元素的下标，myclass为该元素最初自身拥有的class属性名</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"addBlue"</span>&gt;</span>Good Morning<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"addGreen"</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>こんばんは<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">$('p').addClass(function( index, myclass ) &#123;</span><br><span class="line"> </span><br><span class="line">    if( !myclass ) &#123;</span><br><span class="line">        return 'addRed';</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="removeClass"><a href="#removeClass" class="headerlink" title="removeClass()"></a>removeClass()</h3><p>removeClass()用于给任何元素删除css，有重复的情况下，删除所有匹配元素的css。<br>复数指定时用空格隔开，不传参则对象元素全部删除css。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span>list1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"sample"</span>&gt;</span>list2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span>list3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">$('li').removeClass('test sample');</span><br><span class="line"></span><br><span class="line">/* css为text和sample的list2，list3的css被删除 */</span><br></pre></td></tr></table></figure><h3 id="hasClass"><a href="#hasClass" class="headerlink" title=".hasClass()"></a>.hasClass()</h3><p>hasClass()用于查看对象元素是否存在某样式css。存在返回true，不存在返回false。<br>复数的情况下用空格隔开，并且要求搜索参数值与css值完全一致。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"red"</span>&gt;</span>リスト１<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"blue"</span>&gt;</span>リスト２<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"red green"</span>&gt;</span>リスト３<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var li = $('li').hasClass('red green');</span><br><span class="line"> </span><br><span class="line">console.log(li);</span><br><span class="line"></span><br><span class="line">/* 执行结果 */</span><br><span class="line"></span><br><span class="line">/* true */</span><br></pre></td></tr></table></figure><h3 id="toggleClass"><a href="#toggleClass" class="headerlink" title=".toggleClass()"></a>.toggleClass()</h3><p>toggleClass()可以操作对象的class属性，并进行添加，删除等循环操作。</p><p>利用toggleClass()进行mytoggle的显示/隐藏的切换：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.mytoggle &#123;</span><br><span class="line">    display: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'button'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'h1'</span>).toggleClass(<span class="string">'mytoggle'</span>);</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="each"><a href="#each" class="headerlink" title=".each()"></a>.each()</h3><p>.each()用于循环历遍每个元素。相当于forEach。</p><p>对HTML元素的操作：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>sample1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>sample2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>sample3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">$('li').each(function(index, element) &#123;</span><br><span class="line"> </span><br><span class="line">    console.log(index);</span><br><span class="line">    console.log($(element).text());</span><br><span class="line"> </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">/* 执行结果*/</span><br><span class="line"></span><br><span class="line">sample1 </span><br><span class="line">1 </span><br><span class="line">sample2 </span><br><span class="line">2 </span><br><span class="line">sample3</span><br></pre></td></tr></table></figure><p>对数列的操作：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var array = [3,6,2,8,6];</span><br><span class="line"> </span><br><span class="line">$.each(array, function(index, value) &#123;</span><br><span class="line"> </span><br><span class="line">    console.log(index + ': ' + value);</span><br><span class="line"> </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">/* 执行结果*/</span><br><span class="line">0: 3 </span><br><span class="line">1: 6 </span><br><span class="line">2: 2 </span><br><span class="line">3: 8 </span><br><span class="line">4: 6</span><br></pre></td></tr></table></figure><h3 id="extend"><a href="#extend" class="headerlink" title="$.extend()"></a>$.extend()</h3><p>$.extend()用与连结两个或多个对象，将其整合为一个对象。<br>无指定则在第一个传递的对象上进行覆盖，如果想保留原对象，则第一参数传空{}</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var user1 = &#123;</span><br><span class="line">  name: '太郎',</span><br><span class="line">  area: 'tokyo'</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">var user2 = &#123;</span><br><span class="line">  name: '花子',</span><br><span class="line">  age: 28</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var result = $.extend(&#123;&#125;, user1, user2);</span><br><span class="line"> </span><br><span class="line">console.log(result);</span><br><span class="line">console.log('------------');</span><br><span class="line">console.log(user1);</span><br><span class="line"></span><br><span class="line">/* 执行结果 */</span><br><span class="line">Object &#123; name: "花子", area: "tokyo", age: 28 &#125;</span><br><span class="line">------------</span><br><span class="line">Object &#123; name: "太郎", area: "tokyo" &#125;</span><br></pre></td></tr></table></figure><h3 id="clone"><a href="#clone" class="headerlink" title=".clone()"></a>.clone()</h3><p>.clone()用于复制对象和元素。参数要指定true，false时或不传参数时不能复制。</p><p>按键时按钮被复制：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">name</span>=<span class="string">"clone"</span>&gt;</span>Clone!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  $(<span class="string">'button[name=clone]'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="keyword">this</span>).clone(<span class="literal">true</span>).insertAfter(<span class="keyword">this</span>);</span></span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="index"><a href="#index" class="headerlink" title=".index()"></a>.index()</h3><p>.index()用于取得元素的下标</p><p>点击按钮时获取下标：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>北海道<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>東北<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>関東<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>東海<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>関西<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>中国<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>四国<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>九州<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"num"</span>&gt;</span>－<span class="tag">&lt;/<span class="name">span</span>&gt;</span>几个<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$(function() &#123;</span><br><span class="line"> </span><br><span class="line">  $('li').click(function() &#123;</span><br><span class="line"> </span><br><span class="line">    var i = $('li').index(this);</span><br><span class="line"></span><br><span class="line">    $('#num').text(i);</span><br><span class="line"> </span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="ready"><a href="#ready" class="headerlink" title=".ready()"></a>.ready()</h3><p>.ready()可以忽略浏览器默认加载，在DOM准备好后就立即执行这个函数。</p><p>下面的函数执行时，由于对h1的操作在body的h1生成之前，所以相当于无效。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'h1'</span>).text(<span class="string">'Hello World'</span>);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>こんにちは<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时使用.ready()，则可以在h1加载完成时再立马执行处理。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"> </span><br><span class="line"><span class="javascript">            $(<span class="string">'h1'</span>).text(<span class="string">'Hello World'</span>);</span></span><br><span class="line"> </span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>こんにちは<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>还可以简写成下面的形式:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$(function() &#123;</span><br><span class="line"> </span><br><span class="line">    //your coding</span><br><span class="line"> </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">or</span><br><span class="line"></span><br><span class="line">$(showLog);</span><br><span class="line"></span><br><span class="line">function showLog() &#123;</span><br><span class="line"> </span><br><span class="line">    console.log('Hey! Let's see log);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;jQuery常用API&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="jQuery" scheme="https://kisky3.github.io/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>About jQuery</title>
    <link href="https://kisky3.github.io/2019/07/12/jQuery/"/>
    <id>https://kisky3.github.io/2019/07/12/jQuery/</id>
    <published>2019-07-12T12:05:02.000Z</published>
    <updated>2019-08-17T07:41:14.600Z</updated>
    
    <content type="html"><![CDATA[<p>关于jQuery</p><a id="more"></a><h3 id="jQuery-1-x-版本和-2-x-版本有什么区别"><a href="#jQuery-1-x-版本和-2-x-版本有什么区别" class="headerlink" title="jQuery 1.x 版本和 2.x 版本有什么区别"></a>jQuery 1.x 版本和 2.x 版本有什么区别</h3><p>1.x：<br>兼容ie678,使用最为广泛的，官方只做BUG维护，功能不再新增。因此一般项目来说，使用1.x版本就可以了，最终版本：1.12.4 (2016年5月20日)</p><p>2.x：<br>不兼容ie678，很少有人使用，官方只做BUG维护，功能不再新增。如果不考虑兼容低版本的浏览器可以使用2.x，最终版本：2.2.4 (2016年5月20日)</p><hr><h3 id="jQuery-常见的选择器"><a href="#jQuery-常见的选择器" class="headerlink" title="jQuery 常见的选择器"></a>jQuery 常见的选择器</h3><p>例子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"ul"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"li3"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我被选中了<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="eq-index"><a href="#eq-index" class="headerlink" title=".eq(index)"></a>.eq(index)</h4><p>对于一个特定结果集，我们想获取到指定index的jQuery对象，可以使用eq方法<br><img src="./1.png" style="width:200px;margin:40px 0"></p><h4 id="next"><a href="#next" class="headerlink" title=".next()"></a>.next()</h4><p>next取得匹配的元素集合中每一个元素紧邻的后面同辈元素的元素集合。如果提供一个选择器，那么只有紧跟着的兄弟元素满足选择器时，才会返回此元素。<br><img src="./2.png" style="width:200px;margin:40px 0"></p><h4 id="prev"><a href="#prev" class="headerlink" title=".prev()"></a>.prev()</h4><p>prev正好相反，获取元素之前的同辈元素,如果同辈之前没有元素则返回空<br><img src="./3.png" style="width:200px;margin:40px 0"></p><h4 id="nextAll"><a href="#nextAll" class="headerlink" title=".nextAll()"></a>.nextAll()</h4><p>nextAll获得每个匹配元素集合中每个元素所有后面的同辈元素，选择性筛选的选择器<br><img src="./4.png" style="width:200px;margin:40px 0"></p><h4 id="prevAll"><a href="#prevAll" class="headerlink" title=".prevAll()"></a>.prevAll()</h4><p>prevAll与nextAll相反，获取元素前面的同辈元素<br><img src="./5.png" style="width:200px;margin:40px 0"></p><h4 id="siblings"><a href="#siblings" class="headerlink" title=".siblings()"></a>.siblings()</h4><p>获得匹配元素集合中每个元素的兄弟元素,可以提供一个可选的选择器<br><img src="./6.png" style="width:200px;margin:40px 0"></p><h4 id="parent"><a href="#parent" class="headerlink" title=".parent()"></a>.parent()</h4><p>取得匹配元素集合中，每个元素的父元素，可以提供一个可选的选择器<br><img src="./7.png" style="width:200px;margin:40px 0"></p><h4 id="parents"><a href="#parents" class="headerlink" title=".parents()"></a>.parents()</h4><p>获得集合中每个匹配元素的祖先元素，可以提供一个可选的选择器作为参数<br><img src="./8.png" style="width:200px;margin:40px 0"></p><h4 id="children"><a href="#children" class="headerlink" title=".children()"></a>.children()</h4><p>获得匹配元素集合中每个元素的子元素，选择器选择性筛选<br><img src="./9.png" style="width:200px;margin:40px 0"></p><h4 id="find"><a href="#find" class="headerlink" title=".find()"></a>.find()</h4><p>查找符合选择器的后代元素<br><img src="./10.png" style="width:200px;margin:40px 0"></p><h4 id="filter"><a href="#filter" class="headerlink" title=".filter()"></a>.filter()</h4><p>筛选当前结果集中符合条件的对象，参数可以是一个选择器或者一个函数<br><img src="./11.png" style="width:300px;margin:40px 0"></p><h4 id="has"><a href="#has" class="headerlink" title=".has()"></a>.has()</h4><p>筛选匹配元素集合中的那些有相匹配的选择器或DOM元素的后代元素<br><img src="./12.png" style="width:300px;margin:40px 0"></p><h4 id="is"><a href="#is" class="headerlink" title=".is()"></a>.is()</h4><p>判断当前匹配的元素集合中的元素，是否为一个选择器，DOM元素，或者jQuery对象，如果这些元素至少一个匹配给定的参数，那么返回true<br><img src="./13.png" style="width:300px;margin:40px 0"></p><hr><h3 id="DOM和jQuery的相互转换"><a href="#DOM和jQuery的相互转换" class="headerlink" title="DOM和jQuery的相互转换"></a>DOM和jQuery的相互转换</h3><p>jQuery对象与dom的区别<br>jQuery对象是一个类数组的对象，对象原型中封装了许多jQuery自定义的方法。在jQuery对象中无法使用DOM对象的任何方法。</p><ul><li><p>DOM对象===&gt;jQuery对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var dom =document.getElementById(&quot;id&quot;);  // DOM对象</span><br><span class="line">var $dom = $(dom);  // jQuery对象</span><br></pre></td></tr></table></figure></li><li><p>Query对象====&gt;DOM对象</p></li></ul><p>1.jQuery对象是一个数据对象，通过 [index] 的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var $dom = $(&quot;#id&quot;) ;  // jQuery对象</span><br><span class="line">var dom = $dom [0];   // DOM对象</span><br></pre></td></tr></table></figure><p>2.jQuery提供方法，通过 .get(index) 方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var $dom = $(&quot;#id&quot;);  // jQuery对象</span><br><span class="line">var dom = $dom.get(0); // DOM对象</span><br></pre></td></tr></table></figure><h3 id="window-onload和-document-ready有什么区别？document-onDOMContentLoaded呢"><a href="#window-onload和-document-ready有什么区别？document-onDOMContentLoaded呢" class="headerlink" title="window.onload和$(document).ready有什么区别？document.onDOMContentLoaded呢?"></a>window.onload和$(document).ready有什么区别？document.onDOMContentLoaded呢?</h3><p>window.onload是在dom文档树加载完和所有文件加载完之后执行一个函数document.ready原生中没有这个方法。<br>jquery中有$().ready(function),在dom文档树加载完之后执行一个函数（注意，这里面的文档树加载完全不代表全部文件加载完）。<br>$(document).ready要比winndow.onload先执行window.onload只能出来一次，$(document).ready可以出现多次。</p><p>当document.onDOMContentLoaded事件触发时，仅当DOM加载完成，不包括样式表，图片，flash。<br>两者触发时机不同，window.触发的更晚。<br>jQuery的$(document).ready就是利用了DOMContentLoaded来实现的，但是DOMContentLoaded在IE9以下不支持，需要对IE9以下版本进行兼容处理。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于jQuery&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="jQuery" scheme="https://kisky3.github.io/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>About React Virtual Dom And JSX</title>
    <link href="https://kisky3.github.io/2019/07/04/React-Virtual-Dom/"/>
    <id>https://kisky3.github.io/2019/07/04/React-Virtual-Dom/</id>
    <published>2019-07-04T13:47:43.000Z</published>
    <updated>2019-08-17T07:41:09.124Z</updated>
    
    <content type="html"><![CDATA[<p>关于React的虚拟Dom和JSX</p><a id="more"></a><h3 id="React的实行理念"><a href="#React的实行理念" class="headerlink" title="React的实行理念"></a>React的实行理念</h3><p>首先JS的DOM操作一般经历了从页面获取已存在的元素，进行修改操作，再渲染回页面这三个过程。<br>比如页面里有一个span标签，JS想要编辑的时候需要先从页面获取标签(利用id等),进行操作(数字加1),再将编辑后的数据返回页面（innerText等）。<br><img src="./1.png" style="width:600px;margin:40px 0"></p><p>而react有一种更先进的理念，也就相当于不从Dom获取数据，而是只是向页面更新数据。<br>比如一开始页面里什么都没有，react里有一个number变量，并且在JSX里生成一个span的对象（虚拟Dom),再将对象生同步成到页面中，JSX里进行span内容的修改操作，然后再一次自动更新到页面的span里。<br><img src="./2.png" style="width:600px;margin:40px 0"></p><p>react在生成新的虚拟Dom之后,会与旧的虚拟Dom的内容进行比较,再将有变化的那一部分,同步到页面中。<br>而进行内部对象span的更新速度远比JS直接更新Dom的速度要快很多,并且少了从页面获取元素的这一过程,导致react的效率和性能都高于普通JS。</p><h3 id="关于JSX"><a href="#关于JSX" class="headerlink" title="关于JSX"></a>关于JSX</h3><p>JSX不是html,而是相当于利用Html的形式来更简便地写JS。</p><p>JSX就是将下面的语法2翻译成上面的JS语法1，这相当于以简便的Html的形式来写JS，这里包含了几个虚拟Dom，也就是表示DOM节点的对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JS语法1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> h = React.createElement;</span><br><span class="line">  <span class="keyword">let</span> div = </span><br><span class="line">  h(<span class="string">'div'</span>,&#123;<span class="attr">className</span>:<span class="string">'parent'</span>&#125;,</span><br><span class="line">    h(<span class="string">'span'</span>,&#123;<span class="attr">className</span>:<span class="string">'red'</span>&#125;,number),</span><br><span class="line">    h(<span class="string">'button'</span>,&#123;<span class="attr">onClick</span>:onClickButton&#125;,<span class="string">'+'</span>),</span><br><span class="line">    h(<span class="string">'button'</span>,&#123;onClickButton&#125;,<span class="string">'-'</span>)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 语法2</span></span><br><span class="line">&lt;div className=<span class="string">"parent"</span>&gt;</span><br><span class="line">  &lt;span className=<span class="string">"red"</span>&gt;&#123;number&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">  &lt;button onClick = &#123;onClickButton&#125;&gt;+&lt;/</span>button&gt;</span><br><span class="line">  &lt;button onClick = &#123;onClickButton2&#125;&gt;-<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p>不同的是将对象和函数用括号括起来{},然后JS就会从当前作用域往上找相应的变量。</p><ul><li>class要写作className（有时两种写法都可以）。</li><li>在onClick = {onClickButton}时要向react传递一个对象而不是返回值，相当于React.createElement(‘button’,{onClick:onClickButton}),所以不加括号。</li></ul><p>完整代码例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> onClickButton = <span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">  number +=<span class="number">1</span></span><br><span class="line">  render();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> onClickButton2 = <span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">  number -= <span class="number">1</span></span><br><span class="line">  render();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// JS语法1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> h = React.createElement;</span><br><span class="line">  <span class="keyword">let</span> div = </span><br><span class="line">  h(<span class="string">'div'</span>,&#123;<span class="attr">className</span>:<span class="string">'parent'</span>&#125;,</span><br><span class="line">    h(<span class="string">'span'</span>,&#123;<span class="attr">className</span>:<span class="string">'red'</span>&#125;,number),</span><br><span class="line">    h(<span class="string">'button'</span>,&#123;<span class="attr">onClick</span>:onClickButton&#125;,<span class="string">'+'</span>),</span><br><span class="line">    h(<span class="string">'button'</span>,&#123;onClickButton&#125;,<span class="string">'-'</span>)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 语法2</span></span><br><span class="line">&lt;div className=<span class="string">"parent"</span>&gt;</span><br><span class="line">  &lt;span className=<span class="string">"red"</span>&gt;&#123;number&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">  &lt;button onClick = &#123;onClickButton&#125;&gt;+&lt;/</span>button&gt;</span><br><span class="line">  &lt;button onClick = &#123;onClickButton2&#125;&gt;-<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(div,document.querySelector('#root'));</span></span><br></pre></td></tr></table></figure><p>JSX的翻译机制<br>下面的左右代码是等价的。<br><img src="./3.png" style="width:800px;margin:40px 0"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于React的虚拟Dom和JSX&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="React" scheme="https://kisky3.github.io/tags/React/"/>
    
      <category term="Virtual Dom" scheme="https://kisky3.github.io/tags/Virtual-Dom/"/>
    
      <category term="JSX" scheme="https://kisky3.github.io/tags/JSX/"/>
    
  </entry>
  
</feed>
